// Generated by Haxe 4.3.0-rc.1+
#ifndef INCLUDED_pixelimage_algo_HitTriArray
#define INCLUDED_pixelimage_algo_HitTriArray

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_pixelimage_algo_IhitObj
#include <pixelimage/algo/IhitObj.h>
#endif
HX_DECLARE_CLASS2(pixelimage,algo,HitTri)
HX_DECLARE_CLASS2(pixelimage,algo,HitTriArray)
HX_DECLARE_CLASS2(pixelimage,algo,IhitObj)

namespace pixelimage{
namespace algo{


class HXCPP_CLASS_ATTRIBUTES HitTriArray_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef HitTriArray_obj OBJ_;
		HitTriArray_obj();

	public:
		enum { _hx_ClassId = 0x7fea5f75 };

		void __construct(::Array< ::Dynamic> triArr);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="pixelimage.algo.HitTriArray")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"pixelimage.algo.HitTriArray"); }
		static ::hx::ObjectPtr< HitTriArray_obj > __new(::Array< ::Dynamic> triArr);
		static ::hx::ObjectPtr< HitTriArray_obj > __alloc(::hx::Ctx *_hx_ctx,::Array< ::Dynamic> triArr);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~HitTriArray_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("HitTriArray",c1,fd,ce,af); }

		::Array< ::Dynamic> triArr;
};

} // end namespace pixelimage
} // end namespace algo

#endif /* INCLUDED_pixelimage_algo_HitTriArray */ 
