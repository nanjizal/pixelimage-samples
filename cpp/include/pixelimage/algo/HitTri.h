// Generated by Haxe 4.3.0-rc.1+
#ifndef INCLUDED_pixelimage_algo_HitTri
#define INCLUDED_pixelimage_algo_HitTri

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

#ifndef INCLUDED_pixelimage_algo_IhitObj
#include <pixelimage/algo/IhitObj.h>
#endif
HX_DECLARE_CLASS1(pixelimage,ImageStruct)
HX_DECLARE_CLASS2(pixelimage,algo,HitTri)
HX_DECLARE_CLASS2(pixelimage,algo,IhitObj)
HX_DECLARE_CLASS2(pixelimage,iter,IntIterStart)

namespace pixelimage{
namespace algo{


class HXCPP_CLASS_ATTRIBUTES HitTri_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef HitTri_obj OBJ_;
		HitTri_obj();

	public:
		enum { _hx_ClassId = 0x510225a0 };

		void __construct(Float ax,Float ay,Float bx,Float by,Float cx,Float cy,::hx::Null< bool >  __o_preCalculated);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="pixelimage.algo.HitTri")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"pixelimage.algo.HitTri"); }
		static ::hx::ObjectPtr< HitTri_obj > __new(Float ax,Float ay,Float bx,Float by,Float cx,Float cy,::hx::Null< bool >  __o_preCalculated);
		static ::hx::ObjectPtr< HitTri_obj > __alloc(::hx::Ctx *_hx_ctx,Float ax,Float ay,Float bx,Float by,Float cx,Float cy,::hx::Null< bool >  __o_preCalculated);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~HitTri_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		void *_hx_getInterface(int inHash);
		::String __ToString() const { return HX_("HitTri",b8,c4,b1,8b); }

		Float ax;
		Float ay;
		Float bx;
		Float by;
		Float cx;
		Float cy;
		bool preCalculated;
		Float s0;
		Float sx;
		Float sy;
		Float t0;
		Float tx;
		Float ty;
		Float A;
		::pixelimage::iter::IntIterStart xIter3;
		::pixelimage::iter::IntIterStart yIter3;
		::pixelimage::ImageStruct undoImage;
		int undoX;
		int undoY;
};

} // end namespace pixelimage
} // end namespace algo

#endif /* INCLUDED_pixelimage_algo_HitTri */ 
