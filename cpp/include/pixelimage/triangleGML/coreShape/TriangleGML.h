// Generated by Haxe 4.3.0-rc.1+
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_TriangleGML
#define INCLUDED_pixelimage_triangleGML_coreShape_TriangleGML

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS0(Xml)
HX_DECLARE_CLASS1(pixelimage,ImageStruct)
HX_DECLARE_CLASS3(pixelimage,triangleGML,coreShape,ShapeInterface)
HX_DECLARE_CLASS3(pixelimage,triangleGML,coreShape,TriangleGML)

namespace pixelimage{
namespace triangleGML{
namespace coreShape{


class HXCPP_CLASS_ATTRIBUTES TriangleGML_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef TriangleGML_obj OBJ_;
		TriangleGML_obj();

	public:
		enum { _hx_ClassId = 0x44e885e5 };

		void __construct(::pixelimage::ImageStruct pixelShape,::Xml xml,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="pixelimage.triangleGML.coreShape.TriangleGML")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"pixelimage.triangleGML.coreShape.TriangleGML"); }
		static ::hx::ObjectPtr< TriangleGML_obj > __new(::pixelimage::ImageStruct pixelShape,::Xml xml,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y);
		static ::hx::ObjectPtr< TriangleGML_obj > __alloc(::hx::Ctx *_hx_ctx,::pixelimage::ImageStruct pixelShape,::Xml xml,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~TriangleGML_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("TriangleGML",7e,69,80,9a); }

		::pixelimage::ImageStruct pixelShape;
		::Xml xml;
		Float offX;
		Float offY;
		::Array< ::Dynamic> shapes;
		void process();
		::Dynamic process_dyn();

		void processShape(::Xml x);
		::Dynamic processShape_dyn();

};

} // end namespace pixelimage
} // end namespace triangleGML
} // end namespace coreShape

#endif /* INCLUDED_pixelimage_triangleGML_coreShape_TriangleGML */ 
