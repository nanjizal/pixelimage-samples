// Generated by Haxe 4.3.0-rc.1+
#ifndef INCLUDED_pixelimage_ImageStruct
#define INCLUDED_pixelimage_ImageStruct

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS2(haxe,io,ArrayBufferViewImpl)
HX_DECLARE_CLASS1(pixelimage,ImageStruct)

namespace pixelimage{


class HXCPP_CLASS_ATTRIBUTES ImageStruct_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef ImageStruct_obj OBJ_;
		ImageStruct_obj();

	public:
		enum { _hx_ClassId = 0x71a74a3b };

		void __construct(int width,int height,::haxe::io::ArrayBufferViewImpl image);
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="pixelimage.ImageStruct")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"pixelimage.ImageStruct"); }
		static ::hx::ObjectPtr< ImageStruct_obj > __new(int width,int height,::haxe::io::ArrayBufferViewImpl image);
		static ::hx::ObjectPtr< ImageStruct_obj > __alloc(::hx::Ctx *_hx_ctx,int width,int height,::haxe::io::ArrayBufferViewImpl image);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~ImageStruct_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("ImageStruct",f0,db,ab,3d); }

		int width;
		int height;
		::haxe::io::ArrayBufferViewImpl image;
		bool transparent;
		bool isLittle;
		Float virtualX;
		Float virtualY;
		bool useVirtualPos;
		::pixelimage::ImageStruct mask;
		bool useMask;
};

} // end namespace pixelimage

#endif /* INCLUDED_pixelimage_ImageStruct */ 
