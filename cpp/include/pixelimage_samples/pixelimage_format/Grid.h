// Generated by Haxe 4.3.0-rc.1+
#ifndef INCLUDED_pixelimage_samples_pixelimage_format_Grid
#define INCLUDED_pixelimage_samples_pixelimage_format_Grid

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(pixelimage,ImageStruct)
HX_DECLARE_CLASS2(pixelimage_samples,pixelimage_format,Grid)

namespace pixelimage_samples{
namespace pixelimage_format{


class HXCPP_CLASS_ATTRIBUTES Grid_obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Grid_obj OBJ_;
		Grid_obj();

	public:
		enum { _hx_ClassId = 0x6549c0c8 };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=true,const char *inName="pixelimage_samples.pixelimage_format.Grid")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,true,"pixelimage_samples.pixelimage_format.Grid"); }
		static ::hx::ObjectPtr< Grid_obj > __new();
		static ::hx::ObjectPtr< Grid_obj > __alloc(::hx::Ctx *_hx_ctx);
		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Grid_obj();

		HX_DO_RTTI_ALL;
		::hx::Val __Field(const ::String &inString, ::hx::PropertyAccess inCallProp);
		::hx::Val __SetField(const ::String &inString,const ::hx::Val &inValue, ::hx::PropertyAccess inCallProp);
		void __GetFields(Array< ::String> &outFields);
		static void __register();
		void __Mark(HX_MARK_PARAMS);
		void __Visit(HX_VISIT_PARAMS);
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Grid",e6,02,45,2f); }

		::pixelimage::ImageStruct pixelImage;
		void begin();
		::Dynamic begin_dyn();

		void end();
		::Dynamic end_dyn();

		::String lineGridShape;
		::String ellipseTest;
		::String circleTest;
		::String softEllipseTest;
		::String arcPie;
		::String arcEllipse;
		::String arcChord;
		::String arcPie2;
		::String arcEllipse2;
		::String arcChord2;
		::String quadShapeSoft;
		::String quadShape;
		::String quadShapeLuxury;
		::String vePathElementShape;
};

} // end namespace pixelimage_samples
} // end namespace pixelimage_format

#endif /* INCLUDED_pixelimage_samples_pixelimage_format_Grid */ 
