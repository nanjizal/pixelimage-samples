// Generated by Haxe 4.3.0-rc.1+
#include <hxcpp.h>

#ifndef INCLUDED_vision_ds_Point2D
#include <vision/ds/Point2D.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e42f10e1c31c3e80_23_new,"vision.ds.Point2D","new",0xe362705b,"vision.ds.Point2D.new","vision/ds/Point2D.hx",23,0x08ded215)
HX_LOCAL_STACK_FRAME(_hx_pos_e42f10e1c31c3e80_32_toString,"vision.ds.Point2D","toString",0x9c9362d1,"vision.ds.Point2D.toString","vision/ds/Point2D.hx",32,0x08ded215)
namespace vision{
namespace ds{

void Point2D_obj::__construct(::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y){
            		Float x = __o_x.Default(0);
            		Float y = __o_y.Default(0);
            	HX_STACKFRAME(&_hx_pos_e42f10e1c31c3e80_23_new)
HXLINE(  24)		this->x = x;
HXLINE(  25)		this->y = y;
            	}

Dynamic Point2D_obj::__CreateEmpty() { return new Point2D_obj; }

void *Point2D_obj::_hx_vtable = 0;

Dynamic Point2D_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Point2D_obj > _hx_result = new Point2D_obj();
	_hx_result->__construct(inArgs[0],inArgs[1]);
	return _hx_result;
}

bool Point2D_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6266856b;
}

::String Point2D_obj::toString(){
            	HX_STACKFRAME(&_hx_pos_e42f10e1c31c3e80_32_toString)
HXDLIN(  32)		return ((((HX_("(",28,00,00,00) + this->x) + HX_(", ",74,26,00,00)) + this->y) + HX_(")",29,00,00,00));
            	}


HX_DEFINE_DYNAMIC_FUNC0(Point2D_obj,toString,return )


Point2D_obj::Point2D_obj()
{
}

::hx::Val Point2D_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { return ::hx::Val( x ); }
		if (HX_FIELD_EQ(inName,"y") ) { return ::hx::Val( y ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val Point2D_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"x") ) { x=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y") ) { y=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Point2D_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("x",78,00,00,00));
	outFields->push(HX_("y",79,00,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Point2D_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(Point2D_obj,x),HX_("x",78,00,00,00)},
	{::hx::fsFloat,(int)offsetof(Point2D_obj,y),HX_("y",79,00,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Point2D_obj_sStaticStorageInfo = 0;
#endif

static ::String Point2D_obj_sMemberFields[] = {
	HX_("x",78,00,00,00),
	HX_("y",79,00,00,00),
	HX_("toString",ac,d0,6e,38),
	::String(null()) };

::hx::Class Point2D_obj::__mClass;

void Point2D_obj::__register()
{
	Point2D_obj _hx_dummy;
	Point2D_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("vision.ds.Point2D",e9,a6,fe,c0);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Point2D_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Point2D_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Point2D_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Point2D_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace vision
} // end namespace ds
