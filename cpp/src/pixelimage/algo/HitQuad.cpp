// Generated by Haxe 4.3.0-rc.1+
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_pixelimage_algo_HitQuad
#include <pixelimage/algo/HitQuad.h>
#endif
#ifndef INCLUDED_pixelimage_algo_HitTri
#include <pixelimage/algo/HitTri.h>
#endif
#ifndef INCLUDED_pixelimage_algo_IhitObj
#include <pixelimage/algo/IhitObj.h>
#endif
#ifndef INCLUDED_pixelimage_iter_IntIterStart
#include <pixelimage/iter/IntIterStart.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9c8e726b4b8d55c8_29_new,"pixelimage.algo.HitQuad","new",0x3ca492ea,"pixelimage.algo.HitQuad.new","pixelimage/algo/HitQuad.hx",29,0x8c0f4c26)
namespace pixelimage{
namespace algo{

void HitQuad_obj::__construct(Float ax,Float ay,Float bx,Float by,Float cx,Float cy,Float dx,Float dy,::hx::Null< bool >  __o_preCalculated){
            		bool preCalculated = __o_preCalculated.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_9c8e726b4b8d55c8_29_new)
HXLINE(  30)		this->ax = ax;
HXLINE(  31)		this->ay = ay;
HXLINE(  32)		this->bx = bx;
HXLINE(  33)		this->by = by;
HXLINE(  34)		this->cx = cx;
HXLINE(  35)		this->cy = cy;
HXLINE(  36)		this->dx = dx;
HXLINE(  37)		this->dy = dy;
HXLINE(  38)		if (preCalculated) {
HXLINE(  39)			this->triABD = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,this->ax,this->ay,this->bx,this->by,this->dx,this->dy,true);
HXDLIN(  39)			this->triBCD = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,this->bx,this->by,this->cx,this->cy,this->dx,this->dy,true);
HXDLIN(  39)			Float a = this->ax;
HXDLIN(  39)			Float b = this->bx;
HXDLIN(  39)			Float c = this->cx;
HXDLIN(  39)			Float d = this->dx;
HXDLIN(  39)			int min = ::Math_obj::floor(a);
HXDLIN(  39)			int max = ::Math_obj::ceil(a);
HXDLIN(  39)			if ((b < min)) {
HXLINE(  31)				min = ::Math_obj::floor(b);
            			}
            			else {
HXLINE(  39)				if ((b > max)) {
HXLINE(  33)					max = ::Math_obj::ceil(b);
            				}
            			}
HXLINE(  39)			if ((c < min)) {
HXLINE(  36)				min = ::Math_obj::floor(c);
            			}
            			else {
HXLINE(  39)				if ((c > max)) {
HXLINE(  38)					max = ::Math_obj::ceil(c);
            				}
            			}
HXLINE(  39)			if ((d < min)) {
HXLINE(  41)				min = ::Math_obj::floor(d);
            			}
            			else {
HXLINE(  39)				if ((d > max)) {
HXLINE(  43)					max = ::Math_obj::ceil(d);
            				}
            			}
HXLINE(  39)			int ii_min = min;
HXDLIN(  39)			int ii_max = max;
HXDLIN(  39)			::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  39)			this->xIter4 = this1;
HXDLIN(  39)			Float a1 = this->ay;
HXDLIN(  39)			Float b1 = this->by;
HXDLIN(  39)			Float c1 = this->cy;
HXDLIN(  39)			Float d1 = this->dy;
HXDLIN(  39)			int min1 = ::Math_obj::floor(a1);
HXDLIN(  39)			int max1 = ::Math_obj::ceil(a1);
HXDLIN(  39)			if ((b1 < min1)) {
HXLINE(  31)				min1 = ::Math_obj::floor(b1);
            			}
            			else {
HXLINE(  39)				if ((b1 > max1)) {
HXLINE(  33)					max1 = ::Math_obj::ceil(b1);
            				}
            			}
HXLINE(  39)			if ((c1 < min1)) {
HXLINE(  36)				min1 = ::Math_obj::floor(c1);
            			}
            			else {
HXLINE(  39)				if ((c1 > max1)) {
HXLINE(  38)					max1 = ::Math_obj::ceil(c1);
            				}
            			}
HXLINE(  39)			if ((d1 < min1)) {
HXLINE(  41)				min1 = ::Math_obj::floor(d1);
            			}
            			else {
HXLINE(  39)				if ((d1 > max1)) {
HXLINE(  43)					max1 = ::Math_obj::ceil(d1);
            				}
            			}
HXLINE(  39)			int ii_min1 = min1;
HXDLIN(  39)			int ii_max1 = max1;
HXDLIN(  39)			::pixelimage::iter::IntIterStart this2 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
HXDLIN(  39)			this->yIter4 = this2;
            		}
            	}

Dynamic HitQuad_obj::__CreateEmpty() { return new HitQuad_obj; }

void *HitQuad_obj::_hx_vtable = 0;

Dynamic HitQuad_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< HitQuad_obj > _hx_result = new HitQuad_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8]);
	return _hx_result;
}

bool HitQuad_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x6e50f6ea;
}

static ::pixelimage::algo::IhitObj_obj _hx_pixelimage_algo_HitQuad__hx_pixelimage_algo_IhitObj= {
};

void *HitQuad_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x2e8ac945: return &_hx_pixelimage_algo_HitQuad__hx_pixelimage_algo_IhitObj;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}


::hx::ObjectPtr< HitQuad_obj > HitQuad_obj::__new(Float ax,Float ay,Float bx,Float by,Float cx,Float cy,Float dx,Float dy,::hx::Null< bool >  __o_preCalculated) {
	::hx::ObjectPtr< HitQuad_obj > __this = new HitQuad_obj();
	__this->__construct(ax,ay,bx,by,cx,cy,dx,dy,__o_preCalculated);
	return __this;
}

::hx::ObjectPtr< HitQuad_obj > HitQuad_obj::__alloc(::hx::Ctx *_hx_ctx,Float ax,Float ay,Float bx,Float by,Float cx,Float cy,Float dx,Float dy,::hx::Null< bool >  __o_preCalculated) {
	HitQuad_obj *__this = (HitQuad_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(HitQuad_obj), true, "pixelimage.algo.HitQuad"));
	*(void **)__this = HitQuad_obj::_hx_vtable;
	__this->__construct(ax,ay,bx,by,cx,cy,dx,dy,__o_preCalculated);
	return __this;
}

HitQuad_obj::HitQuad_obj()
{
}

void HitQuad_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(HitQuad);
	HX_MARK_MEMBER_NAME(ax,"ax");
	HX_MARK_MEMBER_NAME(ay,"ay");
	HX_MARK_MEMBER_NAME(bx,"bx");
	HX_MARK_MEMBER_NAME(by,"by");
	HX_MARK_MEMBER_NAME(cx,"cx");
	HX_MARK_MEMBER_NAME(cy,"cy");
	HX_MARK_MEMBER_NAME(dx,"dx");
	HX_MARK_MEMBER_NAME(dy,"dy");
	HX_MARK_MEMBER_NAME(triABD,"triABD");
	HX_MARK_MEMBER_NAME(triBCD,"triBCD");
	HX_MARK_MEMBER_NAME(xIter4,"xIter4");
	HX_MARK_MEMBER_NAME(yIter4,"yIter4");
	HX_MARK_END_CLASS();
}

void HitQuad_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(ax,"ax");
	HX_VISIT_MEMBER_NAME(ay,"ay");
	HX_VISIT_MEMBER_NAME(bx,"bx");
	HX_VISIT_MEMBER_NAME(by,"by");
	HX_VISIT_MEMBER_NAME(cx,"cx");
	HX_VISIT_MEMBER_NAME(cy,"cy");
	HX_VISIT_MEMBER_NAME(dx,"dx");
	HX_VISIT_MEMBER_NAME(dy,"dy");
	HX_VISIT_MEMBER_NAME(triABD,"triABD");
	HX_VISIT_MEMBER_NAME(triBCD,"triBCD");
	HX_VISIT_MEMBER_NAME(xIter4,"xIter4");
	HX_VISIT_MEMBER_NAME(yIter4,"yIter4");
}

::hx::Val HitQuad_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ax") ) { return ::hx::Val( ax ); }
		if (HX_FIELD_EQ(inName,"ay") ) { return ::hx::Val( ay ); }
		if (HX_FIELD_EQ(inName,"bx") ) { return ::hx::Val( bx ); }
		if (HX_FIELD_EQ(inName,"by") ) { return ::hx::Val( by ); }
		if (HX_FIELD_EQ(inName,"cx") ) { return ::hx::Val( cx ); }
		if (HX_FIELD_EQ(inName,"cy") ) { return ::hx::Val( cy ); }
		if (HX_FIELD_EQ(inName,"dx") ) { return ::hx::Val( dx ); }
		if (HX_FIELD_EQ(inName,"dy") ) { return ::hx::Val( dy ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"triABD") ) { return ::hx::Val( triABD ); }
		if (HX_FIELD_EQ(inName,"triBCD") ) { return ::hx::Val( triBCD ); }
		if (HX_FIELD_EQ(inName,"xIter4") ) { return ::hx::Val( xIter4 ); }
		if (HX_FIELD_EQ(inName,"yIter4") ) { return ::hx::Val( yIter4 ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val HitQuad_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"ax") ) { ax=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ay") ) { ay=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bx") ) { bx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"by") ) { by=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cx") ) { cx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cy") ) { cy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dx") ) { dx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dy") ) { dy=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"triABD") ) { triABD=inValue.Cast< ::pixelimage::algo::HitTri >(); return inValue; }
		if (HX_FIELD_EQ(inName,"triBCD") ) { triBCD=inValue.Cast< ::pixelimage::algo::HitTri >(); return inValue; }
		if (HX_FIELD_EQ(inName,"xIter4") ) { xIter4=inValue.Cast< ::pixelimage::iter::IntIterStart >(); return inValue; }
		if (HX_FIELD_EQ(inName,"yIter4") ) { yIter4=inValue.Cast< ::pixelimage::iter::IntIterStart >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void HitQuad_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("ax",f7,54,00,00));
	outFields->push(HX_("ay",f8,54,00,00));
	outFields->push(HX_("bx",d6,55,00,00));
	outFields->push(HX_("by",d7,55,00,00));
	outFields->push(HX_("cx",b5,56,00,00));
	outFields->push(HX_("cy",b6,56,00,00));
	outFields->push(HX_("dx",94,57,00,00));
	outFields->push(HX_("dy",95,57,00,00));
	outFields->push(HX_("triABD",f8,ef,ac,4a));
	outFields->push(HX_("triBCD",18,b3,ad,4a));
	outFields->push(HX_("xIter4",84,6c,0d,50));
	outFields->push(HX_("yIter4",e3,c8,68,b6));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo HitQuad_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(HitQuad_obj,ax),HX_("ax",f7,54,00,00)},
	{::hx::fsFloat,(int)offsetof(HitQuad_obj,ay),HX_("ay",f8,54,00,00)},
	{::hx::fsFloat,(int)offsetof(HitQuad_obj,bx),HX_("bx",d6,55,00,00)},
	{::hx::fsFloat,(int)offsetof(HitQuad_obj,by),HX_("by",d7,55,00,00)},
	{::hx::fsFloat,(int)offsetof(HitQuad_obj,cx),HX_("cx",b5,56,00,00)},
	{::hx::fsFloat,(int)offsetof(HitQuad_obj,cy),HX_("cy",b6,56,00,00)},
	{::hx::fsFloat,(int)offsetof(HitQuad_obj,dx),HX_("dx",94,57,00,00)},
	{::hx::fsFloat,(int)offsetof(HitQuad_obj,dy),HX_("dy",95,57,00,00)},
	{::hx::fsObject /* ::pixelimage::algo::HitTri */ ,(int)offsetof(HitQuad_obj,triABD),HX_("triABD",f8,ef,ac,4a)},
	{::hx::fsObject /* ::pixelimage::algo::HitTri */ ,(int)offsetof(HitQuad_obj,triBCD),HX_("triBCD",18,b3,ad,4a)},
	{::hx::fsObject /* ::pixelimage::iter::IntIterStart */ ,(int)offsetof(HitQuad_obj,xIter4),HX_("xIter4",84,6c,0d,50)},
	{::hx::fsObject /* ::pixelimage::iter::IntIterStart */ ,(int)offsetof(HitQuad_obj,yIter4),HX_("yIter4",e3,c8,68,b6)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *HitQuad_obj_sStaticStorageInfo = 0;
#endif

static ::String HitQuad_obj_sMemberFields[] = {
	HX_("ax",f7,54,00,00),
	HX_("ay",f8,54,00,00),
	HX_("bx",d6,55,00,00),
	HX_("by",d7,55,00,00),
	HX_("cx",b5,56,00,00),
	HX_("cy",b6,56,00,00),
	HX_("dx",94,57,00,00),
	HX_("dy",95,57,00,00),
	HX_("triABD",f8,ef,ac,4a),
	HX_("triBCD",18,b3,ad,4a),
	HX_("xIter4",84,6c,0d,50),
	HX_("yIter4",e3,c8,68,b6),
	::String(null()) };

::hx::Class HitQuad_obj::__mClass;

void HitQuad_obj::__register()
{
	HitQuad_obj _hx_dummy;
	HitQuad_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pixelimage.algo.HitQuad",f8,95,1a,09);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(HitQuad_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< HitQuad_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = HitQuad_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = HitQuad_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pixelimage
} // end namespace algo
