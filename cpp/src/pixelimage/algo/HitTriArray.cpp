// Generated by Haxe 4.3.0-rc.1+
#include <hxcpp.h>

#ifndef INCLUDED_pixelimage_algo_HitTri
#include <pixelimage/algo/HitTri.h>
#endif
#ifndef INCLUDED_pixelimage_algo_HitTriArray
#include <pixelimage/algo/HitTriArray.h>
#endif
#ifndef INCLUDED_pixelimage_algo_IhitObj
#include <pixelimage/algo/IhitObj.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_92a03cf29f49e17e_18_new,"pixelimage.algo.HitTriArray","new",0x8ce63e91,"pixelimage.algo.HitTriArray.new","pixelimage/algo/HitTriArray.hx",18,0xb96cc25f)
namespace pixelimage{
namespace algo{

void HitTriArray_obj::__construct(::Array< ::Dynamic> triArr){
            	HX_STACKFRAME(&_hx_pos_92a03cf29f49e17e_18_new)
HXDLIN(  18)		this->triArr = triArr;
            	}

Dynamic HitTriArray_obj::__CreateEmpty() { return new HitTriArray_obj; }

void *HitTriArray_obj::_hx_vtable = 0;

Dynamic HitTriArray_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< HitTriArray_obj > _hx_result = new HitTriArray_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool HitTriArray_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x7fea5f75;
}

static ::pixelimage::algo::IhitObj_obj _hx_pixelimage_algo_HitTriArray__hx_pixelimage_algo_IhitObj= {
};

void *HitTriArray_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x2e8ac945: return &_hx_pixelimage_algo_HitTriArray__hx_pixelimage_algo_IhitObj;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}


::hx::ObjectPtr< HitTriArray_obj > HitTriArray_obj::__new(::Array< ::Dynamic> triArr) {
	::hx::ObjectPtr< HitTriArray_obj > __this = new HitTriArray_obj();
	__this->__construct(triArr);
	return __this;
}

::hx::ObjectPtr< HitTriArray_obj > HitTriArray_obj::__alloc(::hx::Ctx *_hx_ctx,::Array< ::Dynamic> triArr) {
	HitTriArray_obj *__this = (HitTriArray_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(HitTriArray_obj), true, "pixelimage.algo.HitTriArray"));
	*(void **)__this = HitTriArray_obj::_hx_vtable;
	__this->__construct(triArr);
	return __this;
}

HitTriArray_obj::HitTriArray_obj()
{
}

void HitTriArray_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(HitTriArray);
	HX_MARK_MEMBER_NAME(triArr,"triArr");
	HX_MARK_END_CLASS();
}

void HitTriArray_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(triArr,"triArr");
}

::hx::Val HitTriArray_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"triArr") ) { return ::hx::Val( triArr ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val HitTriArray_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"triArr") ) { triArr=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void HitTriArray_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("triArr",f6,19,ad,4a));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo HitTriArray_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(HitTriArray_obj,triArr),HX_("triArr",f6,19,ad,4a)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *HitTriArray_obj_sStaticStorageInfo = 0;
#endif

static ::String HitTriArray_obj_sMemberFields[] = {
	HX_("triArr",f6,19,ad,4a),
	::String(null()) };

::hx::Class HitTriArray_obj::__mClass;

void HitTriArray_obj::__register()
{
	HitTriArray_obj _hx_dummy;
	HitTriArray_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pixelimage.algo.HitTriArray",1f,a2,45,a4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(HitTriArray_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< HitTriArray_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = HitTriArray_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = HitTriArray_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pixelimage
} // end namespace algo
