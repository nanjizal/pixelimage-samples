// Generated by Haxe 4.3.0-rc.1+
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_pixelimage_ImageStruct
#include <pixelimage/ImageStruct.h>
#endif
#ifndef INCLUDED_pixelimage_algo_HitTri
#include <pixelimage/algo/HitTri.h>
#endif
#ifndef INCLUDED_pixelimage_algo_IhitObj
#include <pixelimage/algo/IhitObj.h>
#endif
#ifndef INCLUDED_pixelimage_iter_IntIterStart
#include <pixelimage/iter/IntIterStart.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_ea0ec33efdc4c392_7_new,"pixelimage.algo.HitTri","new",0x0562b30c,"pixelimage.algo.HitTri.new","pixelimage/algo/HitTri.hx",7,0x48ab8984)
namespace pixelimage{
namespace algo{

void HitTri_obj::__construct(Float ax,Float ay,Float bx,Float by,Float cx,Float cy,::hx::Null< bool >  __o_preCalculated){
            		bool preCalculated = __o_preCalculated.Default(true);
            	HX_GC_STACKFRAME(&_hx_pos_ea0ec33efdc4c392_7_new)
HXLINE(  24)		this->undoImage = null();
HXLINE(  31)		bool adjustWinding = (((((ax * by) - (bx * ay)) + ((bx * cy) - (cx * by))) + ((cx * ay) - (ax * cy))) > 0);
HXLINE(  32)		if (!(adjustWinding)) {
HXLINE(  33)			Float bx_ = bx;
HXLINE(  34)			Float by_ = by;
HXLINE(  35)			bx = cx;
HXLINE(  36)			by = cy;
HXLINE(  37)			cx = bx_;
HXLINE(  38)			cy = by_;
            		}
HXLINE(  40)		this->ax = ax;
HXLINE(  41)		this->ay = ay;
HXLINE(  42)		this->bx = bx;
HXLINE(  43)		this->by = by;
HXLINE(  44)		this->cx = cx;
HXLINE(  45)		this->cy = cy;
HXLINE(  46)		this->preCalculated = preCalculated;
HXLINE(  47)		if (preCalculated) {
HXLINE(  48)			this->s0 = ((this->ay * this->cx) - (this->ax * this->cy));
HXDLIN(  48)			this->sx = (this->cy - this->ay);
HXDLIN(  48)			this->sy = (this->ax - this->cx);
HXDLIN(  48)			this->t0 = ((this->ax * this->by) - (this->ay * this->bx));
HXDLIN(  48)			this->tx = (this->ay - this->by);
HXDLIN(  48)			this->ty = (this->bx - this->ax);
HXDLIN(  48)			this->A = ((((-(this->by) * this->cx) + (this->ay * (-(this->bx) + this->cx))) + (this->ax * (this->by - this->cy))) + (this->bx * this->cy));
HXDLIN(  48)			Float a = this->ax;
HXDLIN(  48)			Float b = this->bx;
HXDLIN(  48)			Float c = this->cx;
HXDLIN(  48)			::pixelimage::iter::IntIterStart _hx_tmp;
HXDLIN(  48)			if ((a > b)) {
HXLINE(  48)				if ((a > c)) {
HXLINE(  48)					int min;
HXDLIN(  48)					if ((b > c)) {
HXLINE(  48)						min = ::Math_obj::floor(c);
            					}
            					else {
HXLINE(  48)						min = ::Math_obj::floor(b);
            					}
HXDLIN(  48)					int ii_min = min;
HXDLIN(  48)					int ii_max = ::Math_obj::ceil(a);
HXDLIN(  48)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  48)					_hx_tmp = this1;
            				}
            				else {
HXLINE(  48)					int ii_min = ::Math_obj::floor(b);
HXDLIN(  48)					int ii_max = ::Math_obj::ceil(c);
HXDLIN(  48)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  48)					_hx_tmp = this1;
            				}
            			}
            			else {
HXLINE(  48)				if ((b > c)) {
HXLINE(  48)					int min;
HXDLIN(  48)					if ((a > c)) {
HXLINE(  48)						min = ::Math_obj::floor(c);
            					}
            					else {
HXLINE(  48)						min = ::Math_obj::ceil(a);
            					}
HXDLIN(  48)					int ii_min = min;
HXDLIN(  48)					int ii_max = ::Math_obj::ceil(b);
HXDLIN(  48)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  48)					_hx_tmp = this1;
            				}
            				else {
HXLINE(  48)					int ii_min = ::Math_obj::floor(a);
HXDLIN(  48)					int ii_max = ::Math_obj::ceil(c);
HXDLIN(  48)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  48)					_hx_tmp = this1;
            				}
            			}
HXDLIN(  48)			this->xIter3 = _hx_tmp;
HXDLIN(  48)			Float a1 = this->ay;
HXDLIN(  48)			Float b1 = this->by;
HXDLIN(  48)			Float c1 = this->cy;
HXDLIN(  48)			::pixelimage::iter::IntIterStart _hx_tmp1;
HXDLIN(  48)			if ((a1 > b1)) {
HXLINE(  48)				if ((a1 > c1)) {
HXLINE(  48)					int min;
HXDLIN(  48)					if ((b1 > c1)) {
HXLINE(  48)						min = ::Math_obj::floor(c1);
            					}
            					else {
HXLINE(  48)						min = ::Math_obj::floor(b1);
            					}
HXDLIN(  48)					int ii_min = min;
HXDLIN(  48)					int ii_max = ::Math_obj::ceil(a1);
HXDLIN(  48)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  48)					_hx_tmp1 = this1;
            				}
            				else {
HXLINE(  48)					int ii_min = ::Math_obj::floor(b1);
HXDLIN(  48)					int ii_max = ::Math_obj::ceil(c1);
HXDLIN(  48)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  48)					_hx_tmp1 = this1;
            				}
            			}
            			else {
HXLINE(  48)				if ((b1 > c1)) {
HXLINE(  48)					int min;
HXDLIN(  48)					if ((a1 > c1)) {
HXLINE(  48)						min = ::Math_obj::floor(c1);
            					}
            					else {
HXLINE(  48)						min = ::Math_obj::ceil(a1);
            					}
HXDLIN(  48)					int ii_min = min;
HXDLIN(  48)					int ii_max = ::Math_obj::ceil(b1);
HXDLIN(  48)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  48)					_hx_tmp1 = this1;
            				}
            				else {
HXLINE(  48)					int ii_min = ::Math_obj::floor(a1);
HXDLIN(  48)					int ii_max = ::Math_obj::ceil(c1);
HXDLIN(  48)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  48)					_hx_tmp1 = this1;
            				}
            			}
HXDLIN(  48)			this->yIter3 = _hx_tmp1;
            		}
            	}

Dynamic HitTri_obj::__CreateEmpty() { return new HitTri_obj; }

void *HitTri_obj::_hx_vtable = 0;

Dynamic HitTri_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< HitTri_obj > _hx_result = new HitTri_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6]);
	return _hx_result;
}

bool HitTri_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x510225a0;
}

static ::pixelimage::algo::IhitObj_obj _hx_pixelimage_algo_HitTri__hx_pixelimage_algo_IhitObj= {
};

void *HitTri_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x2e8ac945: return &_hx_pixelimage_algo_HitTri__hx_pixelimage_algo_IhitObj;
	}
	#ifdef HXCPP_SCRIPTABLE
	return super::_hx_getInterface(inHash);
	#else
	return 0;
	#endif
}


::hx::ObjectPtr< HitTri_obj > HitTri_obj::__new(Float ax,Float ay,Float bx,Float by,Float cx,Float cy,::hx::Null< bool >  __o_preCalculated) {
	::hx::ObjectPtr< HitTri_obj > __this = new HitTri_obj();
	__this->__construct(ax,ay,bx,by,cx,cy,__o_preCalculated);
	return __this;
}

::hx::ObjectPtr< HitTri_obj > HitTri_obj::__alloc(::hx::Ctx *_hx_ctx,Float ax,Float ay,Float bx,Float by,Float cx,Float cy,::hx::Null< bool >  __o_preCalculated) {
	HitTri_obj *__this = (HitTri_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(HitTri_obj), true, "pixelimage.algo.HitTri"));
	*(void **)__this = HitTri_obj::_hx_vtable;
	__this->__construct(ax,ay,bx,by,cx,cy,__o_preCalculated);
	return __this;
}

HitTri_obj::HitTri_obj()
{
}

void HitTri_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(HitTri);
	HX_MARK_MEMBER_NAME(ax,"ax");
	HX_MARK_MEMBER_NAME(ay,"ay");
	HX_MARK_MEMBER_NAME(bx,"bx");
	HX_MARK_MEMBER_NAME(by,"by");
	HX_MARK_MEMBER_NAME(cx,"cx");
	HX_MARK_MEMBER_NAME(cy,"cy");
	HX_MARK_MEMBER_NAME(preCalculated,"preCalculated");
	HX_MARK_MEMBER_NAME(s0,"s0");
	HX_MARK_MEMBER_NAME(sx,"sx");
	HX_MARK_MEMBER_NAME(sy,"sy");
	HX_MARK_MEMBER_NAME(t0,"t0");
	HX_MARK_MEMBER_NAME(tx,"tx");
	HX_MARK_MEMBER_NAME(ty,"ty");
	HX_MARK_MEMBER_NAME(A,"A");
	HX_MARK_MEMBER_NAME(xIter3,"xIter3");
	HX_MARK_MEMBER_NAME(yIter3,"yIter3");
	HX_MARK_MEMBER_NAME(undoImage,"undoImage");
	HX_MARK_MEMBER_NAME(undoX,"undoX");
	HX_MARK_MEMBER_NAME(undoY,"undoY");
	HX_MARK_END_CLASS();
}

void HitTri_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(ax,"ax");
	HX_VISIT_MEMBER_NAME(ay,"ay");
	HX_VISIT_MEMBER_NAME(bx,"bx");
	HX_VISIT_MEMBER_NAME(by,"by");
	HX_VISIT_MEMBER_NAME(cx,"cx");
	HX_VISIT_MEMBER_NAME(cy,"cy");
	HX_VISIT_MEMBER_NAME(preCalculated,"preCalculated");
	HX_VISIT_MEMBER_NAME(s0,"s0");
	HX_VISIT_MEMBER_NAME(sx,"sx");
	HX_VISIT_MEMBER_NAME(sy,"sy");
	HX_VISIT_MEMBER_NAME(t0,"t0");
	HX_VISIT_MEMBER_NAME(tx,"tx");
	HX_VISIT_MEMBER_NAME(ty,"ty");
	HX_VISIT_MEMBER_NAME(A,"A");
	HX_VISIT_MEMBER_NAME(xIter3,"xIter3");
	HX_VISIT_MEMBER_NAME(yIter3,"yIter3");
	HX_VISIT_MEMBER_NAME(undoImage,"undoImage");
	HX_VISIT_MEMBER_NAME(undoX,"undoX");
	HX_VISIT_MEMBER_NAME(undoY,"undoY");
}

::hx::Val HitTri_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"A") ) { return ::hx::Val( A ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"ax") ) { return ::hx::Val( ax ); }
		if (HX_FIELD_EQ(inName,"ay") ) { return ::hx::Val( ay ); }
		if (HX_FIELD_EQ(inName,"bx") ) { return ::hx::Val( bx ); }
		if (HX_FIELD_EQ(inName,"by") ) { return ::hx::Val( by ); }
		if (HX_FIELD_EQ(inName,"cx") ) { return ::hx::Val( cx ); }
		if (HX_FIELD_EQ(inName,"cy") ) { return ::hx::Val( cy ); }
		if (HX_FIELD_EQ(inName,"s0") ) { return ::hx::Val( s0 ); }
		if (HX_FIELD_EQ(inName,"sx") ) { return ::hx::Val( sx ); }
		if (HX_FIELD_EQ(inName,"sy") ) { return ::hx::Val( sy ); }
		if (HX_FIELD_EQ(inName,"t0") ) { return ::hx::Val( t0 ); }
		if (HX_FIELD_EQ(inName,"tx") ) { return ::hx::Val( tx ); }
		if (HX_FIELD_EQ(inName,"ty") ) { return ::hx::Val( ty ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"undoX") ) { return ::hx::Val( undoX ); }
		if (HX_FIELD_EQ(inName,"undoY") ) { return ::hx::Val( undoY ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"xIter3") ) { return ::hx::Val( xIter3 ); }
		if (HX_FIELD_EQ(inName,"yIter3") ) { return ::hx::Val( yIter3 ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"undoImage") ) { return ::hx::Val( undoImage ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"preCalculated") ) { return ::hx::Val( preCalculated ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val HitTri_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"A") ) { A=inValue.Cast< Float >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"ax") ) { ax=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ay") ) { ay=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bx") ) { bx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"by") ) { by=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cx") ) { cx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cy") ) { cy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"s0") ) { s0=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sx") ) { sx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sy") ) { sy=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"t0") ) { t0=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"tx") ) { tx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ty") ) { ty=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"undoX") ) { undoX=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"undoY") ) { undoY=inValue.Cast< int >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"xIter3") ) { xIter3=inValue.Cast< ::pixelimage::iter::IntIterStart >(); return inValue; }
		if (HX_FIELD_EQ(inName,"yIter3") ) { yIter3=inValue.Cast< ::pixelimage::iter::IntIterStart >(); return inValue; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"undoImage") ) { undoImage=inValue.Cast< ::pixelimage::ImageStruct >(); return inValue; }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"preCalculated") ) { preCalculated=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void HitTri_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("ax",f7,54,00,00));
	outFields->push(HX_("ay",f8,54,00,00));
	outFields->push(HX_("bx",d6,55,00,00));
	outFields->push(HX_("by",d7,55,00,00));
	outFields->push(HX_("cx",b5,56,00,00));
	outFields->push(HX_("cy",b6,56,00,00));
	outFields->push(HX_("preCalculated",41,32,bf,51));
	outFields->push(HX_("s0",5d,64,00,00));
	outFields->push(HX_("sx",a5,64,00,00));
	outFields->push(HX_("sy",a6,64,00,00));
	outFields->push(HX_("t0",3c,65,00,00));
	outFields->push(HX_("tx",84,65,00,00));
	outFields->push(HX_("ty",85,65,00,00));
	outFields->push(HX_("A",41,00,00,00));
	outFields->push(HX_("xIter3",83,6c,0d,50));
	outFields->push(HX_("yIter3",e2,c8,68,b6));
	outFields->push(HX_("undoImage",97,06,98,ec));
	outFields->push(HX_("undoX",b4,99,e3,a6));
	outFields->push(HX_("undoY",b5,99,e3,a6));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo HitTri_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(HitTri_obj,ax),HX_("ax",f7,54,00,00)},
	{::hx::fsFloat,(int)offsetof(HitTri_obj,ay),HX_("ay",f8,54,00,00)},
	{::hx::fsFloat,(int)offsetof(HitTri_obj,bx),HX_("bx",d6,55,00,00)},
	{::hx::fsFloat,(int)offsetof(HitTri_obj,by),HX_("by",d7,55,00,00)},
	{::hx::fsFloat,(int)offsetof(HitTri_obj,cx),HX_("cx",b5,56,00,00)},
	{::hx::fsFloat,(int)offsetof(HitTri_obj,cy),HX_("cy",b6,56,00,00)},
	{::hx::fsBool,(int)offsetof(HitTri_obj,preCalculated),HX_("preCalculated",41,32,bf,51)},
	{::hx::fsFloat,(int)offsetof(HitTri_obj,s0),HX_("s0",5d,64,00,00)},
	{::hx::fsFloat,(int)offsetof(HitTri_obj,sx),HX_("sx",a5,64,00,00)},
	{::hx::fsFloat,(int)offsetof(HitTri_obj,sy),HX_("sy",a6,64,00,00)},
	{::hx::fsFloat,(int)offsetof(HitTri_obj,t0),HX_("t0",3c,65,00,00)},
	{::hx::fsFloat,(int)offsetof(HitTri_obj,tx),HX_("tx",84,65,00,00)},
	{::hx::fsFloat,(int)offsetof(HitTri_obj,ty),HX_("ty",85,65,00,00)},
	{::hx::fsFloat,(int)offsetof(HitTri_obj,A),HX_("A",41,00,00,00)},
	{::hx::fsObject /* ::pixelimage::iter::IntIterStart */ ,(int)offsetof(HitTri_obj,xIter3),HX_("xIter3",83,6c,0d,50)},
	{::hx::fsObject /* ::pixelimage::iter::IntIterStart */ ,(int)offsetof(HitTri_obj,yIter3),HX_("yIter3",e2,c8,68,b6)},
	{::hx::fsObject /* ::pixelimage::ImageStruct */ ,(int)offsetof(HitTri_obj,undoImage),HX_("undoImage",97,06,98,ec)},
	{::hx::fsInt,(int)offsetof(HitTri_obj,undoX),HX_("undoX",b4,99,e3,a6)},
	{::hx::fsInt,(int)offsetof(HitTri_obj,undoY),HX_("undoY",b5,99,e3,a6)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *HitTri_obj_sStaticStorageInfo = 0;
#endif

static ::String HitTri_obj_sMemberFields[] = {
	HX_("ax",f7,54,00,00),
	HX_("ay",f8,54,00,00),
	HX_("bx",d6,55,00,00),
	HX_("by",d7,55,00,00),
	HX_("cx",b5,56,00,00),
	HX_("cy",b6,56,00,00),
	HX_("preCalculated",41,32,bf,51),
	HX_("s0",5d,64,00,00),
	HX_("sx",a5,64,00,00),
	HX_("sy",a6,64,00,00),
	HX_("t0",3c,65,00,00),
	HX_("tx",84,65,00,00),
	HX_("ty",85,65,00,00),
	HX_("A",41,00,00,00),
	HX_("xIter3",83,6c,0d,50),
	HX_("yIter3",e2,c8,68,b6),
	HX_("undoImage",97,06,98,ec),
	HX_("undoX",b4,99,e3,a6),
	HX_("undoY",b5,99,e3,a6),
	::String(null()) };

::hx::Class HitTri_obj::__mClass;

void HitTri_obj::__register()
{
	HitTri_obj _hx_dummy;
	HitTri_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pixelimage.algo.HitTri",1a,7d,39,47);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(HitTri_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< HitTri_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = HitTri_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = HitTri_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pixelimage
} // end namespace algo
