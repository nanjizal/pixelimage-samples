// Generated by Haxe 4.3.0-rc.1+
#include <hxcpp.h>

#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_io_ArrayBufferViewImpl
#include <haxe/io/ArrayBufferViewImpl.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_pixelimage_ImageStruct
#include <pixelimage/ImageStruct.h>
#endif
#ifndef INCLUDED_pixelimage__Endian_Endian_Fields_
#include <pixelimage/_Endian/Endian_Fields_.h>
#endif
#ifndef INCLUDED_pixelimage__Pixelimage_Pixelimage_Impl_
#include <pixelimage/_Pixelimage/Pixelimage_Impl_.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_BasicShape
#include <pixelimage/triangleGML/coreShape/BasicShape.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_GroupShape
#include <pixelimage/triangleGML/coreShape/GroupShape.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_PatternStroke
#include <pixelimage/triangleGML/coreShape/PatternStroke.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_ShapeInterface
#include <pixelimage/triangleGML/coreShape/ShapeInterface.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_dbc4ebf2728a08ee_34_new,"pixelimage.triangleGML.coreShape.PatternStroke","new",0xba9967a5,"pixelimage.triangleGML.coreShape.PatternStroke.new","pixelimage/triangleGML/coreShape/PatternStroke.hx",34,0x0490bd6e)
HX_LOCAL_STACK_FRAME(_hx_pos_dbc4ebf2728a08ee_47_setParameter,"pixelimage.triangleGML.coreShape.PatternStroke","setParameter",0x82e1cdc2,"pixelimage.triangleGML.coreShape.PatternStroke.setParameter","pixelimage/triangleGML/coreShape/PatternStroke.hx",47,0x0490bd6e)
HX_LOCAL_STACK_FRAME(_hx_pos_dbc4ebf2728a08ee_73_render,"pixelimage.triangleGML.coreShape.PatternStroke","render",0x40d7ed31,"pixelimage.triangleGML.coreShape.PatternStroke.render","pixelimage/triangleGML/coreShape/PatternStroke.hx",73,0x0490bd6e)
HX_LOCAL_STACK_FRAME(_hx_pos_dbc4ebf2728a08ee_77_buildPatternTemplates,"pixelimage.triangleGML.coreShape.PatternStroke","buildPatternTemplates",0xba8d1a5c,"pixelimage.triangleGML.coreShape.PatternStroke.buildPatternTemplates","pixelimage/triangleGML/coreShape/PatternStroke.hx",77,0x0490bd6e)
namespace pixelimage{
namespace triangleGML{
namespace coreShape{

void PatternStroke_obj::__construct(::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< int >  __o_strokeColor,::hx::Null< Float >  __o_strokeWidth,::Array< ::String > strokeDashGapArray,::hx::Null< int >  __o_strokeColor0,::hx::Null< int >  __o_strokeColor1,::Array< bool > strokePatternFill, ::Dynamic strokePatternWidth, ::Dynamic strokePatternHeight,::hx::Null< bool >  __o_strokePatternAcross,::hx::Null< int >  __o_strokePatternScale){
            		Float opacity = __o_opacity.Default(((Float)1.));
            		bool visibility = __o_visibility.Default(true);
            		int strokeColor = __o_strokeColor.Default(0);
            		Float strokeWidth = __o_strokeWidth.Default(((Float)1.));
            		int strokeColor0 = __o_strokeColor0.Default(0);
            		int strokeColor1 = __o_strokeColor1.Default(0);
            		bool strokePatternAcross = __o_strokePatternAcross.Default(true);
            		int strokePatternScale = __o_strokePatternScale.Default(1);
            	HX_STACKFRAME(&_hx_pos_dbc4ebf2728a08ee_34_new)
HXLINE(  35)		super::__construct(opacity,visibility,strokeColor,strokeWidth,strokeDashGapArray);
HXLINE(  36)		this->strokeColor0 = strokeColor0;
HXLINE(  37)		this->strokeColor1 = strokeColor1;
HXLINE(  40)		this->strokePatternFill = strokePatternFill;
HXLINE(  41)		this->strokePatternWidth = ( (int)(strokePatternWidth) );
HXLINE(  42)		this->strokePatternHeight = ( (int)(strokePatternHeight) );
HXLINE(  43)		this->strokePatternAcross = strokePatternAcross;
HXLINE(  44)		this->strokePatternScale = strokePatternScale;
            	}

Dynamic PatternStroke_obj::__CreateEmpty() { return new PatternStroke_obj; }

void *PatternStroke_obj::_hx_vtable = 0;

Dynamic PatternStroke_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PatternStroke_obj > _hx_result = new PatternStroke_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10],inArgs[11]);
	return _hx_result;
}

bool PatternStroke_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x24e92cfb) {
		if (inClassId<=(int)0x2091632c) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2091632c;
		} else {
			return inClassId==(int)0x24e92cfb;
		}
	} else {
		return inClassId==(int)0x3be35e2f;
	}
}

void PatternStroke_obj::setParameter(::String name,::String value){
            	HX_STACKFRAME(&_hx_pos_dbc4ebf2728a08ee_47_setParameter)
HXDLIN(  47)		::String _hx_switch_0 = name;
            		if (  (_hx_switch_0==HX_("strokeColor0",45,87,c5,50)) ){
HXLINE(  49)			this->strokeColor0 = ( (int)(::Std_obj::parseInt(value)) );
HXDLIN(  49)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("strokeColor1",46,87,c5,50)) ){
HXLINE(  51)			this->strokeColor1 = ( (int)(::Std_obj::parseInt(value)) );
HXDLIN(  51)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("strokePatternAcross",17,1f,dd,71)) ){
HXLINE(  60)			::String bools = ::StringTools_obj::trim(value).toLowerCase();
HXLINE(  61)			bool _hx_tmp;
HXDLIN(  61)			bool _hx_tmp1;
HXDLIN(  61)			if ((bools != HX_("true",4e,a7,03,4d))) {
HXLINE(  61)				_hx_tmp1 = (bools == HX_("1",31,00,00,00));
            			}
            			else {
HXLINE(  61)				_hx_tmp1 = true;
            			}
HXDLIN(  61)			if (_hx_tmp1) {
HXLINE(  61)				_hx_tmp = true;
            			}
            			else {
HXLINE(  61)				_hx_tmp = false;
            			}
HXDLIN(  61)			this->strokePatternAcross = _hx_tmp;
HXLINE(  59)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("strokePatternFill",1b,f8,d0,11)) ){
HXLINE(  54)			value = value.split(HX_("[",5b,00,00,00))->__get(1).split(HX_("]",5d,00,00,00))->__get(0);
HXLINE(  55)			::Array< bool > _g = ::Array_obj< bool >::__new(0);
HXDLIN(  55)			{
HXLINE(  55)				int _g1 = 0;
HXDLIN(  55)				::Array< ::String > _g2 = value.split(HX_(",",2c,00,00,00));
HXDLIN(  55)				while((_g1 < _g2->length)){
HXLINE(  55)					::String v = _g2->__get(_g1);
HXDLIN(  55)					_g1 = (_g1 + 1);
HXLINE(  56)					::String bools = ::StringTools_obj::trim(v).toLowerCase();
HXLINE(  57)					bool _hx_tmp;
HXDLIN(  57)					bool _hx_tmp1;
HXDLIN(  57)					if ((bools != HX_("true",4e,a7,03,4d))) {
HXLINE(  57)						_hx_tmp1 = (bools == HX_("1",31,00,00,00));
            					}
            					else {
HXLINE(  57)						_hx_tmp1 = true;
            					}
HXDLIN(  57)					if (_hx_tmp1) {
HXLINE(  57)						_hx_tmp = true;
            					}
            					else {
HXLINE(  57)						_hx_tmp = false;
            					}
HXDLIN(  57)					_g->push(_hx_tmp);
            				}
            			}
HXLINE(  55)			this->strokePatternFill = _g;
HXLINE(  53)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("strokePatternHeight",7f,c7,30,5f)) ){
HXLINE(  65)			this->strokePatternHeight = ( (int)(::Std_obj::parseInt(value)) );
HXDLIN(  65)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("strokePatternScale",f2,09,3e,fd)) ){
HXLINE(  67)			this->strokePatternScale = ( (int)(::Std_obj::parseInt(value)) );
HXDLIN(  67)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("strokePatternWidth",6e,f1,d1,4e)) ){
HXLINE(  63)			this->strokePatternWidth = ( (int)(::Std_obj::parseInt(value)) );
HXDLIN(  63)			goto _hx_goto_1;
            		}
            		/* default */{
HXLINE(  70)			this->super::setParameter(name,value);
            		}
            		_hx_goto_1:;
            	}


::pixelimage::ImageStruct PatternStroke_obj::render(::pixelimage::ImageStruct pixelShape){
            	HX_STACKFRAME(&_hx_pos_dbc4ebf2728a08ee_73_render)
HXLINE(  74)		this->tileImageStroke = null();
HXLINE(  75)		return this->super::render(pixelShape);
            	}


void PatternStroke_obj::buildPatternTemplates(){
            	HX_GC_STACKFRAME(&_hx_pos_dbc4ebf2728a08ee_77_buildPatternTemplates)
HXLINE(  78)		int w = this->strokePatternWidth;
HXDLIN(  78)		int h = this->strokePatternHeight;
HXDLIN(  78)		int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN(  78)		::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  78)		::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN(  78)		::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN(  78)		::pixelimage::ImageStruct this4 = this3;
HXDLIN(  78)		this->tileImageStroke = this4;
HXLINE(  79)		this->tileImageStroke->transparent = false;
HXLINE(  80)		if (this->strokePatternAcross) {
HXLINE(  82)			::pixelimage::ImageStruct this1 = this->tileImageStroke;
HXDLIN(  82)			Float h = ( (Float)(this->strokePatternHeight) );
HXDLIN(  82)			int foreColor = this->strokeColor0;
HXDLIN(  82)			int backColor = this->strokeColor1;
HXDLIN(  82)			::Array< bool > patternFill = this->strokePatternFill;
HXDLIN(  82)			int p = 0;
HXDLIN(  82)			int xx = p;
HXDLIN(  82)			int q = 0;
HXDLIN(  82)			int maxX = ::Std_obj::_hx_int(( (Float)(this->strokePatternWidth) ));
HXDLIN(  82)			int maxY = ::Std_obj::_hx_int(h);
HXDLIN(  82)			int count = 0;
HXDLIN(  82)			bool useFore = true;
HXDLIN(  82)			while(true){
HXLINE(  82)				if ((count < patternFill->length)) {
HXLINE(  82)					useFore = patternFill->__get(count);
HXDLIN(  82)					count = (count + 1);
            				}
            				else {
HXLINE(  82)					count = 0;
HXDLIN(  82)					useFore = patternFill->__get(count);
HXDLIN(  82)					count = (count + 1);
            				}
HXDLIN(  82)				int color;
HXDLIN(  82)				if (useFore) {
HXLINE(  82)					color = foreColor;
            				}
            				else {
HXLINE(  82)					color = backColor;
            				}
HXDLIN(  82)				{
HXLINE(  82)					p = (p + 1);
HXDLIN(  82)					int x = (p - 1);
HXDLIN(  82)					int this2 = color;
HXDLIN(  82)					int c = this2;
HXDLIN(  82)					bool _hx_tmp;
HXDLIN(  82)					if ((((c >> 24) & 255) < 254)) {
HXLINE(  82)						_hx_tmp = this1->transparent;
            					}
            					else {
HXLINE(  82)						_hx_tmp = false;
            					}
HXDLIN(  82)					if (_hx_tmp) {
HXLINE(  82)						int location;
HXDLIN(  82)						if (this1->useVirtualPos) {
HXLINE(  82)							location = ::Std_obj::_hx_int(((((( (Float)(q) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            						}
            						else {
HXLINE(  82)							location = ::Std_obj::_hx_int(( (Float)(((q * this1->width) + x)) ));
            						}
HXDLIN(  82)						::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  82)						::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  82)						int pos = ((location << 2) + this2->byteOffset);
HXDLIN(  82)						int this3 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  82)						int this4 = this3;
HXDLIN(  82)						int this5;
HXDLIN(  82)						if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)							this5 = ((((((this4 >> 24) & 255) << 24) | ((this4 & 255) << 16)) | (((this4 >> 8) & 255) << 8)) | ((this4 >> 16) & 255));
            						}
            						else {
HXLINE(  82)							this5 = this4;
            						}
HXDLIN(  82)						Float a1;
HXDLIN(  82)						int this6 = ((this5 >> 24) & 255);
HXDLIN(  82)						if ((this6 == 0)) {
HXLINE(  82)							a1 = ((Float)0.);
            						}
            						else {
HXLINE(  82)							a1 = (( (Float)(this6) ) / ( (Float)(255) ));
            						}
HXDLIN(  82)						Float r1;
HXDLIN(  82)						int this7 = ((this5 >> 16) & 255);
HXDLIN(  82)						if ((this7 == 0)) {
HXLINE(  82)							r1 = ((Float)0.);
            						}
            						else {
HXLINE(  82)							r1 = (( (Float)(this7) ) / ( (Float)(255) ));
            						}
HXDLIN(  82)						Float g1;
HXDLIN(  82)						int this8 = ((this5 >> 8) & 255);
HXDLIN(  82)						if ((this8 == 0)) {
HXLINE(  82)							g1 = ((Float)0.);
            						}
            						else {
HXLINE(  82)							g1 = (( (Float)(this8) ) / ( (Float)(255) ));
            						}
HXDLIN(  82)						Float b1;
HXDLIN(  82)						int this9 = (this5 & 255);
HXDLIN(  82)						if ((this9 == 0)) {
HXLINE(  82)							b1 = ((Float)0.);
            						}
            						else {
HXLINE(  82)							b1 = (( (Float)(this9) ) / ( (Float)(255) ));
            						}
HXDLIN(  82)						Float a2;
HXDLIN(  82)						int this10 = ((color >> 24) & 255);
HXDLIN(  82)						if ((this10 == 0)) {
HXLINE(  82)							a2 = ((Float)0.);
            						}
            						else {
HXLINE(  82)							a2 = (( (Float)(this10) ) / ( (Float)(255) ));
            						}
HXDLIN(  82)						Float r2;
HXDLIN(  82)						int this11 = ((color >> 16) & 255);
HXDLIN(  82)						if ((this11 == 0)) {
HXLINE(  82)							r2 = ((Float)0.);
            						}
            						else {
HXLINE(  82)							r2 = (( (Float)(this11) ) / ( (Float)(255) ));
            						}
HXDLIN(  82)						Float g2;
HXDLIN(  82)						int this12 = ((color >> 8) & 255);
HXDLIN(  82)						if ((this12 == 0)) {
HXLINE(  82)							g2 = ((Float)0.);
            						}
            						else {
HXLINE(  82)							g2 = (( (Float)(this12) ) / ( (Float)(255) ));
            						}
HXDLIN(  82)						Float b2;
HXDLIN(  82)						int this13 = (color & 255);
HXDLIN(  82)						if ((this13 == 0)) {
HXLINE(  82)							b2 = ((Float)0.);
            						}
            						else {
HXLINE(  82)							b2 = (( (Float)(this13) ) / ( (Float)(255) ));
            						}
HXDLIN(  82)						Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  82)						int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  82)						int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  82)						int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  82)						int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  82)						int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  82)						{
HXLINE(  82)							::haxe::io::ArrayBufferViewImpl this14 = this1->image;
HXDLIN(  82)							int value;
HXDLIN(  82)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)								value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            							}
            							else {
HXLINE(  82)								value = blended;
            							}
HXDLIN(  82)							bool _hx_tmp;
HXDLIN(  82)							if ((location >= 0)) {
HXLINE(  82)								_hx_tmp = (location < (this14->byteLength >> 2));
            							}
            							else {
HXLINE(  82)								_hx_tmp = false;
            							}
HXDLIN(  82)							if (_hx_tmp) {
HXLINE(  82)								::haxe::io::Bytes _this = this14->bytes;
HXDLIN(  82)								int pos = ((location << 2) + this14->byteOffset);
HXDLIN(  82)								_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  82)								_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  82)								_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  82)								_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            							}
            						}
            					}
            					else {
HXLINE(  82)						::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  82)						int index;
HXDLIN(  82)						if (this1->useVirtualPos) {
HXLINE(  82)							index = ::Std_obj::_hx_int(((((( (Float)(q) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            						}
            						else {
HXLINE(  82)							index = ::Std_obj::_hx_int(( (Float)(((q * this1->width) + x)) ));
            						}
HXDLIN(  82)						int value;
HXDLIN(  82)						if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  82)							value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            						}
            						else {
HXLINE(  82)							value = c;
            						}
HXDLIN(  82)						bool _hx_tmp;
HXDLIN(  82)						if ((index >= 0)) {
HXLINE(  82)							_hx_tmp = (index < (this2->byteLength >> 2));
            						}
            						else {
HXLINE(  82)							_hx_tmp = false;
            						}
HXDLIN(  82)						if (_hx_tmp) {
HXLINE(  82)							::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  82)							int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  82)							_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  82)							_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  82)							_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  82)							_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            						}
            					}
            				}
HXDLIN(  82)				if ((p > maxX)) {
HXLINE(  82)					p = xx;
HXDLIN(  82)					q = (q + 1);
            				}
HXDLIN(  82)				if ((q > maxY)) {
HXLINE(  82)					goto _hx_goto_5;
            				}
            			}
            			_hx_goto_5:;
            		}
            		else {
HXLINE(  85)			::pixelimage::ImageStruct this1 = this->tileImageStroke;
HXDLIN(  85)			Float h = ( (Float)(this->strokePatternHeight) );
HXDLIN(  85)			int foreColor = this->strokeColor0;
HXDLIN(  85)			int backColor = this->strokeColor1;
HXDLIN(  85)			::Array< bool > patternFill = this->strokePatternFill;
HXDLIN(  85)			int p = 0;
HXDLIN(  85)			int xx = p;
HXDLIN(  85)			int q = 0;
HXDLIN(  85)			int maxX = ::Std_obj::_hx_int(( (Float)(this->strokePatternWidth) ));
HXDLIN(  85)			int maxY = ::Std_obj::_hx_int(h);
HXDLIN(  85)			int count = 0;
HXDLIN(  85)			bool useFore = true;
HXDLIN(  85)			while(true){
HXLINE(  85)				if ((count < patternFill->length)) {
HXLINE(  85)					useFore = patternFill->__get(count);
HXDLIN(  85)					count = (count + 1);
            				}
            				else {
HXLINE(  85)					count = 0;
HXDLIN(  85)					useFore = patternFill->__get(count);
HXDLIN(  85)					count = (count + 1);
            				}
HXDLIN(  85)				int color;
HXDLIN(  85)				if (useFore) {
HXLINE(  85)					color = foreColor;
            				}
            				else {
HXLINE(  85)					color = backColor;
            				}
HXDLIN(  85)				{
HXLINE(  85)					p = (p + 1);
HXDLIN(  85)					int x = (p - 1);
HXDLIN(  85)					int this2 = color;
HXDLIN(  85)					int c = this2;
HXDLIN(  85)					bool _hx_tmp;
HXDLIN(  85)					if ((((c >> 24) & 255) < 254)) {
HXLINE(  85)						_hx_tmp = this1->transparent;
            					}
            					else {
HXLINE(  85)						_hx_tmp = false;
            					}
HXDLIN(  85)					if (_hx_tmp) {
HXLINE(  85)						int location;
HXDLIN(  85)						if (this1->useVirtualPos) {
HXLINE(  85)							location = ::Std_obj::_hx_int(((((( (Float)(q) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            						}
            						else {
HXLINE(  85)							location = ::Std_obj::_hx_int(( (Float)(((q * this1->width) + x)) ));
            						}
HXDLIN(  85)						::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  85)						::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  85)						int pos = ((location << 2) + this2->byteOffset);
HXDLIN(  85)						int this3 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  85)						int this4 = this3;
HXDLIN(  85)						int this5;
HXDLIN(  85)						if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  85)							this5 = ((((((this4 >> 24) & 255) << 24) | ((this4 & 255) << 16)) | (((this4 >> 8) & 255) << 8)) | ((this4 >> 16) & 255));
            						}
            						else {
HXLINE(  85)							this5 = this4;
            						}
HXDLIN(  85)						Float a1;
HXDLIN(  85)						int this6 = ((this5 >> 24) & 255);
HXDLIN(  85)						if ((this6 == 0)) {
HXLINE(  85)							a1 = ((Float)0.);
            						}
            						else {
HXLINE(  85)							a1 = (( (Float)(this6) ) / ( (Float)(255) ));
            						}
HXDLIN(  85)						Float r1;
HXDLIN(  85)						int this7 = ((this5 >> 16) & 255);
HXDLIN(  85)						if ((this7 == 0)) {
HXLINE(  85)							r1 = ((Float)0.);
            						}
            						else {
HXLINE(  85)							r1 = (( (Float)(this7) ) / ( (Float)(255) ));
            						}
HXDLIN(  85)						Float g1;
HXDLIN(  85)						int this8 = ((this5 >> 8) & 255);
HXDLIN(  85)						if ((this8 == 0)) {
HXLINE(  85)							g1 = ((Float)0.);
            						}
            						else {
HXLINE(  85)							g1 = (( (Float)(this8) ) / ( (Float)(255) ));
            						}
HXDLIN(  85)						Float b1;
HXDLIN(  85)						int this9 = (this5 & 255);
HXDLIN(  85)						if ((this9 == 0)) {
HXLINE(  85)							b1 = ((Float)0.);
            						}
            						else {
HXLINE(  85)							b1 = (( (Float)(this9) ) / ( (Float)(255) ));
            						}
HXDLIN(  85)						Float a2;
HXDLIN(  85)						int this10 = ((color >> 24) & 255);
HXDLIN(  85)						if ((this10 == 0)) {
HXLINE(  85)							a2 = ((Float)0.);
            						}
            						else {
HXLINE(  85)							a2 = (( (Float)(this10) ) / ( (Float)(255) ));
            						}
HXDLIN(  85)						Float r2;
HXDLIN(  85)						int this11 = ((color >> 16) & 255);
HXDLIN(  85)						if ((this11 == 0)) {
HXLINE(  85)							r2 = ((Float)0.);
            						}
            						else {
HXLINE(  85)							r2 = (( (Float)(this11) ) / ( (Float)(255) ));
            						}
HXDLIN(  85)						Float g2;
HXDLIN(  85)						int this12 = ((color >> 8) & 255);
HXDLIN(  85)						if ((this12 == 0)) {
HXLINE(  85)							g2 = ((Float)0.);
            						}
            						else {
HXLINE(  85)							g2 = (( (Float)(this12) ) / ( (Float)(255) ));
            						}
HXDLIN(  85)						Float b2;
HXDLIN(  85)						int this13 = (color & 255);
HXDLIN(  85)						if ((this13 == 0)) {
HXLINE(  85)							b2 = ((Float)0.);
            						}
            						else {
HXLINE(  85)							b2 = (( (Float)(this13) ) / ( (Float)(255) ));
            						}
HXDLIN(  85)						Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  85)						int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  85)						int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  85)						int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  85)						int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  85)						int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  85)						{
HXLINE(  85)							::haxe::io::ArrayBufferViewImpl this14 = this1->image;
HXDLIN(  85)							int value;
HXDLIN(  85)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  85)								value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            							}
            							else {
HXLINE(  85)								value = blended;
            							}
HXDLIN(  85)							bool _hx_tmp;
HXDLIN(  85)							if ((location >= 0)) {
HXLINE(  85)								_hx_tmp = (location < (this14->byteLength >> 2));
            							}
            							else {
HXLINE(  85)								_hx_tmp = false;
            							}
HXDLIN(  85)							if (_hx_tmp) {
HXLINE(  85)								::haxe::io::Bytes _this = this14->bytes;
HXDLIN(  85)								int pos = ((location << 2) + this14->byteOffset);
HXDLIN(  85)								_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  85)								_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  85)								_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  85)								_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            							}
            						}
            					}
            					else {
HXLINE(  85)						::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  85)						int index;
HXDLIN(  85)						if (this1->useVirtualPos) {
HXLINE(  85)							index = ::Std_obj::_hx_int(((((( (Float)(q) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            						}
            						else {
HXLINE(  85)							index = ::Std_obj::_hx_int(( (Float)(((q * this1->width) + x)) ));
            						}
HXDLIN(  85)						int value;
HXDLIN(  85)						if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  85)							value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            						}
            						else {
HXLINE(  85)							value = c;
            						}
HXDLIN(  85)						bool _hx_tmp;
HXDLIN(  85)						if ((index >= 0)) {
HXLINE(  85)							_hx_tmp = (index < (this2->byteLength >> 2));
            						}
            						else {
HXLINE(  85)							_hx_tmp = false;
            						}
HXDLIN(  85)						if (_hx_tmp) {
HXLINE(  85)							::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  85)							int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  85)							_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  85)							_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  85)							_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  85)							_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            						}
            					}
            				}
HXDLIN(  85)				if ((p > maxX)) {
HXLINE(  85)					p = xx;
HXDLIN(  85)					q = (q + 1);
            				}
HXDLIN(  85)				if ((q > maxY)) {
HXLINE(  85)					goto _hx_goto_6;
            				}
            			}
            			_hx_goto_6:;
            		}
HXLINE(  87)		if ((this->strokePatternScale > 1)) {
HXLINE(  87)			::pixelimage::ImageStruct this1 = this->tileImageStroke;
HXDLIN(  87)			int scaleW = this->strokePatternScale;
HXDLIN(  87)			int scaleH = this->strokePatternScale;
HXDLIN(  87)			bool includeMask = false;
HXDLIN(  87)			int p = 0;
HXDLIN(  87)			int xx = p;
HXDLIN(  87)			int q = 0;
HXDLIN(  87)			int wNew = ::Std_obj::_hx_int(( (Float)((this1->width * scaleW)) ));
HXDLIN(  87)			int hNew = ::Std_obj::_hx_int(( (Float)((this1->height * scaleH)) ));
HXDLIN(  87)			int size = (::Std_obj::_hx_int(( (Float)((wNew * hNew)) )) * 4);
HXDLIN(  87)			::haxe::io::ArrayBufferViewImpl this2 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  87)			::haxe::io::ArrayBufferViewImpl this3 = this2;
HXDLIN(  87)			::pixelimage::ImageStruct this4 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,wNew,hNew,this3);
HXDLIN(  87)			::pixelimage::ImageStruct pixelImage = this4;
HXDLIN(  87)			int maxX = wNew;
HXDLIN(  87)			int maxY = hNew;
HXDLIN(  87)			while(true){
HXLINE(  87)				int x = ::Std_obj::_hx_int((( (Float)(p) ) / ( (Float)(scaleW) )));
HXDLIN(  87)				int y = ::Std_obj::_hx_int((( (Float)(q) ) / ( (Float)(scaleH) )));
HXDLIN(  87)				::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  87)				int index;
HXDLIN(  87)				if (this1->useVirtualPos) {
HXLINE(  87)					index = ::Std_obj::_hx_int(((((( (Float)(y) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            				}
            				else {
HXLINE(  87)					index = ::Std_obj::_hx_int(( (Float)(((y * this1->width) + x)) ));
            				}
HXDLIN(  87)				::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  87)				int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  87)				int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  87)				int color;
HXDLIN(  87)				if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  87)					color = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            				}
            				else {
HXLINE(  87)					color = c;
            				}
HXDLIN(  87)				{
HXLINE(  87)					p = (p + 1);
HXDLIN(  87)					int x1 = (p - 1);
HXDLIN(  87)					int this3 = color;
HXDLIN(  87)					int c1 = this3;
HXDLIN(  87)					bool _hx_tmp;
HXDLIN(  87)					if ((((c1 >> 24) & 255) < 254)) {
HXLINE(  87)						_hx_tmp = pixelImage->transparent;
            					}
            					else {
HXLINE(  87)						_hx_tmp = false;
            					}
HXDLIN(  87)					if (_hx_tmp) {
HXLINE(  87)						int location;
HXDLIN(  87)						if (pixelImage->useVirtualPos) {
HXLINE(  87)							location = ::Std_obj::_hx_int(((((( (Float)(q) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x1) - pixelImage->virtualX));
            						}
            						else {
HXLINE(  87)							location = ::Std_obj::_hx_int(( (Float)(((q * pixelImage->width) + x1)) ));
            						}
HXDLIN(  87)						::haxe::io::ArrayBufferViewImpl this1 = pixelImage->image;
HXDLIN(  87)						::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  87)						int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  87)						int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  87)						int this3 = this2;
HXDLIN(  87)						int this4;
HXDLIN(  87)						if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  87)							this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            						}
            						else {
HXLINE(  87)							this4 = this3;
            						}
HXDLIN(  87)						Float a1;
HXDLIN(  87)						int this5 = ((this4 >> 24) & 255);
HXDLIN(  87)						if ((this5 == 0)) {
HXLINE(  87)							a1 = ((Float)0.);
            						}
            						else {
HXLINE(  87)							a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            						}
HXDLIN(  87)						Float r1;
HXDLIN(  87)						int this6 = ((this4 >> 16) & 255);
HXDLIN(  87)						if ((this6 == 0)) {
HXLINE(  87)							r1 = ((Float)0.);
            						}
            						else {
HXLINE(  87)							r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            						}
HXDLIN(  87)						Float g1;
HXDLIN(  87)						int this7 = ((this4 >> 8) & 255);
HXDLIN(  87)						if ((this7 == 0)) {
HXLINE(  87)							g1 = ((Float)0.);
            						}
            						else {
HXLINE(  87)							g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            						}
HXDLIN(  87)						Float b1;
HXDLIN(  87)						int this8 = (this4 & 255);
HXDLIN(  87)						if ((this8 == 0)) {
HXLINE(  87)							b1 = ((Float)0.);
            						}
            						else {
HXLINE(  87)							b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            						}
HXDLIN(  87)						Float a2;
HXDLIN(  87)						int this9 = ((color >> 24) & 255);
HXDLIN(  87)						if ((this9 == 0)) {
HXLINE(  87)							a2 = ((Float)0.);
            						}
            						else {
HXLINE(  87)							a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            						}
HXDLIN(  87)						Float r2;
HXDLIN(  87)						int this10 = ((color >> 16) & 255);
HXDLIN(  87)						if ((this10 == 0)) {
HXLINE(  87)							r2 = ((Float)0.);
            						}
            						else {
HXLINE(  87)							r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            						}
HXDLIN(  87)						Float g2;
HXDLIN(  87)						int this11 = ((color >> 8) & 255);
HXDLIN(  87)						if ((this11 == 0)) {
HXLINE(  87)							g2 = ((Float)0.);
            						}
            						else {
HXLINE(  87)							g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            						}
HXDLIN(  87)						Float b2;
HXDLIN(  87)						int this12 = (color & 255);
HXDLIN(  87)						if ((this12 == 0)) {
HXLINE(  87)							b2 = ((Float)0.);
            						}
            						else {
HXLINE(  87)							b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            						}
HXDLIN(  87)						Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  87)						int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  87)						int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  87)						int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  87)						int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  87)						int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  87)						{
HXLINE(  87)							::haxe::io::ArrayBufferViewImpl this13 = pixelImage->image;
HXDLIN(  87)							int value;
HXDLIN(  87)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  87)								value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            							}
            							else {
HXLINE(  87)								value = blended;
            							}
HXDLIN(  87)							bool _hx_tmp;
HXDLIN(  87)							if ((location >= 0)) {
HXLINE(  87)								_hx_tmp = (location < (this13->byteLength >> 2));
            							}
            							else {
HXLINE(  87)								_hx_tmp = false;
            							}
HXDLIN(  87)							if (_hx_tmp) {
HXLINE(  87)								::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  87)								int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  87)								_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  87)								_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  87)								_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  87)								_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            							}
            						}
            					}
            					else {
HXLINE(  87)						::haxe::io::ArrayBufferViewImpl this1 = pixelImage->image;
HXDLIN(  87)						int index;
HXDLIN(  87)						if (pixelImage->useVirtualPos) {
HXLINE(  87)							index = ::Std_obj::_hx_int(((((( (Float)(q) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + x1) - pixelImage->virtualX));
            						}
            						else {
HXLINE(  87)							index = ::Std_obj::_hx_int(( (Float)(((q * pixelImage->width) + x1)) ));
            						}
HXDLIN(  87)						int value;
HXDLIN(  87)						if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  87)							value = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            						}
            						else {
HXLINE(  87)							value = c1;
            						}
HXDLIN(  87)						bool _hx_tmp;
HXDLIN(  87)						if ((index >= 0)) {
HXLINE(  87)							_hx_tmp = (index < (this1->byteLength >> 2));
            						}
            						else {
HXLINE(  87)							_hx_tmp = false;
            						}
HXDLIN(  87)						if (_hx_tmp) {
HXLINE(  87)							::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  87)							int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  87)							_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  87)							_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  87)							_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  87)							_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            						}
            					}
            				}
HXDLIN(  87)				if ((p > maxX)) {
HXLINE(  87)					p = xx;
HXDLIN(  87)					q = (q + 1);
            				}
HXDLIN(  87)				if ((q > maxY)) {
HXLINE(  87)					goto _hx_goto_7;
            				}
            			}
            			_hx_goto_7:;
HXDLIN(  87)			bool _hx_tmp;
HXDLIN(  87)			if (::hx::IsNotNull( this1->mask )) {
HXLINE(  87)				_hx_tmp = includeMask;
            			}
            			else {
HXLINE(  87)				_hx_tmp = false;
            			}
HXDLIN(  87)			if (_hx_tmp) {
HXLINE(  87)				::pixelimage::ImageStruct this2 = this1->mask;
HXDLIN(  87)				bool transparent = this1->mask->transparent;
HXDLIN(  87)				int p = 0;
HXDLIN(  87)				int xx = p;
HXDLIN(  87)				int q = 0;
HXDLIN(  87)				int wNew = ::Std_obj::_hx_int(( (Float)((this2->width * scaleW)) ));
HXDLIN(  87)				int hNew = ::Std_obj::_hx_int(( (Float)((this2->height * scaleH)) ));
HXDLIN(  87)				int size = (::Std_obj::_hx_int(( (Float)((wNew * hNew)) )) * 4);
HXDLIN(  87)				::haxe::io::ArrayBufferViewImpl this3 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  87)				::haxe::io::ArrayBufferViewImpl this4 = this3;
HXDLIN(  87)				::pixelimage::ImageStruct this5 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,wNew,hNew,this4);
HXDLIN(  87)				::pixelimage::ImageStruct pixelImage1 = this5;
HXDLIN(  87)				int maxX = wNew;
HXDLIN(  87)				int maxY = hNew;
HXDLIN(  87)				while(true){
HXLINE(  87)					int x = ::Std_obj::_hx_int((( (Float)(p) ) / ( (Float)(scaleW) )));
HXDLIN(  87)					int y = ::Std_obj::_hx_int((( (Float)(q) ) / ( (Float)(scaleH) )));
HXDLIN(  87)					::haxe::io::ArrayBufferViewImpl this1 = this2->image;
HXDLIN(  87)					int index;
HXDLIN(  87)					if (this2->useVirtualPos) {
HXLINE(  87)						index = ::Std_obj::_hx_int(((((( (Float)(y) ) - this2->virtualY) * ( (Float)(this2->width) )) + x) - this2->virtualX));
            					}
            					else {
HXLINE(  87)						index = ::Std_obj::_hx_int(( (Float)(((y * this2->width) + x)) ));
            					}
HXDLIN(  87)					::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  87)					int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  87)					int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  87)					int color;
HXDLIN(  87)					if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  87)						color = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            					}
            					else {
HXLINE(  87)						color = c;
            					}
HXDLIN(  87)					{
HXLINE(  87)						p = (p + 1);
HXDLIN(  87)						int x1 = (p - 1);
HXDLIN(  87)						int this3 = color;
HXDLIN(  87)						int c1 = this3;
HXDLIN(  87)						bool _hx_tmp;
HXDLIN(  87)						if ((((c1 >> 24) & 255) < 254)) {
HXLINE(  87)							_hx_tmp = pixelImage1->transparent;
            						}
            						else {
HXLINE(  87)							_hx_tmp = false;
            						}
HXDLIN(  87)						if (_hx_tmp) {
HXLINE(  87)							int location;
HXDLIN(  87)							if (pixelImage1->useVirtualPos) {
HXLINE(  87)								location = ::Std_obj::_hx_int(((((( (Float)(q) ) - pixelImage1->virtualY) * ( (Float)(pixelImage1->width) )) + x1) - pixelImage1->virtualX));
            							}
            							else {
HXLINE(  87)								location = ::Std_obj::_hx_int(( (Float)(((q * pixelImage1->width) + x1)) ));
            							}
HXDLIN(  87)							::haxe::io::ArrayBufferViewImpl this1 = pixelImage1->image;
HXDLIN(  87)							::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  87)							int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  87)							int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  87)							int this3 = this2;
HXDLIN(  87)							int this4;
HXDLIN(  87)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  87)								this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            							}
            							else {
HXLINE(  87)								this4 = this3;
            							}
HXDLIN(  87)							Float a1;
HXDLIN(  87)							int this5 = ((this4 >> 24) & 255);
HXDLIN(  87)							if ((this5 == 0)) {
HXLINE(  87)								a1 = ((Float)0.);
            							}
            							else {
HXLINE(  87)								a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            							}
HXDLIN(  87)							Float r1;
HXDLIN(  87)							int this6 = ((this4 >> 16) & 255);
HXDLIN(  87)							if ((this6 == 0)) {
HXLINE(  87)								r1 = ((Float)0.);
            							}
            							else {
HXLINE(  87)								r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            							}
HXDLIN(  87)							Float g1;
HXDLIN(  87)							int this7 = ((this4 >> 8) & 255);
HXDLIN(  87)							if ((this7 == 0)) {
HXLINE(  87)								g1 = ((Float)0.);
            							}
            							else {
HXLINE(  87)								g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            							}
HXDLIN(  87)							Float b1;
HXDLIN(  87)							int this8 = (this4 & 255);
HXDLIN(  87)							if ((this8 == 0)) {
HXLINE(  87)								b1 = ((Float)0.);
            							}
            							else {
HXLINE(  87)								b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            							}
HXDLIN(  87)							Float a2;
HXDLIN(  87)							int this9 = ((color >> 24) & 255);
HXDLIN(  87)							if ((this9 == 0)) {
HXLINE(  87)								a2 = ((Float)0.);
            							}
            							else {
HXLINE(  87)								a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            							}
HXDLIN(  87)							Float r2;
HXDLIN(  87)							int this10 = ((color >> 16) & 255);
HXDLIN(  87)							if ((this10 == 0)) {
HXLINE(  87)								r2 = ((Float)0.);
            							}
            							else {
HXLINE(  87)								r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            							}
HXDLIN(  87)							Float g2;
HXDLIN(  87)							int this11 = ((color >> 8) & 255);
HXDLIN(  87)							if ((this11 == 0)) {
HXLINE(  87)								g2 = ((Float)0.);
            							}
            							else {
HXLINE(  87)								g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            							}
HXDLIN(  87)							Float b2;
HXDLIN(  87)							int this12 = (color & 255);
HXDLIN(  87)							if ((this12 == 0)) {
HXLINE(  87)								b2 = ((Float)0.);
            							}
            							else {
HXLINE(  87)								b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            							}
HXDLIN(  87)							Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  87)							int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  87)							int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  87)							int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  87)							int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  87)							int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  87)							{
HXLINE(  87)								::haxe::io::ArrayBufferViewImpl this13 = pixelImage1->image;
HXDLIN(  87)								int value;
HXDLIN(  87)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  87)									value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            								}
            								else {
HXLINE(  87)									value = blended;
            								}
HXDLIN(  87)								bool _hx_tmp;
HXDLIN(  87)								if ((location >= 0)) {
HXLINE(  87)									_hx_tmp = (location < (this13->byteLength >> 2));
            								}
            								else {
HXLINE(  87)									_hx_tmp = false;
            								}
HXDLIN(  87)								if (_hx_tmp) {
HXLINE(  87)									::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  87)									int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  87)									_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  87)									_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  87)									_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  87)									_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            								}
            							}
            						}
            						else {
HXLINE(  87)							::haxe::io::ArrayBufferViewImpl this1 = pixelImage1->image;
HXDLIN(  87)							int index;
HXDLIN(  87)							if (pixelImage1->useVirtualPos) {
HXLINE(  87)								index = ::Std_obj::_hx_int(((((( (Float)(q) ) - pixelImage1->virtualY) * ( (Float)(pixelImage1->width) )) + x1) - pixelImage1->virtualX));
            							}
            							else {
HXLINE(  87)								index = ::Std_obj::_hx_int(( (Float)(((q * pixelImage1->width) + x1)) ));
            							}
HXDLIN(  87)							int value;
HXDLIN(  87)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  87)								value = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            							}
            							else {
HXLINE(  87)								value = c1;
            							}
HXDLIN(  87)							bool _hx_tmp;
HXDLIN(  87)							if ((index >= 0)) {
HXLINE(  87)								_hx_tmp = (index < (this1->byteLength >> 2));
            							}
            							else {
HXLINE(  87)								_hx_tmp = false;
            							}
HXDLIN(  87)							if (_hx_tmp) {
HXLINE(  87)								::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  87)								int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  87)								_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  87)								_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  87)								_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  87)								_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            							}
            						}
            					}
HXDLIN(  87)					if ((p > maxX)) {
HXLINE(  87)						p = xx;
HXDLIN(  87)						q = (q + 1);
            					}
HXDLIN(  87)					if ((q > maxY)) {
HXLINE(  87)						goto _hx_goto_8;
            					}
            				}
            				_hx_goto_8:;
HXDLIN(  87)				bool _hx_tmp;
HXDLIN(  87)				if (::hx::IsNotNull( this2->mask )) {
HXLINE(  87)					_hx_tmp = includeMask;
            				}
            				else {
HXLINE(  87)					_hx_tmp = false;
            				}
HXDLIN(  87)				if (_hx_tmp) {
HXLINE(  87)					::pixelimage::ImageStruct v = ::pixelimage::_Pixelimage::Pixelimage_Impl__obj::scaleUpInt(this2->mask,scaleW,scaleH,this2->mask->transparent,includeMask);
HXDLIN(  87)					pixelImage1->useMask = true;
HXDLIN(  87)					pixelImage1->mask = v;
            				}
HXDLIN(  87)				::pixelimage::ImageStruct v = pixelImage1;
HXDLIN(  87)				pixelImage->useMask = true;
HXDLIN(  87)				pixelImage->mask = v;
            			}
HXDLIN(  87)			this->tileImageStroke = pixelImage;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(PatternStroke_obj,buildPatternTemplates,(void))


::hx::ObjectPtr< PatternStroke_obj > PatternStroke_obj::__new(::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< int >  __o_strokeColor,::hx::Null< Float >  __o_strokeWidth,::Array< ::String > strokeDashGapArray,::hx::Null< int >  __o_strokeColor0,::hx::Null< int >  __o_strokeColor1,::Array< bool > strokePatternFill, ::Dynamic strokePatternWidth, ::Dynamic strokePatternHeight,::hx::Null< bool >  __o_strokePatternAcross,::hx::Null< int >  __o_strokePatternScale) {
	::hx::ObjectPtr< PatternStroke_obj > __this = new PatternStroke_obj();
	__this->__construct(__o_opacity,__o_visibility,__o_strokeColor,__o_strokeWidth,strokeDashGapArray,__o_strokeColor0,__o_strokeColor1,strokePatternFill,strokePatternWidth,strokePatternHeight,__o_strokePatternAcross,__o_strokePatternScale);
	return __this;
}

::hx::ObjectPtr< PatternStroke_obj > PatternStroke_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< int >  __o_strokeColor,::hx::Null< Float >  __o_strokeWidth,::Array< ::String > strokeDashGapArray,::hx::Null< int >  __o_strokeColor0,::hx::Null< int >  __o_strokeColor1,::Array< bool > strokePatternFill, ::Dynamic strokePatternWidth, ::Dynamic strokePatternHeight,::hx::Null< bool >  __o_strokePatternAcross,::hx::Null< int >  __o_strokePatternScale) {
	PatternStroke_obj *__this = (PatternStroke_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PatternStroke_obj), true, "pixelimage.triangleGML.coreShape.PatternStroke"));
	*(void **)__this = PatternStroke_obj::_hx_vtable;
	__this->__construct(__o_opacity,__o_visibility,__o_strokeColor,__o_strokeWidth,strokeDashGapArray,__o_strokeColor0,__o_strokeColor1,strokePatternFill,strokePatternWidth,strokePatternHeight,__o_strokePatternAcross,__o_strokePatternScale);
	return __this;
}

PatternStroke_obj::PatternStroke_obj()
{
}

void PatternStroke_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PatternStroke);
	HX_MARK_MEMBER_NAME(strokeColor0,"strokeColor0");
	HX_MARK_MEMBER_NAME(strokeColor1,"strokeColor1");
	HX_MARK_MEMBER_NAME(strokePatternFill,"strokePatternFill");
	HX_MARK_MEMBER_NAME(strokePatternWidth,"strokePatternWidth");
	HX_MARK_MEMBER_NAME(strokePatternHeight,"strokePatternHeight");
	HX_MARK_MEMBER_NAME(strokePatternAcross,"strokePatternAcross");
	HX_MARK_MEMBER_NAME(strokePatternScale,"strokePatternScale");
	HX_MARK_MEMBER_NAME(tileImageStroke,"tileImageStroke");
	::pixelimage::triangleGML::coreShape::BasicShape_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PatternStroke_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(strokeColor0,"strokeColor0");
	HX_VISIT_MEMBER_NAME(strokeColor1,"strokeColor1");
	HX_VISIT_MEMBER_NAME(strokePatternFill,"strokePatternFill");
	HX_VISIT_MEMBER_NAME(strokePatternWidth,"strokePatternWidth");
	HX_VISIT_MEMBER_NAME(strokePatternHeight,"strokePatternHeight");
	HX_VISIT_MEMBER_NAME(strokePatternAcross,"strokePatternAcross");
	HX_VISIT_MEMBER_NAME(strokePatternScale,"strokePatternScale");
	HX_VISIT_MEMBER_NAME(tileImageStroke,"tileImageStroke");
	::pixelimage::triangleGML::coreShape::BasicShape_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PatternStroke_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { return ::hx::Val( render_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"strokeColor0") ) { return ::hx::Val( strokeColor0 ); }
		if (HX_FIELD_EQ(inName,"strokeColor1") ) { return ::hx::Val( strokeColor1 ); }
		if (HX_FIELD_EQ(inName,"setParameter") ) { return ::hx::Val( setParameter_dyn() ); }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"tileImageStroke") ) { return ::hx::Val( tileImageStroke ); }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"strokePatternFill") ) { return ::hx::Val( strokePatternFill ); }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"strokePatternWidth") ) { return ::hx::Val( strokePatternWidth ); }
		if (HX_FIELD_EQ(inName,"strokePatternScale") ) { return ::hx::Val( strokePatternScale ); }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"strokePatternHeight") ) { return ::hx::Val( strokePatternHeight ); }
		if (HX_FIELD_EQ(inName,"strokePatternAcross") ) { return ::hx::Val( strokePatternAcross ); }
		break;
	case 21:
		if (HX_FIELD_EQ(inName,"buildPatternTemplates") ) { return ::hx::Val( buildPatternTemplates_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val PatternStroke_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 12:
		if (HX_FIELD_EQ(inName,"strokeColor0") ) { strokeColor0=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"strokeColor1") ) { strokeColor1=inValue.Cast< int >(); return inValue; }
		break;
	case 15:
		if (HX_FIELD_EQ(inName,"tileImageStroke") ) { tileImageStroke=inValue.Cast< ::pixelimage::ImageStruct >(); return inValue; }
		break;
	case 17:
		if (HX_FIELD_EQ(inName,"strokePatternFill") ) { strokePatternFill=inValue.Cast< ::Array< bool > >(); return inValue; }
		break;
	case 18:
		if (HX_FIELD_EQ(inName,"strokePatternWidth") ) { strokePatternWidth=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"strokePatternScale") ) { strokePatternScale=inValue.Cast< int >(); return inValue; }
		break;
	case 19:
		if (HX_FIELD_EQ(inName,"strokePatternHeight") ) { strokePatternHeight=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"strokePatternAcross") ) { strokePatternAcross=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PatternStroke_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("strokeColor0",45,87,c5,50));
	outFields->push(HX_("strokeColor1",46,87,c5,50));
	outFields->push(HX_("strokePatternFill",1b,f8,d0,11));
	outFields->push(HX_("strokePatternWidth",6e,f1,d1,4e));
	outFields->push(HX_("strokePatternHeight",7f,c7,30,5f));
	outFields->push(HX_("strokePatternAcross",17,1f,dd,71));
	outFields->push(HX_("strokePatternScale",f2,09,3e,fd));
	outFields->push(HX_("tileImageStroke",e5,1c,7e,f6));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PatternStroke_obj_sMemberStorageInfo[] = {
	{::hx::fsInt,(int)offsetof(PatternStroke_obj,strokeColor0),HX_("strokeColor0",45,87,c5,50)},
	{::hx::fsInt,(int)offsetof(PatternStroke_obj,strokeColor1),HX_("strokeColor1",46,87,c5,50)},
	{::hx::fsObject /* ::Array< bool > */ ,(int)offsetof(PatternStroke_obj,strokePatternFill),HX_("strokePatternFill",1b,f8,d0,11)},
	{::hx::fsInt,(int)offsetof(PatternStroke_obj,strokePatternWidth),HX_("strokePatternWidth",6e,f1,d1,4e)},
	{::hx::fsInt,(int)offsetof(PatternStroke_obj,strokePatternHeight),HX_("strokePatternHeight",7f,c7,30,5f)},
	{::hx::fsBool,(int)offsetof(PatternStroke_obj,strokePatternAcross),HX_("strokePatternAcross",17,1f,dd,71)},
	{::hx::fsInt,(int)offsetof(PatternStroke_obj,strokePatternScale),HX_("strokePatternScale",f2,09,3e,fd)},
	{::hx::fsObject /* ::pixelimage::ImageStruct */ ,(int)offsetof(PatternStroke_obj,tileImageStroke),HX_("tileImageStroke",e5,1c,7e,f6)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *PatternStroke_obj_sStaticStorageInfo = 0;
#endif

static ::String PatternStroke_obj_sMemberFields[] = {
	HX_("strokeColor0",45,87,c5,50),
	HX_("strokeColor1",46,87,c5,50),
	HX_("strokePatternFill",1b,f8,d0,11),
	HX_("strokePatternWidth",6e,f1,d1,4e),
	HX_("strokePatternHeight",7f,c7,30,5f),
	HX_("strokePatternAcross",17,1f,dd,71),
	HX_("strokePatternScale",f2,09,3e,fd),
	HX_("tileImageStroke",e5,1c,7e,f6),
	HX_("setParameter",a7,f5,ff,6c),
	HX_("render",56,6b,29,05),
	HX_("buildPatternTemplates",d7,4d,8f,f7),
	::String(null()) };

::hx::Class PatternStroke_obj::__mClass;

void PatternStroke_obj::__register()
{
	PatternStroke_obj _hx_dummy;
	PatternStroke_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pixelimage.triangleGML.coreShape.PatternStroke",33,b1,41,1d);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PatternStroke_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PatternStroke_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PatternStroke_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PatternStroke_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pixelimage
} // end namespace triangleGML
} // end namespace coreShape
