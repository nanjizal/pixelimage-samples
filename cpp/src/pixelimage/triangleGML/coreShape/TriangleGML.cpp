// Generated by Haxe 4.3.0-rc.1+
#include <hxcpp.h>

#ifndef INCLUDED_Xml
#include <Xml.h>
#endif
#ifndef INCLUDED__Xml_XmlType_Impl_
#include <_Xml/XmlType_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_pixelimage_ImageStruct
#include <pixelimage/ImageStruct.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_ShapeInterface
#include <pixelimage/triangleGML/coreShape/ShapeInterface.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_TriangleGML
#include <pixelimage/triangleGML/coreShape/TriangleGML.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape__TriangleGML_TriangleGML_Fields_
#include <pixelimage/triangleGML/coreShape/_TriangleGML/TriangleGML_Fields_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d6a5a5b76a7d5faa_23_new,"pixelimage.triangleGML.coreShape.TriangleGML","new",0xd169995b,"pixelimage.triangleGML.coreShape.TriangleGML.new","pixelimage/triangleGML/coreShape/TriangleGML.hx",23,0xc65b1db8)
HX_LOCAL_STACK_FRAME(_hx_pos_d6a5a5b76a7d5faa_46_process,"pixelimage.triangleGML.coreShape.TriangleGML","process",0x1a7804ea,"pixelimage.triangleGML.coreShape.TriangleGML.process","pixelimage/triangleGML/coreShape/TriangleGML.hx",46,0xc65b1db8)
HX_LOCAL_STACK_FRAME(_hx_pos_d6a5a5b76a7d5faa_49_processShape,"pixelimage.triangleGML.coreShape.TriangleGML","processShape",0xfec63dd7,"pixelimage.triangleGML.coreShape.TriangleGML.processShape","pixelimage/triangleGML/coreShape/TriangleGML.hx",49,0xc65b1db8)
namespace pixelimage{
namespace triangleGML{
namespace coreShape{

void TriangleGML_obj::__construct(::pixelimage::ImageStruct pixelShape,::Xml xml,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y){
            		Float x = __o_x.Default(((Float)0.));
            		Float y = __o_y.Default(((Float)0.));
            	HX_STACKFRAME(&_hx_pos_d6a5a5b76a7d5faa_23_new)
HXLINE(  24)		this->pixelShape = pixelShape;
HXLINE(  25)		this->xml = xml;
HXLINE(  26)		this->offX = x;
HXLINE(  27)		this->offY = y;
HXLINE(  28)		this->process();
            	}

Dynamic TriangleGML_obj::__CreateEmpty() { return new TriangleGML_obj; }

void *TriangleGML_obj::_hx_vtable = 0;

Dynamic TriangleGML_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TriangleGML_obj > _hx_result = new TriangleGML_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3]);
	return _hx_result;
}

bool TriangleGML_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x44e885e5;
}

void TriangleGML_obj::process(){
            	HX_STACKFRAME(&_hx_pos_d6a5a5b76a7d5faa_46_process)
HXDLIN(  46)		 ::Dynamic e = this->xml->elements();
HXDLIN(  46)		while(( (bool)(e->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXDLIN(  46)			::Xml e1 = ( (::Xml)(e->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXDLIN(  46)			this->processShape(e1);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(TriangleGML_obj,process,(void))

void TriangleGML_obj::processShape(::Xml x){
            	HX_STACKFRAME(&_hx_pos_d6a5a5b76a7d5faa_49_processShape)
HXLINE(  50)		if ((x->nodeType != ::Xml_obj::Element)) {
HXLINE(  50)			HX_STACK_DO_THROW((HX_("Bad node type, expected Element but found ",d8,90,8b,bb) + ::_Xml::XmlType_Impl__obj::toString(x->nodeType)));
            		}
HXDLIN(  50)		::String name = x->nodeName;
HXLINE(  51)		::Dynamic s = ::pixelimage::triangleGML::coreShape::_TriangleGML::TriangleGML_Fields__obj::getTriangleGML(name);
HXLINE(  52)		{
HXLINE(  52)			 ::Dynamic att = x->attributes();
HXDLIN(  52)			while(( (bool)(att->__Field(HX_("hasNext",6d,a5,46,18),::hx::paccDynamic)()) )){
HXLINE(  52)				::String att1 = ( (::String)(att->__Field(HX_("next",f3,84,02,49),::hx::paccDynamic)()) );
HXLINE(  53)				 ::Dynamic _hx_tmp = ::haxe::Log_obj::trace;
HXDLIN(  53)				::String _hx_tmp1 = ((att1 + HX_(" ",20,00,00,00)) + x->get(att1));
HXDLIN(  53)				_hx_tmp(_hx_tmp1,::hx::SourceInfo(HX_("pixelimage/triangleGML/coreShape/TriangleGML.hx",b8,1d,5b,c6),53,HX_("pixelimage.triangleGML.coreShape.TriangleGML",e9,4f,fd,9f),HX_("processShape",32,7e,d1,63)));
HXLINE(  54)				::pixelimage::triangleGML::coreShape::ShapeInterface_obj::setParameter(s,att1,x->get(att1));
            			}
            		}
HXLINE(  56)		bool _hx_tmp;
HXDLIN(  56)		if ((this->offX == ((Float)0.))) {
HXLINE(  56)			_hx_tmp = (this->offY != ((Float)0.));
            		}
            		else {
HXLINE(  56)			_hx_tmp = true;
            		}
HXDLIN(  56)		if (_hx_tmp) {
HXLINE(  57)			::pixelimage::triangleGML::coreShape::ShapeInterface_obj::translate(s,this->offX,this->offY);
            		}
HXLINE(  59)		::pixelimage::triangleGML::coreShape::ShapeInterface_obj::render(s,this->pixelShape);
HXLINE(  60)		if (::hx::IsNull( this->shapes )) {
HXLINE(  60)			this->shapes = ::Array_obj< ::Dynamic>::__new(0);
            		}
HXLINE(  61)		this->shapes->push(s);
            	}


HX_DEFINE_DYNAMIC_FUNC1(TriangleGML_obj,processShape,(void))


::hx::ObjectPtr< TriangleGML_obj > TriangleGML_obj::__new(::pixelimage::ImageStruct pixelShape,::Xml xml,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y) {
	::hx::ObjectPtr< TriangleGML_obj > __this = new TriangleGML_obj();
	__this->__construct(pixelShape,xml,__o_x,__o_y);
	return __this;
}

::hx::ObjectPtr< TriangleGML_obj > TriangleGML_obj::__alloc(::hx::Ctx *_hx_ctx,::pixelimage::ImageStruct pixelShape,::Xml xml,::hx::Null< Float >  __o_x,::hx::Null< Float >  __o_y) {
	TriangleGML_obj *__this = (TriangleGML_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TriangleGML_obj), true, "pixelimage.triangleGML.coreShape.TriangleGML"));
	*(void **)__this = TriangleGML_obj::_hx_vtable;
	__this->__construct(pixelShape,xml,__o_x,__o_y);
	return __this;
}

TriangleGML_obj::TriangleGML_obj()
{
}

void TriangleGML_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(TriangleGML);
	HX_MARK_MEMBER_NAME(pixelShape,"pixelShape");
	HX_MARK_MEMBER_NAME(xml,"xml");
	HX_MARK_MEMBER_NAME(offX,"offX");
	HX_MARK_MEMBER_NAME(offY,"offY");
	HX_MARK_MEMBER_NAME(shapes,"shapes");
	HX_MARK_END_CLASS();
}

void TriangleGML_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(pixelShape,"pixelShape");
	HX_VISIT_MEMBER_NAME(xml,"xml");
	HX_VISIT_MEMBER_NAME(offX,"offX");
	HX_VISIT_MEMBER_NAME(offY,"offY");
	HX_VISIT_MEMBER_NAME(shapes,"shapes");
}

::hx::Val TriangleGML_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"xml") ) { return ::hx::Val( xml ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"offX") ) { return ::hx::Val( offX ); }
		if (HX_FIELD_EQ(inName,"offY") ) { return ::hx::Val( offY ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"shapes") ) { return ::hx::Val( shapes ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"process") ) { return ::hx::Val( process_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pixelShape") ) { return ::hx::Val( pixelShape ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"processShape") ) { return ::hx::Val( processShape_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val TriangleGML_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"xml") ) { xml=inValue.Cast< ::Xml >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"offX") ) { offX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"offY") ) { offY=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"shapes") ) { shapes=inValue.Cast< ::Array< ::Dynamic> >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"pixelShape") ) { pixelShape=inValue.Cast< ::pixelimage::ImageStruct >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TriangleGML_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("pixelShape",bb,26,0b,1b));
	outFields->push(HX_("xml",d7,6d,5b,00));
	outFields->push(HX_("offX",09,6e,ac,49));
	outFields->push(HX_("offY",0a,6e,ac,49));
	outFields->push(HX_("shapes",32,da,29,1d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TriangleGML_obj_sMemberStorageInfo[] = {
	{::hx::fsObject /* ::pixelimage::ImageStruct */ ,(int)offsetof(TriangleGML_obj,pixelShape),HX_("pixelShape",bb,26,0b,1b)},
	{::hx::fsObject /* ::Xml */ ,(int)offsetof(TriangleGML_obj,xml),HX_("xml",d7,6d,5b,00)},
	{::hx::fsFloat,(int)offsetof(TriangleGML_obj,offX),HX_("offX",09,6e,ac,49)},
	{::hx::fsFloat,(int)offsetof(TriangleGML_obj,offY),HX_("offY",0a,6e,ac,49)},
	{::hx::fsObject /* ::Array< ::Dynamic> */ ,(int)offsetof(TriangleGML_obj,shapes),HX_("shapes",32,da,29,1d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *TriangleGML_obj_sStaticStorageInfo = 0;
#endif

static ::String TriangleGML_obj_sMemberFields[] = {
	HX_("pixelShape",bb,26,0b,1b),
	HX_("xml",d7,6d,5b,00),
	HX_("offX",09,6e,ac,49),
	HX_("offY",0a,6e,ac,49),
	HX_("shapes",32,da,29,1d),
	HX_("process",6f,a2,4a,f1),
	HX_("processShape",32,7e,d1,63),
	::String(null()) };

::hx::Class TriangleGML_obj::__mClass;

void TriangleGML_obj::__register()
{
	TriangleGML_obj _hx_dummy;
	TriangleGML_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pixelimage.triangleGML.coreShape.TriangleGML",e9,4f,fd,9f);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TriangleGML_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TriangleGML_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TriangleGML_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TriangleGML_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pixelimage
} // end namespace triangleGML
} // end namespace coreShape
