// Generated by Haxe 4.3.0-rc.1+
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_ArrayBufferViewImpl
#include <haxe/io/ArrayBufferViewImpl.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_pixelimage_ImageStruct
#include <pixelimage/ImageStruct.h>
#endif
#ifndef INCLUDED_pixelimage__Endian_Endian_Fields_
#include <pixelimage/_Endian/Endian_Fields_.h>
#endif
#ifndef INCLUDED_pixelimage_algo_HitQuad
#include <pixelimage/algo/HitQuad.h>
#endif
#ifndef INCLUDED_pixelimage_algo_HitTri
#include <pixelimage/algo/HitTri.h>
#endif
#ifndef INCLUDED_pixelimage_algo_IhitObj
#include <pixelimage/algo/IhitObj.h>
#endif
#ifndef INCLUDED_pixelimage_iter_IntIterStart
#include <pixelimage/iter/IntIterStart.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_contour_QuintShape
#include <pixelimage/triangleGML/contour/QuintShape.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_BasicShape
#include <pixelimage/triangleGML/coreShape/BasicShape.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_GroupShape
#include <pixelimage/triangleGML/coreShape/GroupShape.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_ShapeInterface
#include <pixelimage/triangleGML/coreShape/ShapeInterface.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_3b9d7c385a3bcc10_29_new,"pixelimage.triangleGML.contour.QuintShape","new",0x00e05b45,"pixelimage.triangleGML.contour.QuintShape.new","pixelimage/triangleGML/contour/QuintShape.hx",29,0x0a68ee68)
HX_LOCAL_STACK_FRAME(_hx_pos_3b9d7c385a3bcc10_42_setParameter,"pixelimage.triangleGML.contour.QuintShape","setParameter",0x222f6622,"pixelimage.triangleGML.contour.QuintShape.setParameter","pixelimage/triangleGML/contour/QuintShape.hx",42,0x0a68ee68)
HX_LOCAL_STACK_FRAME(_hx_pos_3b9d7c385a3bcc10_65_render,"pixelimage.triangleGML.contour.QuintShape","render",0xb2ecfd91,"pixelimage.triangleGML.contour.QuintShape.render","pixelimage/triangleGML/contour/QuintShape.hx",65,0x0a68ee68)
namespace pixelimage{
namespace triangleGML{
namespace contour{

void QuintShape_obj::__construct(::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< int >  __o_strokeColor,::hx::Null< Float >  __o_aX,::hx::Null< Float >  __o_aY,::hx::Null< Float >  __o_bX,::hx::Null< Float >  __o_bY,::hx::Null< Float >  __o_cX,::hx::Null< Float >  __o_cY,::hx::Null< Float >  __o_dX,::hx::Null< Float >  __o_dY,::hx::Null< Float >  __o_softC){
            		Float opacity = __o_opacity.Default(((Float)1.));
            		bool visibility = __o_visibility.Default(true);
            		int strokeColor = __o_strokeColor.Default(-1048576);
            		Float aX = __o_aX.Default(((Float)0.));
            		Float aY = __o_aY.Default(((Float)0.));
            		Float bX = __o_bX.Default(((Float)1.));
            		Float bY = __o_bY.Default(((Float)0.));
            		Float cX = __o_cX.Default(((Float)1.));
            		Float cY = __o_cY.Default(((Float)1.));
            		Float dX = __o_dX.Default(((Float)0.));
            		Float dY = __o_dY.Default(((Float)1.));
            		Float softC = __o_softC.Default(((Float)10.));
            	HX_STACKFRAME(&_hx_pos_3b9d7c385a3bcc10_29_new)
HXLINE(  30)		super::__construct(opacity,visibility,strokeColor,((Float)0.),null());
HXLINE(  31)		this->aX = aX;
HXLINE(  32)		this->aY = aY;
HXLINE(  33)		this->bX = bX;
HXLINE(  34)		this->bY = bY;
HXLINE(  35)		this->cX = cX;
HXLINE(  36)		this->cY = cY;
HXLINE(  37)		this->dX = dX;
HXLINE(  38)		this->dY = dY;
HXLINE(  39)		this->softC = softC;
            	}

Dynamic QuintShape_obj::__CreateEmpty() { return new QuintShape_obj; }

void *QuintShape_obj::_hx_vtable = 0;

Dynamic QuintShape_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< QuintShape_obj > _hx_result = new QuintShape_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10],inArgs[11]);
	return _hx_result;
}

bool QuintShape_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2091632c) {
		if (inClassId<=(int)0x208e3107) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x208e3107;
		} else {
			return inClassId==(int)0x2091632c;
		}
	} else {
		return inClassId==(int)0x24e92cfb;
	}
}

void QuintShape_obj::setParameter(::String name,::String value){
            	HX_STACKFRAME(&_hx_pos_3b9d7c385a3bcc10_42_setParameter)
HXDLIN(  42)		::String _hx_switch_0 = name;
            		if (  (_hx_switch_0==HX_("aX",d7,54,00,00)) ){
HXLINE(  44)			this->aX = ::Std_obj::parseFloat(value);
HXDLIN(  44)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("aY",d8,54,00,00)) ){
HXLINE(  46)			this->aY = ::Std_obj::parseFloat(value);
HXDLIN(  46)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("bX",b6,55,00,00)) ){
HXLINE(  48)			this->bX = ::Std_obj::parseFloat(value);
HXDLIN(  48)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("bY",b7,55,00,00)) ){
HXLINE(  50)			this->bY = ::Std_obj::parseFloat(value);
HXDLIN(  50)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("cX",95,56,00,00)) ){
HXLINE(  52)			this->cX = ::Std_obj::parseFloat(value);
HXDLIN(  52)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("cY",96,56,00,00)) ){
HXLINE(  54)			this->cY = ::Std_obj::parseFloat(value);
HXDLIN(  54)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("dX",74,57,00,00)) ){
HXLINE(  56)			this->dX = ::Std_obj::parseFloat(value);
HXDLIN(  56)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("dY",75,57,00,00)) ){
HXLINE(  58)			this->dY = ::Std_obj::parseFloat(value);
HXDLIN(  58)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("softC",19,30,c1,80)) ){
HXLINE(  60)			this->softC = ::Std_obj::parseFloat(value);
HXDLIN(  60)			goto _hx_goto_1;
            		}
            		/* default */{
HXLINE(  62)			this->super::setParameter(name,value);
            		}
            		_hx_goto_1:;
            	}


::pixelimage::ImageStruct QuintShape_obj::render(::pixelimage::ImageStruct pixelShape){
            	HX_GC_STACKFRAME(&_hx_pos_3b9d7c385a3bcc10_65_render)
HXLINE(  66)		{
HXLINE(  66)			Float ax = (this->aX + this->offX);
HXDLIN(  66)			Float ay = (this->aY + this->offY);
HXDLIN(  66)			Float bx = (this->bX + this->offX);
HXDLIN(  66)			Float by = (this->bY + this->offY);
HXDLIN(  66)			Float cx = (this->cX + this->offX);
HXDLIN(  66)			Float cy = (this->cY + this->offY);
HXDLIN(  66)			Float dx = (this->dX + this->offX);
HXDLIN(  66)			Float dy = (this->dY + this->offY);
HXDLIN(  66)			int color = this->strokeColor;
HXDLIN(  66)			Float softC = this->softC;
HXDLIN(  66)			bool hasHit = false;
HXDLIN(  66)			{
HXLINE(  66)				Float ex = ((((ax + bx) + cx) + dx) / ( (Float)(4) ));
HXDLIN(  66)				Float ey = ((((ay + by) + cy) + dy) / ( (Float)(4) ));
HXDLIN(  66)				{
HXLINE(  66)					bool hasUndo = false;
HXDLIN(  66)					int aA = ((color >> 24) & 255);
HXDLIN(  66)					int rA = ((color >> 16) & 255);
HXDLIN(  66)					int gA = ((color >> 8) & 255);
HXDLIN(  66)					int bA = (color & 255);
HXDLIN(  66)					Float bcx = (ax - bx);
HXDLIN(  66)					Float bcy = (ay - by);
HXDLIN(  66)					Float acx = (ex - bx);
HXDLIN(  66)					Float acy = (ey - by);
HXDLIN(  66)					Float dot11 = ((bcx * bcx) + (bcy * bcy));
HXDLIN(  66)					Float dot12 = ((bcx * acx) + (bcy * acy));
HXDLIN(  66)					Float dot22 = ((acx * acx) + (acy * acy));
HXDLIN(  66)					Float denom1 = (( (Float)(1) ) / ((dot11 * dot22) - (dot12 * dot12)));
HXDLIN(  66)					::pixelimage::iter::IntIterStart xIter3;
HXDLIN(  66)					if ((ex > ax)) {
HXLINE(  66)						if ((ex > bx)) {
HXLINE(  66)							int min;
HXDLIN(  66)							if ((ax > bx)) {
HXLINE(  66)								min = ::Math_obj::floor(bx);
            							}
            							else {
HXLINE(  66)								min = ::Math_obj::floor(ax);
            							}
HXDLIN(  66)							int ii_min = min;
HXDLIN(  66)							int ii_max = ::Math_obj::ceil(ex);
HXDLIN(  66)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)							xIter3 = this1;
            						}
            						else {
HXLINE(  66)							int ii_min = ::Math_obj::floor(ax);
HXDLIN(  66)							int ii_max = ::Math_obj::ceil(bx);
HXDLIN(  66)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)							xIter3 = this1;
            						}
            					}
            					else {
HXLINE(  66)						if ((ax > bx)) {
HXLINE(  66)							int min;
HXDLIN(  66)							if ((ex > bx)) {
HXLINE(  66)								min = ::Math_obj::floor(bx);
            							}
            							else {
HXLINE(  66)								min = ::Math_obj::ceil(ex);
            							}
HXDLIN(  66)							int ii_min = min;
HXDLIN(  66)							int ii_max = ::Math_obj::ceil(ax);
HXDLIN(  66)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)							xIter3 = this1;
            						}
            						else {
HXLINE(  66)							int ii_min = ::Math_obj::floor(ex);
HXDLIN(  66)							int ii_max = ::Math_obj::ceil(bx);
HXDLIN(  66)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)							xIter3 = this1;
            						}
            					}
HXDLIN(  66)					::pixelimage::iter::IntIterStart yIter3;
HXDLIN(  66)					if ((ey > ay)) {
HXLINE(  66)						if ((ey > by)) {
HXLINE(  66)							int min;
HXDLIN(  66)							if ((ay > by)) {
HXLINE(  66)								min = ::Math_obj::floor(by);
            							}
            							else {
HXLINE(  66)								min = ::Math_obj::floor(ay);
            							}
HXDLIN(  66)							int ii_min = min;
HXDLIN(  66)							int ii_max = ::Math_obj::ceil(ey);
HXDLIN(  66)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)							yIter3 = this1;
            						}
            						else {
HXLINE(  66)							int ii_min = ::Math_obj::floor(ay);
HXDLIN(  66)							int ii_max = ::Math_obj::ceil(by);
HXDLIN(  66)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)							yIter3 = this1;
            						}
            					}
            					else {
HXLINE(  66)						if ((ay > by)) {
HXLINE(  66)							int min;
HXDLIN(  66)							if ((ey > by)) {
HXLINE(  66)								min = ::Math_obj::floor(by);
            							}
            							else {
HXLINE(  66)								min = ::Math_obj::ceil(ey);
            							}
HXDLIN(  66)							int ii_min = min;
HXDLIN(  66)							int ii_max = ::Math_obj::ceil(ay);
HXDLIN(  66)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)							yIter3 = this1;
            						}
            						else {
HXLINE(  66)							int ii_min = ::Math_obj::floor(ey);
HXDLIN(  66)							int ii_max = ::Math_obj::ceil(by);
HXDLIN(  66)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)							yIter3 = this1;
            						}
            					}
HXDLIN(  66)					::pixelimage::ImageStruct undoImage = null();
HXDLIN(  66)					if (hasUndo) {
HXLINE(  66)						int w = ((xIter3->max - xIter3->start) + 1);
HXDLIN(  66)						int h = ((yIter3->max - yIter3->start) + 1);
HXDLIN(  66)						int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN(  66)						::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  66)						::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN(  66)						::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN(  66)						undoImage = this3;
HXDLIN(  66)						{
HXLINE(  66)							int rectLeft = xIter3->start;
HXDLIN(  66)							int rectTop = yIter3->start;
HXDLIN(  66)							int rectRight = xIter3->max;
HXDLIN(  66)							bool forceClear = false;
HXDLIN(  66)							{
HXLINE(  66)								int _g = rectTop;
HXDLIN(  66)								int _g1 = yIter3->max;
HXDLIN(  66)								while((_g < _g1)){
HXLINE(  66)									_g = (_g + 1);
HXDLIN(  66)									int dy = (_g - 1);
HXDLIN(  66)									{
HXLINE(  66)										int _g1 = rectLeft;
HXDLIN(  66)										int _g2 = rectRight;
HXDLIN(  66)										while((_g1 < _g2)){
HXLINE(  66)											_g1 = (_g1 + 1);
HXDLIN(  66)											int dx = (_g1 - 1);
HXDLIN(  66)											::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  66)											int index;
HXDLIN(  66)											if (pixelShape->useVirtualPos) {
HXLINE(  66)												index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + dx) - pixelShape->virtualX));
            											}
            											else {
HXLINE(  66)												index = ::Std_obj::_hx_int(( (Float)(((dy * pixelShape->width) + dx)) ));
            											}
HXDLIN(  66)											::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)											int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  66)											int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  66)											int col;
HXDLIN(  66)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)												col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            											}
            											else {
HXLINE(  66)												col = c;
            											}
HXDLIN(  66)											bool _hx_tmp;
HXDLIN(  66)											if (pixelShape->useMask) {
HXLINE(  66)												_hx_tmp = ::hx::IsNotNull( pixelShape->mask );
            											}
            											else {
HXLINE(  66)												_hx_tmp = false;
            											}
HXDLIN(  66)											if (_hx_tmp) {
HXLINE(  66)												::pixelimage::ImageStruct this1 = pixelShape->mask;
HXDLIN(  66)												::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  66)												int index;
HXDLIN(  66)												if (this1->useVirtualPos) {
HXLINE(  66)													index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            												}
            												else {
HXLINE(  66)													index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            												}
HXDLIN(  66)												::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  66)												int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  66)												int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  66)												int v;
HXDLIN(  66)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)													v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE(  66)													v = c;
            												}
HXDLIN(  66)												int this3 = v;
HXDLIN(  66)												int maskPixel = this3;
HXDLIN(  66)												int this4 = col;
HXDLIN(  66)												int this5 = this4;
HXDLIN(  66)												if ((maskPixel == 0)) {
HXLINE(  66)													int this1 = this5;
HXDLIN(  66)													col = this1;
            												}
            												else {
HXLINE(  66)													Float m0;
HXDLIN(  66)													int this1 = ((maskPixel >> 24) & 255);
HXDLIN(  66)													if ((this1 == 0)) {
HXLINE(  66)														m0 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float m1;
HXDLIN(  66)													int this2 = ((maskPixel >> 16) & 255);
HXDLIN(  66)													if ((this2 == 0)) {
HXLINE(  66)														m1 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float m2;
HXDLIN(  66)													int this3 = ((maskPixel >> 8) & 255);
HXDLIN(  66)													if ((this3 == 0)) {
HXLINE(  66)														m2 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float m3;
HXDLIN(  66)													int this4 = (maskPixel & 255);
HXDLIN(  66)													if ((this4 == 0)) {
HXLINE(  66)														m3 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN(  66)													int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN(  66)													int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN(  66)													int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN(  66)													col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            												}
            											}
HXDLIN(  66)											if ((col != 0)) {
HXLINE(  66)												int x = (dx - rectLeft);
HXDLIN(  66)												int y = (dy - rectTop);
HXDLIN(  66)												int this1 = col;
HXDLIN(  66)												int c = this1;
HXDLIN(  66)												bool _hx_tmp;
HXDLIN(  66)												if ((((c >> 24) & 255) < 254)) {
HXLINE(  66)													_hx_tmp = undoImage->transparent;
            												}
            												else {
HXLINE(  66)													_hx_tmp = false;
            												}
HXDLIN(  66)												if (_hx_tmp) {
HXLINE(  66)													int location;
HXDLIN(  66)													if (undoImage->useVirtualPos) {
HXLINE(  66)														location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            													}
            													else {
HXLINE(  66)														location = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            													}
HXDLIN(  66)													::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  66)													::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)													int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  66)													int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  66)													int this3 = this2;
HXDLIN(  66)													int this4;
HXDLIN(  66)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)														this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            													}
            													else {
HXLINE(  66)														this4 = this3;
            													}
HXDLIN(  66)													Float a1;
HXDLIN(  66)													int this5 = ((this4 >> 24) & 255);
HXDLIN(  66)													if ((this5 == 0)) {
HXLINE(  66)														a1 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float r1;
HXDLIN(  66)													int this6 = ((this4 >> 16) & 255);
HXDLIN(  66)													if ((this6 == 0)) {
HXLINE(  66)														r1 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float g1;
HXDLIN(  66)													int this7 = ((this4 >> 8) & 255);
HXDLIN(  66)													if ((this7 == 0)) {
HXLINE(  66)														g1 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float b1;
HXDLIN(  66)													int this8 = (this4 & 255);
HXDLIN(  66)													if ((this8 == 0)) {
HXLINE(  66)														b1 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float a2;
HXDLIN(  66)													int this9 = ((col >> 24) & 255);
HXDLIN(  66)													if ((this9 == 0)) {
HXLINE(  66)														a2 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float r2;
HXDLIN(  66)													int this10 = ((col >> 16) & 255);
HXDLIN(  66)													if ((this10 == 0)) {
HXLINE(  66)														r2 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float g2;
HXDLIN(  66)													int this11 = ((col >> 8) & 255);
HXDLIN(  66)													if ((this11 == 0)) {
HXLINE(  66)														g2 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float b2;
HXDLIN(  66)													int this12 = (col & 255);
HXDLIN(  66)													if ((this12 == 0)) {
HXLINE(  66)														b2 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  66)													int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  66)													int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  66)													int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  66)													int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  66)													int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  66)													{
HXLINE(  66)														::haxe::io::ArrayBufferViewImpl this13 = undoImage->image;
HXDLIN(  66)														int value;
HXDLIN(  66)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)															value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            														}
            														else {
HXLINE(  66)															value = blended;
            														}
HXDLIN(  66)														bool _hx_tmp;
HXDLIN(  66)														if ((location >= 0)) {
HXLINE(  66)															_hx_tmp = (location < (this13->byteLength >> 2));
            														}
            														else {
HXLINE(  66)															_hx_tmp = false;
            														}
HXDLIN(  66)														if (_hx_tmp) {
HXLINE(  66)															::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  66)															int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  66)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  66)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  66)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  66)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
            												else {
HXLINE(  66)													::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  66)													int index;
HXDLIN(  66)													if (undoImage->useVirtualPos) {
HXLINE(  66)														index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            													}
            													else {
HXLINE(  66)														index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            													}
HXDLIN(  66)													int value;
HXDLIN(  66)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)														value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE(  66)														value = c;
            													}
HXDLIN(  66)													bool _hx_tmp;
HXDLIN(  66)													if ((index >= 0)) {
HXLINE(  66)														_hx_tmp = (index < (this1->byteLength >> 2));
            													}
            													else {
HXLINE(  66)														_hx_tmp = false;
            													}
HXDLIN(  66)													if (_hx_tmp) {
HXLINE(  66)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)														int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  66)														_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  66)														_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  66)														_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  66)														_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            													}
            												}
            											}
            											else {
HXLINE(  66)												if (forceClear) {
HXLINE(  66)													::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  66)													int x = (dx - rectLeft);
HXDLIN(  66)													int y = (dy - rectTop);
HXDLIN(  66)													int index;
HXDLIN(  66)													if (undoImage->useVirtualPos) {
HXLINE(  66)														index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            													}
            													else {
HXLINE(  66)														index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            													}
HXDLIN(  66)													bool _hx_tmp;
HXDLIN(  66)													if ((index >= 0)) {
HXLINE(  66)														_hx_tmp = (index < (this1->byteLength >> 2));
            													}
            													else {
HXLINE(  66)														_hx_tmp = false;
            													}
HXDLIN(  66)													if (_hx_tmp) {
HXLINE(  66)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)														int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  66)														_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  66)														_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  66)														_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  66)														_this->b[(pos + 3)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN(  66)					bool found = false;
HXDLIN(  66)					{
HXLINE(  66)						int _g_min = xIter3->start;
HXDLIN(  66)						int _g_max = xIter3->max;
HXDLIN(  66)						while((_g_min < _g_max)){
HXLINE(  66)							_g_min = (_g_min + 1);
HXDLIN(  66)							int px = (_g_min - 1);
HXDLIN(  66)							Float pcx = (( (Float)(px) ) - bx);
HXLINE( 620)							found = false;
HXLINE(  66)							{
HXLINE(  66)								int _g_min1 = yIter3->start;
HXDLIN(  66)								int _g_max = yIter3->max;
HXDLIN(  66)								while((_g_min1 < _g_max)){
HXLINE(  66)									_g_min1 = (_g_min1 + 1);
HXDLIN(  66)									int py = (_g_min1 - 1);
HXDLIN(  66)									Float pcy = (( (Float)(py) ) - by);
HXDLIN(  66)									Float dot31 = ((pcx * bcx) + (pcy * bcy));
HXDLIN(  66)									Float dot32 = ((pcx * acx) + (pcy * acy));
HXDLIN(  66)									Float ratioA = (((dot22 * dot31) - (dot12 * dot32)) * denom1);
HXDLIN(  66)									Float ratioB = (((dot11 * dot32) - (dot12 * dot31)) * denom1);
HXDLIN(  66)									Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN(  66)									bool _hx_tmp;
HXDLIN(  66)									bool _hx_tmp1;
HXDLIN(  66)									if ((ratioA >= 0)) {
HXLINE(  66)										_hx_tmp1 = (ratioB >= 0);
            									}
            									else {
HXLINE(  66)										_hx_tmp1 = false;
            									}
HXDLIN(  66)									if (_hx_tmp1) {
HXLINE(  66)										_hx_tmp = (ratioC >= 0);
            									}
            									else {
HXLINE(  66)										_hx_tmp = false;
            									}
HXDLIN(  66)									if (_hx_tmp) {
HXLINE(  66)										int i = ::Std_obj::_hx_int((( (Float)(aA) ) * (softC * ratioB)));
HXDLIN(  66)										if ((i > 255)) {
HXLINE(  24)											i = 255;
            										}
HXLINE(  66)										if ((i < 0)) {
HXLINE(  25)											i = 0;
            										}
HXLINE(  66)										int this1 = i;
HXDLIN(  66)										int a = this1;
HXDLIN(  66)										int i1 = ::Std_obj::_hx_int(( (Float)(rA) ));
HXDLIN(  66)										if ((i1 > 255)) {
HXLINE(  24)											i1 = 255;
            										}
HXLINE(  66)										if ((i1 < 0)) {
HXLINE(  25)											i1 = 0;
            										}
HXLINE(  66)										int this2 = i1;
HXDLIN(  66)										int r = this2;
HXDLIN(  66)										int i2 = ::Std_obj::_hx_int(( (Float)(gA) ));
HXDLIN(  66)										if ((i2 > 255)) {
HXLINE(  24)											i2 = 255;
            										}
HXLINE(  66)										if ((i2 < 0)) {
HXLINE(  25)											i2 = 0;
            										}
HXLINE(  66)										int this3 = i2;
HXDLIN(  66)										int g = this3;
HXDLIN(  66)										int i3 = ::Std_obj::_hx_int(( (Float)(bA) ));
HXDLIN(  66)										if ((i3 > 255)) {
HXLINE(  24)											i3 = 255;
            										}
HXLINE(  66)										if ((i3 < 0)) {
HXLINE(  25)											i3 = 0;
            										}
HXLINE(  66)										int this4 = i3;
HXDLIN(  66)										int b = this4;
HXDLIN(  66)										{
HXLINE(  66)											int location;
HXDLIN(  66)											if (pixelShape->useVirtualPos) {
HXLINE(  66)												location = ::Std_obj::_hx_int(((((( (Float)(py) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + px) - pixelShape->virtualX));
            											}
            											else {
HXLINE(  66)												location = ::Std_obj::_hx_int(( (Float)(((py * pixelShape->width) + px)) ));
            											}
HXDLIN(  66)											bool _hx_tmp;
HXDLIN(  66)											if (pixelShape->transparent) {
HXLINE(  66)												_hx_tmp = (a < 254);
            											}
            											else {
HXLINE(  66)												_hx_tmp = false;
            											}
HXDLIN(  66)											if (_hx_tmp) {
HXLINE(  66)												::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  66)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)												int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  66)												int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  66)												int this3 = this2;
HXDLIN(  66)												int old;
HXDLIN(  66)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)													old = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            												}
            												else {
HXLINE(  66)													old = this3;
            												}
HXDLIN(  66)												int rhs = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  66)												Float a1;
HXDLIN(  66)												int this4 = ((old >> 24) & 255);
HXDLIN(  66)												if ((this4 == 0)) {
HXLINE(  66)													a1 = ((Float)0.);
            												}
            												else {
HXLINE(  66)													a1 = (( (Float)(this4) ) / ( (Float)(255) ));
            												}
HXDLIN(  66)												Float r1;
HXDLIN(  66)												int this5 = ((old >> 16) & 255);
HXDLIN(  66)												if ((this5 == 0)) {
HXLINE(  66)													r1 = ((Float)0.);
            												}
            												else {
HXLINE(  66)													r1 = (( (Float)(this5) ) / ( (Float)(255) ));
            												}
HXDLIN(  66)												Float g1;
HXDLIN(  66)												int this6 = ((old >> 8) & 255);
HXDLIN(  66)												if ((this6 == 0)) {
HXLINE(  66)													g1 = ((Float)0.);
            												}
            												else {
HXLINE(  66)													g1 = (( (Float)(this6) ) / ( (Float)(255) ));
            												}
HXDLIN(  66)												Float b1;
HXDLIN(  66)												int this7 = (old & 255);
HXDLIN(  66)												if ((this7 == 0)) {
HXLINE(  66)													b1 = ((Float)0.);
            												}
            												else {
HXLINE(  66)													b1 = (( (Float)(this7) ) / ( (Float)(255) ));
            												}
HXDLIN(  66)												Float a2;
HXDLIN(  66)												int this8 = ((rhs >> 24) & 255);
HXDLIN(  66)												if ((this8 == 0)) {
HXLINE(  66)													a2 = ((Float)0.);
            												}
            												else {
HXLINE(  66)													a2 = (( (Float)(this8) ) / ( (Float)(255) ));
            												}
HXDLIN(  66)												Float r2;
HXDLIN(  66)												int this9 = ((rhs >> 16) & 255);
HXDLIN(  66)												if ((this9 == 0)) {
HXLINE(  66)													r2 = ((Float)0.);
            												}
            												else {
HXLINE(  66)													r2 = (( (Float)(this9) ) / ( (Float)(255) ));
            												}
HXDLIN(  66)												Float g2;
HXDLIN(  66)												int this10 = ((rhs >> 8) & 255);
HXDLIN(  66)												if ((this10 == 0)) {
HXLINE(  66)													g2 = ((Float)0.);
            												}
            												else {
HXLINE(  66)													g2 = (( (Float)(this10) ) / ( (Float)(255) ));
            												}
HXDLIN(  66)												Float b2;
HXDLIN(  66)												int this11 = (rhs & 255);
HXDLIN(  66)												if ((this11 == 0)) {
HXLINE(  66)													b2 = ((Float)0.);
            												}
            												else {
HXLINE(  66)													b2 = (( (Float)(this11) ) / ( (Float)(255) ));
            												}
HXDLIN(  66)												Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  66)												int r3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  66)												int g3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  66)												int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  66)												int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  66)												int blended = ((((a4 << 24) | (r3 << 16)) | (g3 << 8)) | b3);
HXDLIN(  66)												{
HXLINE(  66)													::haxe::io::ArrayBufferViewImpl this12 = pixelShape->image;
HXDLIN(  66)													int value;
HXDLIN(  66)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)														value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            													}
            													else {
HXLINE(  66)														value = blended;
            													}
HXDLIN(  66)													bool _hx_tmp;
HXDLIN(  66)													if ((location >= 0)) {
HXLINE(  66)														_hx_tmp = (location < (this12->byteLength >> 2));
            													}
            													else {
HXLINE(  66)														_hx_tmp = false;
            													}
HXDLIN(  66)													if (_hx_tmp) {
HXLINE(  66)														::haxe::io::Bytes _this = this12->bytes;
HXDLIN(  66)														int pos = ((location << 2) + this12->byteOffset);
HXDLIN(  66)														_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  66)														_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  66)														_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  66)														_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            													}
            												}
            											}
            											else {
HXLINE(  66)												::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  66)												int value;
HXDLIN(  66)												if (pixelShape->isLittle) {
HXLINE(  66)													value = ((((a << 24) | (b << 16)) | (g << 8)) | r);
            												}
            												else {
HXLINE(  66)													value = ((((a << 24) | (r << 16)) | (g << 8)) | b);
            												}
HXDLIN(  66)												bool _hx_tmp;
HXDLIN(  66)												if ((location >= 0)) {
HXLINE(  66)													_hx_tmp = (location < (this1->byteLength >> 2));
            												}
            												else {
HXLINE(  66)													_hx_tmp = false;
            												}
HXDLIN(  66)												if (_hx_tmp) {
HXLINE(  66)													::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)													int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  66)													_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  66)													_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  66)													_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  66)													_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            												}
            											}
            										}
HXLINE( 634)										found = true;
            									}
            									else {
HXLINE(  66)										if (found) {
HXLINE(  66)											goto _hx_goto_6;
            										}
            									}
            								}
            								_hx_goto_6:;
            							}
            						}
            					}
HXDLIN(  66)					if ((hasHit == false)) {
HXLINE(  66)						::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,ex,ey,ax,ay,bx,by,true);
HXDLIN(  66)						if (hasUndo) {
HXLINE(  66)							v->undoImage = undoImage;
HXDLIN(  66)							v->undoX = xIter3->start;
HXDLIN(  66)							v->undoY = yIter3->start;
            						}
            					}
            				}
HXDLIN(  66)				{
HXLINE(  66)					bool hasUndo1 = false;
HXDLIN(  66)					int aA1 = ((color >> 24) & 255);
HXDLIN(  66)					int rA1 = ((color >> 16) & 255);
HXDLIN(  66)					int gA1 = ((color >> 8) & 255);
HXDLIN(  66)					int bA1 = (color & 255);
HXDLIN(  66)					Float bcx1 = (bx - cx);
HXDLIN(  66)					Float bcy1 = (by - cy);
HXDLIN(  66)					Float acx1 = (ex - cx);
HXDLIN(  66)					Float acy1 = (ey - cy);
HXDLIN(  66)					Float dot111 = ((bcx1 * bcx1) + (bcy1 * bcy1));
HXDLIN(  66)					Float dot121 = ((bcx1 * acx1) + (bcy1 * acy1));
HXDLIN(  66)					Float dot221 = ((acx1 * acx1) + (acy1 * acy1));
HXDLIN(  66)					Float denom11 = (( (Float)(1) ) / ((dot111 * dot221) - (dot121 * dot121)));
HXDLIN(  66)					::pixelimage::iter::IntIterStart xIter31;
HXDLIN(  66)					if ((ex > bx)) {
HXLINE(  66)						if ((ex > cx)) {
HXLINE(  66)							int min;
HXDLIN(  66)							if ((bx > cx)) {
HXLINE(  66)								min = ::Math_obj::floor(cx);
            							}
            							else {
HXLINE(  66)								min = ::Math_obj::floor(bx);
            							}
HXDLIN(  66)							int ii_min = min;
HXDLIN(  66)							int ii_max = ::Math_obj::ceil(ex);
HXDLIN(  66)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)							xIter31 = this1;
            						}
            						else {
HXLINE(  66)							int ii_min = ::Math_obj::floor(bx);
HXDLIN(  66)							int ii_max = ::Math_obj::ceil(cx);
HXDLIN(  66)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)							xIter31 = this1;
            						}
            					}
            					else {
HXLINE(  66)						if ((bx > cx)) {
HXLINE(  66)							int min;
HXDLIN(  66)							if ((ex > cx)) {
HXLINE(  66)								min = ::Math_obj::floor(cx);
            							}
            							else {
HXLINE(  66)								min = ::Math_obj::ceil(ex);
            							}
HXDLIN(  66)							int ii_min = min;
HXDLIN(  66)							int ii_max = ::Math_obj::ceil(bx);
HXDLIN(  66)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)							xIter31 = this1;
            						}
            						else {
HXLINE(  66)							int ii_min = ::Math_obj::floor(ex);
HXDLIN(  66)							int ii_max = ::Math_obj::ceil(cx);
HXDLIN(  66)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)							xIter31 = this1;
            						}
            					}
HXDLIN(  66)					::pixelimage::iter::IntIterStart yIter31;
HXDLIN(  66)					if ((ey > by)) {
HXLINE(  66)						if ((ey > cy)) {
HXLINE(  66)							int min;
HXDLIN(  66)							if ((by > cy)) {
HXLINE(  66)								min = ::Math_obj::floor(cy);
            							}
            							else {
HXLINE(  66)								min = ::Math_obj::floor(by);
            							}
HXDLIN(  66)							int ii_min = min;
HXDLIN(  66)							int ii_max = ::Math_obj::ceil(ey);
HXDLIN(  66)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)							yIter31 = this1;
            						}
            						else {
HXLINE(  66)							int ii_min = ::Math_obj::floor(by);
HXDLIN(  66)							int ii_max = ::Math_obj::ceil(cy);
HXDLIN(  66)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)							yIter31 = this1;
            						}
            					}
            					else {
HXLINE(  66)						if ((by > cy)) {
HXLINE(  66)							int min;
HXDLIN(  66)							if ((ey > cy)) {
HXLINE(  66)								min = ::Math_obj::floor(cy);
            							}
            							else {
HXLINE(  66)								min = ::Math_obj::ceil(ey);
            							}
HXDLIN(  66)							int ii_min = min;
HXDLIN(  66)							int ii_max = ::Math_obj::ceil(by);
HXDLIN(  66)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)							yIter31 = this1;
            						}
            						else {
HXLINE(  66)							int ii_min = ::Math_obj::floor(ey);
HXDLIN(  66)							int ii_max = ::Math_obj::ceil(cy);
HXDLIN(  66)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)							yIter31 = this1;
            						}
            					}
HXDLIN(  66)					::pixelimage::ImageStruct undoImage1 = null();
HXDLIN(  66)					if (hasUndo1) {
HXLINE(  66)						int w = ((xIter31->max - xIter31->start) + 1);
HXDLIN(  66)						int h = ((yIter31->max - yIter31->start) + 1);
HXDLIN(  66)						int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN(  66)						::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  66)						::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN(  66)						::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN(  66)						undoImage1 = this3;
HXDLIN(  66)						{
HXLINE(  66)							int rectLeft = xIter31->start;
HXDLIN(  66)							int rectTop = yIter31->start;
HXDLIN(  66)							int rectRight = xIter31->max;
HXDLIN(  66)							bool forceClear = false;
HXDLIN(  66)							{
HXLINE(  66)								int _g = rectTop;
HXDLIN(  66)								int _g1 = yIter31->max;
HXDLIN(  66)								while((_g < _g1)){
HXLINE(  66)									_g = (_g + 1);
HXDLIN(  66)									int dy = (_g - 1);
HXDLIN(  66)									{
HXLINE(  66)										int _g1 = rectLeft;
HXDLIN(  66)										int _g2 = rectRight;
HXDLIN(  66)										while((_g1 < _g2)){
HXLINE(  66)											_g1 = (_g1 + 1);
HXDLIN(  66)											int dx = (_g1 - 1);
HXDLIN(  66)											::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  66)											int index;
HXDLIN(  66)											if (pixelShape->useVirtualPos) {
HXLINE(  66)												index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + dx) - pixelShape->virtualX));
            											}
            											else {
HXLINE(  66)												index = ::Std_obj::_hx_int(( (Float)(((dy * pixelShape->width) + dx)) ));
            											}
HXDLIN(  66)											::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)											int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  66)											int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  66)											int col;
HXDLIN(  66)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)												col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            											}
            											else {
HXLINE(  66)												col = c;
            											}
HXDLIN(  66)											bool _hx_tmp;
HXDLIN(  66)											if (pixelShape->useMask) {
HXLINE(  66)												_hx_tmp = ::hx::IsNotNull( pixelShape->mask );
            											}
            											else {
HXLINE(  66)												_hx_tmp = false;
            											}
HXDLIN(  66)											if (_hx_tmp) {
HXLINE(  66)												::pixelimage::ImageStruct this1 = pixelShape->mask;
HXDLIN(  66)												::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  66)												int index;
HXDLIN(  66)												if (this1->useVirtualPos) {
HXLINE(  66)													index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            												}
            												else {
HXLINE(  66)													index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            												}
HXDLIN(  66)												::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  66)												int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  66)												int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  66)												int v;
HXDLIN(  66)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)													v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE(  66)													v = c;
            												}
HXDLIN(  66)												int this3 = v;
HXDLIN(  66)												int maskPixel = this3;
HXDLIN(  66)												int this4 = col;
HXDLIN(  66)												int this5 = this4;
HXDLIN(  66)												if ((maskPixel == 0)) {
HXLINE(  66)													int this1 = this5;
HXDLIN(  66)													col = this1;
            												}
            												else {
HXLINE(  66)													Float m0;
HXDLIN(  66)													int this1 = ((maskPixel >> 24) & 255);
HXDLIN(  66)													if ((this1 == 0)) {
HXLINE(  66)														m0 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float m1;
HXDLIN(  66)													int this2 = ((maskPixel >> 16) & 255);
HXDLIN(  66)													if ((this2 == 0)) {
HXLINE(  66)														m1 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float m2;
HXDLIN(  66)													int this3 = ((maskPixel >> 8) & 255);
HXDLIN(  66)													if ((this3 == 0)) {
HXLINE(  66)														m2 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float m3;
HXDLIN(  66)													int this4 = (maskPixel & 255);
HXDLIN(  66)													if ((this4 == 0)) {
HXLINE(  66)														m3 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN(  66)													int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN(  66)													int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN(  66)													int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN(  66)													col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            												}
            											}
HXDLIN(  66)											if ((col != 0)) {
HXLINE(  66)												int x = (dx - rectLeft);
HXDLIN(  66)												int y = (dy - rectTop);
HXDLIN(  66)												int this1 = col;
HXDLIN(  66)												int c = this1;
HXDLIN(  66)												bool _hx_tmp;
HXDLIN(  66)												if ((((c >> 24) & 255) < 254)) {
HXLINE(  66)													_hx_tmp = undoImage1->transparent;
            												}
            												else {
HXLINE(  66)													_hx_tmp = false;
            												}
HXDLIN(  66)												if (_hx_tmp) {
HXLINE(  66)													int location;
HXDLIN(  66)													if (undoImage1->useVirtualPos) {
HXLINE(  66)														location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            													}
            													else {
HXLINE(  66)														location = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            													}
HXDLIN(  66)													::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN(  66)													::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)													int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  66)													int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  66)													int this3 = this2;
HXDLIN(  66)													int this4;
HXDLIN(  66)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)														this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            													}
            													else {
HXLINE(  66)														this4 = this3;
            													}
HXDLIN(  66)													Float a1;
HXDLIN(  66)													int this5 = ((this4 >> 24) & 255);
HXDLIN(  66)													if ((this5 == 0)) {
HXLINE(  66)														a1 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float r1;
HXDLIN(  66)													int this6 = ((this4 >> 16) & 255);
HXDLIN(  66)													if ((this6 == 0)) {
HXLINE(  66)														r1 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float g1;
HXDLIN(  66)													int this7 = ((this4 >> 8) & 255);
HXDLIN(  66)													if ((this7 == 0)) {
HXLINE(  66)														g1 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float b1;
HXDLIN(  66)													int this8 = (this4 & 255);
HXDLIN(  66)													if ((this8 == 0)) {
HXLINE(  66)														b1 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float a2;
HXDLIN(  66)													int this9 = ((col >> 24) & 255);
HXDLIN(  66)													if ((this9 == 0)) {
HXLINE(  66)														a2 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float r2;
HXDLIN(  66)													int this10 = ((col >> 16) & 255);
HXDLIN(  66)													if ((this10 == 0)) {
HXLINE(  66)														r2 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float g2;
HXDLIN(  66)													int this11 = ((col >> 8) & 255);
HXDLIN(  66)													if ((this11 == 0)) {
HXLINE(  66)														g2 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float b2;
HXDLIN(  66)													int this12 = (col & 255);
HXDLIN(  66)													if ((this12 == 0)) {
HXLINE(  66)														b2 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  66)													int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  66)													int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  66)													int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  66)													int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  66)													int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  66)													{
HXLINE(  66)														::haxe::io::ArrayBufferViewImpl this13 = undoImage1->image;
HXDLIN(  66)														int value;
HXDLIN(  66)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)															value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            														}
            														else {
HXLINE(  66)															value = blended;
            														}
HXDLIN(  66)														bool _hx_tmp;
HXDLIN(  66)														if ((location >= 0)) {
HXLINE(  66)															_hx_tmp = (location < (this13->byteLength >> 2));
            														}
            														else {
HXLINE(  66)															_hx_tmp = false;
            														}
HXDLIN(  66)														if (_hx_tmp) {
HXLINE(  66)															::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  66)															int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  66)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  66)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  66)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  66)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
            												else {
HXLINE(  66)													::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN(  66)													int index;
HXDLIN(  66)													if (undoImage1->useVirtualPos) {
HXLINE(  66)														index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            													}
            													else {
HXLINE(  66)														index = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            													}
HXDLIN(  66)													int value;
HXDLIN(  66)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)														value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE(  66)														value = c;
            													}
HXDLIN(  66)													bool _hx_tmp;
HXDLIN(  66)													if ((index >= 0)) {
HXLINE(  66)														_hx_tmp = (index < (this1->byteLength >> 2));
            													}
            													else {
HXLINE(  66)														_hx_tmp = false;
            													}
HXDLIN(  66)													if (_hx_tmp) {
HXLINE(  66)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)														int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  66)														_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  66)														_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  66)														_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  66)														_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            													}
            												}
            											}
            											else {
HXLINE(  66)												if (forceClear) {
HXLINE(  66)													::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN(  66)													int x = (dx - rectLeft);
HXDLIN(  66)													int y = (dy - rectTop);
HXDLIN(  66)													int index;
HXDLIN(  66)													if (undoImage1->useVirtualPos) {
HXLINE(  66)														index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            													}
            													else {
HXLINE(  66)														index = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            													}
HXDLIN(  66)													bool _hx_tmp;
HXDLIN(  66)													if ((index >= 0)) {
HXLINE(  66)														_hx_tmp = (index < (this1->byteLength >> 2));
            													}
            													else {
HXLINE(  66)														_hx_tmp = false;
            													}
HXDLIN(  66)													if (_hx_tmp) {
HXLINE(  66)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)														int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  66)														_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  66)														_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  66)														_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  66)														_this->b[(pos + 3)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN(  66)					bool found1 = false;
HXDLIN(  66)					{
HXLINE(  66)						int _g_min1 = xIter31->start;
HXDLIN(  66)						int _g_max1 = xIter31->max;
HXDLIN(  66)						while((_g_min1 < _g_max1)){
HXLINE(  66)							_g_min1 = (_g_min1 + 1);
HXDLIN(  66)							int px = (_g_min1 - 1);
HXDLIN(  66)							Float pcx = (( (Float)(px) ) - cx);
HXLINE( 620)							found1 = false;
HXLINE(  66)							{
HXLINE(  66)								int _g_min = yIter31->start;
HXDLIN(  66)								int _g_max = yIter31->max;
HXDLIN(  66)								while((_g_min < _g_max)){
HXLINE(  66)									_g_min = (_g_min + 1);
HXDLIN(  66)									int py = (_g_min - 1);
HXDLIN(  66)									Float pcy = (( (Float)(py) ) - cy);
HXDLIN(  66)									Float dot31 = ((pcx * bcx1) + (pcy * bcy1));
HXDLIN(  66)									Float dot32 = ((pcx * acx1) + (pcy * acy1));
HXDLIN(  66)									Float ratioA = (((dot221 * dot31) - (dot121 * dot32)) * denom11);
HXDLIN(  66)									Float ratioB = (((dot111 * dot32) - (dot121 * dot31)) * denom11);
HXDLIN(  66)									Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN(  66)									bool _hx_tmp;
HXDLIN(  66)									bool _hx_tmp1;
HXDLIN(  66)									if ((ratioA >= 0)) {
HXLINE(  66)										_hx_tmp1 = (ratioB >= 0);
            									}
            									else {
HXLINE(  66)										_hx_tmp1 = false;
            									}
HXDLIN(  66)									if (_hx_tmp1) {
HXLINE(  66)										_hx_tmp = (ratioC >= 0);
            									}
            									else {
HXLINE(  66)										_hx_tmp = false;
            									}
HXDLIN(  66)									if (_hx_tmp) {
HXLINE(  66)										int i = ::Std_obj::_hx_int((( (Float)(aA1) ) * (softC * ratioB)));
HXDLIN(  66)										if ((i > 255)) {
HXLINE(  24)											i = 255;
            										}
HXLINE(  66)										if ((i < 0)) {
HXLINE(  25)											i = 0;
            										}
HXLINE(  66)										int this1 = i;
HXDLIN(  66)										int a = this1;
HXDLIN(  66)										int i1 = ::Std_obj::_hx_int(( (Float)(rA1) ));
HXDLIN(  66)										if ((i1 > 255)) {
HXLINE(  24)											i1 = 255;
            										}
HXLINE(  66)										if ((i1 < 0)) {
HXLINE(  25)											i1 = 0;
            										}
HXLINE(  66)										int this2 = i1;
HXDLIN(  66)										int r = this2;
HXDLIN(  66)										int i2 = ::Std_obj::_hx_int(( (Float)(gA1) ));
HXDLIN(  66)										if ((i2 > 255)) {
HXLINE(  24)											i2 = 255;
            										}
HXLINE(  66)										if ((i2 < 0)) {
HXLINE(  25)											i2 = 0;
            										}
HXLINE(  66)										int this3 = i2;
HXDLIN(  66)										int g = this3;
HXDLIN(  66)										int i3 = ::Std_obj::_hx_int(( (Float)(bA1) ));
HXDLIN(  66)										if ((i3 > 255)) {
HXLINE(  24)											i3 = 255;
            										}
HXLINE(  66)										if ((i3 < 0)) {
HXLINE(  25)											i3 = 0;
            										}
HXLINE(  66)										int this4 = i3;
HXDLIN(  66)										int b = this4;
HXDLIN(  66)										{
HXLINE(  66)											int location;
HXDLIN(  66)											if (pixelShape->useVirtualPos) {
HXLINE(  66)												location = ::Std_obj::_hx_int(((((( (Float)(py) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + px) - pixelShape->virtualX));
            											}
            											else {
HXLINE(  66)												location = ::Std_obj::_hx_int(( (Float)(((py * pixelShape->width) + px)) ));
            											}
HXDLIN(  66)											bool _hx_tmp;
HXDLIN(  66)											if (pixelShape->transparent) {
HXLINE(  66)												_hx_tmp = (a < 254);
            											}
            											else {
HXLINE(  66)												_hx_tmp = false;
            											}
HXDLIN(  66)											if (_hx_tmp) {
HXLINE(  66)												::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  66)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)												int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  66)												int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  66)												int this3 = this2;
HXDLIN(  66)												int old;
HXDLIN(  66)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)													old = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            												}
            												else {
HXLINE(  66)													old = this3;
            												}
HXDLIN(  66)												int rhs = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  66)												Float a1;
HXDLIN(  66)												int this4 = ((old >> 24) & 255);
HXDLIN(  66)												if ((this4 == 0)) {
HXLINE(  66)													a1 = ((Float)0.);
            												}
            												else {
HXLINE(  66)													a1 = (( (Float)(this4) ) / ( (Float)(255) ));
            												}
HXDLIN(  66)												Float r1;
HXDLIN(  66)												int this5 = ((old >> 16) & 255);
HXDLIN(  66)												if ((this5 == 0)) {
HXLINE(  66)													r1 = ((Float)0.);
            												}
            												else {
HXLINE(  66)													r1 = (( (Float)(this5) ) / ( (Float)(255) ));
            												}
HXDLIN(  66)												Float g1;
HXDLIN(  66)												int this6 = ((old >> 8) & 255);
HXDLIN(  66)												if ((this6 == 0)) {
HXLINE(  66)													g1 = ((Float)0.);
            												}
            												else {
HXLINE(  66)													g1 = (( (Float)(this6) ) / ( (Float)(255) ));
            												}
HXDLIN(  66)												Float b1;
HXDLIN(  66)												int this7 = (old & 255);
HXDLIN(  66)												if ((this7 == 0)) {
HXLINE(  66)													b1 = ((Float)0.);
            												}
            												else {
HXLINE(  66)													b1 = (( (Float)(this7) ) / ( (Float)(255) ));
            												}
HXDLIN(  66)												Float a2;
HXDLIN(  66)												int this8 = ((rhs >> 24) & 255);
HXDLIN(  66)												if ((this8 == 0)) {
HXLINE(  66)													a2 = ((Float)0.);
            												}
            												else {
HXLINE(  66)													a2 = (( (Float)(this8) ) / ( (Float)(255) ));
            												}
HXDLIN(  66)												Float r2;
HXDLIN(  66)												int this9 = ((rhs >> 16) & 255);
HXDLIN(  66)												if ((this9 == 0)) {
HXLINE(  66)													r2 = ((Float)0.);
            												}
            												else {
HXLINE(  66)													r2 = (( (Float)(this9) ) / ( (Float)(255) ));
            												}
HXDLIN(  66)												Float g2;
HXDLIN(  66)												int this10 = ((rhs >> 8) & 255);
HXDLIN(  66)												if ((this10 == 0)) {
HXLINE(  66)													g2 = ((Float)0.);
            												}
            												else {
HXLINE(  66)													g2 = (( (Float)(this10) ) / ( (Float)(255) ));
            												}
HXDLIN(  66)												Float b2;
HXDLIN(  66)												int this11 = (rhs & 255);
HXDLIN(  66)												if ((this11 == 0)) {
HXLINE(  66)													b2 = ((Float)0.);
            												}
            												else {
HXLINE(  66)													b2 = (( (Float)(this11) ) / ( (Float)(255) ));
            												}
HXDLIN(  66)												Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  66)												int r3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  66)												int g3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  66)												int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  66)												int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  66)												int blended = ((((a4 << 24) | (r3 << 16)) | (g3 << 8)) | b3);
HXDLIN(  66)												{
HXLINE(  66)													::haxe::io::ArrayBufferViewImpl this12 = pixelShape->image;
HXDLIN(  66)													int value;
HXDLIN(  66)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)														value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            													}
            													else {
HXLINE(  66)														value = blended;
            													}
HXDLIN(  66)													bool _hx_tmp;
HXDLIN(  66)													if ((location >= 0)) {
HXLINE(  66)														_hx_tmp = (location < (this12->byteLength >> 2));
            													}
            													else {
HXLINE(  66)														_hx_tmp = false;
            													}
HXDLIN(  66)													if (_hx_tmp) {
HXLINE(  66)														::haxe::io::Bytes _this = this12->bytes;
HXDLIN(  66)														int pos = ((location << 2) + this12->byteOffset);
HXDLIN(  66)														_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  66)														_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  66)														_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  66)														_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            													}
            												}
            											}
            											else {
HXLINE(  66)												::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  66)												int value;
HXDLIN(  66)												if (pixelShape->isLittle) {
HXLINE(  66)													value = ((((a << 24) | (b << 16)) | (g << 8)) | r);
            												}
            												else {
HXLINE(  66)													value = ((((a << 24) | (r << 16)) | (g << 8)) | b);
            												}
HXDLIN(  66)												bool _hx_tmp;
HXDLIN(  66)												if ((location >= 0)) {
HXLINE(  66)													_hx_tmp = (location < (this1->byteLength >> 2));
            												}
            												else {
HXLINE(  66)													_hx_tmp = false;
            												}
HXDLIN(  66)												if (_hx_tmp) {
HXLINE(  66)													::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)													int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  66)													_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  66)													_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  66)													_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  66)													_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            												}
            											}
            										}
HXLINE( 634)										found1 = true;
            									}
            									else {
HXLINE(  66)										if (found1) {
HXLINE(  66)											goto _hx_goto_10;
            										}
            									}
            								}
            								_hx_goto_10:;
            							}
            						}
            					}
HXDLIN(  66)					if ((hasHit == false)) {
HXLINE(  66)						::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,ex,ey,bx,by,cx,cy,true);
HXDLIN(  66)						if (hasUndo1) {
HXLINE(  66)							v->undoImage = undoImage1;
HXDLIN(  66)							v->undoX = xIter31->start;
HXDLIN(  66)							v->undoY = yIter31->start;
            						}
            					}
            				}
HXDLIN(  66)				{
HXLINE(  66)					bool hasUndo2 = false;
HXDLIN(  66)					int aA2 = ((color >> 24) & 255);
HXDLIN(  66)					int rA2 = ((color >> 16) & 255);
HXDLIN(  66)					int gA2 = ((color >> 8) & 255);
HXDLIN(  66)					int bA2 = (color & 255);
HXDLIN(  66)					Float bcx2 = (cx - dx);
HXDLIN(  66)					Float bcy2 = (cy - dy);
HXDLIN(  66)					Float acx2 = (ex - dx);
HXDLIN(  66)					Float acy2 = (ey - dy);
HXDLIN(  66)					Float dot112 = ((bcx2 * bcx2) + (bcy2 * bcy2));
HXDLIN(  66)					Float dot122 = ((bcx2 * acx2) + (bcy2 * acy2));
HXDLIN(  66)					Float dot222 = ((acx2 * acx2) + (acy2 * acy2));
HXDLIN(  66)					Float denom12 = (( (Float)(1) ) / ((dot112 * dot222) - (dot122 * dot122)));
HXDLIN(  66)					::pixelimage::iter::IntIterStart xIter32;
HXDLIN(  66)					if ((ex > cx)) {
HXLINE(  66)						if ((ex > dx)) {
HXLINE(  66)							int min;
HXDLIN(  66)							if ((cx > dx)) {
HXLINE(  66)								min = ::Math_obj::floor(dx);
            							}
            							else {
HXLINE(  66)								min = ::Math_obj::floor(cx);
            							}
HXDLIN(  66)							int ii_min = min;
HXDLIN(  66)							int ii_max = ::Math_obj::ceil(ex);
HXDLIN(  66)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)							xIter32 = this1;
            						}
            						else {
HXLINE(  66)							int ii_min = ::Math_obj::floor(cx);
HXDLIN(  66)							int ii_max = ::Math_obj::ceil(dx);
HXDLIN(  66)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)							xIter32 = this1;
            						}
            					}
            					else {
HXLINE(  66)						if ((cx > dx)) {
HXLINE(  66)							int min;
HXDLIN(  66)							if ((ex > dx)) {
HXLINE(  66)								min = ::Math_obj::floor(dx);
            							}
            							else {
HXLINE(  66)								min = ::Math_obj::ceil(ex);
            							}
HXDLIN(  66)							int ii_min = min;
HXDLIN(  66)							int ii_max = ::Math_obj::ceil(cx);
HXDLIN(  66)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)							xIter32 = this1;
            						}
            						else {
HXLINE(  66)							int ii_min = ::Math_obj::floor(ex);
HXDLIN(  66)							int ii_max = ::Math_obj::ceil(dx);
HXDLIN(  66)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)							xIter32 = this1;
            						}
            					}
HXDLIN(  66)					::pixelimage::iter::IntIterStart yIter32;
HXDLIN(  66)					if ((ey > cy)) {
HXLINE(  66)						if ((ey > dy)) {
HXLINE(  66)							int min;
HXDLIN(  66)							if ((cy > dy)) {
HXLINE(  66)								min = ::Math_obj::floor(dy);
            							}
            							else {
HXLINE(  66)								min = ::Math_obj::floor(cy);
            							}
HXDLIN(  66)							int ii_min = min;
HXDLIN(  66)							int ii_max = ::Math_obj::ceil(ey);
HXDLIN(  66)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)							yIter32 = this1;
            						}
            						else {
HXLINE(  66)							int ii_min = ::Math_obj::floor(cy);
HXDLIN(  66)							int ii_max = ::Math_obj::ceil(dy);
HXDLIN(  66)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)							yIter32 = this1;
            						}
            					}
            					else {
HXLINE(  66)						if ((cy > dy)) {
HXLINE(  66)							int min;
HXDLIN(  66)							if ((ey > dy)) {
HXLINE(  66)								min = ::Math_obj::floor(dy);
            							}
            							else {
HXLINE(  66)								min = ::Math_obj::ceil(ey);
            							}
HXDLIN(  66)							int ii_min = min;
HXDLIN(  66)							int ii_max = ::Math_obj::ceil(cy);
HXDLIN(  66)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)							yIter32 = this1;
            						}
            						else {
HXLINE(  66)							int ii_min = ::Math_obj::floor(ey);
HXDLIN(  66)							int ii_max = ::Math_obj::ceil(dy);
HXDLIN(  66)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)							yIter32 = this1;
            						}
            					}
HXDLIN(  66)					::pixelimage::ImageStruct undoImage2 = null();
HXDLIN(  66)					if (hasUndo2) {
HXLINE(  66)						int w = ((xIter32->max - xIter32->start) + 1);
HXDLIN(  66)						int h = ((yIter32->max - yIter32->start) + 1);
HXDLIN(  66)						int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN(  66)						::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  66)						::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN(  66)						::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN(  66)						undoImage2 = this3;
HXDLIN(  66)						{
HXLINE(  66)							int rectLeft = xIter32->start;
HXDLIN(  66)							int rectTop = yIter32->start;
HXDLIN(  66)							int rectRight = xIter32->max;
HXDLIN(  66)							bool forceClear = false;
HXDLIN(  66)							{
HXLINE(  66)								int _g = rectTop;
HXDLIN(  66)								int _g1 = yIter32->max;
HXDLIN(  66)								while((_g < _g1)){
HXLINE(  66)									_g = (_g + 1);
HXDLIN(  66)									int dy = (_g - 1);
HXDLIN(  66)									{
HXLINE(  66)										int _g1 = rectLeft;
HXDLIN(  66)										int _g2 = rectRight;
HXDLIN(  66)										while((_g1 < _g2)){
HXLINE(  66)											_g1 = (_g1 + 1);
HXDLIN(  66)											int dx = (_g1 - 1);
HXDLIN(  66)											::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  66)											int index;
HXDLIN(  66)											if (pixelShape->useVirtualPos) {
HXLINE(  66)												index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + dx) - pixelShape->virtualX));
            											}
            											else {
HXLINE(  66)												index = ::Std_obj::_hx_int(( (Float)(((dy * pixelShape->width) + dx)) ));
            											}
HXDLIN(  66)											::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)											int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  66)											int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  66)											int col;
HXDLIN(  66)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)												col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            											}
            											else {
HXLINE(  66)												col = c;
            											}
HXDLIN(  66)											bool _hx_tmp;
HXDLIN(  66)											if (pixelShape->useMask) {
HXLINE(  66)												_hx_tmp = ::hx::IsNotNull( pixelShape->mask );
            											}
            											else {
HXLINE(  66)												_hx_tmp = false;
            											}
HXDLIN(  66)											if (_hx_tmp) {
HXLINE(  66)												::pixelimage::ImageStruct this1 = pixelShape->mask;
HXDLIN(  66)												::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  66)												int index;
HXDLIN(  66)												if (this1->useVirtualPos) {
HXLINE(  66)													index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            												}
            												else {
HXLINE(  66)													index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            												}
HXDLIN(  66)												::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  66)												int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  66)												int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  66)												int v;
HXDLIN(  66)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)													v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE(  66)													v = c;
            												}
HXDLIN(  66)												int this3 = v;
HXDLIN(  66)												int maskPixel = this3;
HXDLIN(  66)												int this4 = col;
HXDLIN(  66)												int this5 = this4;
HXDLIN(  66)												if ((maskPixel == 0)) {
HXLINE(  66)													int this1 = this5;
HXDLIN(  66)													col = this1;
            												}
            												else {
HXLINE(  66)													Float m0;
HXDLIN(  66)													int this1 = ((maskPixel >> 24) & 255);
HXDLIN(  66)													if ((this1 == 0)) {
HXLINE(  66)														m0 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float m1;
HXDLIN(  66)													int this2 = ((maskPixel >> 16) & 255);
HXDLIN(  66)													if ((this2 == 0)) {
HXLINE(  66)														m1 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float m2;
HXDLIN(  66)													int this3 = ((maskPixel >> 8) & 255);
HXDLIN(  66)													if ((this3 == 0)) {
HXLINE(  66)														m2 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float m3;
HXDLIN(  66)													int this4 = (maskPixel & 255);
HXDLIN(  66)													if ((this4 == 0)) {
HXLINE(  66)														m3 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN(  66)													int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN(  66)													int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN(  66)													int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN(  66)													col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            												}
            											}
HXDLIN(  66)											if ((col != 0)) {
HXLINE(  66)												int x = (dx - rectLeft);
HXDLIN(  66)												int y = (dy - rectTop);
HXDLIN(  66)												int this1 = col;
HXDLIN(  66)												int c = this1;
HXDLIN(  66)												bool _hx_tmp;
HXDLIN(  66)												if ((((c >> 24) & 255) < 254)) {
HXLINE(  66)													_hx_tmp = undoImage2->transparent;
            												}
            												else {
HXLINE(  66)													_hx_tmp = false;
            												}
HXDLIN(  66)												if (_hx_tmp) {
HXLINE(  66)													int location;
HXDLIN(  66)													if (undoImage2->useVirtualPos) {
HXLINE(  66)														location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage2->virtualY) * ( (Float)(undoImage2->width) )) + x) - undoImage2->virtualX));
            													}
            													else {
HXLINE(  66)														location = ::Std_obj::_hx_int(( (Float)(((y * undoImage2->width) + x)) ));
            													}
HXDLIN(  66)													::haxe::io::ArrayBufferViewImpl this1 = undoImage2->image;
HXDLIN(  66)													::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)													int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  66)													int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  66)													int this3 = this2;
HXDLIN(  66)													int this4;
HXDLIN(  66)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)														this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            													}
            													else {
HXLINE(  66)														this4 = this3;
            													}
HXDLIN(  66)													Float a1;
HXDLIN(  66)													int this5 = ((this4 >> 24) & 255);
HXDLIN(  66)													if ((this5 == 0)) {
HXLINE(  66)														a1 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float r1;
HXDLIN(  66)													int this6 = ((this4 >> 16) & 255);
HXDLIN(  66)													if ((this6 == 0)) {
HXLINE(  66)														r1 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float g1;
HXDLIN(  66)													int this7 = ((this4 >> 8) & 255);
HXDLIN(  66)													if ((this7 == 0)) {
HXLINE(  66)														g1 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float b1;
HXDLIN(  66)													int this8 = (this4 & 255);
HXDLIN(  66)													if ((this8 == 0)) {
HXLINE(  66)														b1 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float a2;
HXDLIN(  66)													int this9 = ((col >> 24) & 255);
HXDLIN(  66)													if ((this9 == 0)) {
HXLINE(  66)														a2 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float r2;
HXDLIN(  66)													int this10 = ((col >> 16) & 255);
HXDLIN(  66)													if ((this10 == 0)) {
HXLINE(  66)														r2 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float g2;
HXDLIN(  66)													int this11 = ((col >> 8) & 255);
HXDLIN(  66)													if ((this11 == 0)) {
HXLINE(  66)														g2 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float b2;
HXDLIN(  66)													int this12 = (col & 255);
HXDLIN(  66)													if ((this12 == 0)) {
HXLINE(  66)														b2 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  66)													int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  66)													int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  66)													int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  66)													int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  66)													int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  66)													{
HXLINE(  66)														::haxe::io::ArrayBufferViewImpl this13 = undoImage2->image;
HXDLIN(  66)														int value;
HXDLIN(  66)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)															value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            														}
            														else {
HXLINE(  66)															value = blended;
            														}
HXDLIN(  66)														bool _hx_tmp;
HXDLIN(  66)														if ((location >= 0)) {
HXLINE(  66)															_hx_tmp = (location < (this13->byteLength >> 2));
            														}
            														else {
HXLINE(  66)															_hx_tmp = false;
            														}
HXDLIN(  66)														if (_hx_tmp) {
HXLINE(  66)															::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  66)															int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  66)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  66)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  66)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  66)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
            												else {
HXLINE(  66)													::haxe::io::ArrayBufferViewImpl this1 = undoImage2->image;
HXDLIN(  66)													int index;
HXDLIN(  66)													if (undoImage2->useVirtualPos) {
HXLINE(  66)														index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage2->virtualY) * ( (Float)(undoImage2->width) )) + x) - undoImage2->virtualX));
            													}
            													else {
HXLINE(  66)														index = ::Std_obj::_hx_int(( (Float)(((y * undoImage2->width) + x)) ));
            													}
HXDLIN(  66)													int value;
HXDLIN(  66)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)														value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE(  66)														value = c;
            													}
HXDLIN(  66)													bool _hx_tmp;
HXDLIN(  66)													if ((index >= 0)) {
HXLINE(  66)														_hx_tmp = (index < (this1->byteLength >> 2));
            													}
            													else {
HXLINE(  66)														_hx_tmp = false;
            													}
HXDLIN(  66)													if (_hx_tmp) {
HXLINE(  66)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)														int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  66)														_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  66)														_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  66)														_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  66)														_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            													}
            												}
            											}
            											else {
HXLINE(  66)												if (forceClear) {
HXLINE(  66)													::haxe::io::ArrayBufferViewImpl this1 = undoImage2->image;
HXDLIN(  66)													int x = (dx - rectLeft);
HXDLIN(  66)													int y = (dy - rectTop);
HXDLIN(  66)													int index;
HXDLIN(  66)													if (undoImage2->useVirtualPos) {
HXLINE(  66)														index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage2->virtualY) * ( (Float)(undoImage2->width) )) + x) - undoImage2->virtualX));
            													}
            													else {
HXLINE(  66)														index = ::Std_obj::_hx_int(( (Float)(((y * undoImage2->width) + x)) ));
            													}
HXDLIN(  66)													bool _hx_tmp;
HXDLIN(  66)													if ((index >= 0)) {
HXLINE(  66)														_hx_tmp = (index < (this1->byteLength >> 2));
            													}
            													else {
HXLINE(  66)														_hx_tmp = false;
            													}
HXDLIN(  66)													if (_hx_tmp) {
HXLINE(  66)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)														int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  66)														_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  66)														_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  66)														_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  66)														_this->b[(pos + 3)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN(  66)					bool found2 = false;
HXDLIN(  66)					{
HXLINE(  66)						int _g_min2 = xIter32->start;
HXDLIN(  66)						int _g_max2 = xIter32->max;
HXDLIN(  66)						while((_g_min2 < _g_max2)){
HXLINE(  66)							_g_min2 = (_g_min2 + 1);
HXDLIN(  66)							int px = (_g_min2 - 1);
HXDLIN(  66)							Float pcx = (( (Float)(px) ) - dx);
HXLINE( 620)							found2 = false;
HXLINE(  66)							{
HXLINE(  66)								int _g_min = yIter32->start;
HXDLIN(  66)								int _g_max = yIter32->max;
HXDLIN(  66)								while((_g_min < _g_max)){
HXLINE(  66)									_g_min = (_g_min + 1);
HXDLIN(  66)									int py = (_g_min - 1);
HXDLIN(  66)									Float pcy = (( (Float)(py) ) - dy);
HXDLIN(  66)									Float dot31 = ((pcx * bcx2) + (pcy * bcy2));
HXDLIN(  66)									Float dot32 = ((pcx * acx2) + (pcy * acy2));
HXDLIN(  66)									Float ratioA = (((dot222 * dot31) - (dot122 * dot32)) * denom12);
HXDLIN(  66)									Float ratioB = (((dot112 * dot32) - (dot122 * dot31)) * denom12);
HXDLIN(  66)									Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN(  66)									bool _hx_tmp;
HXDLIN(  66)									bool _hx_tmp1;
HXDLIN(  66)									if ((ratioA >= 0)) {
HXLINE(  66)										_hx_tmp1 = (ratioB >= 0);
            									}
            									else {
HXLINE(  66)										_hx_tmp1 = false;
            									}
HXDLIN(  66)									if (_hx_tmp1) {
HXLINE(  66)										_hx_tmp = (ratioC >= 0);
            									}
            									else {
HXLINE(  66)										_hx_tmp = false;
            									}
HXDLIN(  66)									if (_hx_tmp) {
HXLINE(  66)										int i = ::Std_obj::_hx_int((( (Float)(aA2) ) * (softC * ratioB)));
HXDLIN(  66)										if ((i > 255)) {
HXLINE(  24)											i = 255;
            										}
HXLINE(  66)										if ((i < 0)) {
HXLINE(  25)											i = 0;
            										}
HXLINE(  66)										int this1 = i;
HXDLIN(  66)										int a = this1;
HXDLIN(  66)										int i1 = ::Std_obj::_hx_int(( (Float)(rA2) ));
HXDLIN(  66)										if ((i1 > 255)) {
HXLINE(  24)											i1 = 255;
            										}
HXLINE(  66)										if ((i1 < 0)) {
HXLINE(  25)											i1 = 0;
            										}
HXLINE(  66)										int this2 = i1;
HXDLIN(  66)										int r = this2;
HXDLIN(  66)										int i2 = ::Std_obj::_hx_int(( (Float)(gA2) ));
HXDLIN(  66)										if ((i2 > 255)) {
HXLINE(  24)											i2 = 255;
            										}
HXLINE(  66)										if ((i2 < 0)) {
HXLINE(  25)											i2 = 0;
            										}
HXLINE(  66)										int this3 = i2;
HXDLIN(  66)										int g = this3;
HXDLIN(  66)										int i3 = ::Std_obj::_hx_int(( (Float)(bA2) ));
HXDLIN(  66)										if ((i3 > 255)) {
HXLINE(  24)											i3 = 255;
            										}
HXLINE(  66)										if ((i3 < 0)) {
HXLINE(  25)											i3 = 0;
            										}
HXLINE(  66)										int this4 = i3;
HXDLIN(  66)										int b = this4;
HXDLIN(  66)										{
HXLINE(  66)											int location;
HXDLIN(  66)											if (pixelShape->useVirtualPos) {
HXLINE(  66)												location = ::Std_obj::_hx_int(((((( (Float)(py) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + px) - pixelShape->virtualX));
            											}
            											else {
HXLINE(  66)												location = ::Std_obj::_hx_int(( (Float)(((py * pixelShape->width) + px)) ));
            											}
HXDLIN(  66)											bool _hx_tmp;
HXDLIN(  66)											if (pixelShape->transparent) {
HXLINE(  66)												_hx_tmp = (a < 254);
            											}
            											else {
HXLINE(  66)												_hx_tmp = false;
            											}
HXDLIN(  66)											if (_hx_tmp) {
HXLINE(  66)												::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  66)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)												int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  66)												int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  66)												int this3 = this2;
HXDLIN(  66)												int old;
HXDLIN(  66)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)													old = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            												}
            												else {
HXLINE(  66)													old = this3;
            												}
HXDLIN(  66)												int rhs = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  66)												Float a1;
HXDLIN(  66)												int this4 = ((old >> 24) & 255);
HXDLIN(  66)												if ((this4 == 0)) {
HXLINE(  66)													a1 = ((Float)0.);
            												}
            												else {
HXLINE(  66)													a1 = (( (Float)(this4) ) / ( (Float)(255) ));
            												}
HXDLIN(  66)												Float r1;
HXDLIN(  66)												int this5 = ((old >> 16) & 255);
HXDLIN(  66)												if ((this5 == 0)) {
HXLINE(  66)													r1 = ((Float)0.);
            												}
            												else {
HXLINE(  66)													r1 = (( (Float)(this5) ) / ( (Float)(255) ));
            												}
HXDLIN(  66)												Float g1;
HXDLIN(  66)												int this6 = ((old >> 8) & 255);
HXDLIN(  66)												if ((this6 == 0)) {
HXLINE(  66)													g1 = ((Float)0.);
            												}
            												else {
HXLINE(  66)													g1 = (( (Float)(this6) ) / ( (Float)(255) ));
            												}
HXDLIN(  66)												Float b1;
HXDLIN(  66)												int this7 = (old & 255);
HXDLIN(  66)												if ((this7 == 0)) {
HXLINE(  66)													b1 = ((Float)0.);
            												}
            												else {
HXLINE(  66)													b1 = (( (Float)(this7) ) / ( (Float)(255) ));
            												}
HXDLIN(  66)												Float a2;
HXDLIN(  66)												int this8 = ((rhs >> 24) & 255);
HXDLIN(  66)												if ((this8 == 0)) {
HXLINE(  66)													a2 = ((Float)0.);
            												}
            												else {
HXLINE(  66)													a2 = (( (Float)(this8) ) / ( (Float)(255) ));
            												}
HXDLIN(  66)												Float r2;
HXDLIN(  66)												int this9 = ((rhs >> 16) & 255);
HXDLIN(  66)												if ((this9 == 0)) {
HXLINE(  66)													r2 = ((Float)0.);
            												}
            												else {
HXLINE(  66)													r2 = (( (Float)(this9) ) / ( (Float)(255) ));
            												}
HXDLIN(  66)												Float g2;
HXDLIN(  66)												int this10 = ((rhs >> 8) & 255);
HXDLIN(  66)												if ((this10 == 0)) {
HXLINE(  66)													g2 = ((Float)0.);
            												}
            												else {
HXLINE(  66)													g2 = (( (Float)(this10) ) / ( (Float)(255) ));
            												}
HXDLIN(  66)												Float b2;
HXDLIN(  66)												int this11 = (rhs & 255);
HXDLIN(  66)												if ((this11 == 0)) {
HXLINE(  66)													b2 = ((Float)0.);
            												}
            												else {
HXLINE(  66)													b2 = (( (Float)(this11) ) / ( (Float)(255) ));
            												}
HXDLIN(  66)												Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  66)												int r3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  66)												int g3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  66)												int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  66)												int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  66)												int blended = ((((a4 << 24) | (r3 << 16)) | (g3 << 8)) | b3);
HXDLIN(  66)												{
HXLINE(  66)													::haxe::io::ArrayBufferViewImpl this12 = pixelShape->image;
HXDLIN(  66)													int value;
HXDLIN(  66)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)														value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            													}
            													else {
HXLINE(  66)														value = blended;
            													}
HXDLIN(  66)													bool _hx_tmp;
HXDLIN(  66)													if ((location >= 0)) {
HXLINE(  66)														_hx_tmp = (location < (this12->byteLength >> 2));
            													}
            													else {
HXLINE(  66)														_hx_tmp = false;
            													}
HXDLIN(  66)													if (_hx_tmp) {
HXLINE(  66)														::haxe::io::Bytes _this = this12->bytes;
HXDLIN(  66)														int pos = ((location << 2) + this12->byteOffset);
HXDLIN(  66)														_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  66)														_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  66)														_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  66)														_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            													}
            												}
            											}
            											else {
HXLINE(  66)												::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  66)												int value;
HXDLIN(  66)												if (pixelShape->isLittle) {
HXLINE(  66)													value = ((((a << 24) | (b << 16)) | (g << 8)) | r);
            												}
            												else {
HXLINE(  66)													value = ((((a << 24) | (r << 16)) | (g << 8)) | b);
            												}
HXDLIN(  66)												bool _hx_tmp;
HXDLIN(  66)												if ((location >= 0)) {
HXLINE(  66)													_hx_tmp = (location < (this1->byteLength >> 2));
            												}
            												else {
HXLINE(  66)													_hx_tmp = false;
            												}
HXDLIN(  66)												if (_hx_tmp) {
HXLINE(  66)													::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)													int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  66)													_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  66)													_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  66)													_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  66)													_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            												}
            											}
            										}
HXLINE( 634)										found2 = true;
            									}
            									else {
HXLINE(  66)										if (found2) {
HXLINE(  66)											goto _hx_goto_14;
            										}
            									}
            								}
            								_hx_goto_14:;
            							}
            						}
            					}
HXDLIN(  66)					if ((hasHit == false)) {
HXLINE(  66)						::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,ex,ey,cx,cy,dx,dy,true);
HXDLIN(  66)						if (hasUndo2) {
HXLINE(  66)							v->undoImage = undoImage2;
HXDLIN(  66)							v->undoX = xIter32->start;
HXDLIN(  66)							v->undoY = yIter32->start;
            						}
            					}
            				}
HXDLIN(  66)				{
HXLINE(  66)					bool hasUndo3 = false;
HXDLIN(  66)					int aA3 = ((color >> 24) & 255);
HXDLIN(  66)					int rA3 = ((color >> 16) & 255);
HXDLIN(  66)					int gA3 = ((color >> 8) & 255);
HXDLIN(  66)					int bA3 = (color & 255);
HXDLIN(  66)					Float bcx3 = (dx - ax);
HXDLIN(  66)					Float bcy3 = (dy - ay);
HXDLIN(  66)					Float acx3 = (ex - ax);
HXDLIN(  66)					Float acy3 = (ey - ay);
HXDLIN(  66)					Float dot113 = ((bcx3 * bcx3) + (bcy3 * bcy3));
HXDLIN(  66)					Float dot123 = ((bcx3 * acx3) + (bcy3 * acy3));
HXDLIN(  66)					Float dot223 = ((acx3 * acx3) + (acy3 * acy3));
HXDLIN(  66)					Float denom13 = (( (Float)(1) ) / ((dot113 * dot223) - (dot123 * dot123)));
HXDLIN(  66)					::pixelimage::iter::IntIterStart xIter33;
HXDLIN(  66)					if ((ex > dx)) {
HXLINE(  66)						if ((ex > ax)) {
HXLINE(  66)							int min;
HXDLIN(  66)							if ((dx > ax)) {
HXLINE(  66)								min = ::Math_obj::floor(ax);
            							}
            							else {
HXLINE(  66)								min = ::Math_obj::floor(dx);
            							}
HXDLIN(  66)							int ii_min = min;
HXDLIN(  66)							int ii_max = ::Math_obj::ceil(ex);
HXDLIN(  66)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)							xIter33 = this1;
            						}
            						else {
HXLINE(  66)							int ii_min = ::Math_obj::floor(dx);
HXDLIN(  66)							int ii_max = ::Math_obj::ceil(ax);
HXDLIN(  66)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)							xIter33 = this1;
            						}
            					}
            					else {
HXLINE(  66)						if ((dx > ax)) {
HXLINE(  66)							int min;
HXDLIN(  66)							if ((ex > ax)) {
HXLINE(  66)								min = ::Math_obj::floor(ax);
            							}
            							else {
HXLINE(  66)								min = ::Math_obj::ceil(ex);
            							}
HXDLIN(  66)							int ii_min = min;
HXDLIN(  66)							int ii_max = ::Math_obj::ceil(dx);
HXDLIN(  66)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)							xIter33 = this1;
            						}
            						else {
HXLINE(  66)							int ii_min = ::Math_obj::floor(ex);
HXDLIN(  66)							int ii_max = ::Math_obj::ceil(ax);
HXDLIN(  66)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)							xIter33 = this1;
            						}
            					}
HXDLIN(  66)					::pixelimage::iter::IntIterStart yIter33;
HXDLIN(  66)					if ((ey > dy)) {
HXLINE(  66)						if ((ey > ay)) {
HXLINE(  66)							int min;
HXDLIN(  66)							if ((dy > ay)) {
HXLINE(  66)								min = ::Math_obj::floor(ay);
            							}
            							else {
HXLINE(  66)								min = ::Math_obj::floor(dy);
            							}
HXDLIN(  66)							int ii_min = min;
HXDLIN(  66)							int ii_max = ::Math_obj::ceil(ey);
HXDLIN(  66)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)							yIter33 = this1;
            						}
            						else {
HXLINE(  66)							int ii_min = ::Math_obj::floor(dy);
HXDLIN(  66)							int ii_max = ::Math_obj::ceil(ay);
HXDLIN(  66)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)							yIter33 = this1;
            						}
            					}
            					else {
HXLINE(  66)						if ((dy > ay)) {
HXLINE(  66)							int min;
HXDLIN(  66)							if ((ey > ay)) {
HXLINE(  66)								min = ::Math_obj::floor(ay);
            							}
            							else {
HXLINE(  66)								min = ::Math_obj::ceil(ey);
            							}
HXDLIN(  66)							int ii_min = min;
HXDLIN(  66)							int ii_max = ::Math_obj::ceil(dy);
HXDLIN(  66)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)							yIter33 = this1;
            						}
            						else {
HXLINE(  66)							int ii_min = ::Math_obj::floor(ey);
HXDLIN(  66)							int ii_max = ::Math_obj::ceil(ay);
HXDLIN(  66)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)							yIter33 = this1;
            						}
            					}
HXDLIN(  66)					::pixelimage::ImageStruct undoImage3 = null();
HXDLIN(  66)					if (hasUndo3) {
HXLINE(  66)						int w = ((xIter33->max - xIter33->start) + 1);
HXDLIN(  66)						int h = ((yIter33->max - yIter33->start) + 1);
HXDLIN(  66)						int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN(  66)						::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  66)						::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN(  66)						::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN(  66)						undoImage3 = this3;
HXDLIN(  66)						{
HXLINE(  66)							int rectLeft = xIter33->start;
HXDLIN(  66)							int rectTop = yIter33->start;
HXDLIN(  66)							int rectRight = xIter33->max;
HXDLIN(  66)							bool forceClear = false;
HXDLIN(  66)							{
HXLINE(  66)								int _g = rectTop;
HXDLIN(  66)								int _g1 = yIter33->max;
HXDLIN(  66)								while((_g < _g1)){
HXLINE(  66)									_g = (_g + 1);
HXDLIN(  66)									int dy = (_g - 1);
HXDLIN(  66)									{
HXLINE(  66)										int _g1 = rectLeft;
HXDLIN(  66)										int _g2 = rectRight;
HXDLIN(  66)										while((_g1 < _g2)){
HXLINE(  66)											_g1 = (_g1 + 1);
HXDLIN(  66)											int dx = (_g1 - 1);
HXDLIN(  66)											::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  66)											int index;
HXDLIN(  66)											if (pixelShape->useVirtualPos) {
HXLINE(  66)												index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + dx) - pixelShape->virtualX));
            											}
            											else {
HXLINE(  66)												index = ::Std_obj::_hx_int(( (Float)(((dy * pixelShape->width) + dx)) ));
            											}
HXDLIN(  66)											::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)											int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  66)											int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  66)											int col;
HXDLIN(  66)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)												col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            											}
            											else {
HXLINE(  66)												col = c;
            											}
HXDLIN(  66)											bool _hx_tmp;
HXDLIN(  66)											if (pixelShape->useMask) {
HXLINE(  66)												_hx_tmp = ::hx::IsNotNull( pixelShape->mask );
            											}
            											else {
HXLINE(  66)												_hx_tmp = false;
            											}
HXDLIN(  66)											if (_hx_tmp) {
HXLINE(  66)												::pixelimage::ImageStruct this1 = pixelShape->mask;
HXDLIN(  66)												::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  66)												int index;
HXDLIN(  66)												if (this1->useVirtualPos) {
HXLINE(  66)													index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            												}
            												else {
HXLINE(  66)													index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            												}
HXDLIN(  66)												::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  66)												int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  66)												int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  66)												int v;
HXDLIN(  66)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)													v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE(  66)													v = c;
            												}
HXDLIN(  66)												int this3 = v;
HXDLIN(  66)												int maskPixel = this3;
HXDLIN(  66)												int this4 = col;
HXDLIN(  66)												int this5 = this4;
HXDLIN(  66)												if ((maskPixel == 0)) {
HXLINE(  66)													int this1 = this5;
HXDLIN(  66)													col = this1;
            												}
            												else {
HXLINE(  66)													Float m0;
HXDLIN(  66)													int this1 = ((maskPixel >> 24) & 255);
HXDLIN(  66)													if ((this1 == 0)) {
HXLINE(  66)														m0 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float m1;
HXDLIN(  66)													int this2 = ((maskPixel >> 16) & 255);
HXDLIN(  66)													if ((this2 == 0)) {
HXLINE(  66)														m1 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float m2;
HXDLIN(  66)													int this3 = ((maskPixel >> 8) & 255);
HXDLIN(  66)													if ((this3 == 0)) {
HXLINE(  66)														m2 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float m3;
HXDLIN(  66)													int this4 = (maskPixel & 255);
HXDLIN(  66)													if ((this4 == 0)) {
HXLINE(  66)														m3 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN(  66)													int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN(  66)													int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN(  66)													int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN(  66)													col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            												}
            											}
HXDLIN(  66)											if ((col != 0)) {
HXLINE(  66)												int x = (dx - rectLeft);
HXDLIN(  66)												int y = (dy - rectTop);
HXDLIN(  66)												int this1 = col;
HXDLIN(  66)												int c = this1;
HXDLIN(  66)												bool _hx_tmp;
HXDLIN(  66)												if ((((c >> 24) & 255) < 254)) {
HXLINE(  66)													_hx_tmp = undoImage3->transparent;
            												}
            												else {
HXLINE(  66)													_hx_tmp = false;
            												}
HXDLIN(  66)												if (_hx_tmp) {
HXLINE(  66)													int location;
HXDLIN(  66)													if (undoImage3->useVirtualPos) {
HXLINE(  66)														location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x) - undoImage3->virtualX));
            													}
            													else {
HXLINE(  66)														location = ::Std_obj::_hx_int(( (Float)(((y * undoImage3->width) + x)) ));
            													}
HXDLIN(  66)													::haxe::io::ArrayBufferViewImpl this1 = undoImage3->image;
HXDLIN(  66)													::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)													int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  66)													int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  66)													int this3 = this2;
HXDLIN(  66)													int this4;
HXDLIN(  66)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)														this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            													}
            													else {
HXLINE(  66)														this4 = this3;
            													}
HXDLIN(  66)													Float a1;
HXDLIN(  66)													int this5 = ((this4 >> 24) & 255);
HXDLIN(  66)													if ((this5 == 0)) {
HXLINE(  66)														a1 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float r1;
HXDLIN(  66)													int this6 = ((this4 >> 16) & 255);
HXDLIN(  66)													if ((this6 == 0)) {
HXLINE(  66)														r1 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float g1;
HXDLIN(  66)													int this7 = ((this4 >> 8) & 255);
HXDLIN(  66)													if ((this7 == 0)) {
HXLINE(  66)														g1 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float b1;
HXDLIN(  66)													int this8 = (this4 & 255);
HXDLIN(  66)													if ((this8 == 0)) {
HXLINE(  66)														b1 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float a2;
HXDLIN(  66)													int this9 = ((col >> 24) & 255);
HXDLIN(  66)													if ((this9 == 0)) {
HXLINE(  66)														a2 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float r2;
HXDLIN(  66)													int this10 = ((col >> 16) & 255);
HXDLIN(  66)													if ((this10 == 0)) {
HXLINE(  66)														r2 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float g2;
HXDLIN(  66)													int this11 = ((col >> 8) & 255);
HXDLIN(  66)													if ((this11 == 0)) {
HXLINE(  66)														g2 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float b2;
HXDLIN(  66)													int this12 = (col & 255);
HXDLIN(  66)													if ((this12 == 0)) {
HXLINE(  66)														b2 = ((Float)0.);
            													}
            													else {
HXLINE(  66)														b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            													}
HXDLIN(  66)													Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  66)													int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  66)													int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  66)													int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  66)													int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  66)													int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  66)													{
HXLINE(  66)														::haxe::io::ArrayBufferViewImpl this13 = undoImage3->image;
HXDLIN(  66)														int value;
HXDLIN(  66)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)															value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            														}
            														else {
HXLINE(  66)															value = blended;
            														}
HXDLIN(  66)														bool _hx_tmp;
HXDLIN(  66)														if ((location >= 0)) {
HXLINE(  66)															_hx_tmp = (location < (this13->byteLength >> 2));
            														}
            														else {
HXLINE(  66)															_hx_tmp = false;
            														}
HXDLIN(  66)														if (_hx_tmp) {
HXLINE(  66)															::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  66)															int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  66)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  66)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  66)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  66)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
            												else {
HXLINE(  66)													::haxe::io::ArrayBufferViewImpl this1 = undoImage3->image;
HXDLIN(  66)													int index;
HXDLIN(  66)													if (undoImage3->useVirtualPos) {
HXLINE(  66)														index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x) - undoImage3->virtualX));
            													}
            													else {
HXLINE(  66)														index = ::Std_obj::_hx_int(( (Float)(((y * undoImage3->width) + x)) ));
            													}
HXDLIN(  66)													int value;
HXDLIN(  66)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)														value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE(  66)														value = c;
            													}
HXDLIN(  66)													bool _hx_tmp;
HXDLIN(  66)													if ((index >= 0)) {
HXLINE(  66)														_hx_tmp = (index < (this1->byteLength >> 2));
            													}
            													else {
HXLINE(  66)														_hx_tmp = false;
            													}
HXDLIN(  66)													if (_hx_tmp) {
HXLINE(  66)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)														int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  66)														_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  66)														_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  66)														_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  66)														_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            													}
            												}
            											}
            											else {
HXLINE(  66)												if (forceClear) {
HXLINE(  66)													::haxe::io::ArrayBufferViewImpl this1 = undoImage3->image;
HXDLIN(  66)													int x = (dx - rectLeft);
HXDLIN(  66)													int y = (dy - rectTop);
HXDLIN(  66)													int index;
HXDLIN(  66)													if (undoImage3->useVirtualPos) {
HXLINE(  66)														index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x) - undoImage3->virtualX));
            													}
            													else {
HXLINE(  66)														index = ::Std_obj::_hx_int(( (Float)(((y * undoImage3->width) + x)) ));
            													}
HXDLIN(  66)													bool _hx_tmp;
HXDLIN(  66)													if ((index >= 0)) {
HXLINE(  66)														_hx_tmp = (index < (this1->byteLength >> 2));
            													}
            													else {
HXLINE(  66)														_hx_tmp = false;
            													}
HXDLIN(  66)													if (_hx_tmp) {
HXLINE(  66)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)														int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  66)														_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  66)														_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  66)														_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  66)														_this->b[(pos + 3)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN(  66)					bool found3 = false;
HXDLIN(  66)					{
HXLINE(  66)						int _g_min3 = xIter33->start;
HXDLIN(  66)						int _g_max3 = xIter33->max;
HXDLIN(  66)						while((_g_min3 < _g_max3)){
HXLINE(  66)							_g_min3 = (_g_min3 + 1);
HXDLIN(  66)							int px = (_g_min3 - 1);
HXDLIN(  66)							Float pcx = (( (Float)(px) ) - ax);
HXLINE( 620)							found3 = false;
HXLINE(  66)							{
HXLINE(  66)								int _g_min = yIter33->start;
HXDLIN(  66)								int _g_max = yIter33->max;
HXDLIN(  66)								while((_g_min < _g_max)){
HXLINE(  66)									_g_min = (_g_min + 1);
HXDLIN(  66)									int py = (_g_min - 1);
HXDLIN(  66)									Float pcy = (( (Float)(py) ) - ay);
HXDLIN(  66)									Float dot31 = ((pcx * bcx3) + (pcy * bcy3));
HXDLIN(  66)									Float dot32 = ((pcx * acx3) + (pcy * acy3));
HXDLIN(  66)									Float ratioA = (((dot223 * dot31) - (dot123 * dot32)) * denom13);
HXDLIN(  66)									Float ratioB = (((dot113 * dot32) - (dot123 * dot31)) * denom13);
HXDLIN(  66)									Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN(  66)									bool _hx_tmp;
HXDLIN(  66)									bool _hx_tmp1;
HXDLIN(  66)									if ((ratioA >= 0)) {
HXLINE(  66)										_hx_tmp1 = (ratioB >= 0);
            									}
            									else {
HXLINE(  66)										_hx_tmp1 = false;
            									}
HXDLIN(  66)									if (_hx_tmp1) {
HXLINE(  66)										_hx_tmp = (ratioC >= 0);
            									}
            									else {
HXLINE(  66)										_hx_tmp = false;
            									}
HXDLIN(  66)									if (_hx_tmp) {
HXLINE(  66)										int i = ::Std_obj::_hx_int((( (Float)(aA3) ) * (softC * ratioB)));
HXDLIN(  66)										if ((i > 255)) {
HXLINE(  24)											i = 255;
            										}
HXLINE(  66)										if ((i < 0)) {
HXLINE(  25)											i = 0;
            										}
HXLINE(  66)										int this1 = i;
HXDLIN(  66)										int a = this1;
HXDLIN(  66)										int i1 = ::Std_obj::_hx_int(( (Float)(rA3) ));
HXDLIN(  66)										if ((i1 > 255)) {
HXLINE(  24)											i1 = 255;
            										}
HXLINE(  66)										if ((i1 < 0)) {
HXLINE(  25)											i1 = 0;
            										}
HXLINE(  66)										int this2 = i1;
HXDLIN(  66)										int r = this2;
HXDLIN(  66)										int i2 = ::Std_obj::_hx_int(( (Float)(gA3) ));
HXDLIN(  66)										if ((i2 > 255)) {
HXLINE(  24)											i2 = 255;
            										}
HXLINE(  66)										if ((i2 < 0)) {
HXLINE(  25)											i2 = 0;
            										}
HXLINE(  66)										int this3 = i2;
HXDLIN(  66)										int g = this3;
HXDLIN(  66)										int i3 = ::Std_obj::_hx_int(( (Float)(bA3) ));
HXDLIN(  66)										if ((i3 > 255)) {
HXLINE(  24)											i3 = 255;
            										}
HXLINE(  66)										if ((i3 < 0)) {
HXLINE(  25)											i3 = 0;
            										}
HXLINE(  66)										int this4 = i3;
HXDLIN(  66)										int b = this4;
HXDLIN(  66)										{
HXLINE(  66)											int location;
HXDLIN(  66)											if (pixelShape->useVirtualPos) {
HXLINE(  66)												location = ::Std_obj::_hx_int(((((( (Float)(py) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + px) - pixelShape->virtualX));
            											}
            											else {
HXLINE(  66)												location = ::Std_obj::_hx_int(( (Float)(((py * pixelShape->width) + px)) ));
            											}
HXDLIN(  66)											bool _hx_tmp;
HXDLIN(  66)											if (pixelShape->transparent) {
HXLINE(  66)												_hx_tmp = (a < 254);
            											}
            											else {
HXLINE(  66)												_hx_tmp = false;
            											}
HXDLIN(  66)											if (_hx_tmp) {
HXLINE(  66)												::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  66)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)												int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  66)												int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  66)												int this3 = this2;
HXDLIN(  66)												int old;
HXDLIN(  66)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)													old = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            												}
            												else {
HXLINE(  66)													old = this3;
            												}
HXDLIN(  66)												int rhs = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  66)												Float a1;
HXDLIN(  66)												int this4 = ((old >> 24) & 255);
HXDLIN(  66)												if ((this4 == 0)) {
HXLINE(  66)													a1 = ((Float)0.);
            												}
            												else {
HXLINE(  66)													a1 = (( (Float)(this4) ) / ( (Float)(255) ));
            												}
HXDLIN(  66)												Float r1;
HXDLIN(  66)												int this5 = ((old >> 16) & 255);
HXDLIN(  66)												if ((this5 == 0)) {
HXLINE(  66)													r1 = ((Float)0.);
            												}
            												else {
HXLINE(  66)													r1 = (( (Float)(this5) ) / ( (Float)(255) ));
            												}
HXDLIN(  66)												Float g1;
HXDLIN(  66)												int this6 = ((old >> 8) & 255);
HXDLIN(  66)												if ((this6 == 0)) {
HXLINE(  66)													g1 = ((Float)0.);
            												}
            												else {
HXLINE(  66)													g1 = (( (Float)(this6) ) / ( (Float)(255) ));
            												}
HXDLIN(  66)												Float b1;
HXDLIN(  66)												int this7 = (old & 255);
HXDLIN(  66)												if ((this7 == 0)) {
HXLINE(  66)													b1 = ((Float)0.);
            												}
            												else {
HXLINE(  66)													b1 = (( (Float)(this7) ) / ( (Float)(255) ));
            												}
HXDLIN(  66)												Float a2;
HXDLIN(  66)												int this8 = ((rhs >> 24) & 255);
HXDLIN(  66)												if ((this8 == 0)) {
HXLINE(  66)													a2 = ((Float)0.);
            												}
            												else {
HXLINE(  66)													a2 = (( (Float)(this8) ) / ( (Float)(255) ));
            												}
HXDLIN(  66)												Float r2;
HXDLIN(  66)												int this9 = ((rhs >> 16) & 255);
HXDLIN(  66)												if ((this9 == 0)) {
HXLINE(  66)													r2 = ((Float)0.);
            												}
            												else {
HXLINE(  66)													r2 = (( (Float)(this9) ) / ( (Float)(255) ));
            												}
HXDLIN(  66)												Float g2;
HXDLIN(  66)												int this10 = ((rhs >> 8) & 255);
HXDLIN(  66)												if ((this10 == 0)) {
HXLINE(  66)													g2 = ((Float)0.);
            												}
            												else {
HXLINE(  66)													g2 = (( (Float)(this10) ) / ( (Float)(255) ));
            												}
HXDLIN(  66)												Float b2;
HXDLIN(  66)												int this11 = (rhs & 255);
HXDLIN(  66)												if ((this11 == 0)) {
HXLINE(  66)													b2 = ((Float)0.);
            												}
            												else {
HXLINE(  66)													b2 = (( (Float)(this11) ) / ( (Float)(255) ));
            												}
HXDLIN(  66)												Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  66)												int r3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  66)												int g3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  66)												int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  66)												int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  66)												int blended = ((((a4 << 24) | (r3 << 16)) | (g3 << 8)) | b3);
HXDLIN(  66)												{
HXLINE(  66)													::haxe::io::ArrayBufferViewImpl this12 = pixelShape->image;
HXDLIN(  66)													int value;
HXDLIN(  66)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)														value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            													}
            													else {
HXLINE(  66)														value = blended;
            													}
HXDLIN(  66)													bool _hx_tmp;
HXDLIN(  66)													if ((location >= 0)) {
HXLINE(  66)														_hx_tmp = (location < (this12->byteLength >> 2));
            													}
            													else {
HXLINE(  66)														_hx_tmp = false;
            													}
HXDLIN(  66)													if (_hx_tmp) {
HXLINE(  66)														::haxe::io::Bytes _this = this12->bytes;
HXDLIN(  66)														int pos = ((location << 2) + this12->byteOffset);
HXDLIN(  66)														_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  66)														_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  66)														_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  66)														_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            													}
            												}
            											}
            											else {
HXLINE(  66)												::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  66)												int value;
HXDLIN(  66)												if (pixelShape->isLittle) {
HXLINE(  66)													value = ((((a << 24) | (b << 16)) | (g << 8)) | r);
            												}
            												else {
HXLINE(  66)													value = ((((a << 24) | (r << 16)) | (g << 8)) | b);
            												}
HXDLIN(  66)												bool _hx_tmp;
HXDLIN(  66)												if ((location >= 0)) {
HXLINE(  66)													_hx_tmp = (location < (this1->byteLength >> 2));
            												}
            												else {
HXLINE(  66)													_hx_tmp = false;
            												}
HXDLIN(  66)												if (_hx_tmp) {
HXLINE(  66)													::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)													int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  66)													_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  66)													_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  66)													_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  66)													_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            												}
            											}
            										}
HXLINE( 634)										found3 = true;
            									}
            									else {
HXLINE(  66)										if (found3) {
HXLINE(  66)											goto _hx_goto_18;
            										}
            									}
            								}
            								_hx_goto_18:;
            							}
            						}
            					}
HXDLIN(  66)					if ((hasHit == false)) {
HXLINE(  66)						::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,ex,ey,dx,dy,ax,ay,true);
HXDLIN(  66)						if (hasUndo3) {
HXLINE(  66)							v->undoImage = undoImage3;
HXDLIN(  66)							v->undoX = xIter33->start;
HXDLIN(  66)							v->undoY = yIter33->start;
            						}
            					}
            				}
HXDLIN(  66)				if ((hasHit == true)) {
HXLINE(  66)					::pixelimage::algo::HitQuad v = ::pixelimage::algo::HitQuad_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,dx,dy,true);
            				}
            			}
            		}
HXLINE(  67)		return this->super::render(pixelShape);
            	}



::hx::ObjectPtr< QuintShape_obj > QuintShape_obj::__new(::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< int >  __o_strokeColor,::hx::Null< Float >  __o_aX,::hx::Null< Float >  __o_aY,::hx::Null< Float >  __o_bX,::hx::Null< Float >  __o_bY,::hx::Null< Float >  __o_cX,::hx::Null< Float >  __o_cY,::hx::Null< Float >  __o_dX,::hx::Null< Float >  __o_dY,::hx::Null< Float >  __o_softC) {
	::hx::ObjectPtr< QuintShape_obj > __this = new QuintShape_obj();
	__this->__construct(__o_opacity,__o_visibility,__o_strokeColor,__o_aX,__o_aY,__o_bX,__o_bY,__o_cX,__o_cY,__o_dX,__o_dY,__o_softC);
	return __this;
}

::hx::ObjectPtr< QuintShape_obj > QuintShape_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< int >  __o_strokeColor,::hx::Null< Float >  __o_aX,::hx::Null< Float >  __o_aY,::hx::Null< Float >  __o_bX,::hx::Null< Float >  __o_bY,::hx::Null< Float >  __o_cX,::hx::Null< Float >  __o_cY,::hx::Null< Float >  __o_dX,::hx::Null< Float >  __o_dY,::hx::Null< Float >  __o_softC) {
	QuintShape_obj *__this = (QuintShape_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(QuintShape_obj), true, "pixelimage.triangleGML.contour.QuintShape"));
	*(void **)__this = QuintShape_obj::_hx_vtable;
	__this->__construct(__o_opacity,__o_visibility,__o_strokeColor,__o_aX,__o_aY,__o_bX,__o_bY,__o_cX,__o_cY,__o_dX,__o_dY,__o_softC);
	return __this;
}

QuintShape_obj::QuintShape_obj()
{
}

::hx::Val QuintShape_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"aX") ) { return ::hx::Val( aX ); }
		if (HX_FIELD_EQ(inName,"aY") ) { return ::hx::Val( aY ); }
		if (HX_FIELD_EQ(inName,"bX") ) { return ::hx::Val( bX ); }
		if (HX_FIELD_EQ(inName,"bY") ) { return ::hx::Val( bY ); }
		if (HX_FIELD_EQ(inName,"cX") ) { return ::hx::Val( cX ); }
		if (HX_FIELD_EQ(inName,"cY") ) { return ::hx::Val( cY ); }
		if (HX_FIELD_EQ(inName,"dX") ) { return ::hx::Val( dX ); }
		if (HX_FIELD_EQ(inName,"dY") ) { return ::hx::Val( dY ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"softC") ) { return ::hx::Val( softC ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { return ::hx::Val( render_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setParameter") ) { return ::hx::Val( setParameter_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val QuintShape_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"aX") ) { aX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"aY") ) { aY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bX") ) { bX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bY") ) { bY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cX") ) { cX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cY") ) { cY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dX") ) { dX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dY") ) { dY=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"softC") ) { softC=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void QuintShape_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("aX",d7,54,00,00));
	outFields->push(HX_("aY",d8,54,00,00));
	outFields->push(HX_("bX",b6,55,00,00));
	outFields->push(HX_("bY",b7,55,00,00));
	outFields->push(HX_("cX",95,56,00,00));
	outFields->push(HX_("cY",96,56,00,00));
	outFields->push(HX_("dX",74,57,00,00));
	outFields->push(HX_("dY",75,57,00,00));
	outFields->push(HX_("softC",19,30,c1,80));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo QuintShape_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(QuintShape_obj,aX),HX_("aX",d7,54,00,00)},
	{::hx::fsFloat,(int)offsetof(QuintShape_obj,aY),HX_("aY",d8,54,00,00)},
	{::hx::fsFloat,(int)offsetof(QuintShape_obj,bX),HX_("bX",b6,55,00,00)},
	{::hx::fsFloat,(int)offsetof(QuintShape_obj,bY),HX_("bY",b7,55,00,00)},
	{::hx::fsFloat,(int)offsetof(QuintShape_obj,cX),HX_("cX",95,56,00,00)},
	{::hx::fsFloat,(int)offsetof(QuintShape_obj,cY),HX_("cY",96,56,00,00)},
	{::hx::fsFloat,(int)offsetof(QuintShape_obj,dX),HX_("dX",74,57,00,00)},
	{::hx::fsFloat,(int)offsetof(QuintShape_obj,dY),HX_("dY",75,57,00,00)},
	{::hx::fsFloat,(int)offsetof(QuintShape_obj,softC),HX_("softC",19,30,c1,80)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *QuintShape_obj_sStaticStorageInfo = 0;
#endif

static ::String QuintShape_obj_sMemberFields[] = {
	HX_("aX",d7,54,00,00),
	HX_("aY",d8,54,00,00),
	HX_("bX",b6,55,00,00),
	HX_("bY",b7,55,00,00),
	HX_("cX",95,56,00,00),
	HX_("cY",96,56,00,00),
	HX_("dX",74,57,00,00),
	HX_("dY",75,57,00,00),
	HX_("softC",19,30,c1,80),
	HX_("setParameter",a7,f5,ff,6c),
	HX_("render",56,6b,29,05),
	::String(null()) };

::hx::Class QuintShape_obj::__mClass;

void QuintShape_obj::__register()
{
	QuintShape_obj _hx_dummy;
	QuintShape_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pixelimage.triangleGML.contour.QuintShape",d3,54,de,f4);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(QuintShape_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< QuintShape_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = QuintShape_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = QuintShape_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pixelimage
} // end namespace triangleGML
} // end namespace contour
