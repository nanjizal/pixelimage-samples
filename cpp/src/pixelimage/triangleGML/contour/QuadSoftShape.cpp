// Generated by Haxe 4.3.0-rc.1+
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_io_ArrayBufferViewImpl
#include <haxe/io/ArrayBufferViewImpl.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_pixelimage_ImageStruct
#include <pixelimage/ImageStruct.h>
#endif
#ifndef INCLUDED_pixelimage__Endian_Endian_Fields_
#include <pixelimage/_Endian/Endian_Fields_.h>
#endif
#ifndef INCLUDED_pixelimage_algo_HitQuad
#include <pixelimage/algo/HitQuad.h>
#endif
#ifndef INCLUDED_pixelimage_algo_HitTri
#include <pixelimage/algo/HitTri.h>
#endif
#ifndef INCLUDED_pixelimage_algo_IhitObj
#include <pixelimage/algo/IhitObj.h>
#endif
#ifndef INCLUDED_pixelimage_iter_IntIterStart
#include <pixelimage/iter/IntIterStart.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_contour_QuadSoftShape
#include <pixelimage/triangleGML/contour/QuadSoftShape.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_BasicShape
#include <pixelimage/triangleGML/coreShape/BasicShape.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_GroupShape
#include <pixelimage/triangleGML/coreShape/GroupShape.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_ShapeInterface
#include <pixelimage/triangleGML/coreShape/ShapeInterface.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a9abf26cca3989c3_38_new,"pixelimage.triangleGML.contour.QuadSoftShape","new",0xff3cec65,"pixelimage.triangleGML.contour.QuadSoftShape.new","pixelimage/triangleGML/contour/QuadSoftShape.hx",38,0xe830ac2e)
HX_LOCAL_STACK_FRAME(_hx_pos_a9abf26cca3989c3_55_setParameter,"pixelimage.triangleGML.contour.QuadSoftShape","setParameter",0xaf87b102,"pixelimage.triangleGML.contour.QuadSoftShape.setParameter","pixelimage/triangleGML/contour/QuadSoftShape.hx",55,0xe830ac2e)
HX_LOCAL_STACK_FRAME(_hx_pos_a9abf26cca3989c3_86_render,"pixelimage.triangleGML.contour.QuadSoftShape","render",0x0327e071,"pixelimage.triangleGML.contour.QuadSoftShape.render","pixelimage/triangleGML/contour/QuadSoftShape.hx",86,0xe830ac2e)
namespace pixelimage{
namespace triangleGML{
namespace contour{

void QuadSoftShape_obj::__construct(::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< int >  __o_strokeColor,::hx::Null< Float >  __o_aX,::hx::Null< Float >  __o_aY,::hx::Null< Float >  __o_bX,::hx::Null< Float >  __o_bY,::hx::Null< Float >  __o_cX,::hx::Null< Float >  __o_cY,::hx::Null< Float >  __o_dX,::hx::Null< Float >  __o_dY,::hx::Null< Float >  __o_soft,::hx::Null< bool >  __o_softAB,::hx::Null< bool >  __o_softBC,::hx::Null< bool >  __o_softCD,::hx::Null< bool >  __o_softDA){
            		Float opacity = __o_opacity.Default(((Float)1.));
            		bool visibility = __o_visibility.Default(true);
            		int strokeColor = __o_strokeColor.Default(-1048576);
            		Float aX = __o_aX.Default(((Float)0.));
            		Float aY = __o_aY.Default(((Float)0.));
            		Float bX = __o_bX.Default(((Float)1.));
            		Float bY = __o_bY.Default(((Float)0.));
            		Float cX = __o_cX.Default(((Float)1.));
            		Float cY = __o_cY.Default(((Float)1.));
            		Float dX = __o_dX.Default(((Float)0.));
            		Float dY = __o_dY.Default(((Float)1.));
            		Float soft = __o_soft.Default(((Float)40.));
            		bool softAB = __o_softAB.Default(true);
            		bool softBC = __o_softBC.Default(true);
            		bool softCD = __o_softCD.Default(true);
            		bool softDA = __o_softDA.Default(true);
            	HX_STACKFRAME(&_hx_pos_a9abf26cca3989c3_38_new)
HXLINE(  39)		super::__construct(opacity,visibility,strokeColor,((Float)0.),null());
HXLINE(  40)		this->aX = aX;
HXLINE(  41)		this->aY = aY;
HXLINE(  42)		this->bX = bX;
HXLINE(  43)		this->bY = bY;
HXLINE(  44)		this->cX = cX;
HXLINE(  45)		this->cY = cY;
HXLINE(  46)		this->dX = dX;
HXLINE(  47)		this->dY = dY;
HXLINE(  48)		this->soft = soft;
HXLINE(  49)		this->softAB = softAB;
HXLINE(  50)		this->softBC = softBC;
HXLINE(  51)		this->softCD = softCD;
HXLINE(  52)		this->softDA = softDA;
            	}

Dynamic QuadSoftShape_obj::__CreateEmpty() { return new QuadSoftShape_obj; }

void *QuadSoftShape_obj::_hx_vtable = 0;

Dynamic QuadSoftShape_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< QuadSoftShape_obj > _hx_result = new QuadSoftShape_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10],inArgs[11],inArgs[12],inArgs[13],inArgs[14],inArgs[15]);
	return _hx_result;
}

bool QuadSoftShape_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x24e92cfb) {
		if (inClassId<=(int)0x2091632c) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2091632c;
		} else {
			return inClassId==(int)0x24e92cfb;
		}
	} else {
		return inClassId==(int)0x677fd15b;
	}
}

void QuadSoftShape_obj::setParameter(::String name,::String value){
            	HX_STACKFRAME(&_hx_pos_a9abf26cca3989c3_55_setParameter)
HXDLIN(  55)		::String _hx_switch_0 = name;
            		if (  (_hx_switch_0==HX_("aX",d7,54,00,00)) ){
HXLINE(  57)			this->aX = ::Std_obj::parseFloat(value);
HXDLIN(  57)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("aY",d8,54,00,00)) ){
HXLINE(  59)			this->aY = ::Std_obj::parseFloat(value);
HXDLIN(  59)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("bX",b6,55,00,00)) ){
HXLINE(  61)			this->bX = ::Std_obj::parseFloat(value);
HXDLIN(  61)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("bY",b7,55,00,00)) ){
HXLINE(  63)			this->bY = ::Std_obj::parseFloat(value);
HXDLIN(  63)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("cX",95,56,00,00)) ){
HXLINE(  65)			this->cX = ::Std_obj::parseFloat(value);
HXDLIN(  65)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("cY",96,56,00,00)) ){
HXLINE(  67)			this->cY = ::Std_obj::parseFloat(value);
HXDLIN(  67)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("dX",74,57,00,00)) ){
HXLINE(  69)			this->dX = ::Std_obj::parseFloat(value);
HXDLIN(  69)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("dY",75,57,00,00)) ){
HXLINE(  71)			this->dY = ::Std_obj::parseFloat(value);
HXDLIN(  71)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("soft",ea,1c,58,4c)) ){
HXLINE(  73)			this->soft = ::Std_obj::parseFloat(value);
HXDLIN(  73)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("softAB",4b,e4,48,28)) ){
HXLINE(  75)			bool _hx_tmp;
HXDLIN(  75)			if ((::StringTools_obj::trim(value).toLowerCase() == HX_("true",4e,a7,03,4d))) {
HXLINE(  75)				_hx_tmp = true;
            			}
            			else {
HXLINE(  75)				_hx_tmp = false;
            			}
HXDLIN(  75)			this->softAB = _hx_tmp;
HXDLIN(  75)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("softBC",2b,e5,48,28)) ){
HXLINE(  77)			bool _hx_tmp;
HXDLIN(  77)			if ((::StringTools_obj::trim(value).toLowerCase() == HX_("true",4e,a7,03,4d))) {
HXLINE(  77)				_hx_tmp = true;
            			}
            			else {
HXLINE(  77)				_hx_tmp = false;
            			}
HXDLIN(  77)			this->softBC = _hx_tmp;
HXDLIN(  77)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("softCD",0b,e6,48,28)) ){
HXLINE(  79)			bool _hx_tmp;
HXDLIN(  79)			if ((::StringTools_obj::trim(value).toLowerCase() == HX_("true",4e,a7,03,4d))) {
HXLINE(  79)				_hx_tmp = true;
            			}
            			else {
HXLINE(  79)				_hx_tmp = false;
            			}
HXDLIN(  79)			this->softCD = _hx_tmp;
HXDLIN(  79)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("softDA",e7,e6,48,28)) ){
HXLINE(  81)			bool _hx_tmp;
HXDLIN(  81)			if ((::StringTools_obj::trim(value).toLowerCase() == HX_("true",4e,a7,03,4d))) {
HXLINE(  81)				_hx_tmp = true;
            			}
            			else {
HXLINE(  81)				_hx_tmp = false;
            			}
HXDLIN(  81)			this->softDA = _hx_tmp;
HXDLIN(  81)			goto _hx_goto_1;
            		}
            		/* default */{
HXLINE(  83)			this->super::setParameter(name,value);
            		}
            		_hx_goto_1:;
            	}


::pixelimage::ImageStruct QuadSoftShape_obj::render(::pixelimage::ImageStruct pixelShape){
            	HX_GC_STACKFRAME(&_hx_pos_a9abf26cca3989c3_86_render)
HXLINE(  87)		{
HXLINE(  87)			Float ax = (this->aX + this->offX);
HXDLIN(  87)			Float ay = (this->aY + this->offY);
HXDLIN(  87)			Float bx = (this->bX + this->offX);
HXDLIN(  87)			Float by = (this->bY + this->offY);
HXDLIN(  87)			Float cx = (this->cX + this->offX);
HXDLIN(  87)			Float cy = (this->cY + this->offY);
HXDLIN(  87)			Float dx = (this->dX + this->offX);
HXDLIN(  87)			Float dy = (this->dY + this->offY);
HXDLIN(  87)			int color = this->strokeColor;
HXDLIN(  87)			Float soft = this->soft;
HXDLIN(  87)			bool softAB = this->softAB;
HXDLIN(  87)			bool softBC = this->softBC;
HXDLIN(  87)			bool softCD = this->softCD;
HXDLIN(  87)			bool softDA = this->softDA;
HXDLIN(  87)			bool hasHit = false;
HXDLIN(  87)			{
HXLINE(  87)				{
HXLINE(  87)					bool hasUndo = true;
HXDLIN(  87)					int aA = ((color >> 24) & 255);
HXDLIN(  87)					int rA = ((color >> 16) & 255);
HXDLIN(  87)					int gA = ((color >> 8) & 255);
HXDLIN(  87)					int bA = (color & 255);
HXDLIN(  87)					Float bcx = (bx - dx);
HXDLIN(  87)					Float bcy = (by - dy);
HXDLIN(  87)					Float acx = (ax - dx);
HXDLIN(  87)					Float acy = (ay - dy);
HXDLIN(  87)					Float dot11 = ((bcx * bcx) + (bcy * bcy));
HXDLIN(  87)					Float dot12 = ((bcx * acx) + (bcy * acy));
HXDLIN(  87)					Float dot22 = ((acx * acx) + (acy * acy));
HXDLIN(  87)					Float denom1 = (( (Float)(1) ) / ((dot11 * dot22) - (dot12 * dot12)));
HXDLIN(  87)					::pixelimage::iter::IntIterStart xIter3;
HXDLIN(  87)					if ((ax > bx)) {
HXLINE(  87)						if ((ax > dx)) {
HXLINE(  87)							int min;
HXDLIN(  87)							if ((bx > dx)) {
HXLINE(  87)								min = ::Math_obj::floor(dx);
            							}
            							else {
HXLINE(  87)								min = ::Math_obj::floor(bx);
            							}
HXDLIN(  87)							int ii_min = min;
HXDLIN(  87)							int ii_max = ::Math_obj::ceil(ax);
HXDLIN(  87)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  87)							xIter3 = this1;
            						}
            						else {
HXLINE(  87)							int ii_min = ::Math_obj::floor(bx);
HXDLIN(  87)							int ii_max = ::Math_obj::ceil(dx);
HXDLIN(  87)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  87)							xIter3 = this1;
            						}
            					}
            					else {
HXLINE(  87)						if ((bx > dx)) {
HXLINE(  87)							int min;
HXDLIN(  87)							if ((ax > dx)) {
HXLINE(  87)								min = ::Math_obj::floor(dx);
            							}
            							else {
HXLINE(  87)								min = ::Math_obj::ceil(ax);
            							}
HXDLIN(  87)							int ii_min = min;
HXDLIN(  87)							int ii_max = ::Math_obj::ceil(bx);
HXDLIN(  87)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  87)							xIter3 = this1;
            						}
            						else {
HXLINE(  87)							int ii_min = ::Math_obj::floor(ax);
HXDLIN(  87)							int ii_max = ::Math_obj::ceil(dx);
HXDLIN(  87)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  87)							xIter3 = this1;
            						}
            					}
HXDLIN(  87)					::pixelimage::iter::IntIterStart yIter3;
HXDLIN(  87)					if ((ay > by)) {
HXLINE(  87)						if ((ay > dy)) {
HXLINE(  87)							int min;
HXDLIN(  87)							if ((by > dy)) {
HXLINE(  87)								min = ::Math_obj::floor(dy);
            							}
            							else {
HXLINE(  87)								min = ::Math_obj::floor(by);
            							}
HXDLIN(  87)							int ii_min = min;
HXDLIN(  87)							int ii_max = ::Math_obj::ceil(ay);
HXDLIN(  87)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  87)							yIter3 = this1;
            						}
            						else {
HXLINE(  87)							int ii_min = ::Math_obj::floor(by);
HXDLIN(  87)							int ii_max = ::Math_obj::ceil(dy);
HXDLIN(  87)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  87)							yIter3 = this1;
            						}
            					}
            					else {
HXLINE(  87)						if ((by > dy)) {
HXLINE(  87)							int min;
HXDLIN(  87)							if ((ay > dy)) {
HXLINE(  87)								min = ::Math_obj::floor(dy);
            							}
            							else {
HXLINE(  87)								min = ::Math_obj::ceil(ay);
            							}
HXDLIN(  87)							int ii_min = min;
HXDLIN(  87)							int ii_max = ::Math_obj::ceil(by);
HXDLIN(  87)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  87)							yIter3 = this1;
            						}
            						else {
HXLINE(  87)							int ii_min = ::Math_obj::floor(ay);
HXDLIN(  87)							int ii_max = ::Math_obj::ceil(dy);
HXDLIN(  87)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  87)							yIter3 = this1;
            						}
            					}
HXDLIN(  87)					::pixelimage::ImageStruct undoImage = null();
HXDLIN(  87)					if (hasUndo) {
HXLINE(  87)						int w = ((xIter3->max - xIter3->start) + 1);
HXDLIN(  87)						int h = ((yIter3->max - yIter3->start) + 1);
HXDLIN(  87)						int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN(  87)						::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  87)						::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN(  87)						::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN(  87)						undoImage = this3;
HXDLIN(  87)						{
HXLINE(  87)							int rectLeft = xIter3->start;
HXDLIN(  87)							int rectTop = yIter3->start;
HXDLIN(  87)							int rectRight = xIter3->max;
HXDLIN(  87)							bool forceClear = false;
HXDLIN(  87)							{
HXLINE(  87)								int _g = rectTop;
HXDLIN(  87)								int _g1 = yIter3->max;
HXDLIN(  87)								while((_g < _g1)){
HXLINE(  87)									_g = (_g + 1);
HXDLIN(  87)									int dy = (_g - 1);
HXDLIN(  87)									{
HXLINE(  87)										int _g1 = rectLeft;
HXDLIN(  87)										int _g2 = rectRight;
HXDLIN(  87)										while((_g1 < _g2)){
HXLINE(  87)											_g1 = (_g1 + 1);
HXDLIN(  87)											int dx = (_g1 - 1);
HXDLIN(  87)											::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  87)											int index;
HXDLIN(  87)											if (pixelShape->useVirtualPos) {
HXLINE(  87)												index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + dx) - pixelShape->virtualX));
            											}
            											else {
HXLINE(  87)												index = ::Std_obj::_hx_int(( (Float)(((dy * pixelShape->width) + dx)) ));
            											}
HXDLIN(  87)											::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  87)											int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  87)											int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  87)											int col;
HXDLIN(  87)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  87)												col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            											}
            											else {
HXLINE(  87)												col = c;
            											}
HXDLIN(  87)											bool _hx_tmp;
HXDLIN(  87)											if (pixelShape->useMask) {
HXLINE(  87)												_hx_tmp = ::hx::IsNotNull( pixelShape->mask );
            											}
            											else {
HXLINE(  87)												_hx_tmp = false;
            											}
HXDLIN(  87)											if (_hx_tmp) {
HXLINE(  87)												::pixelimage::ImageStruct this1 = pixelShape->mask;
HXDLIN(  87)												::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  87)												int index;
HXDLIN(  87)												if (this1->useVirtualPos) {
HXLINE(  87)													index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            												}
            												else {
HXLINE(  87)													index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            												}
HXDLIN(  87)												::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  87)												int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  87)												int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  87)												int v;
HXDLIN(  87)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  87)													v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE(  87)													v = c;
            												}
HXDLIN(  87)												int this3 = v;
HXDLIN(  87)												int maskPixel = this3;
HXDLIN(  87)												int this4 = col;
HXDLIN(  87)												int this5 = this4;
HXDLIN(  87)												if ((maskPixel == 0)) {
HXLINE(  87)													int this1 = this5;
HXDLIN(  87)													col = this1;
            												}
            												else {
HXLINE(  87)													Float m0;
HXDLIN(  87)													int this1 = ((maskPixel >> 24) & 255);
HXDLIN(  87)													if ((this1 == 0)) {
HXLINE(  87)														m0 = ((Float)0.);
            													}
            													else {
HXLINE(  87)														m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            													}
HXDLIN(  87)													Float m1;
HXDLIN(  87)													int this2 = ((maskPixel >> 16) & 255);
HXDLIN(  87)													if ((this2 == 0)) {
HXLINE(  87)														m1 = ((Float)0.);
            													}
            													else {
HXLINE(  87)														m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            													}
HXDLIN(  87)													Float m2;
HXDLIN(  87)													int this3 = ((maskPixel >> 8) & 255);
HXDLIN(  87)													if ((this3 == 0)) {
HXLINE(  87)														m2 = ((Float)0.);
            													}
            													else {
HXLINE(  87)														m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            													}
HXDLIN(  87)													Float m3;
HXDLIN(  87)													int this4 = (maskPixel & 255);
HXDLIN(  87)													if ((this4 == 0)) {
HXLINE(  87)														m3 = ((Float)0.);
            													}
            													else {
HXLINE(  87)														m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            													}
HXDLIN(  87)													int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN(  87)													int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN(  87)													int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN(  87)													int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN(  87)													col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            												}
            											}
HXDLIN(  87)											if ((col != 0)) {
HXLINE(  87)												int x = (dx - rectLeft);
HXDLIN(  87)												int y = (dy - rectTop);
HXDLIN(  87)												int this1 = col;
HXDLIN(  87)												int c = this1;
HXDLIN(  87)												bool _hx_tmp;
HXDLIN(  87)												if ((((c >> 24) & 255) < 254)) {
HXLINE(  87)													_hx_tmp = undoImage->transparent;
            												}
            												else {
HXLINE(  87)													_hx_tmp = false;
            												}
HXDLIN(  87)												if (_hx_tmp) {
HXLINE(  87)													int location;
HXDLIN(  87)													if (undoImage->useVirtualPos) {
HXLINE(  87)														location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            													}
            													else {
HXLINE(  87)														location = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            													}
HXDLIN(  87)													::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  87)													::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  87)													int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  87)													int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  87)													int this3 = this2;
HXDLIN(  87)													int this4;
HXDLIN(  87)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  87)														this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            													}
            													else {
HXLINE(  87)														this4 = this3;
            													}
HXDLIN(  87)													Float a1;
HXDLIN(  87)													int this5 = ((this4 >> 24) & 255);
HXDLIN(  87)													if ((this5 == 0)) {
HXLINE(  87)														a1 = ((Float)0.);
            													}
            													else {
HXLINE(  87)														a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            													}
HXDLIN(  87)													Float r1;
HXDLIN(  87)													int this6 = ((this4 >> 16) & 255);
HXDLIN(  87)													if ((this6 == 0)) {
HXLINE(  87)														r1 = ((Float)0.);
            													}
            													else {
HXLINE(  87)														r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            													}
HXDLIN(  87)													Float g1;
HXDLIN(  87)													int this7 = ((this4 >> 8) & 255);
HXDLIN(  87)													if ((this7 == 0)) {
HXLINE(  87)														g1 = ((Float)0.);
            													}
            													else {
HXLINE(  87)														g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            													}
HXDLIN(  87)													Float b1;
HXDLIN(  87)													int this8 = (this4 & 255);
HXDLIN(  87)													if ((this8 == 0)) {
HXLINE(  87)														b1 = ((Float)0.);
            													}
            													else {
HXLINE(  87)														b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            													}
HXDLIN(  87)													Float a2;
HXDLIN(  87)													int this9 = ((col >> 24) & 255);
HXDLIN(  87)													if ((this9 == 0)) {
HXLINE(  87)														a2 = ((Float)0.);
            													}
            													else {
HXLINE(  87)														a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            													}
HXDLIN(  87)													Float r2;
HXDLIN(  87)													int this10 = ((col >> 16) & 255);
HXDLIN(  87)													if ((this10 == 0)) {
HXLINE(  87)														r2 = ((Float)0.);
            													}
            													else {
HXLINE(  87)														r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            													}
HXDLIN(  87)													Float g2;
HXDLIN(  87)													int this11 = ((col >> 8) & 255);
HXDLIN(  87)													if ((this11 == 0)) {
HXLINE(  87)														g2 = ((Float)0.);
            													}
            													else {
HXLINE(  87)														g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            													}
HXDLIN(  87)													Float b2;
HXDLIN(  87)													int this12 = (col & 255);
HXDLIN(  87)													if ((this12 == 0)) {
HXLINE(  87)														b2 = ((Float)0.);
            													}
            													else {
HXLINE(  87)														b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            													}
HXDLIN(  87)													Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  87)													int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  87)													int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  87)													int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  87)													int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  87)													int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  87)													{
HXLINE(  87)														::haxe::io::ArrayBufferViewImpl this13 = undoImage->image;
HXDLIN(  87)														int value;
HXDLIN(  87)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  87)															value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            														}
            														else {
HXLINE(  87)															value = blended;
            														}
HXDLIN(  87)														bool _hx_tmp;
HXDLIN(  87)														if ((location >= 0)) {
HXLINE(  87)															_hx_tmp = (location < (this13->byteLength >> 2));
            														}
            														else {
HXLINE(  87)															_hx_tmp = false;
            														}
HXDLIN(  87)														if (_hx_tmp) {
HXLINE(  87)															::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  87)															int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  87)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  87)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  87)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  87)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
            												else {
HXLINE(  87)													::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  87)													int index;
HXDLIN(  87)													if (undoImage->useVirtualPos) {
HXLINE(  87)														index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            													}
            													else {
HXLINE(  87)														index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            													}
HXDLIN(  87)													int value;
HXDLIN(  87)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  87)														value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE(  87)														value = c;
            													}
HXDLIN(  87)													bool _hx_tmp;
HXDLIN(  87)													if ((index >= 0)) {
HXLINE(  87)														_hx_tmp = (index < (this1->byteLength >> 2));
            													}
            													else {
HXLINE(  87)														_hx_tmp = false;
            													}
HXDLIN(  87)													if (_hx_tmp) {
HXLINE(  87)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  87)														int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  87)														_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  87)														_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  87)														_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  87)														_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            													}
            												}
            											}
            											else {
HXLINE(  87)												if (forceClear) {
HXLINE(  87)													::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  87)													int x = (dx - rectLeft);
HXDLIN(  87)													int y = (dy - rectTop);
HXDLIN(  87)													int index;
HXDLIN(  87)													if (undoImage->useVirtualPos) {
HXLINE(  87)														index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            													}
            													else {
HXLINE(  87)														index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            													}
HXDLIN(  87)													bool _hx_tmp;
HXDLIN(  87)													if ((index >= 0)) {
HXLINE(  87)														_hx_tmp = (index < (this1->byteLength >> 2));
            													}
            													else {
HXLINE(  87)														_hx_tmp = false;
            													}
HXDLIN(  87)													if (_hx_tmp) {
HXLINE(  87)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  87)														int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  87)														_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  87)														_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  87)														_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  87)														_this->b[(pos + 3)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN(  87)					bool found = false;
HXDLIN(  87)					Float min = ( (Float)(0) );
HXDLIN(  87)					Float max = ( (Float)(0) );
HXDLIN(  87)					int a = 0;
HXDLIN(  87)					int r = 0;
HXDLIN(  87)					int g = 0;
HXDLIN(  87)					int b = 0;
HXDLIN(  87)					{
HXLINE(  87)						int _g_min = xIter3->start;
HXDLIN(  87)						int _g_max = xIter3->max;
HXDLIN(  87)						while((_g_min < _g_max)){
HXLINE(  87)							_g_min = (_g_min + 1);
HXDLIN(  87)							int px = (_g_min - 1);
HXDLIN(  87)							Float pcx = (( (Float)(px) ) - dx);
HXLINE( 696)							found = false;
HXLINE(  87)							{
HXLINE(  87)								int _g_min1 = yIter3->start;
HXDLIN(  87)								int _g_max = yIter3->max;
HXDLIN(  87)								while((_g_min1 < _g_max)){
HXLINE(  87)									_g_min1 = (_g_min1 + 1);
HXDLIN(  87)									int py = (_g_min1 - 1);
HXDLIN(  87)									Float pcy = (( (Float)(py) ) - dy);
HXDLIN(  87)									Float dot31 = ((pcx * bcx) + (pcy * bcy));
HXDLIN(  87)									Float dot32 = ((pcx * acx) + (pcy * acy));
HXDLIN(  87)									Float ratioA = (((dot22 * dot31) - (dot12 * dot32)) * denom1);
HXDLIN(  87)									Float ratioB = (((dot11 * dot32) - (dot12 * dot31)) * denom1);
HXDLIN(  87)									Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN(  87)									bool _hx_tmp;
HXDLIN(  87)									bool _hx_tmp1;
HXDLIN(  87)									if ((ratioA >= 0)) {
HXLINE(  87)										_hx_tmp1 = (ratioB >= 0);
            									}
            									else {
HXLINE(  87)										_hx_tmp1 = false;
            									}
HXDLIN(  87)									if (_hx_tmp1) {
HXLINE(  87)										_hx_tmp = (ratioC >= 0);
            									}
            									else {
HXLINE(  87)										_hx_tmp = false;
            									}
HXDLIN(  87)									if (_hx_tmp) {
HXLINE(  87)										if (softAB) {
HXLINE(  87)											if (softDA) {
HXLINE(  87)												if ((ratioA < ratioC)) {
HXLINE(  87)													min = ratioA;
            												}
            												else {
HXLINE(  87)													min = ratioC;
            												}
HXDLIN(  87)												if ((ratioA > ratioB)) {
HXLINE(  87)													max = ratioA;
            												}
            												else {
HXLINE(  87)													max = ratioB;
            												}
HXDLIN(  87)												if (!((max > ratioC))) {
HXLINE(  87)													max = ratioC;
            												}
HXLINE( 729)												max = ((( (Float)(1) ) - max) / ( (Float)(2) ));
HXLINE(  87)												if (!((min < max))) {
HXLINE(  87)													min = ((max + min) / ( (Float)(2) ));
            												}
HXDLIN(  87)												int i = ::Std_obj::_hx_int(((( (Float)(aA) ) * soft) * min));
HXDLIN(  87)												if ((i > 255)) {
HXLINE(  24)													i = 255;
            												}
HXLINE(  87)												if ((i < 0)) {
HXLINE(  25)													i = 0;
            												}
HXLINE(  87)												int this1 = i;
HXDLIN(  87)												a = this1;
            											}
            											else {
HXLINE( 723)												min = ratioC;
HXLINE(  87)												int i = ::Std_obj::_hx_int(((( (Float)(aA) ) * soft) * min));
HXDLIN(  87)												if ((i > 255)) {
HXLINE(  24)													i = 255;
            												}
HXLINE(  87)												if ((i < 0)) {
HXLINE(  25)													i = 0;
            												}
HXLINE(  87)												int this1 = i;
HXDLIN(  87)												a = this1;
            											}
            										}
            										else {
HXLINE(  87)											if (softDA) {
HXLINE( 710)												min = ratioA;
HXLINE(  87)												int i = ::Std_obj::_hx_int(((( (Float)(aA) ) * soft) * min));
HXDLIN(  87)												if ((i > 255)) {
HXLINE(  24)													i = 255;
            												}
HXLINE(  87)												if ((i < 0)) {
HXLINE(  25)													i = 0;
            												}
HXLINE(  87)												int this1 = i;
HXDLIN(  87)												a = this1;
            											}
            											else {
HXLINE(  87)												int i = ::Std_obj::_hx_int(( (Float)(aA) ));
HXDLIN(  87)												if ((i > 255)) {
HXLINE(  24)													i = 255;
            												}
HXLINE(  87)												if ((i < 0)) {
HXLINE(  25)													i = 0;
            												}
HXLINE(  87)												int this1 = i;
HXDLIN(  87)												a = this1;
            											}
            										}
HXDLIN(  87)										int i = ::Std_obj::_hx_int(( (Float)(rA) ));
HXDLIN(  87)										if ((i > 255)) {
HXLINE(  24)											i = 255;
            										}
HXLINE(  87)										if ((i < 0)) {
HXLINE(  25)											i = 0;
            										}
HXLINE(  87)										int this1 = i;
HXLINE( 748)										r = this1;
HXLINE(  87)										int i1 = ::Std_obj::_hx_int(( (Float)(gA) ));
HXDLIN(  87)										if ((i1 > 255)) {
HXLINE(  24)											i1 = 255;
            										}
HXLINE(  87)										if ((i1 < 0)) {
HXLINE(  25)											i1 = 0;
            										}
HXLINE(  87)										int this2 = i1;
HXLINE( 749)										g = this2;
HXLINE(  87)										int i2 = ::Std_obj::_hx_int(( (Float)(bA) ));
HXDLIN(  87)										if ((i2 > 255)) {
HXLINE(  24)											i2 = 255;
            										}
HXLINE(  87)										if ((i2 < 0)) {
HXLINE(  25)											i2 = 0;
            										}
HXLINE(  87)										int this3 = i2;
HXLINE( 750)										b = this3;
HXLINE(  87)										{
HXLINE(  87)											int location;
HXDLIN(  87)											if (pixelShape->useVirtualPos) {
HXLINE(  87)												location = ::Std_obj::_hx_int(((((( (Float)(py) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + px) - pixelShape->virtualX));
            											}
            											else {
HXLINE(  87)												location = ::Std_obj::_hx_int(( (Float)(((py * pixelShape->width) + px)) ));
            											}
HXDLIN(  87)											bool _hx_tmp;
HXDLIN(  87)											if (pixelShape->transparent) {
HXLINE(  87)												_hx_tmp = (a < 254);
            											}
            											else {
HXLINE(  87)												_hx_tmp = false;
            											}
HXDLIN(  87)											if (_hx_tmp) {
HXLINE(  87)												::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  87)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  87)												int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  87)												int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  87)												int this3 = this2;
HXDLIN(  87)												int old;
HXDLIN(  87)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  87)													old = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            												}
            												else {
HXLINE(  87)													old = this3;
            												}
HXDLIN(  87)												int rhs = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  87)												Float a1;
HXDLIN(  87)												int this4 = ((old >> 24) & 255);
HXDLIN(  87)												if ((this4 == 0)) {
HXLINE(  87)													a1 = ((Float)0.);
            												}
            												else {
HXLINE(  87)													a1 = (( (Float)(this4) ) / ( (Float)(255) ));
            												}
HXDLIN(  87)												Float r1;
HXDLIN(  87)												int this5 = ((old >> 16) & 255);
HXDLIN(  87)												if ((this5 == 0)) {
HXLINE(  87)													r1 = ((Float)0.);
            												}
            												else {
HXLINE(  87)													r1 = (( (Float)(this5) ) / ( (Float)(255) ));
            												}
HXDLIN(  87)												Float g1;
HXDLIN(  87)												int this6 = ((old >> 8) & 255);
HXDLIN(  87)												if ((this6 == 0)) {
HXLINE(  87)													g1 = ((Float)0.);
            												}
            												else {
HXLINE(  87)													g1 = (( (Float)(this6) ) / ( (Float)(255) ));
            												}
HXDLIN(  87)												Float b1;
HXDLIN(  87)												int this7 = (old & 255);
HXDLIN(  87)												if ((this7 == 0)) {
HXLINE(  87)													b1 = ((Float)0.);
            												}
            												else {
HXLINE(  87)													b1 = (( (Float)(this7) ) / ( (Float)(255) ));
            												}
HXDLIN(  87)												Float a2;
HXDLIN(  87)												int this8 = ((rhs >> 24) & 255);
HXDLIN(  87)												if ((this8 == 0)) {
HXLINE(  87)													a2 = ((Float)0.);
            												}
            												else {
HXLINE(  87)													a2 = (( (Float)(this8) ) / ( (Float)(255) ));
            												}
HXDLIN(  87)												Float r2;
HXDLIN(  87)												int this9 = ((rhs >> 16) & 255);
HXDLIN(  87)												if ((this9 == 0)) {
HXLINE(  87)													r2 = ((Float)0.);
            												}
            												else {
HXLINE(  87)													r2 = (( (Float)(this9) ) / ( (Float)(255) ));
            												}
HXDLIN(  87)												Float g2;
HXDLIN(  87)												int this10 = ((rhs >> 8) & 255);
HXDLIN(  87)												if ((this10 == 0)) {
HXLINE(  87)													g2 = ((Float)0.);
            												}
            												else {
HXLINE(  87)													g2 = (( (Float)(this10) ) / ( (Float)(255) ));
            												}
HXDLIN(  87)												Float b2;
HXDLIN(  87)												int this11 = (rhs & 255);
HXDLIN(  87)												if ((this11 == 0)) {
HXLINE(  87)													b2 = ((Float)0.);
            												}
            												else {
HXLINE(  87)													b2 = (( (Float)(this11) ) / ( (Float)(255) ));
            												}
HXDLIN(  87)												Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  87)												int r3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  87)												int g3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  87)												int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  87)												int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  87)												int blended = ((((a4 << 24) | (r3 << 16)) | (g3 << 8)) | b3);
HXDLIN(  87)												{
HXLINE(  87)													::haxe::io::ArrayBufferViewImpl this12 = pixelShape->image;
HXDLIN(  87)													int value;
HXDLIN(  87)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  87)														value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            													}
            													else {
HXLINE(  87)														value = blended;
            													}
HXDLIN(  87)													bool _hx_tmp;
HXDLIN(  87)													if ((location >= 0)) {
HXLINE(  87)														_hx_tmp = (location < (this12->byteLength >> 2));
            													}
            													else {
HXLINE(  87)														_hx_tmp = false;
            													}
HXDLIN(  87)													if (_hx_tmp) {
HXLINE(  87)														::haxe::io::Bytes _this = this12->bytes;
HXDLIN(  87)														int pos = ((location << 2) + this12->byteOffset);
HXDLIN(  87)														_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  87)														_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  87)														_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  87)														_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            													}
            												}
            											}
            											else {
HXLINE(  87)												::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  87)												int value;
HXDLIN(  87)												if (pixelShape->isLittle) {
HXLINE(  87)													value = ((((a << 24) | (b << 16)) | (g << 8)) | r);
            												}
            												else {
HXLINE(  87)													value = ((((a << 24) | (r << 16)) | (g << 8)) | b);
            												}
HXDLIN(  87)												bool _hx_tmp;
HXDLIN(  87)												if ((location >= 0)) {
HXLINE(  87)													_hx_tmp = (location < (this1->byteLength >> 2));
            												}
            												else {
HXLINE(  87)													_hx_tmp = false;
            												}
HXDLIN(  87)												if (_hx_tmp) {
HXLINE(  87)													::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  87)													int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  87)													_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  87)													_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  87)													_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  87)													_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            												}
            											}
            										}
HXLINE( 752)										found = true;
            									}
            									else {
HXLINE(  87)										if (found) {
HXLINE(  87)											goto _hx_goto_6;
            										}
            									}
            								}
            								_hx_goto_6:;
            							}
            						}
            					}
HXDLIN(  87)					if ((hasHit == false)) {
HXLINE(  87)						::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,ax,ay,bx,by,dx,dy,true);
HXDLIN(  87)						if (hasUndo) {
HXLINE(  87)							v->undoImage = undoImage;
HXDLIN(  87)							v->undoX = xIter3->start;
HXDLIN(  87)							v->undoY = yIter3->start;
            						}
            					}
            				}
HXDLIN(  87)				{
HXLINE(  87)					bool hasUndo1 = true;
HXDLIN(  87)					int aA1 = ((color >> 24) & 255);
HXDLIN(  87)					int rA1 = ((color >> 16) & 255);
HXDLIN(  87)					int gA1 = ((color >> 8) & 255);
HXDLIN(  87)					int bA1 = (color & 255);
HXDLIN(  87)					Float bcx1 = (cx - dx);
HXDLIN(  87)					Float bcy1 = (cy - dy);
HXDLIN(  87)					Float acx1 = (bx - dx);
HXDLIN(  87)					Float acy1 = (by - dy);
HXDLIN(  87)					Float dot111 = ((bcx1 * bcx1) + (bcy1 * bcy1));
HXDLIN(  87)					Float dot121 = ((bcx1 * acx1) + (bcy1 * acy1));
HXDLIN(  87)					Float dot221 = ((acx1 * acx1) + (acy1 * acy1));
HXDLIN(  87)					Float denom11 = (( (Float)(1) ) / ((dot111 * dot221) - (dot121 * dot121)));
HXDLIN(  87)					::pixelimage::iter::IntIterStart xIter31;
HXDLIN(  87)					if ((bx > cx)) {
HXLINE(  87)						if ((bx > dx)) {
HXLINE(  87)							int min;
HXDLIN(  87)							if ((cx > dx)) {
HXLINE(  87)								min = ::Math_obj::floor(dx);
            							}
            							else {
HXLINE(  87)								min = ::Math_obj::floor(cx);
            							}
HXDLIN(  87)							int ii_min = min;
HXDLIN(  87)							int ii_max = ::Math_obj::ceil(bx);
HXDLIN(  87)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  87)							xIter31 = this1;
            						}
            						else {
HXLINE(  87)							int ii_min = ::Math_obj::floor(cx);
HXDLIN(  87)							int ii_max = ::Math_obj::ceil(dx);
HXDLIN(  87)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  87)							xIter31 = this1;
            						}
            					}
            					else {
HXLINE(  87)						if ((cx > dx)) {
HXLINE(  87)							int min;
HXDLIN(  87)							if ((bx > dx)) {
HXLINE(  87)								min = ::Math_obj::floor(dx);
            							}
            							else {
HXLINE(  87)								min = ::Math_obj::ceil(bx);
            							}
HXDLIN(  87)							int ii_min = min;
HXDLIN(  87)							int ii_max = ::Math_obj::ceil(cx);
HXDLIN(  87)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  87)							xIter31 = this1;
            						}
            						else {
HXLINE(  87)							int ii_min = ::Math_obj::floor(bx);
HXDLIN(  87)							int ii_max = ::Math_obj::ceil(dx);
HXDLIN(  87)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  87)							xIter31 = this1;
            						}
            					}
HXDLIN(  87)					::pixelimage::iter::IntIterStart yIter31;
HXDLIN(  87)					if ((by > cy)) {
HXLINE(  87)						if ((by > dy)) {
HXLINE(  87)							int min;
HXDLIN(  87)							if ((cy > dy)) {
HXLINE(  87)								min = ::Math_obj::floor(dy);
            							}
            							else {
HXLINE(  87)								min = ::Math_obj::floor(cy);
            							}
HXDLIN(  87)							int ii_min = min;
HXDLIN(  87)							int ii_max = ::Math_obj::ceil(by);
HXDLIN(  87)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  87)							yIter31 = this1;
            						}
            						else {
HXLINE(  87)							int ii_min = ::Math_obj::floor(cy);
HXDLIN(  87)							int ii_max = ::Math_obj::ceil(dy);
HXDLIN(  87)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  87)							yIter31 = this1;
            						}
            					}
            					else {
HXLINE(  87)						if ((cy > dy)) {
HXLINE(  87)							int min;
HXDLIN(  87)							if ((by > dy)) {
HXLINE(  87)								min = ::Math_obj::floor(dy);
            							}
            							else {
HXLINE(  87)								min = ::Math_obj::ceil(by);
            							}
HXDLIN(  87)							int ii_min = min;
HXDLIN(  87)							int ii_max = ::Math_obj::ceil(cy);
HXDLIN(  87)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  87)							yIter31 = this1;
            						}
            						else {
HXLINE(  87)							int ii_min = ::Math_obj::floor(by);
HXDLIN(  87)							int ii_max = ::Math_obj::ceil(dy);
HXDLIN(  87)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  87)							yIter31 = this1;
            						}
            					}
HXDLIN(  87)					::pixelimage::ImageStruct undoImage1 = null();
HXDLIN(  87)					if (hasUndo1) {
HXLINE(  87)						int w = ((xIter31->max - xIter31->start) + 1);
HXDLIN(  87)						int h = ((yIter31->max - yIter31->start) + 1);
HXDLIN(  87)						int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN(  87)						::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  87)						::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN(  87)						::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN(  87)						undoImage1 = this3;
HXDLIN(  87)						{
HXLINE(  87)							int rectLeft = xIter31->start;
HXDLIN(  87)							int rectTop = yIter31->start;
HXDLIN(  87)							int rectRight = xIter31->max;
HXDLIN(  87)							bool forceClear = false;
HXDLIN(  87)							{
HXLINE(  87)								int _g = rectTop;
HXDLIN(  87)								int _g1 = yIter31->max;
HXDLIN(  87)								while((_g < _g1)){
HXLINE(  87)									_g = (_g + 1);
HXDLIN(  87)									int dy = (_g - 1);
HXDLIN(  87)									{
HXLINE(  87)										int _g1 = rectLeft;
HXDLIN(  87)										int _g2 = rectRight;
HXDLIN(  87)										while((_g1 < _g2)){
HXLINE(  87)											_g1 = (_g1 + 1);
HXDLIN(  87)											int dx = (_g1 - 1);
HXDLIN(  87)											::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  87)											int index;
HXDLIN(  87)											if (pixelShape->useVirtualPos) {
HXLINE(  87)												index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + dx) - pixelShape->virtualX));
            											}
            											else {
HXLINE(  87)												index = ::Std_obj::_hx_int(( (Float)(((dy * pixelShape->width) + dx)) ));
            											}
HXDLIN(  87)											::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  87)											int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  87)											int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  87)											int col;
HXDLIN(  87)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  87)												col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            											}
            											else {
HXLINE(  87)												col = c;
            											}
HXDLIN(  87)											bool _hx_tmp;
HXDLIN(  87)											if (pixelShape->useMask) {
HXLINE(  87)												_hx_tmp = ::hx::IsNotNull( pixelShape->mask );
            											}
            											else {
HXLINE(  87)												_hx_tmp = false;
            											}
HXDLIN(  87)											if (_hx_tmp) {
HXLINE(  87)												::pixelimage::ImageStruct this1 = pixelShape->mask;
HXDLIN(  87)												::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  87)												int index;
HXDLIN(  87)												if (this1->useVirtualPos) {
HXLINE(  87)													index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            												}
            												else {
HXLINE(  87)													index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            												}
HXDLIN(  87)												::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  87)												int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  87)												int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  87)												int v;
HXDLIN(  87)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  87)													v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE(  87)													v = c;
            												}
HXDLIN(  87)												int this3 = v;
HXDLIN(  87)												int maskPixel = this3;
HXDLIN(  87)												int this4 = col;
HXDLIN(  87)												int this5 = this4;
HXDLIN(  87)												if ((maskPixel == 0)) {
HXLINE(  87)													int this1 = this5;
HXDLIN(  87)													col = this1;
            												}
            												else {
HXLINE(  87)													Float m0;
HXDLIN(  87)													int this1 = ((maskPixel >> 24) & 255);
HXDLIN(  87)													if ((this1 == 0)) {
HXLINE(  87)														m0 = ((Float)0.);
            													}
            													else {
HXLINE(  87)														m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            													}
HXDLIN(  87)													Float m1;
HXDLIN(  87)													int this2 = ((maskPixel >> 16) & 255);
HXDLIN(  87)													if ((this2 == 0)) {
HXLINE(  87)														m1 = ((Float)0.);
            													}
            													else {
HXLINE(  87)														m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            													}
HXDLIN(  87)													Float m2;
HXDLIN(  87)													int this3 = ((maskPixel >> 8) & 255);
HXDLIN(  87)													if ((this3 == 0)) {
HXLINE(  87)														m2 = ((Float)0.);
            													}
            													else {
HXLINE(  87)														m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            													}
HXDLIN(  87)													Float m3;
HXDLIN(  87)													int this4 = (maskPixel & 255);
HXDLIN(  87)													if ((this4 == 0)) {
HXLINE(  87)														m3 = ((Float)0.);
            													}
            													else {
HXLINE(  87)														m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            													}
HXDLIN(  87)													int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN(  87)													int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN(  87)													int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN(  87)													int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN(  87)													col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            												}
            											}
HXDLIN(  87)											if ((col != 0)) {
HXLINE(  87)												int x = (dx - rectLeft);
HXDLIN(  87)												int y = (dy - rectTop);
HXDLIN(  87)												int this1 = col;
HXDLIN(  87)												int c = this1;
HXDLIN(  87)												bool _hx_tmp;
HXDLIN(  87)												if ((((c >> 24) & 255) < 254)) {
HXLINE(  87)													_hx_tmp = undoImage1->transparent;
            												}
            												else {
HXLINE(  87)													_hx_tmp = false;
            												}
HXDLIN(  87)												if (_hx_tmp) {
HXLINE(  87)													int location;
HXDLIN(  87)													if (undoImage1->useVirtualPos) {
HXLINE(  87)														location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            													}
            													else {
HXLINE(  87)														location = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            													}
HXDLIN(  87)													::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN(  87)													::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  87)													int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  87)													int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  87)													int this3 = this2;
HXDLIN(  87)													int this4;
HXDLIN(  87)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  87)														this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            													}
            													else {
HXLINE(  87)														this4 = this3;
            													}
HXDLIN(  87)													Float a1;
HXDLIN(  87)													int this5 = ((this4 >> 24) & 255);
HXDLIN(  87)													if ((this5 == 0)) {
HXLINE(  87)														a1 = ((Float)0.);
            													}
            													else {
HXLINE(  87)														a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            													}
HXDLIN(  87)													Float r1;
HXDLIN(  87)													int this6 = ((this4 >> 16) & 255);
HXDLIN(  87)													if ((this6 == 0)) {
HXLINE(  87)														r1 = ((Float)0.);
            													}
            													else {
HXLINE(  87)														r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            													}
HXDLIN(  87)													Float g1;
HXDLIN(  87)													int this7 = ((this4 >> 8) & 255);
HXDLIN(  87)													if ((this7 == 0)) {
HXLINE(  87)														g1 = ((Float)0.);
            													}
            													else {
HXLINE(  87)														g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            													}
HXDLIN(  87)													Float b1;
HXDLIN(  87)													int this8 = (this4 & 255);
HXDLIN(  87)													if ((this8 == 0)) {
HXLINE(  87)														b1 = ((Float)0.);
            													}
            													else {
HXLINE(  87)														b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            													}
HXDLIN(  87)													Float a2;
HXDLIN(  87)													int this9 = ((col >> 24) & 255);
HXDLIN(  87)													if ((this9 == 0)) {
HXLINE(  87)														a2 = ((Float)0.);
            													}
            													else {
HXLINE(  87)														a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            													}
HXDLIN(  87)													Float r2;
HXDLIN(  87)													int this10 = ((col >> 16) & 255);
HXDLIN(  87)													if ((this10 == 0)) {
HXLINE(  87)														r2 = ((Float)0.);
            													}
            													else {
HXLINE(  87)														r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            													}
HXDLIN(  87)													Float g2;
HXDLIN(  87)													int this11 = ((col >> 8) & 255);
HXDLIN(  87)													if ((this11 == 0)) {
HXLINE(  87)														g2 = ((Float)0.);
            													}
            													else {
HXLINE(  87)														g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            													}
HXDLIN(  87)													Float b2;
HXDLIN(  87)													int this12 = (col & 255);
HXDLIN(  87)													if ((this12 == 0)) {
HXLINE(  87)														b2 = ((Float)0.);
            													}
            													else {
HXLINE(  87)														b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            													}
HXDLIN(  87)													Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  87)													int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  87)													int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  87)													int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  87)													int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  87)													int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  87)													{
HXLINE(  87)														::haxe::io::ArrayBufferViewImpl this13 = undoImage1->image;
HXDLIN(  87)														int value;
HXDLIN(  87)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  87)															value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            														}
            														else {
HXLINE(  87)															value = blended;
            														}
HXDLIN(  87)														bool _hx_tmp;
HXDLIN(  87)														if ((location >= 0)) {
HXLINE(  87)															_hx_tmp = (location < (this13->byteLength >> 2));
            														}
            														else {
HXLINE(  87)															_hx_tmp = false;
            														}
HXDLIN(  87)														if (_hx_tmp) {
HXLINE(  87)															::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  87)															int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  87)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  87)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  87)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  87)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
            												else {
HXLINE(  87)													::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN(  87)													int index;
HXDLIN(  87)													if (undoImage1->useVirtualPos) {
HXLINE(  87)														index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            													}
            													else {
HXLINE(  87)														index = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            													}
HXDLIN(  87)													int value;
HXDLIN(  87)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  87)														value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE(  87)														value = c;
            													}
HXDLIN(  87)													bool _hx_tmp;
HXDLIN(  87)													if ((index >= 0)) {
HXLINE(  87)														_hx_tmp = (index < (this1->byteLength >> 2));
            													}
            													else {
HXLINE(  87)														_hx_tmp = false;
            													}
HXDLIN(  87)													if (_hx_tmp) {
HXLINE(  87)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  87)														int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  87)														_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  87)														_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  87)														_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  87)														_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            													}
            												}
            											}
            											else {
HXLINE(  87)												if (forceClear) {
HXLINE(  87)													::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN(  87)													int x = (dx - rectLeft);
HXDLIN(  87)													int y = (dy - rectTop);
HXDLIN(  87)													int index;
HXDLIN(  87)													if (undoImage1->useVirtualPos) {
HXLINE(  87)														index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            													}
            													else {
HXLINE(  87)														index = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            													}
HXDLIN(  87)													bool _hx_tmp;
HXDLIN(  87)													if ((index >= 0)) {
HXLINE(  87)														_hx_tmp = (index < (this1->byteLength >> 2));
            													}
            													else {
HXLINE(  87)														_hx_tmp = false;
            													}
HXDLIN(  87)													if (_hx_tmp) {
HXLINE(  87)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  87)														int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  87)														_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  87)														_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  87)														_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  87)														_this->b[(pos + 3)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN(  87)					bool found1 = false;
HXDLIN(  87)					Float min1 = ( (Float)(0) );
HXDLIN(  87)					Float max1 = ( (Float)(0) );
HXDLIN(  87)					int a1 = 0;
HXDLIN(  87)					int r1 = 0;
HXDLIN(  87)					int g1 = 0;
HXDLIN(  87)					int b1 = 0;
HXDLIN(  87)					{
HXLINE(  87)						int _g_min1 = xIter31->start;
HXDLIN(  87)						int _g_max1 = xIter31->max;
HXDLIN(  87)						while((_g_min1 < _g_max1)){
HXLINE(  87)							_g_min1 = (_g_min1 + 1);
HXDLIN(  87)							int px = (_g_min1 - 1);
HXDLIN(  87)							Float pcx = (( (Float)(px) ) - dx);
HXLINE( 696)							found1 = false;
HXLINE(  87)							{
HXLINE(  87)								int _g_min = yIter31->start;
HXDLIN(  87)								int _g_max = yIter31->max;
HXDLIN(  87)								while((_g_min < _g_max)){
HXLINE(  87)									_g_min = (_g_min + 1);
HXDLIN(  87)									int py = (_g_min - 1);
HXDLIN(  87)									Float pcy = (( (Float)(py) ) - dy);
HXDLIN(  87)									Float dot31 = ((pcx * bcx1) + (pcy * bcy1));
HXDLIN(  87)									Float dot32 = ((pcx * acx1) + (pcy * acy1));
HXDLIN(  87)									Float ratioA = (((dot221 * dot31) - (dot121 * dot32)) * denom11);
HXDLIN(  87)									Float ratioB = (((dot111 * dot32) - (dot121 * dot31)) * denom11);
HXDLIN(  87)									Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN(  87)									bool _hx_tmp;
HXDLIN(  87)									bool _hx_tmp1;
HXDLIN(  87)									if ((ratioA >= 0)) {
HXLINE(  87)										_hx_tmp1 = (ratioB >= 0);
            									}
            									else {
HXLINE(  87)										_hx_tmp1 = false;
            									}
HXDLIN(  87)									if (_hx_tmp1) {
HXLINE(  87)										_hx_tmp = (ratioC >= 0);
            									}
            									else {
HXLINE(  87)										_hx_tmp = false;
            									}
HXDLIN(  87)									if (_hx_tmp) {
HXLINE(  87)										if (softBC) {
HXLINE(  87)											if (softCD) {
HXLINE(  87)												if ((ratioB < ratioC)) {
HXLINE(  87)													min1 = ratioB;
            												}
            												else {
HXLINE(  87)													min1 = ratioC;
            												}
HXDLIN(  87)												if ((ratioA > ratioB)) {
HXLINE(  87)													max1 = ratioA;
            												}
            												else {
HXLINE(  87)													max1 = ratioB;
            												}
HXDLIN(  87)												if (!((max1 > ratioC))) {
HXLINE(  87)													max1 = ratioC;
            												}
HXLINE( 736)												max1 = ((( (Float)(1) ) - max1) / ( (Float)(2) ));
HXLINE(  87)												if (!((min1 < max1))) {
HXLINE(  87)													min1 = ((max1 + min1) / ( (Float)(2) ));
            												}
HXDLIN(  87)												int i = ::Std_obj::_hx_int(((( (Float)(aA1) ) * soft) * min1));
HXDLIN(  87)												if ((i > 255)) {
HXLINE(  24)													i = 255;
            												}
HXLINE(  87)												if ((i < 0)) {
HXLINE(  25)													i = 0;
            												}
HXLINE(  87)												int this1 = i;
HXDLIN(  87)												a1 = this1;
            											}
            											else {
HXLINE( 723)												min1 = ratioC;
HXLINE(  87)												int i = ::Std_obj::_hx_int(((( (Float)(aA1) ) * soft) * min1));
HXDLIN(  87)												if ((i > 255)) {
HXLINE(  24)													i = 255;
            												}
HXLINE(  87)												if ((i < 0)) {
HXLINE(  25)													i = 0;
            												}
HXLINE(  87)												int this1 = i;
HXDLIN(  87)												a1 = this1;
            											}
            										}
            										else {
HXLINE(  87)											if (softCD) {
HXLINE( 713)												min1 = ratioB;
HXLINE(  87)												int i = ::Std_obj::_hx_int(((( (Float)(aA1) ) * soft) * min1));
HXDLIN(  87)												if ((i > 255)) {
HXLINE(  24)													i = 255;
            												}
HXLINE(  87)												if ((i < 0)) {
HXLINE(  25)													i = 0;
            												}
HXLINE(  87)												int this1 = i;
HXDLIN(  87)												a1 = this1;
            											}
            											else {
HXLINE(  87)												int i = ::Std_obj::_hx_int(( (Float)(aA1) ));
HXDLIN(  87)												if ((i > 255)) {
HXLINE(  24)													i = 255;
            												}
HXLINE(  87)												if ((i < 0)) {
HXLINE(  25)													i = 0;
            												}
HXLINE(  87)												int this1 = i;
HXDLIN(  87)												a1 = this1;
            											}
            										}
HXDLIN(  87)										int i = ::Std_obj::_hx_int(( (Float)(rA1) ));
HXDLIN(  87)										if ((i > 255)) {
HXLINE(  24)											i = 255;
            										}
HXLINE(  87)										if ((i < 0)) {
HXLINE(  25)											i = 0;
            										}
HXLINE(  87)										int this1 = i;
HXLINE( 748)										r1 = this1;
HXLINE(  87)										int i1 = ::Std_obj::_hx_int(( (Float)(gA1) ));
HXDLIN(  87)										if ((i1 > 255)) {
HXLINE(  24)											i1 = 255;
            										}
HXLINE(  87)										if ((i1 < 0)) {
HXLINE(  25)											i1 = 0;
            										}
HXLINE(  87)										int this2 = i1;
HXLINE( 749)										g1 = this2;
HXLINE(  87)										int i2 = ::Std_obj::_hx_int(( (Float)(bA1) ));
HXDLIN(  87)										if ((i2 > 255)) {
HXLINE(  24)											i2 = 255;
            										}
HXLINE(  87)										if ((i2 < 0)) {
HXLINE(  25)											i2 = 0;
            										}
HXLINE(  87)										int this3 = i2;
HXLINE( 750)										b1 = this3;
HXLINE(  87)										{
HXLINE(  87)											int location;
HXDLIN(  87)											if (pixelShape->useVirtualPos) {
HXLINE(  87)												location = ::Std_obj::_hx_int(((((( (Float)(py) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + px) - pixelShape->virtualX));
            											}
            											else {
HXLINE(  87)												location = ::Std_obj::_hx_int(( (Float)(((py * pixelShape->width) + px)) ));
            											}
HXDLIN(  87)											bool _hx_tmp;
HXDLIN(  87)											if (pixelShape->transparent) {
HXLINE(  87)												_hx_tmp = (a1 < 254);
            											}
            											else {
HXLINE(  87)												_hx_tmp = false;
            											}
HXDLIN(  87)											if (_hx_tmp) {
HXLINE(  87)												::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  87)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  87)												int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  87)												int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  87)												int this3 = this2;
HXDLIN(  87)												int old;
HXDLIN(  87)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  87)													old = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            												}
            												else {
HXLINE(  87)													old = this3;
            												}
HXDLIN(  87)												int rhs = ((((a1 << 24) | (r1 << 16)) | (g1 << 8)) | b1);
HXDLIN(  87)												Float a11;
HXDLIN(  87)												int this4 = ((old >> 24) & 255);
HXDLIN(  87)												if ((this4 == 0)) {
HXLINE(  87)													a11 = ((Float)0.);
            												}
            												else {
HXLINE(  87)													a11 = (( (Float)(this4) ) / ( (Float)(255) ));
            												}
HXDLIN(  87)												Float r11;
HXDLIN(  87)												int this5 = ((old >> 16) & 255);
HXDLIN(  87)												if ((this5 == 0)) {
HXLINE(  87)													r11 = ((Float)0.);
            												}
            												else {
HXLINE(  87)													r11 = (( (Float)(this5) ) / ( (Float)(255) ));
            												}
HXDLIN(  87)												Float g11;
HXDLIN(  87)												int this6 = ((old >> 8) & 255);
HXDLIN(  87)												if ((this6 == 0)) {
HXLINE(  87)													g11 = ((Float)0.);
            												}
            												else {
HXLINE(  87)													g11 = (( (Float)(this6) ) / ( (Float)(255) ));
            												}
HXDLIN(  87)												Float b11;
HXDLIN(  87)												int this7 = (old & 255);
HXDLIN(  87)												if ((this7 == 0)) {
HXLINE(  87)													b11 = ((Float)0.);
            												}
            												else {
HXLINE(  87)													b11 = (( (Float)(this7) ) / ( (Float)(255) ));
            												}
HXDLIN(  87)												Float a2;
HXDLIN(  87)												int this8 = ((rhs >> 24) & 255);
HXDLIN(  87)												if ((this8 == 0)) {
HXLINE(  87)													a2 = ((Float)0.);
            												}
            												else {
HXLINE(  87)													a2 = (( (Float)(this8) ) / ( (Float)(255) ));
            												}
HXDLIN(  87)												Float r2;
HXDLIN(  87)												int this9 = ((rhs >> 16) & 255);
HXDLIN(  87)												if ((this9 == 0)) {
HXLINE(  87)													r2 = ((Float)0.);
            												}
            												else {
HXLINE(  87)													r2 = (( (Float)(this9) ) / ( (Float)(255) ));
            												}
HXDLIN(  87)												Float g2;
HXDLIN(  87)												int this10 = ((rhs >> 8) & 255);
HXDLIN(  87)												if ((this10 == 0)) {
HXLINE(  87)													g2 = ((Float)0.);
            												}
            												else {
HXLINE(  87)													g2 = (( (Float)(this10) ) / ( (Float)(255) ));
            												}
HXDLIN(  87)												Float b2;
HXDLIN(  87)												int this11 = (rhs & 255);
HXDLIN(  87)												if ((this11 == 0)) {
HXLINE(  87)													b2 = ((Float)0.);
            												}
            												else {
HXLINE(  87)													b2 = (( (Float)(this11) ) / ( (Float)(255) ));
            												}
HXDLIN(  87)												Float a3 = (a11 * (( (Float)(1) ) - a2));
HXDLIN(  87)												int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r11 * a3) + (r2 * a2))));
HXDLIN(  87)												int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g11 * a3) + (g2 * a2))));
HXDLIN(  87)												int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b11 * a3) + (b2 * a2))));
HXDLIN(  87)												int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  87)												int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  87)												{
HXLINE(  87)													::haxe::io::ArrayBufferViewImpl this12 = pixelShape->image;
HXDLIN(  87)													int value;
HXDLIN(  87)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  87)														value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            													}
            													else {
HXLINE(  87)														value = blended;
            													}
HXDLIN(  87)													bool _hx_tmp;
HXDLIN(  87)													if ((location >= 0)) {
HXLINE(  87)														_hx_tmp = (location < (this12->byteLength >> 2));
            													}
            													else {
HXLINE(  87)														_hx_tmp = false;
            													}
HXDLIN(  87)													if (_hx_tmp) {
HXLINE(  87)														::haxe::io::Bytes _this = this12->bytes;
HXDLIN(  87)														int pos = ((location << 2) + this12->byteOffset);
HXDLIN(  87)														_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  87)														_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  87)														_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  87)														_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            													}
            												}
            											}
            											else {
HXLINE(  87)												::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  87)												int value;
HXDLIN(  87)												if (pixelShape->isLittle) {
HXLINE(  87)													value = ((((a1 << 24) | (b1 << 16)) | (g1 << 8)) | r1);
            												}
            												else {
HXLINE(  87)													value = ((((a1 << 24) | (r1 << 16)) | (g1 << 8)) | b1);
            												}
HXDLIN(  87)												bool _hx_tmp;
HXDLIN(  87)												if ((location >= 0)) {
HXLINE(  87)													_hx_tmp = (location < (this1->byteLength >> 2));
            												}
            												else {
HXLINE(  87)													_hx_tmp = false;
            												}
HXDLIN(  87)												if (_hx_tmp) {
HXLINE(  87)													::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  87)													int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  87)													_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  87)													_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  87)													_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  87)													_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            												}
            											}
            										}
HXLINE( 752)										found1 = true;
            									}
            									else {
HXLINE(  87)										if (found1) {
HXLINE(  87)											goto _hx_goto_10;
            										}
            									}
            								}
            								_hx_goto_10:;
            							}
            						}
            					}
HXDLIN(  87)					if ((hasHit == false)) {
HXLINE(  87)						::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,bx,by,cx,cy,dx,dy,true);
HXDLIN(  87)						if (hasUndo1) {
HXLINE(  87)							v->undoImage = undoImage1;
HXDLIN(  87)							v->undoX = xIter31->start;
HXDLIN(  87)							v->undoY = yIter31->start;
            						}
            					}
            				}
HXDLIN(  87)				if ((hasHit == true)) {
HXLINE(  87)					::pixelimage::algo::HitQuad v = ::pixelimage::algo::HitQuad_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,dx,dy,true);
            				}
            			}
            		}
HXLINE(  88)		return this->super::render(pixelShape);
            	}



::hx::ObjectPtr< QuadSoftShape_obj > QuadSoftShape_obj::__new(::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< int >  __o_strokeColor,::hx::Null< Float >  __o_aX,::hx::Null< Float >  __o_aY,::hx::Null< Float >  __o_bX,::hx::Null< Float >  __o_bY,::hx::Null< Float >  __o_cX,::hx::Null< Float >  __o_cY,::hx::Null< Float >  __o_dX,::hx::Null< Float >  __o_dY,::hx::Null< Float >  __o_soft,::hx::Null< bool >  __o_softAB,::hx::Null< bool >  __o_softBC,::hx::Null< bool >  __o_softCD,::hx::Null< bool >  __o_softDA) {
	::hx::ObjectPtr< QuadSoftShape_obj > __this = new QuadSoftShape_obj();
	__this->__construct(__o_opacity,__o_visibility,__o_strokeColor,__o_aX,__o_aY,__o_bX,__o_bY,__o_cX,__o_cY,__o_dX,__o_dY,__o_soft,__o_softAB,__o_softBC,__o_softCD,__o_softDA);
	return __this;
}

::hx::ObjectPtr< QuadSoftShape_obj > QuadSoftShape_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< int >  __o_strokeColor,::hx::Null< Float >  __o_aX,::hx::Null< Float >  __o_aY,::hx::Null< Float >  __o_bX,::hx::Null< Float >  __o_bY,::hx::Null< Float >  __o_cX,::hx::Null< Float >  __o_cY,::hx::Null< Float >  __o_dX,::hx::Null< Float >  __o_dY,::hx::Null< Float >  __o_soft,::hx::Null< bool >  __o_softAB,::hx::Null< bool >  __o_softBC,::hx::Null< bool >  __o_softCD,::hx::Null< bool >  __o_softDA) {
	QuadSoftShape_obj *__this = (QuadSoftShape_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(QuadSoftShape_obj), true, "pixelimage.triangleGML.contour.QuadSoftShape"));
	*(void **)__this = QuadSoftShape_obj::_hx_vtable;
	__this->__construct(__o_opacity,__o_visibility,__o_strokeColor,__o_aX,__o_aY,__o_bX,__o_bY,__o_cX,__o_cY,__o_dX,__o_dY,__o_soft,__o_softAB,__o_softBC,__o_softCD,__o_softDA);
	return __this;
}

QuadSoftShape_obj::QuadSoftShape_obj()
{
}

::hx::Val QuadSoftShape_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"aX") ) { return ::hx::Val( aX ); }
		if (HX_FIELD_EQ(inName,"aY") ) { return ::hx::Val( aY ); }
		if (HX_FIELD_EQ(inName,"bX") ) { return ::hx::Val( bX ); }
		if (HX_FIELD_EQ(inName,"bY") ) { return ::hx::Val( bY ); }
		if (HX_FIELD_EQ(inName,"cX") ) { return ::hx::Val( cX ); }
		if (HX_FIELD_EQ(inName,"cY") ) { return ::hx::Val( cY ); }
		if (HX_FIELD_EQ(inName,"dX") ) { return ::hx::Val( dX ); }
		if (HX_FIELD_EQ(inName,"dY") ) { return ::hx::Val( dY ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"soft") ) { return ::hx::Val( soft ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"softAB") ) { return ::hx::Val( softAB ); }
		if (HX_FIELD_EQ(inName,"softBC") ) { return ::hx::Val( softBC ); }
		if (HX_FIELD_EQ(inName,"softCD") ) { return ::hx::Val( softCD ); }
		if (HX_FIELD_EQ(inName,"softDA") ) { return ::hx::Val( softDA ); }
		if (HX_FIELD_EQ(inName,"render") ) { return ::hx::Val( render_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setParameter") ) { return ::hx::Val( setParameter_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val QuadSoftShape_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"aX") ) { aX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"aY") ) { aY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bX") ) { bX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bY") ) { bY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cX") ) { cX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cY") ) { cY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dX") ) { dX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dY") ) { dY=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"soft") ) { soft=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"softAB") ) { softAB=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"softBC") ) { softBC=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"softCD") ) { softCD=inValue.Cast< bool >(); return inValue; }
		if (HX_FIELD_EQ(inName,"softDA") ) { softDA=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void QuadSoftShape_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("aX",d7,54,00,00));
	outFields->push(HX_("aY",d8,54,00,00));
	outFields->push(HX_("bX",b6,55,00,00));
	outFields->push(HX_("bY",b7,55,00,00));
	outFields->push(HX_("cX",95,56,00,00));
	outFields->push(HX_("cY",96,56,00,00));
	outFields->push(HX_("dX",74,57,00,00));
	outFields->push(HX_("dY",75,57,00,00));
	outFields->push(HX_("soft",ea,1c,58,4c));
	outFields->push(HX_("softAB",4b,e4,48,28));
	outFields->push(HX_("softBC",2b,e5,48,28));
	outFields->push(HX_("softCD",0b,e6,48,28));
	outFields->push(HX_("softDA",e7,e6,48,28));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo QuadSoftShape_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(QuadSoftShape_obj,aX),HX_("aX",d7,54,00,00)},
	{::hx::fsFloat,(int)offsetof(QuadSoftShape_obj,aY),HX_("aY",d8,54,00,00)},
	{::hx::fsFloat,(int)offsetof(QuadSoftShape_obj,bX),HX_("bX",b6,55,00,00)},
	{::hx::fsFloat,(int)offsetof(QuadSoftShape_obj,bY),HX_("bY",b7,55,00,00)},
	{::hx::fsFloat,(int)offsetof(QuadSoftShape_obj,cX),HX_("cX",95,56,00,00)},
	{::hx::fsFloat,(int)offsetof(QuadSoftShape_obj,cY),HX_("cY",96,56,00,00)},
	{::hx::fsFloat,(int)offsetof(QuadSoftShape_obj,dX),HX_("dX",74,57,00,00)},
	{::hx::fsFloat,(int)offsetof(QuadSoftShape_obj,dY),HX_("dY",75,57,00,00)},
	{::hx::fsFloat,(int)offsetof(QuadSoftShape_obj,soft),HX_("soft",ea,1c,58,4c)},
	{::hx::fsBool,(int)offsetof(QuadSoftShape_obj,softAB),HX_("softAB",4b,e4,48,28)},
	{::hx::fsBool,(int)offsetof(QuadSoftShape_obj,softBC),HX_("softBC",2b,e5,48,28)},
	{::hx::fsBool,(int)offsetof(QuadSoftShape_obj,softCD),HX_("softCD",0b,e6,48,28)},
	{::hx::fsBool,(int)offsetof(QuadSoftShape_obj,softDA),HX_("softDA",e7,e6,48,28)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *QuadSoftShape_obj_sStaticStorageInfo = 0;
#endif

static ::String QuadSoftShape_obj_sMemberFields[] = {
	HX_("aX",d7,54,00,00),
	HX_("aY",d8,54,00,00),
	HX_("bX",b6,55,00,00),
	HX_("bY",b7,55,00,00),
	HX_("cX",95,56,00,00),
	HX_("cY",96,56,00,00),
	HX_("dX",74,57,00,00),
	HX_("dY",75,57,00,00),
	HX_("soft",ea,1c,58,4c),
	HX_("softAB",4b,e4,48,28),
	HX_("softBC",2b,e5,48,28),
	HX_("softCD",0b,e6,48,28),
	HX_("softDA",e7,e6,48,28),
	HX_("setParameter",a7,f5,ff,6c),
	HX_("render",56,6b,29,05),
	::String(null()) };

::hx::Class QuadSoftShape_obj::__mClass;

void QuadSoftShape_obj::__register()
{
	QuadSoftShape_obj _hx_dummy;
	QuadSoftShape_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pixelimage.triangleGML.contour.QuadSoftShape",f3,d5,13,17);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(QuadSoftShape_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< QuadSoftShape_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = QuadSoftShape_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = QuadSoftShape_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pixelimage
} // end namespace triangleGML
} // end namespace contour
