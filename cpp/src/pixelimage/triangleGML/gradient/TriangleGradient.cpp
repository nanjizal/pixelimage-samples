// Generated by Haxe 4.3.0-rc.1+
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_ArrayBufferViewImpl
#include <haxe/io/ArrayBufferViewImpl.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_pixelimage_ImageStruct
#include <pixelimage/ImageStruct.h>
#endif
#ifndef INCLUDED_pixelimage__Endian_Endian_Fields_
#include <pixelimage/_Endian/Endian_Fields_.h>
#endif
#ifndef INCLUDED_pixelimage_algo_HitTri
#include <pixelimage/algo/HitTri.h>
#endif
#ifndef INCLUDED_pixelimage_algo_IhitObj
#include <pixelimage/algo/IhitObj.h>
#endif
#ifndef INCLUDED_pixelimage_iter_IntIterStart
#include <pixelimage/iter/IntIterStart.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_BasicGradient
#include <pixelimage/triangleGML/coreShape/BasicGradient.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_GroupShape
#include <pixelimage/triangleGML/coreShape/GroupShape.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_ShapeInterface
#include <pixelimage/triangleGML/coreShape/ShapeInterface.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_gradient_TriangleGradient
#include <pixelimage/triangleGML/gradient/TriangleGradient.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_efc0ec347db704ae_26_new,"pixelimage.triangleGML.gradient.TriangleGradient","new",0x8e4aebbf,"pixelimage.triangleGML.gradient.TriangleGradient.new","pixelimage/triangleGML/gradient/TriangleGradient.hx",26,0xd2b511b2)
HX_LOCAL_STACK_FRAME(_hx_pos_efc0ec347db704ae_36_setParameter,"pixelimage.triangleGML.gradient.TriangleGradient","setParameter",0x1e6ff668,"pixelimage.triangleGML.gradient.TriangleGradient.setParameter","pixelimage/triangleGML/gradient/TriangleGradient.hx",36,0xd2b511b2)
HX_LOCAL_STACK_FRAME(_hx_pos_efc0ec347db704ae_59_render,"pixelimage.triangleGML.gradient.TriangleGradient","render",0x63207557,"pixelimage.triangleGML.gradient.TriangleGradient.render","pixelimage/triangleGML/gradient/TriangleGradient.hx",59,0xd2b511b2)
namespace pixelimage{
namespace triangleGML{
namespace gradient{

void TriangleGradient_obj::__construct(::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< Float >  __o_aX,::hx::Null< Float >  __o_aY,::hx::Null< Float >  __o_bX,::hx::Null< Float >  __o_bY,::hx::Null< Float >  __o_cX,::hx::Null< Float >  __o_cY,::hx::Null< int >  __o_colorA,::hx::Null< int >  __o_colorB,::hx::Null< int >  __o_colorC){
            		Float opacity = __o_opacity.Default(((Float)1.));
            		bool visibility = __o_visibility.Default(true);
            		Float aX = __o_aX.Default(((Float)0.));
            		Float aY = __o_aY.Default(((Float)0.));
            		Float bX = __o_bX.Default(((Float)1.));
            		Float bY = __o_bY.Default(((Float)0.));
            		Float cX = __o_cX.Default(((Float)0.));
            		Float cY = __o_cY.Default(((Float)1.));
            		int colorA = __o_colorA.Default(-65536);
            		int colorB = __o_colorB.Default(-16711936);
            		int colorC = __o_colorC.Default(-16776961);
            	HX_STACKFRAME(&_hx_pos_efc0ec347db704ae_26_new)
HXLINE(  27)		super::__construct(opacity,visibility,::Array_obj< int >::__new(3)->init(0,colorA)->init(1,colorB)->init(2,colorC));
HXLINE(  28)		this->aX = aX;
HXLINE(  29)		this->aY = aY;
HXLINE(  30)		this->bX = bX;
HXLINE(  31)		this->bY = bY;
HXLINE(  32)		this->cX = cX;
HXLINE(  33)		this->cY = cY;
            	}

Dynamic TriangleGradient_obj::__CreateEmpty() { return new TriangleGradient_obj; }

void *TriangleGradient_obj::_hx_vtable = 0;

Dynamic TriangleGradient_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TriangleGradient_obj > _hx_result = new TriangleGradient_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10]);
	return _hx_result;
}

bool TriangleGradient_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x3ce37a09) {
		if (inClassId<=(int)0x24e92cfb) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x24e92cfb;
		} else {
			return inClassId==(int)0x3ce37a09;
		}
	} else {
		return inClassId==(int)0x68e012c5;
	}
}

void TriangleGradient_obj::setParameter(::String name,::String value){
            	HX_STACKFRAME(&_hx_pos_efc0ec347db704ae_36_setParameter)
HXDLIN(  36)		::String _hx_switch_0 = name;
            		if (  (_hx_switch_0==HX_("aX",d7,54,00,00)) ){
HXLINE(  38)			this->aX = ::Std_obj::parseFloat(value);
HXDLIN(  38)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("aY",d8,54,00,00)) ){
HXLINE(  40)			this->aY = ::Std_obj::parseFloat(value);
HXDLIN(  40)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("bX",b6,55,00,00)) ){
HXLINE(  42)			this->bX = ::Std_obj::parseFloat(value);
HXDLIN(  42)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("bY",b7,55,00,00)) ){
HXLINE(  44)			this->bY = ::Std_obj::parseFloat(value);
HXDLIN(  44)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("cX",95,56,00,00)) ){
HXLINE(  46)			this->cX = ::Std_obj::parseFloat(value);
HXDLIN(  46)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("cY",96,56,00,00)) ){
HXLINE(  48)			this->cY = ::Std_obj::parseFloat(value);
HXDLIN(  48)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("colorA",7e,c5,86,c6)) ){
HXLINE(  50)			this->cornerColors[0] = ( (int)(::Std_obj::parseInt(value)) );
HXDLIN(  50)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("colorB",7f,c5,86,c6)) ){
HXLINE(  52)			this->cornerColors[1] = ( (int)(::Std_obj::parseInt(value)) );
HXDLIN(  52)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("colorC",80,c5,86,c6)) ){
HXLINE(  54)			this->cornerColors[2] = ( (int)(::Std_obj::parseInt(value)) );
HXDLIN(  54)			goto _hx_goto_1;
            		}
            		/* default */{
HXLINE(  56)			this->super::setParameter(name,value);
            		}
            		_hx_goto_1:;
            	}


::pixelimage::ImageStruct TriangleGradient_obj::render(::pixelimage::ImageStruct pixelShape){
            	HX_GC_STACKFRAME(&_hx_pos_efc0ec347db704ae_59_render)
HXLINE(  60)		{
HXLINE(  60)			Float ax = (this->aX + this->offX);
HXDLIN(  60)			Float ay = (this->aY + this->offY);
HXDLIN(  60)			int colA = this->cornerColors->__get(0);
HXDLIN(  60)			Float bx = (this->bX + this->offX);
HXDLIN(  60)			Float by = (this->bY + this->offY);
HXDLIN(  60)			int colB = this->cornerColors->__get(1);
HXDLIN(  60)			Float cx = (this->cX + this->offX);
HXDLIN(  60)			Float cy = (this->cY + this->offY);
HXDLIN(  60)			int colC = this->cornerColors->__get(2);
HXDLIN(  60)			{
HXLINE(  60)				bool hasHit = false;
HXDLIN(  60)				bool hasUndo = false;
HXDLIN(  60)				int aA = ((colB >> 24) & 255);
HXDLIN(  60)				int rA = ((colB >> 16) & 255);
HXDLIN(  60)				int gA = ((colB >> 8) & 255);
HXDLIN(  60)				int bA = (colB & 255);
HXDLIN(  60)				int aB = ((colA >> 24) & 255);
HXDLIN(  60)				int rB = ((colA >> 16) & 255);
HXDLIN(  60)				int gB = ((colA >> 8) & 255);
HXDLIN(  60)				int bB = (colA & 255);
HXDLIN(  60)				int aC = ((colC >> 24) & 255);
HXDLIN(  60)				int rC = ((colC >> 16) & 255);
HXDLIN(  60)				int gC = ((colC >> 8) & 255);
HXDLIN(  60)				int bC = (colC & 255);
HXDLIN(  60)				Float bcx = (bx - cx);
HXDLIN(  60)				Float bcy = (by - cy);
HXDLIN(  60)				Float acx = (ax - cx);
HXDLIN(  60)				Float acy = (ay - cy);
HXDLIN(  60)				Float dot11 = ((bcx * bcx) + (bcy * bcy));
HXDLIN(  60)				Float dot12 = ((bcx * acx) + (bcy * acy));
HXDLIN(  60)				Float dot22 = ((acx * acx) + (acy * acy));
HXDLIN(  60)				Float denom1 = (( (Float)(1) ) / ((dot11 * dot22) - (dot12 * dot12)));
HXDLIN(  60)				::pixelimage::iter::IntIterStart xIter3;
HXDLIN(  60)				if ((ax > bx)) {
HXLINE(  60)					if ((ax > cx)) {
HXLINE(  60)						int min;
HXDLIN(  60)						if ((bx > cx)) {
HXLINE(  60)							min = ::Math_obj::floor(cx);
            						}
            						else {
HXLINE(  60)							min = ::Math_obj::floor(bx);
            						}
HXDLIN(  60)						int ii_min = min;
HXDLIN(  60)						int ii_max = ::Math_obj::ceil(ax);
HXDLIN(  60)						::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  60)						xIter3 = this1;
            					}
            					else {
HXLINE(  60)						int ii_min = ::Math_obj::floor(bx);
HXDLIN(  60)						int ii_max = ::Math_obj::ceil(cx);
HXDLIN(  60)						::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  60)						xIter3 = this1;
            					}
            				}
            				else {
HXLINE(  60)					if ((bx > cx)) {
HXLINE(  60)						int min;
HXDLIN(  60)						if ((ax > cx)) {
HXLINE(  60)							min = ::Math_obj::floor(cx);
            						}
            						else {
HXLINE(  60)							min = ::Math_obj::ceil(ax);
            						}
HXDLIN(  60)						int ii_min = min;
HXDLIN(  60)						int ii_max = ::Math_obj::ceil(bx);
HXDLIN(  60)						::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  60)						xIter3 = this1;
            					}
            					else {
HXLINE(  60)						int ii_min = ::Math_obj::floor(ax);
HXDLIN(  60)						int ii_max = ::Math_obj::ceil(cx);
HXDLIN(  60)						::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  60)						xIter3 = this1;
            					}
            				}
HXDLIN(  60)				::pixelimage::iter::IntIterStart yIter3;
HXDLIN(  60)				if ((ay > by)) {
HXLINE(  60)					if ((ay > cy)) {
HXLINE(  60)						int min;
HXDLIN(  60)						if ((by > cy)) {
HXLINE(  60)							min = ::Math_obj::floor(cy);
            						}
            						else {
HXLINE(  60)							min = ::Math_obj::floor(by);
            						}
HXDLIN(  60)						int ii_min = min;
HXDLIN(  60)						int ii_max = ::Math_obj::ceil(ay);
HXDLIN(  60)						::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  60)						yIter3 = this1;
            					}
            					else {
HXLINE(  60)						int ii_min = ::Math_obj::floor(by);
HXDLIN(  60)						int ii_max = ::Math_obj::ceil(cy);
HXDLIN(  60)						::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  60)						yIter3 = this1;
            					}
            				}
            				else {
HXLINE(  60)					if ((by > cy)) {
HXLINE(  60)						int min;
HXDLIN(  60)						if ((ay > cy)) {
HXLINE(  60)							min = ::Math_obj::floor(cy);
            						}
            						else {
HXLINE(  60)							min = ::Math_obj::ceil(ay);
            						}
HXDLIN(  60)						int ii_min = min;
HXDLIN(  60)						int ii_max = ::Math_obj::ceil(by);
HXDLIN(  60)						::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  60)						yIter3 = this1;
            					}
            					else {
HXLINE(  60)						int ii_min = ::Math_obj::floor(ay);
HXDLIN(  60)						int ii_max = ::Math_obj::ceil(cy);
HXDLIN(  60)						::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  60)						yIter3 = this1;
            					}
            				}
HXDLIN(  60)				::pixelimage::ImageStruct undoImage = null();
HXDLIN(  60)				if (hasUndo) {
HXLINE(  60)					int w = ((xIter3->max - xIter3->start) + 1);
HXDLIN(  60)					int h = ((yIter3->max - yIter3->start) + 1);
HXDLIN(  60)					int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN(  60)					::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  60)					::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN(  60)					::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN(  60)					undoImage = this3;
HXDLIN(  60)					{
HXLINE(  60)						int rectLeft = xIter3->start;
HXDLIN(  60)						int rectTop = yIter3->start;
HXDLIN(  60)						int rectRight = xIter3->max;
HXDLIN(  60)						bool forceClear = false;
HXDLIN(  60)						{
HXLINE(  60)							int _g = rectTop;
HXDLIN(  60)							int _g1 = yIter3->max;
HXDLIN(  60)							while((_g < _g1)){
HXLINE(  60)								_g = (_g + 1);
HXDLIN(  60)								int dy = (_g - 1);
HXDLIN(  60)								{
HXLINE(  60)									int _g1 = rectLeft;
HXDLIN(  60)									int _g2 = rectRight;
HXDLIN(  60)									while((_g1 < _g2)){
HXLINE(  60)										_g1 = (_g1 + 1);
HXDLIN(  60)										int dx = (_g1 - 1);
HXDLIN(  60)										::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  60)										int index;
HXDLIN(  60)										if (pixelShape->useVirtualPos) {
HXLINE(  60)											index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + dx) - pixelShape->virtualX));
            										}
            										else {
HXLINE(  60)											index = ::Std_obj::_hx_int(( (Float)(((dy * pixelShape->width) + dx)) ));
            										}
HXDLIN(  60)										::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  60)										int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  60)										int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  60)										int col;
HXDLIN(  60)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  60)											col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            										}
            										else {
HXLINE(  60)											col = c;
            										}
HXDLIN(  60)										bool _hx_tmp;
HXDLIN(  60)										if (pixelShape->useMask) {
HXLINE(  60)											_hx_tmp = ::hx::IsNotNull( pixelShape->mask );
            										}
            										else {
HXLINE(  60)											_hx_tmp = false;
            										}
HXDLIN(  60)										if (_hx_tmp) {
HXLINE(  60)											::pixelimage::ImageStruct this1 = pixelShape->mask;
HXDLIN(  60)											::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  60)											int index;
HXDLIN(  60)											if (this1->useVirtualPos) {
HXLINE(  60)												index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            											}
            											else {
HXLINE(  60)												index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            											}
HXDLIN(  60)											::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  60)											int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  60)											int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  60)											int v;
HXDLIN(  60)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  60)												v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            											}
            											else {
HXLINE(  60)												v = c;
            											}
HXDLIN(  60)											int this3 = v;
HXDLIN(  60)											int maskPixel = this3;
HXDLIN(  60)											int this4 = col;
HXDLIN(  60)											int this5 = this4;
HXDLIN(  60)											if ((maskPixel == 0)) {
HXLINE(  60)												int this1 = this5;
HXDLIN(  60)												col = this1;
            											}
            											else {
HXLINE(  60)												Float m0;
HXDLIN(  60)												int this1 = ((maskPixel >> 24) & 255);
HXDLIN(  60)												if ((this1 == 0)) {
HXLINE(  60)													m0 = ((Float)0.);
            												}
            												else {
HXLINE(  60)													m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            												}
HXDLIN(  60)												Float m1;
HXDLIN(  60)												int this2 = ((maskPixel >> 16) & 255);
HXDLIN(  60)												if ((this2 == 0)) {
HXLINE(  60)													m1 = ((Float)0.);
            												}
            												else {
HXLINE(  60)													m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            												}
HXDLIN(  60)												Float m2;
HXDLIN(  60)												int this3 = ((maskPixel >> 8) & 255);
HXDLIN(  60)												if ((this3 == 0)) {
HXLINE(  60)													m2 = ((Float)0.);
            												}
            												else {
HXLINE(  60)													m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            												}
HXDLIN(  60)												Float m3;
HXDLIN(  60)												int this4 = (maskPixel & 255);
HXDLIN(  60)												if ((this4 == 0)) {
HXLINE(  60)													m3 = ((Float)0.);
            												}
            												else {
HXLINE(  60)													m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            												}
HXDLIN(  60)												int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN(  60)												int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN(  60)												int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN(  60)												int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN(  60)												col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN(  60)										if ((col != 0)) {
HXLINE(  60)											int x = (dx - rectLeft);
HXDLIN(  60)											int y = (dy - rectTop);
HXDLIN(  60)											int this1 = col;
HXDLIN(  60)											int c = this1;
HXDLIN(  60)											bool _hx_tmp;
HXDLIN(  60)											if ((((c >> 24) & 255) < 254)) {
HXLINE(  60)												_hx_tmp = undoImage->transparent;
            											}
            											else {
HXLINE(  60)												_hx_tmp = false;
            											}
HXDLIN(  60)											if (_hx_tmp) {
HXLINE(  60)												int location;
HXDLIN(  60)												if (undoImage->useVirtualPos) {
HXLINE(  60)													location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            												}
            												else {
HXLINE(  60)													location = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            												}
HXDLIN(  60)												::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  60)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  60)												int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  60)												int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  60)												int this3 = this2;
HXDLIN(  60)												int this4;
HXDLIN(  60)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  60)													this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            												}
            												else {
HXLINE(  60)													this4 = this3;
            												}
HXDLIN(  60)												Float a1;
HXDLIN(  60)												int this5 = ((this4 >> 24) & 255);
HXDLIN(  60)												if ((this5 == 0)) {
HXLINE(  60)													a1 = ((Float)0.);
            												}
            												else {
HXLINE(  60)													a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            												}
HXDLIN(  60)												Float r1;
HXDLIN(  60)												int this6 = ((this4 >> 16) & 255);
HXDLIN(  60)												if ((this6 == 0)) {
HXLINE(  60)													r1 = ((Float)0.);
            												}
            												else {
HXLINE(  60)													r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            												}
HXDLIN(  60)												Float g1;
HXDLIN(  60)												int this7 = ((this4 >> 8) & 255);
HXDLIN(  60)												if ((this7 == 0)) {
HXLINE(  60)													g1 = ((Float)0.);
            												}
            												else {
HXLINE(  60)													g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            												}
HXDLIN(  60)												Float b1;
HXDLIN(  60)												int this8 = (this4 & 255);
HXDLIN(  60)												if ((this8 == 0)) {
HXLINE(  60)													b1 = ((Float)0.);
            												}
            												else {
HXLINE(  60)													b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            												}
HXDLIN(  60)												Float a2;
HXDLIN(  60)												int this9 = ((col >> 24) & 255);
HXDLIN(  60)												if ((this9 == 0)) {
HXLINE(  60)													a2 = ((Float)0.);
            												}
            												else {
HXLINE(  60)													a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            												}
HXDLIN(  60)												Float r2;
HXDLIN(  60)												int this10 = ((col >> 16) & 255);
HXDLIN(  60)												if ((this10 == 0)) {
HXLINE(  60)													r2 = ((Float)0.);
            												}
            												else {
HXLINE(  60)													r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            												}
HXDLIN(  60)												Float g2;
HXDLIN(  60)												int this11 = ((col >> 8) & 255);
HXDLIN(  60)												if ((this11 == 0)) {
HXLINE(  60)													g2 = ((Float)0.);
            												}
            												else {
HXLINE(  60)													g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            												}
HXDLIN(  60)												Float b2;
HXDLIN(  60)												int this12 = (col & 255);
HXDLIN(  60)												if ((this12 == 0)) {
HXLINE(  60)													b2 = ((Float)0.);
            												}
            												else {
HXLINE(  60)													b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            												}
HXDLIN(  60)												Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  60)												int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  60)												int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  60)												int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  60)												int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  60)												int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  60)												{
HXLINE(  60)													::haxe::io::ArrayBufferViewImpl this13 = undoImage->image;
HXDLIN(  60)													int value;
HXDLIN(  60)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  60)														value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            													}
            													else {
HXLINE(  60)														value = blended;
            													}
HXDLIN(  60)													bool _hx_tmp;
HXDLIN(  60)													if ((location >= 0)) {
HXLINE(  60)														_hx_tmp = (location < (this13->byteLength >> 2));
            													}
            													else {
HXLINE(  60)														_hx_tmp = false;
            													}
HXDLIN(  60)													if (_hx_tmp) {
HXLINE(  60)														::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  60)														int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  60)														_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  60)														_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  60)														_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  60)														_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            													}
            												}
            											}
            											else {
HXLINE(  60)												::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  60)												int index;
HXDLIN(  60)												if (undoImage->useVirtualPos) {
HXLINE(  60)													index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            												}
            												else {
HXLINE(  60)													index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            												}
HXDLIN(  60)												int value;
HXDLIN(  60)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  60)													value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE(  60)													value = c;
            												}
HXDLIN(  60)												bool _hx_tmp;
HXDLIN(  60)												if ((index >= 0)) {
HXLINE(  60)													_hx_tmp = (index < (this1->byteLength >> 2));
            												}
            												else {
HXLINE(  60)													_hx_tmp = false;
            												}
HXDLIN(  60)												if (_hx_tmp) {
HXLINE(  60)													::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  60)													int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  60)													_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  60)													_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  60)													_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  60)													_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            												}
            											}
            										}
            										else {
HXLINE(  60)											if (forceClear) {
HXLINE(  60)												::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  60)												int x = (dx - rectLeft);
HXDLIN(  60)												int y = (dy - rectTop);
HXDLIN(  60)												int index;
HXDLIN(  60)												if (undoImage->useVirtualPos) {
HXLINE(  60)													index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            												}
            												else {
HXLINE(  60)													index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            												}
HXDLIN(  60)												bool _hx_tmp;
HXDLIN(  60)												if ((index >= 0)) {
HXLINE(  60)													_hx_tmp = (index < (this1->byteLength >> 2));
            												}
            												else {
HXLINE(  60)													_hx_tmp = false;
            												}
HXDLIN(  60)												if (_hx_tmp) {
HXLINE(  60)													::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  60)													int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  60)													_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  60)													_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  60)													_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  60)													_this->b[(pos + 3)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  60)				{
HXLINE(  60)					int _g_min = xIter3->start;
HXDLIN(  60)					int _g_max = xIter3->max;
HXDLIN(  60)					while((_g_min < _g_max)){
HXLINE(  60)						_g_min = (_g_min + 1);
HXDLIN(  60)						int px = (_g_min - 1);
HXDLIN(  60)						Float pcx = (( (Float)(px) ) - cx);
HXDLIN(  60)						{
HXLINE(  60)							int _g_min1 = yIter3->start;
HXDLIN(  60)							int _g_max = yIter3->max;
HXDLIN(  60)							while((_g_min1 < _g_max)){
HXLINE(  60)								_g_min1 = (_g_min1 + 1);
HXDLIN(  60)								int py = (_g_min1 - 1);
HXDLIN(  60)								Float pcy = (( (Float)(py) ) - cy);
HXDLIN(  60)								Float dot31 = ((pcx * bcx) + (pcy * bcy));
HXDLIN(  60)								Float dot32 = ((pcx * acx) + (pcy * acy));
HXDLIN(  60)								Float ratioA = (((dot22 * dot31) - (dot12 * dot32)) * denom1);
HXDLIN(  60)								Float ratioB = (((dot11 * dot32) - (dot12 * dot31)) * denom1);
HXDLIN(  60)								Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN(  60)								bool _hx_tmp;
HXDLIN(  60)								bool _hx_tmp1;
HXDLIN(  60)								if ((ratioA >= 0)) {
HXLINE(  60)									_hx_tmp1 = (ratioB >= 0);
            								}
            								else {
HXLINE(  60)									_hx_tmp1 = false;
            								}
HXDLIN(  60)								if (_hx_tmp1) {
HXLINE(  60)									_hx_tmp = (ratioC >= 0);
            								}
            								else {
HXLINE(  60)									_hx_tmp = false;
            								}
HXDLIN(  60)								if (_hx_tmp) {
HXLINE(  60)									int i = ::Std_obj::_hx_int((((( (Float)(aA) ) * ratioA) + (( (Float)(aB) ) * ratioB)) + (( (Float)(aC) ) * ratioC)));
HXDLIN(  60)									if ((i > 255)) {
HXLINE(  24)										i = 255;
            									}
HXLINE(  60)									if ((i < 0)) {
HXLINE(  25)										i = 0;
            									}
HXLINE(  60)									int this1 = i;
HXDLIN(  60)									int a = this1;
HXDLIN(  60)									int i1 = ::Std_obj::_hx_int((((( (Float)(rA) ) * ratioA) + (( (Float)(rB) ) * ratioB)) + (( (Float)(rC) ) * ratioC)));
HXDLIN(  60)									if ((i1 > 255)) {
HXLINE(  24)										i1 = 255;
            									}
HXLINE(  60)									if ((i1 < 0)) {
HXLINE(  25)										i1 = 0;
            									}
HXLINE(  60)									int this2 = i1;
HXDLIN(  60)									int r = this2;
HXDLIN(  60)									int i2 = ::Std_obj::_hx_int((((( (Float)(gA) ) * ratioA) + (( (Float)(gB) ) * ratioB)) + (( (Float)(gC) ) * ratioC)));
HXDLIN(  60)									if ((i2 > 255)) {
HXLINE(  24)										i2 = 255;
            									}
HXLINE(  60)									if ((i2 < 0)) {
HXLINE(  25)										i2 = 0;
            									}
HXLINE(  60)									int this3 = i2;
HXDLIN(  60)									int g = this3;
HXDLIN(  60)									int i3 = ::Std_obj::_hx_int((((( (Float)(bA) ) * ratioA) + (( (Float)(bB) ) * ratioB)) + (( (Float)(bC) ) * ratioC)));
HXDLIN(  60)									if ((i3 > 255)) {
HXLINE(  24)										i3 = 255;
            									}
HXLINE(  60)									if ((i3 < 0)) {
HXLINE(  25)										i3 = 0;
            									}
HXLINE(  60)									int this4 = i3;
HXDLIN(  60)									int b = this4;
HXDLIN(  60)									{
HXLINE(  60)										int location;
HXDLIN(  60)										if (pixelShape->useVirtualPos) {
HXLINE(  60)											location = ::Std_obj::_hx_int(((((( (Float)(py) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + px) - pixelShape->virtualX));
            										}
            										else {
HXLINE(  60)											location = ::Std_obj::_hx_int(( (Float)(((py * pixelShape->width) + px)) ));
            										}
HXDLIN(  60)										bool _hx_tmp;
HXDLIN(  60)										if (pixelShape->transparent) {
HXLINE(  60)											_hx_tmp = (a < 254);
            										}
            										else {
HXLINE(  60)											_hx_tmp = false;
            										}
HXDLIN(  60)										if (_hx_tmp) {
HXLINE(  60)											::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  60)											::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  60)											int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  60)											int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  60)											int this3 = this2;
HXDLIN(  60)											int old;
HXDLIN(  60)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  60)												old = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            											}
            											else {
HXLINE(  60)												old = this3;
            											}
HXDLIN(  60)											int rhs = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  60)											Float a1;
HXDLIN(  60)											int this4 = ((old >> 24) & 255);
HXDLIN(  60)											if ((this4 == 0)) {
HXLINE(  60)												a1 = ((Float)0.);
            											}
            											else {
HXLINE(  60)												a1 = (( (Float)(this4) ) / ( (Float)(255) ));
            											}
HXDLIN(  60)											Float r1;
HXDLIN(  60)											int this5 = ((old >> 16) & 255);
HXDLIN(  60)											if ((this5 == 0)) {
HXLINE(  60)												r1 = ((Float)0.);
            											}
            											else {
HXLINE(  60)												r1 = (( (Float)(this5) ) / ( (Float)(255) ));
            											}
HXDLIN(  60)											Float g1;
HXDLIN(  60)											int this6 = ((old >> 8) & 255);
HXDLIN(  60)											if ((this6 == 0)) {
HXLINE(  60)												g1 = ((Float)0.);
            											}
            											else {
HXLINE(  60)												g1 = (( (Float)(this6) ) / ( (Float)(255) ));
            											}
HXDLIN(  60)											Float b1;
HXDLIN(  60)											int this7 = (old & 255);
HXDLIN(  60)											if ((this7 == 0)) {
HXLINE(  60)												b1 = ((Float)0.);
            											}
            											else {
HXLINE(  60)												b1 = (( (Float)(this7) ) / ( (Float)(255) ));
            											}
HXDLIN(  60)											Float a2;
HXDLIN(  60)											int this8 = ((rhs >> 24) & 255);
HXDLIN(  60)											if ((this8 == 0)) {
HXLINE(  60)												a2 = ((Float)0.);
            											}
            											else {
HXLINE(  60)												a2 = (( (Float)(this8) ) / ( (Float)(255) ));
            											}
HXDLIN(  60)											Float r2;
HXDLIN(  60)											int this9 = ((rhs >> 16) & 255);
HXDLIN(  60)											if ((this9 == 0)) {
HXLINE(  60)												r2 = ((Float)0.);
            											}
            											else {
HXLINE(  60)												r2 = (( (Float)(this9) ) / ( (Float)(255) ));
            											}
HXDLIN(  60)											Float g2;
HXDLIN(  60)											int this10 = ((rhs >> 8) & 255);
HXDLIN(  60)											if ((this10 == 0)) {
HXLINE(  60)												g2 = ((Float)0.);
            											}
            											else {
HXLINE(  60)												g2 = (( (Float)(this10) ) / ( (Float)(255) ));
            											}
HXDLIN(  60)											Float b2;
HXDLIN(  60)											int this11 = (rhs & 255);
HXDLIN(  60)											if ((this11 == 0)) {
HXLINE(  60)												b2 = ((Float)0.);
            											}
            											else {
HXLINE(  60)												b2 = (( (Float)(this11) ) / ( (Float)(255) ));
            											}
HXDLIN(  60)											Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  60)											int r3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  60)											int g3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  60)											int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  60)											int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  60)											int blended = ((((a4 << 24) | (r3 << 16)) | (g3 << 8)) | b3);
HXDLIN(  60)											{
HXLINE(  60)												::haxe::io::ArrayBufferViewImpl this12 = pixelShape->image;
HXDLIN(  60)												int value;
HXDLIN(  60)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  60)													value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            												}
            												else {
HXLINE(  60)													value = blended;
            												}
HXDLIN(  60)												bool _hx_tmp;
HXDLIN(  60)												if ((location >= 0)) {
HXLINE(  60)													_hx_tmp = (location < (this12->byteLength >> 2));
            												}
            												else {
HXLINE(  60)													_hx_tmp = false;
            												}
HXDLIN(  60)												if (_hx_tmp) {
HXLINE(  60)													::haxe::io::Bytes _this = this12->bytes;
HXDLIN(  60)													int pos = ((location << 2) + this12->byteOffset);
HXDLIN(  60)													_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  60)													_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  60)													_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  60)													_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            												}
            											}
            										}
            										else {
HXLINE(  60)											::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  60)											int value;
HXDLIN(  60)											if (pixelShape->isLittle) {
HXLINE(  60)												value = ((((a << 24) | (b << 16)) | (g << 8)) | r);
            											}
            											else {
HXLINE(  60)												value = ((((a << 24) | (r << 16)) | (g << 8)) | b);
            											}
HXDLIN(  60)											bool _hx_tmp;
HXDLIN(  60)											if ((location >= 0)) {
HXLINE(  60)												_hx_tmp = (location < (this1->byteLength >> 2));
            											}
            											else {
HXLINE(  60)												_hx_tmp = false;
            											}
HXDLIN(  60)											if (_hx_tmp) {
HXLINE(  60)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  60)												int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  60)												_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  60)												_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  60)												_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  60)												_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN(  60)				if ((hasHit == false)) {
HXLINE(  60)					::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,true);
HXDLIN(  60)					if (hasUndo) {
HXLINE(  60)						v->undoImage = undoImage;
HXDLIN(  60)						v->undoX = xIter3->start;
HXDLIN(  60)						v->undoY = yIter3->start;
            					}
            				}
            			}
            		}
HXLINE(  61)		return this->super::render(pixelShape);
            	}



::hx::ObjectPtr< TriangleGradient_obj > TriangleGradient_obj::__new(::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< Float >  __o_aX,::hx::Null< Float >  __o_aY,::hx::Null< Float >  __o_bX,::hx::Null< Float >  __o_bY,::hx::Null< Float >  __o_cX,::hx::Null< Float >  __o_cY,::hx::Null< int >  __o_colorA,::hx::Null< int >  __o_colorB,::hx::Null< int >  __o_colorC) {
	::hx::ObjectPtr< TriangleGradient_obj > __this = new TriangleGradient_obj();
	__this->__construct(__o_opacity,__o_visibility,__o_aX,__o_aY,__o_bX,__o_bY,__o_cX,__o_cY,__o_colorA,__o_colorB,__o_colorC);
	return __this;
}

::hx::ObjectPtr< TriangleGradient_obj > TriangleGradient_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< Float >  __o_aX,::hx::Null< Float >  __o_aY,::hx::Null< Float >  __o_bX,::hx::Null< Float >  __o_bY,::hx::Null< Float >  __o_cX,::hx::Null< Float >  __o_cY,::hx::Null< int >  __o_colorA,::hx::Null< int >  __o_colorB,::hx::Null< int >  __o_colorC) {
	TriangleGradient_obj *__this = (TriangleGradient_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TriangleGradient_obj), true, "pixelimage.triangleGML.gradient.TriangleGradient"));
	*(void **)__this = TriangleGradient_obj::_hx_vtable;
	__this->__construct(__o_opacity,__o_visibility,__o_aX,__o_aY,__o_bX,__o_bY,__o_cX,__o_cY,__o_colorA,__o_colorB,__o_colorC);
	return __this;
}

TriangleGradient_obj::TriangleGradient_obj()
{
}

::hx::Val TriangleGradient_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"aX") ) { return ::hx::Val( aX ); }
		if (HX_FIELD_EQ(inName,"aY") ) { return ::hx::Val( aY ); }
		if (HX_FIELD_EQ(inName,"bX") ) { return ::hx::Val( bX ); }
		if (HX_FIELD_EQ(inName,"bY") ) { return ::hx::Val( bY ); }
		if (HX_FIELD_EQ(inName,"cX") ) { return ::hx::Val( cX ); }
		if (HX_FIELD_EQ(inName,"cY") ) { return ::hx::Val( cY ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { return ::hx::Val( render_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setParameter") ) { return ::hx::Val( setParameter_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val TriangleGradient_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"aX") ) { aX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"aY") ) { aY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bX") ) { bX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bY") ) { bY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cX") ) { cX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cY") ) { cY=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TriangleGradient_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("aX",d7,54,00,00));
	outFields->push(HX_("aY",d8,54,00,00));
	outFields->push(HX_("bX",b6,55,00,00));
	outFields->push(HX_("bY",b7,55,00,00));
	outFields->push(HX_("cX",95,56,00,00));
	outFields->push(HX_("cY",96,56,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TriangleGradient_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(TriangleGradient_obj,aX),HX_("aX",d7,54,00,00)},
	{::hx::fsFloat,(int)offsetof(TriangleGradient_obj,aY),HX_("aY",d8,54,00,00)},
	{::hx::fsFloat,(int)offsetof(TriangleGradient_obj,bX),HX_("bX",b6,55,00,00)},
	{::hx::fsFloat,(int)offsetof(TriangleGradient_obj,bY),HX_("bY",b7,55,00,00)},
	{::hx::fsFloat,(int)offsetof(TriangleGradient_obj,cX),HX_("cX",95,56,00,00)},
	{::hx::fsFloat,(int)offsetof(TriangleGradient_obj,cY),HX_("cY",96,56,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *TriangleGradient_obj_sStaticStorageInfo = 0;
#endif

static ::String TriangleGradient_obj_sMemberFields[] = {
	HX_("aX",d7,54,00,00),
	HX_("aY",d8,54,00,00),
	HX_("bX",b6,55,00,00),
	HX_("bY",b7,55,00,00),
	HX_("cX",95,56,00,00),
	HX_("cY",96,56,00,00),
	HX_("setParameter",a7,f5,ff,6c),
	HX_("render",56,6b,29,05),
	::String(null()) };

::hx::Class TriangleGradient_obj::__mClass;

void TriangleGradient_obj::__register()
{
	TriangleGradient_obj _hx_dummy;
	TriangleGradient_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pixelimage.triangleGML.gradient.TriangleGradient",4d,a0,e4,ba);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TriangleGradient_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TriangleGradient_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TriangleGradient_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TriangleGradient_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pixelimage
} // end namespace triangleGML
} // end namespace gradient
