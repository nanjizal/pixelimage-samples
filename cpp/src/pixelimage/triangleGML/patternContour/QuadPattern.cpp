// Generated by Haxe 4.3.0-rc.1+
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_ArrayBufferViewImpl
#include <haxe/io/ArrayBufferViewImpl.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_pixelimage_ImageStruct
#include <pixelimage/ImageStruct.h>
#endif
#ifndef INCLUDED_pixelimage__Endian_Endian_Fields_
#include <pixelimage/_Endian/Endian_Fields_.h>
#endif
#ifndef INCLUDED_pixelimage_algo_HitQuad
#include <pixelimage/algo/HitQuad.h>
#endif
#ifndef INCLUDED_pixelimage_algo_HitTri
#include <pixelimage/algo/HitTri.h>
#endif
#ifndef INCLUDED_pixelimage_algo_IhitObj
#include <pixelimage/algo/IhitObj.h>
#endif
#ifndef INCLUDED_pixelimage_iter_IntIterStart
#include <pixelimage/iter/IntIterStart.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_BasicShape
#include <pixelimage/triangleGML/coreShape/BasicShape.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_GroupShape
#include <pixelimage/triangleGML/coreShape/GroupShape.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_PatternStroke
#include <pixelimage/triangleGML/coreShape/PatternStroke.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_ShapeInterface
#include <pixelimage/triangleGML/coreShape/ShapeInterface.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_patternContour_QuadPattern
#include <pixelimage/triangleGML/patternContour/QuadPattern.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_69b5ca3d35171103_36_new,"pixelimage.triangleGML.patternContour.QuadPattern","new",0xd72b7420,"pixelimage.triangleGML.patternContour.QuadPattern.new","pixelimage/triangleGML/patternContour/QuadPattern.hx",36,0x04bea44f)
HX_LOCAL_STACK_FRAME(_hx_pos_69b5ca3d35171103_50_setParameter,"pixelimage.triangleGML.patternContour.QuadPattern","setParameter",0x2575d9e7,"pixelimage.triangleGML.patternContour.QuadPattern.setParameter","pixelimage/triangleGML/patternContour/QuadPattern.hx",50,0x04bea44f)
HX_LOCAL_STACK_FRAME(_hx_pos_69b5ca3d35171103_71_render,"pixelimage.triangleGML.patternContour.QuadPattern","render",0x0b629f96,"pixelimage.triangleGML.patternContour.QuadPattern.render","pixelimage/triangleGML/patternContour/QuadPattern.hx",71,0x04bea44f)
namespace pixelimage{
namespace triangleGML{
namespace patternContour{

void QuadPattern_obj::__construct(::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< int >  __o_strokeColor0,::hx::Null< int >  __o_strokeColor1,::Array< bool > strokePatternFill, ::Dynamic strokePatternWidth, ::Dynamic strokePatternHeight,::hx::Null< bool >  __o_strokePatternAcross,::hx::Null< int >  __o_strokePatternScale,::hx::Null< Float >  __o_aX,::hx::Null< Float >  __o_aY,::hx::Null< Float >  __o_bX,::hx::Null< Float >  __o_bY,::hx::Null< Float >  __o_cX,::hx::Null< Float >  __o_cY,::hx::Null< Float >  __o_dX,::hx::Null< Float >  __o_dY){
            		Float opacity = __o_opacity.Default(((Float)1.));
            		bool visibility = __o_visibility.Default(true);
            		int strokeColor0 = __o_strokeColor0.Default(0);
            		int strokeColor1 = __o_strokeColor1.Default(0);
            		bool strokePatternAcross = __o_strokePatternAcross.Default(true);
            		int strokePatternScale = __o_strokePatternScale.Default(1);
            		Float aX = __o_aX.Default(((Float)0.));
            		Float aY = __o_aY.Default(((Float)0.));
            		Float bX = __o_bX.Default(((Float)1.));
            		Float bY = __o_bY.Default(((Float)0.));
            		Float cX = __o_cX.Default(((Float)1.));
            		Float cY = __o_cY.Default(((Float)1.));
            		Float dX = __o_dX.Default(((Float)0.));
            		Float dY = __o_dY.Default(((Float)1.));
            	HX_STACKFRAME(&_hx_pos_69b5ca3d35171103_36_new)
HXLINE(  37)		super::__construct(opacity,visibility,0,0,null(),strokeColor0,strokeColor1,strokePatternFill,strokePatternWidth,strokePatternHeight,strokePatternAcross,strokePatternScale);
HXLINE(  40)		this->aX = aX;
HXLINE(  41)		this->aY = aY;
HXLINE(  42)		this->bX = bX;
HXLINE(  43)		this->bY = bY;
HXLINE(  44)		this->cX = cX;
HXLINE(  45)		this->cY = cY;
HXLINE(  46)		this->dX = dX;
HXLINE(  47)		this->dY = dY;
            	}

Dynamic QuadPattern_obj::__CreateEmpty() { return new QuadPattern_obj; }

void *QuadPattern_obj::_hx_vtable = 0;

Dynamic QuadPattern_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< QuadPattern_obj > _hx_result = new QuadPattern_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10],inArgs[11],inArgs[12],inArgs[13],inArgs[14],inArgs[15],inArgs[16]);
	return _hx_result;
}

bool QuadPattern_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x24e92cfb) {
		if (inClassId<=(int)0x2091632c) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2091632c;
		} else {
			return inClassId==(int)0x24e92cfb;
		}
	} else {
		return inClassId==(int)0x3be35e2f || inClassId==(int)0x5527df76;
	}
}

void QuadPattern_obj::setParameter(::String name,::String value){
            	HX_STACKFRAME(&_hx_pos_69b5ca3d35171103_50_setParameter)
HXDLIN(  50)		::String _hx_switch_0 = name;
            		if (  (_hx_switch_0==HX_("aX",d7,54,00,00)) ){
HXLINE(  52)			this->aX = ::Std_obj::parseFloat(value);
HXDLIN(  52)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("aY",d8,54,00,00)) ){
HXLINE(  54)			this->aY = ::Std_obj::parseFloat(value);
HXDLIN(  54)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("bX",b6,55,00,00)) ){
HXLINE(  56)			this->bX = ::Std_obj::parseFloat(value);
HXDLIN(  56)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("bY",b7,55,00,00)) ){
HXLINE(  58)			this->bY = ::Std_obj::parseFloat(value);
HXDLIN(  58)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("cX",95,56,00,00)) ){
HXLINE(  60)			this->cX = ::Std_obj::parseFloat(value);
HXDLIN(  60)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("cY",96,56,00,00)) ){
HXLINE(  62)			this->cY = ::Std_obj::parseFloat(value);
HXDLIN(  62)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("dX",74,57,00,00)) ){
HXLINE(  64)			this->dX = ::Std_obj::parseFloat(value);
HXDLIN(  64)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("dY",75,57,00,00)) ){
HXLINE(  66)			this->dY = ::Std_obj::parseFloat(value);
HXDLIN(  66)			goto _hx_goto_1;
            		}
            		/* default */{
HXLINE(  68)			this->super::setParameter(name,value);
            		}
            		_hx_goto_1:;
            	}


::pixelimage::ImageStruct QuadPattern_obj::render(::pixelimage::ImageStruct pixelShape){
            	HX_GC_STACKFRAME(&_hx_pos_69b5ca3d35171103_71_render)
HXLINE(  72)		this->buildPatternTemplates();
HXLINE(  73)		{
HXLINE(  73)			Float ax = (this->aX + this->offX);
HXDLIN(  73)			Float ay = (this->aY + this->offY);
HXDLIN(  73)			Float bx = (this->bX + this->offX);
HXDLIN(  73)			Float by = (this->bY + this->offY);
HXDLIN(  73)			Float cx = (this->cX + this->offX);
HXDLIN(  73)			Float cy = (this->cY + this->offY);
HXDLIN(  73)			Float dx = (this->dX + this->offX);
HXDLIN(  73)			Float dy = (this->dY + this->offY);
HXDLIN(  73)			::pixelimage::ImageStruct tileImage = this->tileImageStroke;
HXDLIN(  73)			bool hasHit = false;
HXDLIN(  73)			{
HXLINE(  73)				{
HXLINE(  73)					Float bx1 = bx;
HXDLIN(  73)					Float by1 = by;
HXDLIN(  73)					Float cx1 = dx;
HXDLIN(  73)					Float cy1 = dy;
HXDLIN(  73)					bool adjustWinding = (((((ax * by1) - (bx1 * ay)) + ((bx1 * cy1) - (cx1 * by1))) + ((cx1 * ay) - (ax * cy1))) > 0);
HXDLIN(  73)					if (!(adjustWinding)) {
HXLINE(  73)						Float bx_ = bx1;
HXDLIN(  73)						Float by_ = by1;
HXLINE( 188)						bx1 = cx1;
HXLINE( 189)						by1 = cy1;
HXLINE( 190)						cx1 = bx_;
HXLINE( 191)						cy1 = by_;
            					}
HXLINE(  73)					{
HXLINE(  73)						bool hasUndo = false;
HXDLIN(  73)						Float s0 = ((ay * cx1) - (ax * cy1));
HXDLIN(  73)						Float sx = (cy1 - ay);
HXDLIN(  73)						Float sy = (ax - cx1);
HXDLIN(  73)						Float t0 = ((ax * by1) - (ay * bx1));
HXDLIN(  73)						Float tx = (ay - by1);
HXDLIN(  73)						Float ty = (bx1 - ax);
HXDLIN(  73)						Float A = ((((-(by1) * cx1) + (ay * (-(bx1) + cx1))) + (ax * (by1 - cy1))) + (bx1 * cy1));
HXDLIN(  73)						::pixelimage::iter::IntIterStart xIter3;
HXDLIN(  73)						if ((ax > bx1)) {
HXLINE(  73)							if ((ax > cx1)) {
HXLINE(  73)								int min;
HXDLIN(  73)								if ((bx1 > cx1)) {
HXLINE(  73)									min = ::Math_obj::floor(cx1);
            								}
            								else {
HXLINE(  73)									min = ::Math_obj::floor(bx1);
            								}
HXDLIN(  73)								int ii_min = min;
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(ax);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								xIter3 = this1;
            							}
            							else {
HXLINE(  73)								int ii_min = ::Math_obj::floor(bx1);
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(cx1);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								xIter3 = this1;
            							}
            						}
            						else {
HXLINE(  73)							if ((bx1 > cx1)) {
HXLINE(  73)								int min;
HXDLIN(  73)								if ((ax > cx1)) {
HXLINE(  73)									min = ::Math_obj::floor(cx1);
            								}
            								else {
HXLINE(  73)									min = ::Math_obj::ceil(ax);
            								}
HXDLIN(  73)								int ii_min = min;
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(bx1);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								xIter3 = this1;
            							}
            							else {
HXLINE(  73)								int ii_min = ::Math_obj::floor(ax);
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(cx1);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								xIter3 = this1;
            							}
            						}
HXDLIN(  73)						::pixelimage::iter::IntIterStart yIter3;
HXDLIN(  73)						if ((ay > by1)) {
HXLINE(  73)							if ((ay > cy1)) {
HXLINE(  73)								int min;
HXDLIN(  73)								if ((by1 > cy1)) {
HXLINE(  73)									min = ::Math_obj::floor(cy1);
            								}
            								else {
HXLINE(  73)									min = ::Math_obj::floor(by1);
            								}
HXDLIN(  73)								int ii_min = min;
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(ay);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								yIter3 = this1;
            							}
            							else {
HXLINE(  73)								int ii_min = ::Math_obj::floor(by1);
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(cy1);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								yIter3 = this1;
            							}
            						}
            						else {
HXLINE(  73)							if ((by1 > cy1)) {
HXLINE(  73)								int min;
HXDLIN(  73)								if ((ay > cy1)) {
HXLINE(  73)									min = ::Math_obj::floor(cy1);
            								}
            								else {
HXLINE(  73)									min = ::Math_obj::ceil(ay);
            								}
HXDLIN(  73)								int ii_min = min;
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(by1);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								yIter3 = this1;
            							}
            							else {
HXLINE(  73)								int ii_min = ::Math_obj::floor(ay);
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(cy1);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								yIter3 = this1;
            							}
            						}
HXDLIN(  73)						::pixelimage::ImageStruct undoImage = null();
HXDLIN(  73)						if (hasUndo) {
HXLINE(  73)							int w = ((xIter3->max - xIter3->start) + 1);
HXDLIN(  73)							int h = ((yIter3->max - yIter3->start) + 1);
HXDLIN(  73)							int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN(  73)							::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  73)							::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN(  73)							::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN(  73)							undoImage = this3;
HXDLIN(  73)							{
HXLINE(  73)								int rectLeft = xIter3->start;
HXDLIN(  73)								int rectTop = yIter3->start;
HXDLIN(  73)								int rectRight = xIter3->max;
HXDLIN(  73)								bool forceClear = false;
HXDLIN(  73)								{
HXLINE(  73)									int _g = rectTop;
HXDLIN(  73)									int _g1 = yIter3->max;
HXDLIN(  73)									while((_g < _g1)){
HXLINE(  73)										_g = (_g + 1);
HXDLIN(  73)										int dy = (_g - 1);
HXDLIN(  73)										{
HXLINE(  73)											int _g1 = rectLeft;
HXDLIN(  73)											int _g2 = rectRight;
HXDLIN(  73)											while((_g1 < _g2)){
HXLINE(  73)												_g1 = (_g1 + 1);
HXDLIN(  73)												int dx = (_g1 - 1);
HXDLIN(  73)												::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  73)												int index;
HXDLIN(  73)												if (pixelShape->useVirtualPos) {
HXLINE(  73)													index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + dx) - pixelShape->virtualX));
            												}
            												else {
HXLINE(  73)													index = ::Std_obj::_hx_int(( (Float)(((dy * pixelShape->width) + dx)) ));
            												}
HXDLIN(  73)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)												int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  73)												int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  73)												int col;
HXDLIN(  73)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)													col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE(  73)													col = c;
            												}
HXDLIN(  73)												bool _hx_tmp;
HXDLIN(  73)												if (pixelShape->useMask) {
HXLINE(  73)													_hx_tmp = ::hx::IsNotNull( pixelShape->mask );
            												}
            												else {
HXLINE(  73)													_hx_tmp = false;
            												}
HXDLIN(  73)												if (_hx_tmp) {
HXLINE(  73)													::pixelimage::ImageStruct this1 = pixelShape->mask;
HXDLIN(  73)													::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  73)													int index;
HXDLIN(  73)													if (this1->useVirtualPos) {
HXLINE(  73)														index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            													}
            													else {
HXLINE(  73)														index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            													}
HXDLIN(  73)													::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  73)													int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  73)													int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  73)													int v;
HXDLIN(  73)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)														v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE(  73)														v = c;
            													}
HXDLIN(  73)													int this3 = v;
HXDLIN(  73)													int maskPixel = this3;
HXDLIN(  73)													int this4 = col;
HXDLIN(  73)													int this5 = this4;
HXDLIN(  73)													if ((maskPixel == 0)) {
HXLINE(  73)														int this1 = this5;
HXDLIN(  73)														col = this1;
            													}
            													else {
HXLINE(  73)														Float m0;
HXDLIN(  73)														int this1 = ((maskPixel >> 24) & 255);
HXDLIN(  73)														if ((this1 == 0)) {
HXLINE(  73)															m0 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float m1;
HXDLIN(  73)														int this2 = ((maskPixel >> 16) & 255);
HXDLIN(  73)														if ((this2 == 0)) {
HXLINE(  73)															m1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float m2;
HXDLIN(  73)														int this3 = ((maskPixel >> 8) & 255);
HXDLIN(  73)														if ((this3 == 0)) {
HXLINE(  73)															m2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float m3;
HXDLIN(  73)														int this4 = (maskPixel & 255);
HXDLIN(  73)														if ((this4 == 0)) {
HXLINE(  73)															m3 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN(  73)														int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN(  73)														int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN(  73)														int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN(  73)														col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            													}
            												}
HXDLIN(  73)												if ((col != 0)) {
HXLINE(  73)													int x = (dx - rectLeft);
HXDLIN(  73)													int y = (dy - rectTop);
HXDLIN(  73)													int this1 = col;
HXDLIN(  73)													int c = this1;
HXDLIN(  73)													bool _hx_tmp;
HXDLIN(  73)													if ((((c >> 24) & 255) < 254)) {
HXLINE(  73)														_hx_tmp = undoImage->transparent;
            													}
            													else {
HXLINE(  73)														_hx_tmp = false;
            													}
HXDLIN(  73)													if (_hx_tmp) {
HXLINE(  73)														int location;
HXDLIN(  73)														if (undoImage->useVirtualPos) {
HXLINE(  73)															location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            														}
            														else {
HXLINE(  73)															location = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            														}
HXDLIN(  73)														::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  73)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)														int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  73)														int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  73)														int this3 = this2;
HXDLIN(  73)														int this4;
HXDLIN(  73)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)															this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            														}
            														else {
HXLINE(  73)															this4 = this3;
            														}
HXDLIN(  73)														Float a1;
HXDLIN(  73)														int this5 = ((this4 >> 24) & 255);
HXDLIN(  73)														if ((this5 == 0)) {
HXLINE(  73)															a1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float r1;
HXDLIN(  73)														int this6 = ((this4 >> 16) & 255);
HXDLIN(  73)														if ((this6 == 0)) {
HXLINE(  73)															r1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float g1;
HXDLIN(  73)														int this7 = ((this4 >> 8) & 255);
HXDLIN(  73)														if ((this7 == 0)) {
HXLINE(  73)															g1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float b1;
HXDLIN(  73)														int this8 = (this4 & 255);
HXDLIN(  73)														if ((this8 == 0)) {
HXLINE(  73)															b1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float a2;
HXDLIN(  73)														int this9 = ((col >> 24) & 255);
HXDLIN(  73)														if ((this9 == 0)) {
HXLINE(  73)															a2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float r2;
HXDLIN(  73)														int this10 = ((col >> 16) & 255);
HXDLIN(  73)														if ((this10 == 0)) {
HXLINE(  73)															r2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float g2;
HXDLIN(  73)														int this11 = ((col >> 8) & 255);
HXDLIN(  73)														if ((this11 == 0)) {
HXLINE(  73)															g2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float b2;
HXDLIN(  73)														int this12 = (col & 255);
HXDLIN(  73)														if ((this12 == 0)) {
HXLINE(  73)															b2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  73)														int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  73)														int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  73)														int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  73)														int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  73)														int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  73)														{
HXLINE(  73)															::haxe::io::ArrayBufferViewImpl this13 = undoImage->image;
HXDLIN(  73)															int value;
HXDLIN(  73)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)																value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            															}
            															else {
HXLINE(  73)																value = blended;
            															}
HXDLIN(  73)															bool _hx_tmp;
HXDLIN(  73)															if ((location >= 0)) {
HXLINE(  73)																_hx_tmp = (location < (this13->byteLength >> 2));
            															}
            															else {
HXLINE(  73)																_hx_tmp = false;
            															}
HXDLIN(  73)															if (_hx_tmp) {
HXLINE(  73)																::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  73)																int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  73)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  73)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  73)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  73)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
            													else {
HXLINE(  73)														::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  73)														int index;
HXDLIN(  73)														if (undoImage->useVirtualPos) {
HXLINE(  73)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            														}
            														else {
HXLINE(  73)															index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            														}
HXDLIN(  73)														int value;
HXDLIN(  73)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)															value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            														}
            														else {
HXLINE(  73)															value = c;
            														}
HXDLIN(  73)														bool _hx_tmp;
HXDLIN(  73)														if ((index >= 0)) {
HXLINE(  73)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE(  73)															_hx_tmp = false;
            														}
HXDLIN(  73)														if (_hx_tmp) {
HXLINE(  73)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  73)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  73)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  73)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  73)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
            												else {
HXLINE(  73)													if (forceClear) {
HXLINE(  73)														::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  73)														int x = (dx - rectLeft);
HXDLIN(  73)														int y = (dy - rectTop);
HXDLIN(  73)														int index;
HXDLIN(  73)														if (undoImage->useVirtualPos) {
HXLINE(  73)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            														}
            														else {
HXLINE(  73)															index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            														}
HXDLIN(  73)														bool _hx_tmp;
HXDLIN(  73)														if ((index >= 0)) {
HXLINE(  73)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE(  73)															_hx_tmp = false;
            														}
HXDLIN(  73)														if (_hx_tmp) {
HXLINE(  73)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  73)															_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  73)															_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  73)															_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  73)															_this->b[(pos + 3)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  73)						bool foundY = false;
HXDLIN(  73)						Float s = ((Float)0.);
HXDLIN(  73)						Float t = ((Float)0.);
HXDLIN(  73)						Float sxx = ((Float)0.);
HXDLIN(  73)						Float txx = ((Float)0.);
HXDLIN(  73)						{
HXLINE(  73)							int _g_min = xIter3->start;
HXDLIN(  73)							int _g_max = xIter3->max;
HXDLIN(  73)							while((_g_min < _g_max)){
HXLINE(  73)								_g_min = (_g_min + 1);
HXDLIN(  73)								int x = (_g_min - 1);
HXLINE( 223)								sxx = (sx * ( (Float)(x) ));
HXLINE( 224)								txx = (tx * ( (Float)(x) ));
HXLINE( 225)								foundY = false;
HXLINE(  73)								{
HXLINE(  73)									int _g_min1 = yIter3->start;
HXDLIN(  73)									int _g_max = yIter3->max;
HXDLIN(  73)									while((_g_min1 < _g_max)){
HXLINE(  73)										_g_min1 = (_g_min1 + 1);
HXDLIN(  73)										int y = (_g_min1 - 1);
HXLINE( 227)										s = ((s0 + sxx) + (sy * ( (Float)(y) )));
HXLINE( 228)										t = ((t0 + txx) + (ty * ( (Float)(y) )));
HXLINE(  73)										bool _hx_tmp;
HXDLIN(  73)										if (!((s <= 0))) {
HXLINE(  73)											_hx_tmp = (t <= 0);
            										}
            										else {
HXLINE(  73)											_hx_tmp = true;
            										}
HXDLIN(  73)										if (_hx_tmp) {
HXLINE(  73)											if (foundY) {
HXLINE(  73)												goto _hx_goto_6;
            											}
            										}
            										else {
HXLINE(  73)											if (((s + t) < A)) {
HXLINE(  73)												int x1 = ::hx::Mod(x,tileImage->width);
HXDLIN(  73)												int y1 = ::hx::Mod(y,tileImage->height);
HXDLIN(  73)												::haxe::io::ArrayBufferViewImpl this1 = tileImage->image;
HXDLIN(  73)												int index;
HXDLIN(  73)												if (tileImage->useVirtualPos) {
HXLINE(  73)													index = ::Std_obj::_hx_int(((((( (Float)(y1) ) - tileImage->virtualY) * ( (Float)(tileImage->width) )) + x1) - tileImage->virtualX));
            												}
            												else {
HXLINE(  73)													index = ::Std_obj::_hx_int(( (Float)(((y1 * tileImage->width) + x1)) ));
            												}
HXDLIN(  73)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)												int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  73)												int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  73)												int color;
HXDLIN(  73)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)													color = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE(  73)													color = c;
            												}
HXDLIN(  73)												{
HXLINE(  73)													int this2 = color;
HXDLIN(  73)													int c1 = this2;
HXDLIN(  73)													bool _hx_tmp;
HXDLIN(  73)													if ((((c1 >> 24) & 255) < 254)) {
HXLINE(  73)														_hx_tmp = pixelShape->transparent;
            													}
            													else {
HXLINE(  73)														_hx_tmp = false;
            													}
HXDLIN(  73)													if (_hx_tmp) {
HXLINE(  73)														int location;
HXDLIN(  73)														if (pixelShape->useVirtualPos) {
HXLINE(  73)															location = ::Std_obj::_hx_int(((((( (Float)(y) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x) - pixelShape->virtualX));
            														}
            														else {
HXLINE(  73)															location = ::Std_obj::_hx_int(( (Float)(((y * pixelShape->width) + x)) ));
            														}
HXDLIN(  73)														::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  73)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)														int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  73)														int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  73)														int this3 = this2;
HXDLIN(  73)														int this4;
HXDLIN(  73)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)															this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            														}
            														else {
HXLINE(  73)															this4 = this3;
            														}
HXDLIN(  73)														Float a1;
HXDLIN(  73)														int this5 = ((this4 >> 24) & 255);
HXDLIN(  73)														if ((this5 == 0)) {
HXLINE(  73)															a1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float r1;
HXDLIN(  73)														int this6 = ((this4 >> 16) & 255);
HXDLIN(  73)														if ((this6 == 0)) {
HXLINE(  73)															r1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float g1;
HXDLIN(  73)														int this7 = ((this4 >> 8) & 255);
HXDLIN(  73)														if ((this7 == 0)) {
HXLINE(  73)															g1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float b1;
HXDLIN(  73)														int this8 = (this4 & 255);
HXDLIN(  73)														if ((this8 == 0)) {
HXLINE(  73)															b1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float a2;
HXDLIN(  73)														int this9 = ((color >> 24) & 255);
HXDLIN(  73)														if ((this9 == 0)) {
HXLINE(  73)															a2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float r2;
HXDLIN(  73)														int this10 = ((color >> 16) & 255);
HXDLIN(  73)														if ((this10 == 0)) {
HXLINE(  73)															r2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float g2;
HXDLIN(  73)														int this11 = ((color >> 8) & 255);
HXDLIN(  73)														if ((this11 == 0)) {
HXLINE(  73)															g2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float b2;
HXDLIN(  73)														int this12 = (color & 255);
HXDLIN(  73)														if ((this12 == 0)) {
HXLINE(  73)															b2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  73)														int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  73)														int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  73)														int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  73)														int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  73)														int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  73)														{
HXLINE(  73)															::haxe::io::ArrayBufferViewImpl this13 = pixelShape->image;
HXDLIN(  73)															int value;
HXDLIN(  73)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)																value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            															}
            															else {
HXLINE(  73)																value = blended;
            															}
HXDLIN(  73)															bool _hx_tmp;
HXDLIN(  73)															if ((location >= 0)) {
HXLINE(  73)																_hx_tmp = (location < (this13->byteLength >> 2));
            															}
            															else {
HXLINE(  73)																_hx_tmp = false;
            															}
HXDLIN(  73)															if (_hx_tmp) {
HXLINE(  73)																::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  73)																int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  73)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  73)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  73)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  73)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
            													else {
HXLINE(  73)														::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  73)														int index;
HXDLIN(  73)														if (pixelShape->useVirtualPos) {
HXLINE(  73)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x) - pixelShape->virtualX));
            														}
            														else {
HXLINE(  73)															index = ::Std_obj::_hx_int(( (Float)(((y * pixelShape->width) + x)) ));
            														}
HXDLIN(  73)														int value;
HXDLIN(  73)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)															value = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            														}
            														else {
HXLINE(  73)															value = c1;
            														}
HXDLIN(  73)														bool _hx_tmp;
HXDLIN(  73)														if ((index >= 0)) {
HXLINE(  73)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE(  73)															_hx_tmp = false;
            														}
HXDLIN(  73)														if (_hx_tmp) {
HXLINE(  73)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  73)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  73)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  73)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  73)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
HXLINE( 237)												foundY = true;
            											}
            											else {
HXLINE(  73)												if (foundY) {
HXLINE(  73)													goto _hx_goto_6;
            												}
            											}
            										}
            									}
            									_hx_goto_6:;
            								}
            							}
            						}
HXDLIN(  73)						if ((hasHit == false)) {
HXLINE(  73)							::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,ax,ay,bx1,by1,cx1,cy1,true);
HXDLIN(  73)							if (hasUndo) {
HXLINE(  73)								v->undoImage = undoImage;
HXDLIN(  73)								v->undoX = xIter3->start;
HXDLIN(  73)								v->undoY = yIter3->start;
            							}
            						}
            					}
            				}
HXDLIN(  73)				{
HXLINE(  73)					Float bx2 = cx;
HXDLIN(  73)					Float by2 = cy;
HXDLIN(  73)					Float cx2 = dx;
HXDLIN(  73)					Float cy2 = dy;
HXDLIN(  73)					bool adjustWinding1 = (((((bx * by2) - (bx2 * by)) + ((bx2 * cy2) - (cx2 * by2))) + ((cx2 * by) - (bx * cy2))) > 0);
HXDLIN(  73)					if (!(adjustWinding1)) {
HXLINE(  73)						Float bx_ = bx2;
HXDLIN(  73)						Float by_ = by2;
HXLINE( 188)						bx2 = cx2;
HXLINE( 189)						by2 = cy2;
HXLINE( 190)						cx2 = bx_;
HXLINE( 191)						cy2 = by_;
            					}
HXLINE(  73)					{
HXLINE(  73)						bool hasUndo1 = false;
HXDLIN(  73)						Float s01 = ((by * cx2) - (bx * cy2));
HXDLIN(  73)						Float sx1 = (cy2 - by);
HXDLIN(  73)						Float sy1 = (bx - cx2);
HXDLIN(  73)						Float t01 = ((bx * by2) - (by * bx2));
HXDLIN(  73)						Float tx1 = (by - by2);
HXDLIN(  73)						Float ty1 = (bx2 - bx);
HXDLIN(  73)						Float A1 = ((((-(by2) * cx2) + (by * (-(bx2) + cx2))) + (bx * (by2 - cy2))) + (bx2 * cy2));
HXDLIN(  73)						::pixelimage::iter::IntIterStart xIter31;
HXDLIN(  73)						if ((bx > bx2)) {
HXLINE(  73)							if ((bx > cx2)) {
HXLINE(  73)								int min;
HXDLIN(  73)								if ((bx2 > cx2)) {
HXLINE(  73)									min = ::Math_obj::floor(cx2);
            								}
            								else {
HXLINE(  73)									min = ::Math_obj::floor(bx2);
            								}
HXDLIN(  73)								int ii_min = min;
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(bx);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								xIter31 = this1;
            							}
            							else {
HXLINE(  73)								int ii_min = ::Math_obj::floor(bx2);
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(cx2);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								xIter31 = this1;
            							}
            						}
            						else {
HXLINE(  73)							if ((bx2 > cx2)) {
HXLINE(  73)								int min;
HXDLIN(  73)								if ((bx > cx2)) {
HXLINE(  73)									min = ::Math_obj::floor(cx2);
            								}
            								else {
HXLINE(  73)									min = ::Math_obj::ceil(bx);
            								}
HXDLIN(  73)								int ii_min = min;
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(bx2);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								xIter31 = this1;
            							}
            							else {
HXLINE(  73)								int ii_min = ::Math_obj::floor(bx);
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(cx2);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								xIter31 = this1;
            							}
            						}
HXDLIN(  73)						::pixelimage::iter::IntIterStart yIter31;
HXDLIN(  73)						if ((by > by2)) {
HXLINE(  73)							if ((by > cy2)) {
HXLINE(  73)								int min;
HXDLIN(  73)								if ((by2 > cy2)) {
HXLINE(  73)									min = ::Math_obj::floor(cy2);
            								}
            								else {
HXLINE(  73)									min = ::Math_obj::floor(by2);
            								}
HXDLIN(  73)								int ii_min = min;
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(by);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								yIter31 = this1;
            							}
            							else {
HXLINE(  73)								int ii_min = ::Math_obj::floor(by2);
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(cy2);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								yIter31 = this1;
            							}
            						}
            						else {
HXLINE(  73)							if ((by2 > cy2)) {
HXLINE(  73)								int min;
HXDLIN(  73)								if ((by > cy2)) {
HXLINE(  73)									min = ::Math_obj::floor(cy2);
            								}
            								else {
HXLINE(  73)									min = ::Math_obj::ceil(by);
            								}
HXDLIN(  73)								int ii_min = min;
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(by2);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								yIter31 = this1;
            							}
            							else {
HXLINE(  73)								int ii_min = ::Math_obj::floor(by);
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(cy2);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								yIter31 = this1;
            							}
            						}
HXDLIN(  73)						::pixelimage::ImageStruct undoImage1 = null();
HXDLIN(  73)						if (hasUndo1) {
HXLINE(  73)							int w = ((xIter31->max - xIter31->start) + 1);
HXDLIN(  73)							int h = ((yIter31->max - yIter31->start) + 1);
HXDLIN(  73)							int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN(  73)							::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  73)							::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN(  73)							::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN(  73)							undoImage1 = this3;
HXDLIN(  73)							{
HXLINE(  73)								int rectLeft = xIter31->start;
HXDLIN(  73)								int rectTop = yIter31->start;
HXDLIN(  73)								int rectRight = xIter31->max;
HXDLIN(  73)								bool forceClear = false;
HXDLIN(  73)								{
HXLINE(  73)									int _g = rectTop;
HXDLIN(  73)									int _g1 = yIter31->max;
HXDLIN(  73)									while((_g < _g1)){
HXLINE(  73)										_g = (_g + 1);
HXDLIN(  73)										int dy = (_g - 1);
HXDLIN(  73)										{
HXLINE(  73)											int _g1 = rectLeft;
HXDLIN(  73)											int _g2 = rectRight;
HXDLIN(  73)											while((_g1 < _g2)){
HXLINE(  73)												_g1 = (_g1 + 1);
HXDLIN(  73)												int dx = (_g1 - 1);
HXDLIN(  73)												::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  73)												int index;
HXDLIN(  73)												if (pixelShape->useVirtualPos) {
HXLINE(  73)													index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + dx) - pixelShape->virtualX));
            												}
            												else {
HXLINE(  73)													index = ::Std_obj::_hx_int(( (Float)(((dy * pixelShape->width) + dx)) ));
            												}
HXDLIN(  73)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)												int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  73)												int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  73)												int col;
HXDLIN(  73)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)													col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE(  73)													col = c;
            												}
HXDLIN(  73)												bool _hx_tmp;
HXDLIN(  73)												if (pixelShape->useMask) {
HXLINE(  73)													_hx_tmp = ::hx::IsNotNull( pixelShape->mask );
            												}
            												else {
HXLINE(  73)													_hx_tmp = false;
            												}
HXDLIN(  73)												if (_hx_tmp) {
HXLINE(  73)													::pixelimage::ImageStruct this1 = pixelShape->mask;
HXDLIN(  73)													::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  73)													int index;
HXDLIN(  73)													if (this1->useVirtualPos) {
HXLINE(  73)														index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            													}
            													else {
HXLINE(  73)														index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            													}
HXDLIN(  73)													::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  73)													int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  73)													int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  73)													int v;
HXDLIN(  73)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)														v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE(  73)														v = c;
            													}
HXDLIN(  73)													int this3 = v;
HXDLIN(  73)													int maskPixel = this3;
HXDLIN(  73)													int this4 = col;
HXDLIN(  73)													int this5 = this4;
HXDLIN(  73)													if ((maskPixel == 0)) {
HXLINE(  73)														int this1 = this5;
HXDLIN(  73)														col = this1;
            													}
            													else {
HXLINE(  73)														Float m0;
HXDLIN(  73)														int this1 = ((maskPixel >> 24) & 255);
HXDLIN(  73)														if ((this1 == 0)) {
HXLINE(  73)															m0 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float m1;
HXDLIN(  73)														int this2 = ((maskPixel >> 16) & 255);
HXDLIN(  73)														if ((this2 == 0)) {
HXLINE(  73)															m1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float m2;
HXDLIN(  73)														int this3 = ((maskPixel >> 8) & 255);
HXDLIN(  73)														if ((this3 == 0)) {
HXLINE(  73)															m2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float m3;
HXDLIN(  73)														int this4 = (maskPixel & 255);
HXDLIN(  73)														if ((this4 == 0)) {
HXLINE(  73)															m3 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN(  73)														int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN(  73)														int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN(  73)														int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN(  73)														col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            													}
            												}
HXDLIN(  73)												if ((col != 0)) {
HXLINE(  73)													int x = (dx - rectLeft);
HXDLIN(  73)													int y = (dy - rectTop);
HXDLIN(  73)													int this1 = col;
HXDLIN(  73)													int c = this1;
HXDLIN(  73)													bool _hx_tmp;
HXDLIN(  73)													if ((((c >> 24) & 255) < 254)) {
HXLINE(  73)														_hx_tmp = undoImage1->transparent;
            													}
            													else {
HXLINE(  73)														_hx_tmp = false;
            													}
HXDLIN(  73)													if (_hx_tmp) {
HXLINE(  73)														int location;
HXDLIN(  73)														if (undoImage1->useVirtualPos) {
HXLINE(  73)															location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            														}
            														else {
HXLINE(  73)															location = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            														}
HXDLIN(  73)														::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN(  73)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)														int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  73)														int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  73)														int this3 = this2;
HXDLIN(  73)														int this4;
HXDLIN(  73)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)															this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            														}
            														else {
HXLINE(  73)															this4 = this3;
            														}
HXDLIN(  73)														Float a1;
HXDLIN(  73)														int this5 = ((this4 >> 24) & 255);
HXDLIN(  73)														if ((this5 == 0)) {
HXLINE(  73)															a1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float r1;
HXDLIN(  73)														int this6 = ((this4 >> 16) & 255);
HXDLIN(  73)														if ((this6 == 0)) {
HXLINE(  73)															r1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float g1;
HXDLIN(  73)														int this7 = ((this4 >> 8) & 255);
HXDLIN(  73)														if ((this7 == 0)) {
HXLINE(  73)															g1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float b1;
HXDLIN(  73)														int this8 = (this4 & 255);
HXDLIN(  73)														if ((this8 == 0)) {
HXLINE(  73)															b1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float a2;
HXDLIN(  73)														int this9 = ((col >> 24) & 255);
HXDLIN(  73)														if ((this9 == 0)) {
HXLINE(  73)															a2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float r2;
HXDLIN(  73)														int this10 = ((col >> 16) & 255);
HXDLIN(  73)														if ((this10 == 0)) {
HXLINE(  73)															r2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float g2;
HXDLIN(  73)														int this11 = ((col >> 8) & 255);
HXDLIN(  73)														if ((this11 == 0)) {
HXLINE(  73)															g2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float b2;
HXDLIN(  73)														int this12 = (col & 255);
HXDLIN(  73)														if ((this12 == 0)) {
HXLINE(  73)															b2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  73)														int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  73)														int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  73)														int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  73)														int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  73)														int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  73)														{
HXLINE(  73)															::haxe::io::ArrayBufferViewImpl this13 = undoImage1->image;
HXDLIN(  73)															int value;
HXDLIN(  73)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)																value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            															}
            															else {
HXLINE(  73)																value = blended;
            															}
HXDLIN(  73)															bool _hx_tmp;
HXDLIN(  73)															if ((location >= 0)) {
HXLINE(  73)																_hx_tmp = (location < (this13->byteLength >> 2));
            															}
            															else {
HXLINE(  73)																_hx_tmp = false;
            															}
HXDLIN(  73)															if (_hx_tmp) {
HXLINE(  73)																::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  73)																int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  73)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  73)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  73)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  73)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
            													else {
HXLINE(  73)														::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN(  73)														int index;
HXDLIN(  73)														if (undoImage1->useVirtualPos) {
HXLINE(  73)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            														}
            														else {
HXLINE(  73)															index = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            														}
HXDLIN(  73)														int value;
HXDLIN(  73)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)															value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            														}
            														else {
HXLINE(  73)															value = c;
            														}
HXDLIN(  73)														bool _hx_tmp;
HXDLIN(  73)														if ((index >= 0)) {
HXLINE(  73)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE(  73)															_hx_tmp = false;
            														}
HXDLIN(  73)														if (_hx_tmp) {
HXLINE(  73)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  73)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  73)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  73)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  73)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
            												else {
HXLINE(  73)													if (forceClear) {
HXLINE(  73)														::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN(  73)														int x = (dx - rectLeft);
HXDLIN(  73)														int y = (dy - rectTop);
HXDLIN(  73)														int index;
HXDLIN(  73)														if (undoImage1->useVirtualPos) {
HXLINE(  73)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            														}
            														else {
HXLINE(  73)															index = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            														}
HXDLIN(  73)														bool _hx_tmp;
HXDLIN(  73)														if ((index >= 0)) {
HXLINE(  73)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE(  73)															_hx_tmp = false;
            														}
HXDLIN(  73)														if (_hx_tmp) {
HXLINE(  73)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  73)															_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  73)															_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  73)															_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  73)															_this->b[(pos + 3)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  73)						bool foundY1 = false;
HXDLIN(  73)						Float s1 = ((Float)0.);
HXDLIN(  73)						Float t1 = ((Float)0.);
HXDLIN(  73)						Float sxx1 = ((Float)0.);
HXDLIN(  73)						Float txx1 = ((Float)0.);
HXDLIN(  73)						{
HXLINE(  73)							int _g_min1 = xIter31->start;
HXDLIN(  73)							int _g_max1 = xIter31->max;
HXDLIN(  73)							while((_g_min1 < _g_max1)){
HXLINE(  73)								_g_min1 = (_g_min1 + 1);
HXDLIN(  73)								int x = (_g_min1 - 1);
HXLINE( 223)								sxx1 = (sx1 * ( (Float)(x) ));
HXLINE( 224)								txx1 = (tx1 * ( (Float)(x) ));
HXLINE( 225)								foundY1 = false;
HXLINE(  73)								{
HXLINE(  73)									int _g_min = yIter31->start;
HXDLIN(  73)									int _g_max = yIter31->max;
HXDLIN(  73)									while((_g_min < _g_max)){
HXLINE(  73)										_g_min = (_g_min + 1);
HXDLIN(  73)										int y = (_g_min - 1);
HXLINE( 227)										s1 = ((s01 + sxx1) + (sy1 * ( (Float)(y) )));
HXLINE( 228)										t1 = ((t01 + txx1) + (ty1 * ( (Float)(y) )));
HXLINE(  73)										bool _hx_tmp;
HXDLIN(  73)										if (!((s1 <= 0))) {
HXLINE(  73)											_hx_tmp = (t1 <= 0);
            										}
            										else {
HXLINE(  73)											_hx_tmp = true;
            										}
HXDLIN(  73)										if (_hx_tmp) {
HXLINE(  73)											if (foundY1) {
HXLINE(  73)												goto _hx_goto_10;
            											}
            										}
            										else {
HXLINE(  73)											if (((s1 + t1) < A1)) {
HXLINE(  73)												int x1 = ::hx::Mod(x,tileImage->width);
HXDLIN(  73)												int y1 = ::hx::Mod(y,tileImage->height);
HXDLIN(  73)												::haxe::io::ArrayBufferViewImpl this1 = tileImage->image;
HXDLIN(  73)												int index;
HXDLIN(  73)												if (tileImage->useVirtualPos) {
HXLINE(  73)													index = ::Std_obj::_hx_int(((((( (Float)(y1) ) - tileImage->virtualY) * ( (Float)(tileImage->width) )) + x1) - tileImage->virtualX));
            												}
            												else {
HXLINE(  73)													index = ::Std_obj::_hx_int(( (Float)(((y1 * tileImage->width) + x1)) ));
            												}
HXDLIN(  73)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)												int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  73)												int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  73)												int color;
HXDLIN(  73)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)													color = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE(  73)													color = c;
            												}
HXDLIN(  73)												{
HXLINE(  73)													int this2 = color;
HXDLIN(  73)													int c1 = this2;
HXDLIN(  73)													bool _hx_tmp;
HXDLIN(  73)													if ((((c1 >> 24) & 255) < 254)) {
HXLINE(  73)														_hx_tmp = pixelShape->transparent;
            													}
            													else {
HXLINE(  73)														_hx_tmp = false;
            													}
HXDLIN(  73)													if (_hx_tmp) {
HXLINE(  73)														int location;
HXDLIN(  73)														if (pixelShape->useVirtualPos) {
HXLINE(  73)															location = ::Std_obj::_hx_int(((((( (Float)(y) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x) - pixelShape->virtualX));
            														}
            														else {
HXLINE(  73)															location = ::Std_obj::_hx_int(( (Float)(((y * pixelShape->width) + x)) ));
            														}
HXDLIN(  73)														::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  73)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)														int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  73)														int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  73)														int this3 = this2;
HXDLIN(  73)														int this4;
HXDLIN(  73)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)															this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            														}
            														else {
HXLINE(  73)															this4 = this3;
            														}
HXDLIN(  73)														Float a1;
HXDLIN(  73)														int this5 = ((this4 >> 24) & 255);
HXDLIN(  73)														if ((this5 == 0)) {
HXLINE(  73)															a1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float r1;
HXDLIN(  73)														int this6 = ((this4 >> 16) & 255);
HXDLIN(  73)														if ((this6 == 0)) {
HXLINE(  73)															r1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float g1;
HXDLIN(  73)														int this7 = ((this4 >> 8) & 255);
HXDLIN(  73)														if ((this7 == 0)) {
HXLINE(  73)															g1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float b1;
HXDLIN(  73)														int this8 = (this4 & 255);
HXDLIN(  73)														if ((this8 == 0)) {
HXLINE(  73)															b1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float a2;
HXDLIN(  73)														int this9 = ((color >> 24) & 255);
HXDLIN(  73)														if ((this9 == 0)) {
HXLINE(  73)															a2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float r2;
HXDLIN(  73)														int this10 = ((color >> 16) & 255);
HXDLIN(  73)														if ((this10 == 0)) {
HXLINE(  73)															r2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float g2;
HXDLIN(  73)														int this11 = ((color >> 8) & 255);
HXDLIN(  73)														if ((this11 == 0)) {
HXLINE(  73)															g2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float b2;
HXDLIN(  73)														int this12 = (color & 255);
HXDLIN(  73)														if ((this12 == 0)) {
HXLINE(  73)															b2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  73)														int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  73)														int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  73)														int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  73)														int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  73)														int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  73)														{
HXLINE(  73)															::haxe::io::ArrayBufferViewImpl this13 = pixelShape->image;
HXDLIN(  73)															int value;
HXDLIN(  73)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)																value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            															}
            															else {
HXLINE(  73)																value = blended;
            															}
HXDLIN(  73)															bool _hx_tmp;
HXDLIN(  73)															if ((location >= 0)) {
HXLINE(  73)																_hx_tmp = (location < (this13->byteLength >> 2));
            															}
            															else {
HXLINE(  73)																_hx_tmp = false;
            															}
HXDLIN(  73)															if (_hx_tmp) {
HXLINE(  73)																::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  73)																int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  73)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  73)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  73)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  73)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
            													else {
HXLINE(  73)														::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  73)														int index;
HXDLIN(  73)														if (pixelShape->useVirtualPos) {
HXLINE(  73)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x) - pixelShape->virtualX));
            														}
            														else {
HXLINE(  73)															index = ::Std_obj::_hx_int(( (Float)(((y * pixelShape->width) + x)) ));
            														}
HXDLIN(  73)														int value;
HXDLIN(  73)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)															value = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            														}
            														else {
HXLINE(  73)															value = c1;
            														}
HXDLIN(  73)														bool _hx_tmp;
HXDLIN(  73)														if ((index >= 0)) {
HXLINE(  73)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE(  73)															_hx_tmp = false;
            														}
HXDLIN(  73)														if (_hx_tmp) {
HXLINE(  73)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  73)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  73)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  73)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  73)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
HXLINE( 237)												foundY1 = true;
            											}
            											else {
HXLINE(  73)												if (foundY1) {
HXLINE(  73)													goto _hx_goto_10;
            												}
            											}
            										}
            									}
            									_hx_goto_10:;
            								}
            							}
            						}
HXDLIN(  73)						if ((hasHit == false)) {
HXLINE(  73)							::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,bx,by,bx2,by2,cx2,cy2,true);
HXDLIN(  73)							if (hasUndo1) {
HXLINE(  73)								v->undoImage = undoImage1;
HXDLIN(  73)								v->undoX = xIter31->start;
HXDLIN(  73)								v->undoY = yIter31->start;
            							}
            						}
            					}
            				}
HXDLIN(  73)				if ((hasHit == true)) {
HXLINE(  73)					::pixelimage::algo::HitQuad v = ::pixelimage::algo::HitQuad_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,dx,dy,true);
            				}
            			}
            		}
HXLINE(  74)		return this->super::render(pixelShape);
            	}



::hx::ObjectPtr< QuadPattern_obj > QuadPattern_obj::__new(::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< int >  __o_strokeColor0,::hx::Null< int >  __o_strokeColor1,::Array< bool > strokePatternFill, ::Dynamic strokePatternWidth, ::Dynamic strokePatternHeight,::hx::Null< bool >  __o_strokePatternAcross,::hx::Null< int >  __o_strokePatternScale,::hx::Null< Float >  __o_aX,::hx::Null< Float >  __o_aY,::hx::Null< Float >  __o_bX,::hx::Null< Float >  __o_bY,::hx::Null< Float >  __o_cX,::hx::Null< Float >  __o_cY,::hx::Null< Float >  __o_dX,::hx::Null< Float >  __o_dY) {
	::hx::ObjectPtr< QuadPattern_obj > __this = new QuadPattern_obj();
	__this->__construct(__o_opacity,__o_visibility,__o_strokeColor0,__o_strokeColor1,strokePatternFill,strokePatternWidth,strokePatternHeight,__o_strokePatternAcross,__o_strokePatternScale,__o_aX,__o_aY,__o_bX,__o_bY,__o_cX,__o_cY,__o_dX,__o_dY);
	return __this;
}

::hx::ObjectPtr< QuadPattern_obj > QuadPattern_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< int >  __o_strokeColor0,::hx::Null< int >  __o_strokeColor1,::Array< bool > strokePatternFill, ::Dynamic strokePatternWidth, ::Dynamic strokePatternHeight,::hx::Null< bool >  __o_strokePatternAcross,::hx::Null< int >  __o_strokePatternScale,::hx::Null< Float >  __o_aX,::hx::Null< Float >  __o_aY,::hx::Null< Float >  __o_bX,::hx::Null< Float >  __o_bY,::hx::Null< Float >  __o_cX,::hx::Null< Float >  __o_cY,::hx::Null< Float >  __o_dX,::hx::Null< Float >  __o_dY) {
	QuadPattern_obj *__this = (QuadPattern_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(QuadPattern_obj), true, "pixelimage.triangleGML.patternContour.QuadPattern"));
	*(void **)__this = QuadPattern_obj::_hx_vtable;
	__this->__construct(__o_opacity,__o_visibility,__o_strokeColor0,__o_strokeColor1,strokePatternFill,strokePatternWidth,strokePatternHeight,__o_strokePatternAcross,__o_strokePatternScale,__o_aX,__o_aY,__o_bX,__o_bY,__o_cX,__o_cY,__o_dX,__o_dY);
	return __this;
}

QuadPattern_obj::QuadPattern_obj()
{
}

::hx::Val QuadPattern_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"aX") ) { return ::hx::Val( aX ); }
		if (HX_FIELD_EQ(inName,"aY") ) { return ::hx::Val( aY ); }
		if (HX_FIELD_EQ(inName,"bX") ) { return ::hx::Val( bX ); }
		if (HX_FIELD_EQ(inName,"bY") ) { return ::hx::Val( bY ); }
		if (HX_FIELD_EQ(inName,"cX") ) { return ::hx::Val( cX ); }
		if (HX_FIELD_EQ(inName,"cY") ) { return ::hx::Val( cY ); }
		if (HX_FIELD_EQ(inName,"dX") ) { return ::hx::Val( dX ); }
		if (HX_FIELD_EQ(inName,"dY") ) { return ::hx::Val( dY ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { return ::hx::Val( render_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setParameter") ) { return ::hx::Val( setParameter_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val QuadPattern_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"aX") ) { aX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"aY") ) { aY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bX") ) { bX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bY") ) { bY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cX") ) { cX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cY") ) { cY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dX") ) { dX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"dY") ) { dY=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void QuadPattern_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("aX",d7,54,00,00));
	outFields->push(HX_("aY",d8,54,00,00));
	outFields->push(HX_("bX",b6,55,00,00));
	outFields->push(HX_("bY",b7,55,00,00));
	outFields->push(HX_("cX",95,56,00,00));
	outFields->push(HX_("cY",96,56,00,00));
	outFields->push(HX_("dX",74,57,00,00));
	outFields->push(HX_("dY",75,57,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo QuadPattern_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(QuadPattern_obj,aX),HX_("aX",d7,54,00,00)},
	{::hx::fsFloat,(int)offsetof(QuadPattern_obj,aY),HX_("aY",d8,54,00,00)},
	{::hx::fsFloat,(int)offsetof(QuadPattern_obj,bX),HX_("bX",b6,55,00,00)},
	{::hx::fsFloat,(int)offsetof(QuadPattern_obj,bY),HX_("bY",b7,55,00,00)},
	{::hx::fsFloat,(int)offsetof(QuadPattern_obj,cX),HX_("cX",95,56,00,00)},
	{::hx::fsFloat,(int)offsetof(QuadPattern_obj,cY),HX_("cY",96,56,00,00)},
	{::hx::fsFloat,(int)offsetof(QuadPattern_obj,dX),HX_("dX",74,57,00,00)},
	{::hx::fsFloat,(int)offsetof(QuadPattern_obj,dY),HX_("dY",75,57,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *QuadPattern_obj_sStaticStorageInfo = 0;
#endif

static ::String QuadPattern_obj_sMemberFields[] = {
	HX_("aX",d7,54,00,00),
	HX_("aY",d8,54,00,00),
	HX_("bX",b6,55,00,00),
	HX_("bY",b7,55,00,00),
	HX_("cX",95,56,00,00),
	HX_("cY",96,56,00,00),
	HX_("dX",74,57,00,00),
	HX_("dY",75,57,00,00),
	HX_("setParameter",a7,f5,ff,6c),
	HX_("render",56,6b,29,05),
	::String(null()) };

::hx::Class QuadPattern_obj::__mClass;

void QuadPattern_obj::__register()
{
	QuadPattern_obj _hx_dummy;
	QuadPattern_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pixelimage.triangleGML.patternContour.QuadPattern",2e,24,9f,13);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(QuadPattern_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< QuadPattern_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = QuadPattern_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = QuadPattern_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pixelimage
} // end namespace triangleGML
} // end namespace patternContour
