// Generated by Haxe 4.3.0-rc.1+
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_ArrayBufferViewImpl
#include <haxe/io/ArrayBufferViewImpl.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_pixelimage_ImageStruct
#include <pixelimage/ImageStruct.h>
#endif
#ifndef INCLUDED_pixelimage__Endian_Endian_Fields_
#include <pixelimage/_Endian/Endian_Fields_.h>
#endif
#ifndef INCLUDED_pixelimage_algo_HitTri
#include <pixelimage/algo/HitTri.h>
#endif
#ifndef INCLUDED_pixelimage_algo_IhitObj
#include <pixelimage/algo/IhitObj.h>
#endif
#ifndef INCLUDED_pixelimage_iter_IntIterStart
#include <pixelimage/iter/IntIterStart.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_BasicShape
#include <pixelimage/triangleGML/coreShape/BasicShape.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_GroupShape
#include <pixelimage/triangleGML/coreShape/GroupShape.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_PatternStroke
#include <pixelimage/triangleGML/coreShape/PatternStroke.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_ShapeInterface
#include <pixelimage/triangleGML/coreShape/ShapeInterface.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_patternContour_TrianglePattern
#include <pixelimage/triangleGML/patternContour/TrianglePattern.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_b416d59fd3199e99_32_new,"pixelimage.triangleGML.patternContour.TrianglePattern","new",0xb2e8b23f,"pixelimage.triangleGML.patternContour.TrianglePattern.new","pixelimage/triangleGML/patternContour/TrianglePattern.hx",32,0xff7eba90)
HX_LOCAL_STACK_FRAME(_hx_pos_b416d59fd3199e99_44_setParameter,"pixelimage.triangleGML.patternContour.TrianglePattern","setParameter",0xbc255fe8,"pixelimage.triangleGML.patternContour.TrianglePattern.setParameter","pixelimage/triangleGML/patternContour/TrianglePattern.hx",44,0xff7eba90)
HX_LOCAL_STACK_FRAME(_hx_pos_b416d59fd3199e99_61_render,"pixelimage.triangleGML.patternContour.TrianglePattern","render",0x737dbed7,"pixelimage.triangleGML.patternContour.TrianglePattern.render","pixelimage/triangleGML/patternContour/TrianglePattern.hx",61,0xff7eba90)
namespace pixelimage{
namespace triangleGML{
namespace patternContour{

void TrianglePattern_obj::__construct(::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< int >  __o_strokeColor0,::hx::Null< int >  __o_strokeColor1,::Array< bool > strokePatternFill, ::Dynamic strokePatternWidth, ::Dynamic strokePatternHeight,::hx::Null< bool >  __o_strokePatternAcross,::hx::Null< int >  __o_strokePatternScale,::hx::Null< Float >  __o_aX,::hx::Null< Float >  __o_aY,::hx::Null< Float >  __o_bX,::hx::Null< Float >  __o_bY,::hx::Null< Float >  __o_cX,::hx::Null< Float >  __o_cY){
            		Float opacity = __o_opacity.Default(((Float)1.));
            		bool visibility = __o_visibility.Default(true);
            		int strokeColor0 = __o_strokeColor0.Default(0);
            		int strokeColor1 = __o_strokeColor1.Default(0);
            		bool strokePatternAcross = __o_strokePatternAcross.Default(true);
            		int strokePatternScale = __o_strokePatternScale.Default(1);
            		Float aX = __o_aX.Default(((Float)0.));
            		Float aY = __o_aY.Default(((Float)0.));
            		Float bX = __o_bX.Default(((Float)1.));
            		Float bY = __o_bY.Default(((Float)0.));
            		Float cX = __o_cX.Default(((Float)0.));
            		Float cY = __o_cY.Default(((Float)1.));
            	HX_STACKFRAME(&_hx_pos_b416d59fd3199e99_32_new)
HXLINE(  33)		super::__construct(opacity,visibility,0,0,null(),strokeColor0,strokeColor1,strokePatternFill,strokePatternWidth,strokePatternHeight,strokePatternAcross,strokePatternScale);
HXLINE(  36)		this->aX = aX;
HXLINE(  37)		this->aY = aY;
HXLINE(  38)		this->bX = bX;
HXLINE(  39)		this->bY = bY;
HXLINE(  40)		this->cX = cX;
HXLINE(  41)		this->cY = cY;
            	}

Dynamic TrianglePattern_obj::__CreateEmpty() { return new TrianglePattern_obj; }

void *TrianglePattern_obj::_hx_vtable = 0;

Dynamic TrianglePattern_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< TrianglePattern_obj > _hx_result = new TrianglePattern_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10],inArgs[11],inArgs[12],inArgs[13],inArgs[14]);
	return _hx_result;
}

bool TrianglePattern_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x24e92cfb) {
		if (inClassId<=(int)0x2091632c) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2091632c;
		} else {
			return inClassId==(int)0x24e92cfb;
		}
	} else {
		return inClassId==(int)0x3be35e2f || inClassId==(int)0x73e71e41;
	}
}

void TrianglePattern_obj::setParameter(::String name,::String value){
            	HX_STACKFRAME(&_hx_pos_b416d59fd3199e99_44_setParameter)
HXDLIN(  44)		::String _hx_switch_0 = name;
            		if (  (_hx_switch_0==HX_("aX",d7,54,00,00)) ){
HXLINE(  46)			this->aX = ::Std_obj::parseFloat(value);
HXDLIN(  46)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("aY",d8,54,00,00)) ){
HXLINE(  48)			this->aY = ::Std_obj::parseFloat(value);
HXDLIN(  48)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("bX",b6,55,00,00)) ){
HXLINE(  50)			this->bX = ::Std_obj::parseFloat(value);
HXDLIN(  50)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("bY",b7,55,00,00)) ){
HXLINE(  52)			this->bY = ::Std_obj::parseFloat(value);
HXDLIN(  52)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("cX",95,56,00,00)) ){
HXLINE(  54)			this->cX = ::Std_obj::parseFloat(value);
HXDLIN(  54)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("cY",96,56,00,00)) ){
HXLINE(  56)			this->cY = ::Std_obj::parseFloat(value);
HXDLIN(  56)			goto _hx_goto_1;
            		}
            		/* default */{
HXLINE(  58)			this->super::setParameter(name,value);
            		}
            		_hx_goto_1:;
            	}


::pixelimage::ImageStruct TrianglePattern_obj::render(::pixelimage::ImageStruct pixelShape){
            	HX_GC_STACKFRAME(&_hx_pos_b416d59fd3199e99_61_render)
HXLINE(  62)		this->buildPatternTemplates();
HXLINE(  63)		{
HXLINE(  63)			Float ax = (this->aX + this->offX);
HXDLIN(  63)			Float ay = (this->aY + this->offY);
HXDLIN(  63)			::pixelimage::ImageStruct tileImage = this->tileImageStroke;
HXDLIN(  63)			bool hasHit = false;
HXDLIN(  63)			{
HXLINE(  63)				Float bx = (this->bX + this->offX);
HXDLIN(  63)				Float by = (this->bY + this->offY);
HXDLIN(  63)				Float cx = (this->cX + this->offX);
HXDLIN(  63)				Float cy = (this->cY + this->offY);
HXDLIN(  63)				bool adjustWinding = (((((ax * by) - (bx * ay)) + ((bx * cy) - (cx * by))) + ((cx * ay) - (ax * cy))) > 0);
HXDLIN(  63)				if (!(adjustWinding)) {
HXLINE(  63)					Float bx_ = bx;
HXDLIN(  63)					Float by_ = by;
HXLINE( 188)					bx = cx;
HXLINE( 189)					by = cy;
HXLINE( 190)					cx = bx_;
HXLINE( 191)					cy = by_;
            				}
HXLINE(  63)				{
HXLINE(  63)					bool hasUndo = false;
HXDLIN(  63)					Float s0 = ((ay * cx) - (ax * cy));
HXDLIN(  63)					Float sx = (cy - ay);
HXDLIN(  63)					Float sy = (ax - cx);
HXDLIN(  63)					Float t0 = ((ax * by) - (ay * bx));
HXDLIN(  63)					Float tx = (ay - by);
HXDLIN(  63)					Float ty = (bx - ax);
HXDLIN(  63)					Float A = ((((-(by) * cx) + (ay * (-(bx) + cx))) + (ax * (by - cy))) + (bx * cy));
HXDLIN(  63)					::pixelimage::iter::IntIterStart xIter3;
HXDLIN(  63)					if ((ax > bx)) {
HXLINE(  63)						if ((ax > cx)) {
HXLINE(  63)							int min;
HXDLIN(  63)							if ((bx > cx)) {
HXLINE(  63)								min = ::Math_obj::floor(cx);
            							}
            							else {
HXLINE(  63)								min = ::Math_obj::floor(bx);
            							}
HXDLIN(  63)							int ii_min = min;
HXDLIN(  63)							int ii_max = ::Math_obj::ceil(ax);
HXDLIN(  63)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  63)							xIter3 = this1;
            						}
            						else {
HXLINE(  63)							int ii_min = ::Math_obj::floor(bx);
HXDLIN(  63)							int ii_max = ::Math_obj::ceil(cx);
HXDLIN(  63)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  63)							xIter3 = this1;
            						}
            					}
            					else {
HXLINE(  63)						if ((bx > cx)) {
HXLINE(  63)							int min;
HXDLIN(  63)							if ((ax > cx)) {
HXLINE(  63)								min = ::Math_obj::floor(cx);
            							}
            							else {
HXLINE(  63)								min = ::Math_obj::ceil(ax);
            							}
HXDLIN(  63)							int ii_min = min;
HXDLIN(  63)							int ii_max = ::Math_obj::ceil(bx);
HXDLIN(  63)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  63)							xIter3 = this1;
            						}
            						else {
HXLINE(  63)							int ii_min = ::Math_obj::floor(ax);
HXDLIN(  63)							int ii_max = ::Math_obj::ceil(cx);
HXDLIN(  63)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  63)							xIter3 = this1;
            						}
            					}
HXDLIN(  63)					::pixelimage::iter::IntIterStart yIter3;
HXDLIN(  63)					if ((ay > by)) {
HXLINE(  63)						if ((ay > cy)) {
HXLINE(  63)							int min;
HXDLIN(  63)							if ((by > cy)) {
HXLINE(  63)								min = ::Math_obj::floor(cy);
            							}
            							else {
HXLINE(  63)								min = ::Math_obj::floor(by);
            							}
HXDLIN(  63)							int ii_min = min;
HXDLIN(  63)							int ii_max = ::Math_obj::ceil(ay);
HXDLIN(  63)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  63)							yIter3 = this1;
            						}
            						else {
HXLINE(  63)							int ii_min = ::Math_obj::floor(by);
HXDLIN(  63)							int ii_max = ::Math_obj::ceil(cy);
HXDLIN(  63)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  63)							yIter3 = this1;
            						}
            					}
            					else {
HXLINE(  63)						if ((by > cy)) {
HXLINE(  63)							int min;
HXDLIN(  63)							if ((ay > cy)) {
HXLINE(  63)								min = ::Math_obj::floor(cy);
            							}
            							else {
HXLINE(  63)								min = ::Math_obj::ceil(ay);
            							}
HXDLIN(  63)							int ii_min = min;
HXDLIN(  63)							int ii_max = ::Math_obj::ceil(by);
HXDLIN(  63)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  63)							yIter3 = this1;
            						}
            						else {
HXLINE(  63)							int ii_min = ::Math_obj::floor(ay);
HXDLIN(  63)							int ii_max = ::Math_obj::ceil(cy);
HXDLIN(  63)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  63)							yIter3 = this1;
            						}
            					}
HXDLIN(  63)					::pixelimage::ImageStruct undoImage = null();
HXDLIN(  63)					if (hasUndo) {
HXLINE(  63)						int w = ((xIter3->max - xIter3->start) + 1);
HXDLIN(  63)						int h = ((yIter3->max - yIter3->start) + 1);
HXDLIN(  63)						int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN(  63)						::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  63)						::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN(  63)						::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN(  63)						undoImage = this3;
HXDLIN(  63)						{
HXLINE(  63)							int rectLeft = xIter3->start;
HXDLIN(  63)							int rectTop = yIter3->start;
HXDLIN(  63)							int rectRight = xIter3->max;
HXDLIN(  63)							bool forceClear = false;
HXDLIN(  63)							{
HXLINE(  63)								int _g = rectTop;
HXDLIN(  63)								int _g1 = yIter3->max;
HXDLIN(  63)								while((_g < _g1)){
HXLINE(  63)									_g = (_g + 1);
HXDLIN(  63)									int dy = (_g - 1);
HXDLIN(  63)									{
HXLINE(  63)										int _g1 = rectLeft;
HXDLIN(  63)										int _g2 = rectRight;
HXDLIN(  63)										while((_g1 < _g2)){
HXLINE(  63)											_g1 = (_g1 + 1);
HXDLIN(  63)											int dx = (_g1 - 1);
HXDLIN(  63)											::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  63)											int index;
HXDLIN(  63)											if (pixelShape->useVirtualPos) {
HXLINE(  63)												index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + dx) - pixelShape->virtualX));
            											}
            											else {
HXLINE(  63)												index = ::Std_obj::_hx_int(( (Float)(((dy * pixelShape->width) + dx)) ));
            											}
HXDLIN(  63)											::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  63)											int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  63)											int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  63)											int col;
HXDLIN(  63)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  63)												col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            											}
            											else {
HXLINE(  63)												col = c;
            											}
HXDLIN(  63)											bool _hx_tmp;
HXDLIN(  63)											if (pixelShape->useMask) {
HXLINE(  63)												_hx_tmp = ::hx::IsNotNull( pixelShape->mask );
            											}
            											else {
HXLINE(  63)												_hx_tmp = false;
            											}
HXDLIN(  63)											if (_hx_tmp) {
HXLINE(  63)												::pixelimage::ImageStruct this1 = pixelShape->mask;
HXDLIN(  63)												::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  63)												int index;
HXDLIN(  63)												if (this1->useVirtualPos) {
HXLINE(  63)													index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            												}
            												else {
HXLINE(  63)													index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            												}
HXDLIN(  63)												::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  63)												int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  63)												int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  63)												int v;
HXDLIN(  63)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  63)													v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE(  63)													v = c;
            												}
HXDLIN(  63)												int this3 = v;
HXDLIN(  63)												int maskPixel = this3;
HXDLIN(  63)												int this4 = col;
HXDLIN(  63)												int this5 = this4;
HXDLIN(  63)												if ((maskPixel == 0)) {
HXLINE(  63)													int this1 = this5;
HXDLIN(  63)													col = this1;
            												}
            												else {
HXLINE(  63)													Float m0;
HXDLIN(  63)													int this1 = ((maskPixel >> 24) & 255);
HXDLIN(  63)													if ((this1 == 0)) {
HXLINE(  63)														m0 = ((Float)0.);
            													}
            													else {
HXLINE(  63)														m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            													}
HXDLIN(  63)													Float m1;
HXDLIN(  63)													int this2 = ((maskPixel >> 16) & 255);
HXDLIN(  63)													if ((this2 == 0)) {
HXLINE(  63)														m1 = ((Float)0.);
            													}
            													else {
HXLINE(  63)														m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            													}
HXDLIN(  63)													Float m2;
HXDLIN(  63)													int this3 = ((maskPixel >> 8) & 255);
HXDLIN(  63)													if ((this3 == 0)) {
HXLINE(  63)														m2 = ((Float)0.);
            													}
            													else {
HXLINE(  63)														m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            													}
HXDLIN(  63)													Float m3;
HXDLIN(  63)													int this4 = (maskPixel & 255);
HXDLIN(  63)													if ((this4 == 0)) {
HXLINE(  63)														m3 = ((Float)0.);
            													}
            													else {
HXLINE(  63)														m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            													}
HXDLIN(  63)													int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN(  63)													int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN(  63)													int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN(  63)													int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN(  63)													col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            												}
            											}
HXDLIN(  63)											if ((col != 0)) {
HXLINE(  63)												int x = (dx - rectLeft);
HXDLIN(  63)												int y = (dy - rectTop);
HXDLIN(  63)												int this1 = col;
HXDLIN(  63)												int c = this1;
HXDLIN(  63)												bool _hx_tmp;
HXDLIN(  63)												if ((((c >> 24) & 255) < 254)) {
HXLINE(  63)													_hx_tmp = undoImage->transparent;
            												}
            												else {
HXLINE(  63)													_hx_tmp = false;
            												}
HXDLIN(  63)												if (_hx_tmp) {
HXLINE(  63)													int location;
HXDLIN(  63)													if (undoImage->useVirtualPos) {
HXLINE(  63)														location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            													}
            													else {
HXLINE(  63)														location = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            													}
HXDLIN(  63)													::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  63)													::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  63)													int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  63)													int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  63)													int this3 = this2;
HXDLIN(  63)													int this4;
HXDLIN(  63)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  63)														this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            													}
            													else {
HXLINE(  63)														this4 = this3;
            													}
HXDLIN(  63)													Float a1;
HXDLIN(  63)													int this5 = ((this4 >> 24) & 255);
HXDLIN(  63)													if ((this5 == 0)) {
HXLINE(  63)														a1 = ((Float)0.);
            													}
            													else {
HXLINE(  63)														a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            													}
HXDLIN(  63)													Float r1;
HXDLIN(  63)													int this6 = ((this4 >> 16) & 255);
HXDLIN(  63)													if ((this6 == 0)) {
HXLINE(  63)														r1 = ((Float)0.);
            													}
            													else {
HXLINE(  63)														r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            													}
HXDLIN(  63)													Float g1;
HXDLIN(  63)													int this7 = ((this4 >> 8) & 255);
HXDLIN(  63)													if ((this7 == 0)) {
HXLINE(  63)														g1 = ((Float)0.);
            													}
            													else {
HXLINE(  63)														g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            													}
HXDLIN(  63)													Float b1;
HXDLIN(  63)													int this8 = (this4 & 255);
HXDLIN(  63)													if ((this8 == 0)) {
HXLINE(  63)														b1 = ((Float)0.);
            													}
            													else {
HXLINE(  63)														b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            													}
HXDLIN(  63)													Float a2;
HXDLIN(  63)													int this9 = ((col >> 24) & 255);
HXDLIN(  63)													if ((this9 == 0)) {
HXLINE(  63)														a2 = ((Float)0.);
            													}
            													else {
HXLINE(  63)														a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            													}
HXDLIN(  63)													Float r2;
HXDLIN(  63)													int this10 = ((col >> 16) & 255);
HXDLIN(  63)													if ((this10 == 0)) {
HXLINE(  63)														r2 = ((Float)0.);
            													}
            													else {
HXLINE(  63)														r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            													}
HXDLIN(  63)													Float g2;
HXDLIN(  63)													int this11 = ((col >> 8) & 255);
HXDLIN(  63)													if ((this11 == 0)) {
HXLINE(  63)														g2 = ((Float)0.);
            													}
            													else {
HXLINE(  63)														g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            													}
HXDLIN(  63)													Float b2;
HXDLIN(  63)													int this12 = (col & 255);
HXDLIN(  63)													if ((this12 == 0)) {
HXLINE(  63)														b2 = ((Float)0.);
            													}
            													else {
HXLINE(  63)														b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            													}
HXDLIN(  63)													Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  63)													int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  63)													int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  63)													int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  63)													int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  63)													int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  63)													{
HXLINE(  63)														::haxe::io::ArrayBufferViewImpl this13 = undoImage->image;
HXDLIN(  63)														int value;
HXDLIN(  63)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  63)															value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            														}
            														else {
HXLINE(  63)															value = blended;
            														}
HXDLIN(  63)														bool _hx_tmp;
HXDLIN(  63)														if ((location >= 0)) {
HXLINE(  63)															_hx_tmp = (location < (this13->byteLength >> 2));
            														}
            														else {
HXLINE(  63)															_hx_tmp = false;
            														}
HXDLIN(  63)														if (_hx_tmp) {
HXLINE(  63)															::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  63)															int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  63)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  63)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  63)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  63)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
            												else {
HXLINE(  63)													::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  63)													int index;
HXDLIN(  63)													if (undoImage->useVirtualPos) {
HXLINE(  63)														index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            													}
            													else {
HXLINE(  63)														index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            													}
HXDLIN(  63)													int value;
HXDLIN(  63)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  63)														value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE(  63)														value = c;
            													}
HXDLIN(  63)													bool _hx_tmp;
HXDLIN(  63)													if ((index >= 0)) {
HXLINE(  63)														_hx_tmp = (index < (this1->byteLength >> 2));
            													}
            													else {
HXLINE(  63)														_hx_tmp = false;
            													}
HXDLIN(  63)													if (_hx_tmp) {
HXLINE(  63)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  63)														int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  63)														_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  63)														_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  63)														_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  63)														_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            													}
            												}
            											}
            											else {
HXLINE(  63)												if (forceClear) {
HXLINE(  63)													::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  63)													int x = (dx - rectLeft);
HXDLIN(  63)													int y = (dy - rectTop);
HXDLIN(  63)													int index;
HXDLIN(  63)													if (undoImage->useVirtualPos) {
HXLINE(  63)														index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            													}
            													else {
HXLINE(  63)														index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            													}
HXDLIN(  63)													bool _hx_tmp;
HXDLIN(  63)													if ((index >= 0)) {
HXLINE(  63)														_hx_tmp = (index < (this1->byteLength >> 2));
            													}
            													else {
HXLINE(  63)														_hx_tmp = false;
            													}
HXDLIN(  63)													if (_hx_tmp) {
HXLINE(  63)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  63)														int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  63)														_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  63)														_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  63)														_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  63)														_this->b[(pos + 3)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN(  63)					bool foundY = false;
HXDLIN(  63)					Float s = ((Float)0.);
HXDLIN(  63)					Float t = ((Float)0.);
HXDLIN(  63)					Float sxx = ((Float)0.);
HXDLIN(  63)					Float txx = ((Float)0.);
HXDLIN(  63)					{
HXLINE(  63)						int _g_min = xIter3->start;
HXDLIN(  63)						int _g_max = xIter3->max;
HXDLIN(  63)						while((_g_min < _g_max)){
HXLINE(  63)							_g_min = (_g_min + 1);
HXDLIN(  63)							int x = (_g_min - 1);
HXLINE( 223)							sxx = (sx * ( (Float)(x) ));
HXLINE( 224)							txx = (tx * ( (Float)(x) ));
HXLINE( 225)							foundY = false;
HXLINE(  63)							{
HXLINE(  63)								int _g_min1 = yIter3->start;
HXDLIN(  63)								int _g_max = yIter3->max;
HXDLIN(  63)								while((_g_min1 < _g_max)){
HXLINE(  63)									_g_min1 = (_g_min1 + 1);
HXDLIN(  63)									int y = (_g_min1 - 1);
HXLINE( 227)									s = ((s0 + sxx) + (sy * ( (Float)(y) )));
HXLINE( 228)									t = ((t0 + txx) + (ty * ( (Float)(y) )));
HXLINE(  63)									bool _hx_tmp;
HXDLIN(  63)									if (!((s <= 0))) {
HXLINE(  63)										_hx_tmp = (t <= 0);
            									}
            									else {
HXLINE(  63)										_hx_tmp = true;
            									}
HXDLIN(  63)									if (_hx_tmp) {
HXLINE(  63)										if (foundY) {
HXLINE(  63)											goto _hx_goto_6;
            										}
            									}
            									else {
HXLINE(  63)										if (((s + t) < A)) {
HXLINE(  63)											int x1 = ::hx::Mod(x,tileImage->width);
HXDLIN(  63)											int y1 = ::hx::Mod(y,tileImage->height);
HXDLIN(  63)											::haxe::io::ArrayBufferViewImpl this1 = tileImage->image;
HXDLIN(  63)											int index;
HXDLIN(  63)											if (tileImage->useVirtualPos) {
HXLINE(  63)												index = ::Std_obj::_hx_int(((((( (Float)(y1) ) - tileImage->virtualY) * ( (Float)(tileImage->width) )) + x1) - tileImage->virtualX));
            											}
            											else {
HXLINE(  63)												index = ::Std_obj::_hx_int(( (Float)(((y1 * tileImage->width) + x1)) ));
            											}
HXDLIN(  63)											::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  63)											int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  63)											int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  63)											int color;
HXDLIN(  63)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  63)												color = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            											}
            											else {
HXLINE(  63)												color = c;
            											}
HXDLIN(  63)											{
HXLINE(  63)												int this2 = color;
HXDLIN(  63)												int c1 = this2;
HXDLIN(  63)												bool _hx_tmp;
HXDLIN(  63)												if ((((c1 >> 24) & 255) < 254)) {
HXLINE(  63)													_hx_tmp = pixelShape->transparent;
            												}
            												else {
HXLINE(  63)													_hx_tmp = false;
            												}
HXDLIN(  63)												if (_hx_tmp) {
HXLINE(  63)													int location;
HXDLIN(  63)													if (pixelShape->useVirtualPos) {
HXLINE(  63)														location = ::Std_obj::_hx_int(((((( (Float)(y) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x) - pixelShape->virtualX));
            													}
            													else {
HXLINE(  63)														location = ::Std_obj::_hx_int(( (Float)(((y * pixelShape->width) + x)) ));
            													}
HXDLIN(  63)													::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  63)													::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  63)													int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  63)													int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  63)													int this3 = this2;
HXDLIN(  63)													int this4;
HXDLIN(  63)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  63)														this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            													}
            													else {
HXLINE(  63)														this4 = this3;
            													}
HXDLIN(  63)													Float a1;
HXDLIN(  63)													int this5 = ((this4 >> 24) & 255);
HXDLIN(  63)													if ((this5 == 0)) {
HXLINE(  63)														a1 = ((Float)0.);
            													}
            													else {
HXLINE(  63)														a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            													}
HXDLIN(  63)													Float r1;
HXDLIN(  63)													int this6 = ((this4 >> 16) & 255);
HXDLIN(  63)													if ((this6 == 0)) {
HXLINE(  63)														r1 = ((Float)0.);
            													}
            													else {
HXLINE(  63)														r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            													}
HXDLIN(  63)													Float g1;
HXDLIN(  63)													int this7 = ((this4 >> 8) & 255);
HXDLIN(  63)													if ((this7 == 0)) {
HXLINE(  63)														g1 = ((Float)0.);
            													}
            													else {
HXLINE(  63)														g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            													}
HXDLIN(  63)													Float b1;
HXDLIN(  63)													int this8 = (this4 & 255);
HXDLIN(  63)													if ((this8 == 0)) {
HXLINE(  63)														b1 = ((Float)0.);
            													}
            													else {
HXLINE(  63)														b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            													}
HXDLIN(  63)													Float a2;
HXDLIN(  63)													int this9 = ((color >> 24) & 255);
HXDLIN(  63)													if ((this9 == 0)) {
HXLINE(  63)														a2 = ((Float)0.);
            													}
            													else {
HXLINE(  63)														a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            													}
HXDLIN(  63)													Float r2;
HXDLIN(  63)													int this10 = ((color >> 16) & 255);
HXDLIN(  63)													if ((this10 == 0)) {
HXLINE(  63)														r2 = ((Float)0.);
            													}
            													else {
HXLINE(  63)														r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            													}
HXDLIN(  63)													Float g2;
HXDLIN(  63)													int this11 = ((color >> 8) & 255);
HXDLIN(  63)													if ((this11 == 0)) {
HXLINE(  63)														g2 = ((Float)0.);
            													}
            													else {
HXLINE(  63)														g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            													}
HXDLIN(  63)													Float b2;
HXDLIN(  63)													int this12 = (color & 255);
HXDLIN(  63)													if ((this12 == 0)) {
HXLINE(  63)														b2 = ((Float)0.);
            													}
            													else {
HXLINE(  63)														b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            													}
HXDLIN(  63)													Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  63)													int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  63)													int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  63)													int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  63)													int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  63)													int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  63)													{
HXLINE(  63)														::haxe::io::ArrayBufferViewImpl this13 = pixelShape->image;
HXDLIN(  63)														int value;
HXDLIN(  63)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  63)															value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            														}
            														else {
HXLINE(  63)															value = blended;
            														}
HXDLIN(  63)														bool _hx_tmp;
HXDLIN(  63)														if ((location >= 0)) {
HXLINE(  63)															_hx_tmp = (location < (this13->byteLength >> 2));
            														}
            														else {
HXLINE(  63)															_hx_tmp = false;
            														}
HXDLIN(  63)														if (_hx_tmp) {
HXLINE(  63)															::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  63)															int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  63)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  63)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  63)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  63)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
            												else {
HXLINE(  63)													::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  63)													int index;
HXDLIN(  63)													if (pixelShape->useVirtualPos) {
HXLINE(  63)														index = ::Std_obj::_hx_int(((((( (Float)(y) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x) - pixelShape->virtualX));
            													}
            													else {
HXLINE(  63)														index = ::Std_obj::_hx_int(( (Float)(((y * pixelShape->width) + x)) ));
            													}
HXDLIN(  63)													int value;
HXDLIN(  63)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  63)														value = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            													}
            													else {
HXLINE(  63)														value = c1;
            													}
HXDLIN(  63)													bool _hx_tmp;
HXDLIN(  63)													if ((index >= 0)) {
HXLINE(  63)														_hx_tmp = (index < (this1->byteLength >> 2));
            													}
            													else {
HXLINE(  63)														_hx_tmp = false;
            													}
HXDLIN(  63)													if (_hx_tmp) {
HXLINE(  63)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  63)														int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  63)														_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  63)														_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  63)														_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  63)														_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            													}
            												}
            											}
HXLINE( 237)											foundY = true;
            										}
            										else {
HXLINE(  63)											if (foundY) {
HXLINE(  63)												goto _hx_goto_6;
            											}
            										}
            									}
            								}
            								_hx_goto_6:;
            							}
            						}
            					}
HXDLIN(  63)					if ((hasHit == false)) {
HXLINE(  63)						::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,true);
HXDLIN(  63)						if (hasUndo) {
HXLINE(  63)							v->undoImage = undoImage;
HXDLIN(  63)							v->undoX = xIter3->start;
HXDLIN(  63)							v->undoY = yIter3->start;
            						}
            					}
            				}
            			}
            		}
HXLINE(  64)		return this->super::render(pixelShape);
            	}



::hx::ObjectPtr< TrianglePattern_obj > TrianglePattern_obj::__new(::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< int >  __o_strokeColor0,::hx::Null< int >  __o_strokeColor1,::Array< bool > strokePatternFill, ::Dynamic strokePatternWidth, ::Dynamic strokePatternHeight,::hx::Null< bool >  __o_strokePatternAcross,::hx::Null< int >  __o_strokePatternScale,::hx::Null< Float >  __o_aX,::hx::Null< Float >  __o_aY,::hx::Null< Float >  __o_bX,::hx::Null< Float >  __o_bY,::hx::Null< Float >  __o_cX,::hx::Null< Float >  __o_cY) {
	::hx::ObjectPtr< TrianglePattern_obj > __this = new TrianglePattern_obj();
	__this->__construct(__o_opacity,__o_visibility,__o_strokeColor0,__o_strokeColor1,strokePatternFill,strokePatternWidth,strokePatternHeight,__o_strokePatternAcross,__o_strokePatternScale,__o_aX,__o_aY,__o_bX,__o_bY,__o_cX,__o_cY);
	return __this;
}

::hx::ObjectPtr< TrianglePattern_obj > TrianglePattern_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< int >  __o_strokeColor0,::hx::Null< int >  __o_strokeColor1,::Array< bool > strokePatternFill, ::Dynamic strokePatternWidth, ::Dynamic strokePatternHeight,::hx::Null< bool >  __o_strokePatternAcross,::hx::Null< int >  __o_strokePatternScale,::hx::Null< Float >  __o_aX,::hx::Null< Float >  __o_aY,::hx::Null< Float >  __o_bX,::hx::Null< Float >  __o_bY,::hx::Null< Float >  __o_cX,::hx::Null< Float >  __o_cY) {
	TrianglePattern_obj *__this = (TrianglePattern_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(TrianglePattern_obj), true, "pixelimage.triangleGML.patternContour.TrianglePattern"));
	*(void **)__this = TrianglePattern_obj::_hx_vtable;
	__this->__construct(__o_opacity,__o_visibility,__o_strokeColor0,__o_strokeColor1,strokePatternFill,strokePatternWidth,strokePatternHeight,__o_strokePatternAcross,__o_strokePatternScale,__o_aX,__o_aY,__o_bX,__o_bY,__o_cX,__o_cY);
	return __this;
}

TrianglePattern_obj::TrianglePattern_obj()
{
}

::hx::Val TrianglePattern_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"aX") ) { return ::hx::Val( aX ); }
		if (HX_FIELD_EQ(inName,"aY") ) { return ::hx::Val( aY ); }
		if (HX_FIELD_EQ(inName,"bX") ) { return ::hx::Val( bX ); }
		if (HX_FIELD_EQ(inName,"bY") ) { return ::hx::Val( bY ); }
		if (HX_FIELD_EQ(inName,"cX") ) { return ::hx::Val( cX ); }
		if (HX_FIELD_EQ(inName,"cY") ) { return ::hx::Val( cY ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { return ::hx::Val( render_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setParameter") ) { return ::hx::Val( setParameter_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val TrianglePattern_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"aX") ) { aX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"aY") ) { aY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bX") ) { bX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"bY") ) { bY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cX") ) { cX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"cY") ) { cY=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void TrianglePattern_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("aX",d7,54,00,00));
	outFields->push(HX_("aY",d8,54,00,00));
	outFields->push(HX_("bX",b6,55,00,00));
	outFields->push(HX_("bY",b7,55,00,00));
	outFields->push(HX_("cX",95,56,00,00));
	outFields->push(HX_("cY",96,56,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo TrianglePattern_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(TrianglePattern_obj,aX),HX_("aX",d7,54,00,00)},
	{::hx::fsFloat,(int)offsetof(TrianglePattern_obj,aY),HX_("aY",d8,54,00,00)},
	{::hx::fsFloat,(int)offsetof(TrianglePattern_obj,bX),HX_("bX",b6,55,00,00)},
	{::hx::fsFloat,(int)offsetof(TrianglePattern_obj,bY),HX_("bY",b7,55,00,00)},
	{::hx::fsFloat,(int)offsetof(TrianglePattern_obj,cX),HX_("cX",95,56,00,00)},
	{::hx::fsFloat,(int)offsetof(TrianglePattern_obj,cY),HX_("cY",96,56,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *TrianglePattern_obj_sStaticStorageInfo = 0;
#endif

static ::String TrianglePattern_obj_sMemberFields[] = {
	HX_("aX",d7,54,00,00),
	HX_("aY",d8,54,00,00),
	HX_("bX",b6,55,00,00),
	HX_("bY",b7,55,00,00),
	HX_("cX",95,56,00,00),
	HX_("cY",96,56,00,00),
	HX_("setParameter",a7,f5,ff,6c),
	HX_("render",56,6b,29,05),
	::String(null()) };

::hx::Class TrianglePattern_obj::__mClass;

void TrianglePattern_obj::__register()
{
	TrianglePattern_obj _hx_dummy;
	TrianglePattern_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pixelimage.triangleGML.patternContour.TrianglePattern",cd,26,7d,ce);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(TrianglePattern_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< TrianglePattern_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = TrianglePattern_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = TrianglePattern_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pixelimage
} // end namespace triangleGML
} // end namespace patternContour
