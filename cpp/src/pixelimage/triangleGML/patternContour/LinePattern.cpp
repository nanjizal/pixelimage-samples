// Generated by Haxe 4.3.0-rc.1+
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_ArrayBufferViewImpl
#include <haxe/io/ArrayBufferViewImpl.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_pixelimage_ImageStruct
#include <pixelimage/ImageStruct.h>
#endif
#ifndef INCLUDED_pixelimage__Endian_Endian_Fields_
#include <pixelimage/_Endian/Endian_Fields_.h>
#endif
#ifndef INCLUDED_pixelimage_algo_HitQuad
#include <pixelimage/algo/HitQuad.h>
#endif
#ifndef INCLUDED_pixelimage_algo_HitTri
#include <pixelimage/algo/HitTri.h>
#endif
#ifndef INCLUDED_pixelimage_algo_IhitObj
#include <pixelimage/algo/IhitObj.h>
#endif
#ifndef INCLUDED_pixelimage_iter_IntIterStart
#include <pixelimage/iter/IntIterStart.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_BasicShape
#include <pixelimage/triangleGML/coreShape/BasicShape.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_GroupShape
#include <pixelimage/triangleGML/coreShape/GroupShape.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_PatternStroke
#include <pixelimage/triangleGML/coreShape/PatternStroke.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_ShapeInterface
#include <pixelimage/triangleGML/coreShape/ShapeInterface.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_patternContour_LinePattern
#include <pixelimage/triangleGML/patternContour/LinePattern.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fb106afec4c685a5_33_new,"pixelimage.triangleGML.patternContour.LinePattern","new",0x9aa73a13,"pixelimage.triangleGML.patternContour.LinePattern.new","pixelimage/triangleGML/patternContour/LinePattern.hx",33,0xc9ed1dbc)
HX_LOCAL_STACK_FRAME(_hx_pos_fb106afec4c685a5_43_setParameter,"pixelimage.triangleGML.patternContour.LinePattern","setParameter",0x6f893d94,"pixelimage.triangleGML.patternContour.LinePattern.setParameter","pixelimage/triangleGML/patternContour/LinePattern.hx",43,0xc9ed1dbc)
HX_LOCAL_STACK_FRAME(_hx_pos_fb106afec4c685a5_56_render,"pixelimage.triangleGML.patternContour.LinePattern","render",0x3e6ed383,"pixelimage.triangleGML.patternContour.LinePattern.render","pixelimage/triangleGML/patternContour/LinePattern.hx",56,0xc9ed1dbc)
namespace pixelimage{
namespace triangleGML{
namespace patternContour{

void LinePattern_obj::__construct(::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< int >  __o_strokeColor,::hx::Null< Float >  __o_strokeWidth,::Array< ::String > strokeDashGapArray,::hx::Null< int >  __o_strokeColor0,::hx::Null< int >  __o_strokeColor1,::Array< bool > strokePatternFill, ::Dynamic strokePatternWidth, ::Dynamic strokePatternHeight,::hx::Null< bool >  __o_strokePatternAcross,::hx::Null< int >  __o_strokePatternScale,::hx::Null< Float >  __o_x1,::hx::Null< Float >  __o_y1,::hx::Null< Float >  __o_x2,::hx::Null< Float >  __o_y2){
            		Float opacity = __o_opacity.Default(((Float)1.));
            		bool visibility = __o_visibility.Default(true);
            		int strokeColor = __o_strokeColor.Default(-1048576);
            		Float strokeWidth = __o_strokeWidth.Default(((Float)1.));
            		int strokeColor0 = __o_strokeColor0.Default(0);
            		int strokeColor1 = __o_strokeColor1.Default(0);
            		bool strokePatternAcross = __o_strokePatternAcross.Default(true);
            		int strokePatternScale = __o_strokePatternScale.Default(1);
            		Float x1 = __o_x1.Default(((Float)0.));
            		Float y1 = __o_y1.Default(((Float)0.));
            		Float x2 = __o_x2.Default(((Float)0.));
            		Float y2 = __o_y2.Default(((Float)0.));
            	HX_STACKFRAME(&_hx_pos_fb106afec4c685a5_33_new)
HXLINE(  34)		super::__construct(opacity,visibility,strokeColor,strokeWidth,strokeDashGapArray,strokeColor0,strokeColor1,strokePatternFill,strokePatternWidth,strokePatternHeight,strokePatternAcross,strokePatternScale);
HXLINE(  37)		this->x1 = x1;
HXLINE(  38)		this->y1 = y1;
HXLINE(  39)		this->x2 = x2;
HXLINE(  40)		this->y2 = y2;
            	}

Dynamic LinePattern_obj::__CreateEmpty() { return new LinePattern_obj; }

void *LinePattern_obj::_hx_vtable = 0;

Dynamic LinePattern_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< LinePattern_obj > _hx_result = new LinePattern_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10],inArgs[11],inArgs[12],inArgs[13],inArgs[14],inArgs[15]);
	return _hx_result;
}

bool LinePattern_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x21a3e6b1) {
		if (inClassId<=(int)0x2091632c) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2091632c;
		} else {
			return inClassId==(int)0x21a3e6b1;
		}
	} else {
		return inClassId==(int)0x24e92cfb || inClassId==(int)0x3be35e2f;
	}
}

void LinePattern_obj::setParameter(::String name,::String value){
            	HX_STACKFRAME(&_hx_pos_fb106afec4c685a5_43_setParameter)
HXDLIN(  43)		::String _hx_switch_0 = name;
            		if (  (_hx_switch_0==HX_("x1",b9,68,00,00)) ){
HXLINE(  45)			this->x1 = ::Std_obj::parseFloat(value);
HXDLIN(  45)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("x2",ba,68,00,00)) ){
HXLINE(  49)			this->x2 = ::Std_obj::parseFloat(value);
HXDLIN(  49)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("y1",98,69,00,00)) ){
HXLINE(  47)			this->y1 = ::Std_obj::parseFloat(value);
HXDLIN(  47)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("y2",99,69,00,00)) ){
HXLINE(  51)			this->y2 = ::Std_obj::parseFloat(value);
HXDLIN(  51)			goto _hx_goto_1;
            		}
            		/* default */{
HXLINE(  53)			this->super::setParameter(name,value);
            		}
            		_hx_goto_1:;
            	}


::pixelimage::ImageStruct LinePattern_obj::render(::pixelimage::ImageStruct pixelShape){
            	HX_GC_STACKFRAME(&_hx_pos_fb106afec4c685a5_56_render)
HXLINE(  57)		Float px = (this->x1 + this->offX);
HXLINE(  58)		Float qx = (this->x2 + this->offX);
HXLINE(  59)		Float py = (this->y1 + this->offY);
HXLINE(  60)		Float qy = (this->y2 + this->offY);
HXLINE(  61)		this->buildPatternTemplates();
HXLINE(  62)		{
HXLINE(  62)			::pixelimage::ImageStruct tileImage = this->tileImageStroke;
HXDLIN(  62)			bool hasHit = false;
HXDLIN(  62)			Float o = (qy - py);
HXDLIN(  62)			Float a = (qx - px);
HXDLIN(  62)			Float h = ::Math_obj::pow(((o * o) + (a * a)),((Float)0.5));
HXDLIN(  62)			Float theta = ::Math_obj::atan2(o,a);
HXDLIN(  62)			{
HXLINE(  62)				 ::Dynamic debugCorners = false;
HXDLIN(  62)				if (::hx::IsNull( debugCorners )) {
HXLINE( 893)					debugCorners = false;
            				}
HXLINE(  62)				Float sin = ::Math_obj::sin(theta);
HXDLIN(  62)				Float cos = ::Math_obj::cos(theta);
HXDLIN(  62)				Float radius = (this->strokeWidth / ( (Float)(2) ));
HXDLIN(  62)				Float dx = ((Float)0.1);
HXDLIN(  62)				Float dy = radius;
HXDLIN(  62)				Float cx = h;
HXDLIN(  62)				Float cy = radius;
HXDLIN(  62)				Float bx = h;
HXDLIN(  62)				Float by = -(radius);
HXDLIN(  62)				Float ax = ((Float)0.1);
HXDLIN(  62)				Float ay = -(radius);
HXDLIN(  62)				Float temp = ((Float)0.);
HXLINE( 380)				temp = (px + ((ax * cos) - (ay * sin)));
HXLINE( 381)				ay = (py + ((ay * cos) + (ax * sin)));
HXLINE( 382)				ax = temp;
HXLINE( 384)				temp = (px + ((bx * cos) - (by * sin)));
HXLINE( 385)				by = (py + ((by * cos) + (bx * sin)));
HXLINE( 386)				bx = temp;
HXLINE( 388)				temp = (px + ((cx * cos) - (cy * sin)));
HXLINE( 389)				cy = (py + ((cy * cos) + (cx * sin)));
HXLINE( 390)				cx = temp;
HXLINE( 392)				temp = (px + ((dx * cos) - (dy * sin)));
HXLINE( 393)				dy = (py + ((dy * cos) + (dx * sin)));
HXLINE( 394)				dx = temp;
HXLINE(  62)				if (( (bool)(debugCorners) )) {
HXLINE(  62)					{
HXLINE(  62)						Float x = (ax - ((Float)6.));
HXDLIN(  62)						Float y = (ay - ((Float)6.));
HXDLIN(  62)						int p = ::Std_obj::_hx_int(x);
HXDLIN(  62)						int xx = p;
HXDLIN(  62)						int q = ::Std_obj::_hx_int(y);
HXDLIN(  62)						int maxX = ::Std_obj::_hx_int((x + 12));
HXDLIN(  62)						int maxY = ::Std_obj::_hx_int((y + 12));
HXDLIN(  62)						while(true){
HXLINE(  62)							{
HXLINE(  62)								p = (p + 1);
HXDLIN(  62)								int x = (p - 1);
HXDLIN(  62)								int this1 = -65536;
HXDLIN(  62)								int c = this1;
HXDLIN(  62)								bool _hx_tmp;
HXDLIN(  62)								if ((((c >> 24) & 255) < 254)) {
HXLINE(  62)									_hx_tmp = pixelShape->transparent;
            								}
            								else {
HXLINE(  62)									_hx_tmp = false;
            								}
HXDLIN(  62)								if (_hx_tmp) {
HXLINE(  62)									int location;
HXDLIN(  62)									if (pixelShape->useVirtualPos) {
HXLINE(  62)										location = ::Std_obj::_hx_int(((((( (Float)(q) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x) - pixelShape->virtualX));
            									}
            									else {
HXLINE(  62)										location = ::Std_obj::_hx_int(( (Float)(((q * pixelShape->width) + x)) ));
            									}
HXDLIN(  62)									::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  62)									::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  62)									int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  62)									int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  62)									int this3 = this2;
HXDLIN(  62)									int this4;
HXDLIN(  62)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  62)										this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            									}
            									else {
HXLINE(  62)										this4 = this3;
            									}
HXDLIN(  62)									Float a1;
HXDLIN(  62)									int this5 = ((this4 >> 24) & 255);
HXDLIN(  62)									if ((this5 == 0)) {
HXLINE(  62)										a1 = ((Float)0.);
            									}
            									else {
HXLINE(  62)										a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            									}
HXDLIN(  62)									Float r1;
HXDLIN(  62)									int this6 = ((this4 >> 16) & 255);
HXDLIN(  62)									if ((this6 == 0)) {
HXLINE(  62)										r1 = ((Float)0.);
            									}
            									else {
HXLINE(  62)										r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            									}
HXDLIN(  62)									Float g1;
HXDLIN(  62)									int this7 = ((this4 >> 8) & 255);
HXDLIN(  62)									if ((this7 == 0)) {
HXLINE(  62)										g1 = ((Float)0.);
            									}
            									else {
HXLINE(  62)										g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            									}
HXDLIN(  62)									Float b1;
HXDLIN(  62)									int this8 = (this4 & 255);
HXDLIN(  62)									if ((this8 == 0)) {
HXLINE(  62)										b1 = ((Float)0.);
            									}
            									else {
HXLINE(  62)										b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            									}
HXDLIN(  62)									Float a2;
HXDLIN(  62)									int this9 = ((-65536 >> 24) & 255);
HXDLIN(  62)									if ((this9 == 0)) {
HXLINE(  62)										a2 = ((Float)0.);
            									}
            									else {
HXLINE(  62)										a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            									}
HXDLIN(  62)									Float r2;
HXDLIN(  62)									int this10 = ((-65536 >> 16) & 255);
HXDLIN(  62)									if ((this10 == 0)) {
HXLINE(  62)										r2 = ((Float)0.);
            									}
            									else {
HXLINE(  62)										r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            									}
HXDLIN(  62)									Float g2;
HXDLIN(  62)									int this11 = ((-65536 >> 8) & 255);
HXDLIN(  62)									if ((this11 == 0)) {
HXLINE(  62)										g2 = ((Float)0.);
            									}
            									else {
HXLINE(  62)										g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            									}
HXDLIN(  62)									Float b2;
HXDLIN(  62)									int this12 = (-65536 & 255);
HXDLIN(  62)									if ((this12 == 0)) {
HXLINE(  62)										b2 = ((Float)0.);
            									}
            									else {
HXLINE(  62)										b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            									}
HXDLIN(  62)									Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  62)									int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  62)									int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  62)									int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  62)									int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  62)									int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  62)									{
HXLINE(  62)										::haxe::io::ArrayBufferViewImpl this13 = pixelShape->image;
HXDLIN(  62)										int value;
HXDLIN(  62)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  62)											value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            										}
            										else {
HXLINE(  62)											value = blended;
            										}
HXDLIN(  62)										bool _hx_tmp;
HXDLIN(  62)										if ((location >= 0)) {
HXLINE(  62)											_hx_tmp = (location < (this13->byteLength >> 2));
            										}
            										else {
HXLINE(  62)											_hx_tmp = false;
            										}
HXDLIN(  62)										if (_hx_tmp) {
HXLINE(  62)											::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  62)											int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  62)											_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  62)											_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  62)											_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  62)											_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            										}
            									}
            								}
            								else {
HXLINE(  62)									::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  62)									int index;
HXDLIN(  62)									if (pixelShape->useVirtualPos) {
HXLINE(  62)										index = ::Std_obj::_hx_int(((((( (Float)(q) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x) - pixelShape->virtualX));
            									}
            									else {
HXLINE(  62)										index = ::Std_obj::_hx_int(( (Float)(((q * pixelShape->width) + x)) ));
            									}
HXDLIN(  62)									int value;
HXDLIN(  62)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  62)										value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXLINE(  62)										value = c;
            									}
HXDLIN(  62)									bool _hx_tmp;
HXDLIN(  62)									if ((index >= 0)) {
HXLINE(  62)										_hx_tmp = (index < (this1->byteLength >> 2));
            									}
            									else {
HXLINE(  62)										_hx_tmp = false;
            									}
HXDLIN(  62)									if (_hx_tmp) {
HXLINE(  62)										::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  62)										int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  62)										_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  62)										_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  62)										_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  62)										_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            									}
            								}
            							}
HXDLIN(  62)							if ((p > maxX)) {
HXLINE( 247)								p = xx;
HXLINE(  62)								q = (q + 1);
            							}
HXDLIN(  62)							if ((q > maxY)) {
HXLINE(  62)								goto _hx_goto_3;
            							}
            						}
            						_hx_goto_3:;
            					}
HXDLIN(  62)					{
HXLINE(  62)						Float x1 = (bx - ((Float)6.));
HXDLIN(  62)						Float y1 = (by - ((Float)6.));
HXDLIN(  62)						int p1 = ::Std_obj::_hx_int(x1);
HXDLIN(  62)						int xx1 = p1;
HXDLIN(  62)						int q1 = ::Std_obj::_hx_int(y1);
HXDLIN(  62)						int maxX1 = ::Std_obj::_hx_int((x1 + 12));
HXDLIN(  62)						int maxY1 = ::Std_obj::_hx_int((y1 + 12));
HXDLIN(  62)						while(true){
HXLINE(  62)							{
HXLINE(  62)								p1 = (p1 + 1);
HXDLIN(  62)								int x = (p1 - 1);
HXDLIN(  62)								int this1 = -16711936;
HXDLIN(  62)								int c = this1;
HXDLIN(  62)								bool _hx_tmp;
HXDLIN(  62)								if ((((c >> 24) & 255) < 254)) {
HXLINE(  62)									_hx_tmp = pixelShape->transparent;
            								}
            								else {
HXLINE(  62)									_hx_tmp = false;
            								}
HXDLIN(  62)								if (_hx_tmp) {
HXLINE(  62)									int location;
HXDLIN(  62)									if (pixelShape->useVirtualPos) {
HXLINE(  62)										location = ::Std_obj::_hx_int(((((( (Float)(q1) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x) - pixelShape->virtualX));
            									}
            									else {
HXLINE(  62)										location = ::Std_obj::_hx_int(( (Float)(((q1 * pixelShape->width) + x)) ));
            									}
HXDLIN(  62)									::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  62)									::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  62)									int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  62)									int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  62)									int this3 = this2;
HXDLIN(  62)									int this4;
HXDLIN(  62)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  62)										this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            									}
            									else {
HXLINE(  62)										this4 = this3;
            									}
HXDLIN(  62)									Float a1;
HXDLIN(  62)									int this5 = ((this4 >> 24) & 255);
HXDLIN(  62)									if ((this5 == 0)) {
HXLINE(  62)										a1 = ((Float)0.);
            									}
            									else {
HXLINE(  62)										a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            									}
HXDLIN(  62)									Float r1;
HXDLIN(  62)									int this6 = ((this4 >> 16) & 255);
HXDLIN(  62)									if ((this6 == 0)) {
HXLINE(  62)										r1 = ((Float)0.);
            									}
            									else {
HXLINE(  62)										r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            									}
HXDLIN(  62)									Float g1;
HXDLIN(  62)									int this7 = ((this4 >> 8) & 255);
HXDLIN(  62)									if ((this7 == 0)) {
HXLINE(  62)										g1 = ((Float)0.);
            									}
            									else {
HXLINE(  62)										g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            									}
HXDLIN(  62)									Float b1;
HXDLIN(  62)									int this8 = (this4 & 255);
HXDLIN(  62)									if ((this8 == 0)) {
HXLINE(  62)										b1 = ((Float)0.);
            									}
            									else {
HXLINE(  62)										b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            									}
HXDLIN(  62)									Float a2;
HXDLIN(  62)									int this9 = ((-16711936 >> 24) & 255);
HXDLIN(  62)									if ((this9 == 0)) {
HXLINE(  62)										a2 = ((Float)0.);
            									}
            									else {
HXLINE(  62)										a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            									}
HXDLIN(  62)									Float r2;
HXDLIN(  62)									int this10 = ((-16711936 >> 16) & 255);
HXDLIN(  62)									if ((this10 == 0)) {
HXLINE(  62)										r2 = ((Float)0.);
            									}
            									else {
HXLINE(  62)										r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            									}
HXDLIN(  62)									Float g2;
HXDLIN(  62)									int this11 = ((-16711936 >> 8) & 255);
HXDLIN(  62)									if ((this11 == 0)) {
HXLINE(  62)										g2 = ((Float)0.);
            									}
            									else {
HXLINE(  62)										g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            									}
HXDLIN(  62)									Float b2;
HXDLIN(  62)									int this12 = (-16711936 & 255);
HXDLIN(  62)									if ((this12 == 0)) {
HXLINE(  62)										b2 = ((Float)0.);
            									}
            									else {
HXLINE(  62)										b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            									}
HXDLIN(  62)									Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  62)									int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  62)									int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  62)									int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  62)									int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  62)									int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  62)									{
HXLINE(  62)										::haxe::io::ArrayBufferViewImpl this13 = pixelShape->image;
HXDLIN(  62)										int value;
HXDLIN(  62)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  62)											value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            										}
            										else {
HXLINE(  62)											value = blended;
            										}
HXDLIN(  62)										bool _hx_tmp;
HXDLIN(  62)										if ((location >= 0)) {
HXLINE(  62)											_hx_tmp = (location < (this13->byteLength >> 2));
            										}
            										else {
HXLINE(  62)											_hx_tmp = false;
            										}
HXDLIN(  62)										if (_hx_tmp) {
HXLINE(  62)											::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  62)											int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  62)											_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  62)											_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  62)											_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  62)											_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            										}
            									}
            								}
            								else {
HXLINE(  62)									::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  62)									int index;
HXDLIN(  62)									if (pixelShape->useVirtualPos) {
HXLINE(  62)										index = ::Std_obj::_hx_int(((((( (Float)(q1) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x) - pixelShape->virtualX));
            									}
            									else {
HXLINE(  62)										index = ::Std_obj::_hx_int(( (Float)(((q1 * pixelShape->width) + x)) ));
            									}
HXDLIN(  62)									int value;
HXDLIN(  62)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  62)										value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXLINE(  62)										value = c;
            									}
HXDLIN(  62)									bool _hx_tmp;
HXDLIN(  62)									if ((index >= 0)) {
HXLINE(  62)										_hx_tmp = (index < (this1->byteLength >> 2));
            									}
            									else {
HXLINE(  62)										_hx_tmp = false;
            									}
HXDLIN(  62)									if (_hx_tmp) {
HXLINE(  62)										::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  62)										int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  62)										_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  62)										_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  62)										_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  62)										_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            									}
            								}
            							}
HXDLIN(  62)							if ((p1 > maxX1)) {
HXLINE( 247)								p1 = xx1;
HXLINE(  62)								q1 = (q1 + 1);
            							}
HXDLIN(  62)							if ((q1 > maxY1)) {
HXLINE(  62)								goto _hx_goto_4;
            							}
            						}
            						_hx_goto_4:;
            					}
HXDLIN(  62)					{
HXLINE(  62)						Float x2 = (cx - ((Float)6.));
HXDLIN(  62)						Float y2 = (cy - ((Float)6.));
HXDLIN(  62)						int p2 = ::Std_obj::_hx_int(x2);
HXDLIN(  62)						int xx2 = p2;
HXDLIN(  62)						int q2 = ::Std_obj::_hx_int(y2);
HXDLIN(  62)						int maxX2 = ::Std_obj::_hx_int((x2 + 12));
HXDLIN(  62)						int maxY2 = ::Std_obj::_hx_int((y2 + 12));
HXDLIN(  62)						while(true){
HXLINE(  62)							{
HXLINE(  62)								p2 = (p2 + 1);
HXDLIN(  62)								int x = (p2 - 1);
HXDLIN(  62)								int this1 = -16776961;
HXDLIN(  62)								int c = this1;
HXDLIN(  62)								bool _hx_tmp;
HXDLIN(  62)								if ((((c >> 24) & 255) < 254)) {
HXLINE(  62)									_hx_tmp = pixelShape->transparent;
            								}
            								else {
HXLINE(  62)									_hx_tmp = false;
            								}
HXDLIN(  62)								if (_hx_tmp) {
HXLINE(  62)									int location;
HXDLIN(  62)									if (pixelShape->useVirtualPos) {
HXLINE(  62)										location = ::Std_obj::_hx_int(((((( (Float)(q2) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x) - pixelShape->virtualX));
            									}
            									else {
HXLINE(  62)										location = ::Std_obj::_hx_int(( (Float)(((q2 * pixelShape->width) + x)) ));
            									}
HXDLIN(  62)									::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  62)									::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  62)									int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  62)									int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  62)									int this3 = this2;
HXDLIN(  62)									int this4;
HXDLIN(  62)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  62)										this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            									}
            									else {
HXLINE(  62)										this4 = this3;
            									}
HXDLIN(  62)									Float a1;
HXDLIN(  62)									int this5 = ((this4 >> 24) & 255);
HXDLIN(  62)									if ((this5 == 0)) {
HXLINE(  62)										a1 = ((Float)0.);
            									}
            									else {
HXLINE(  62)										a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            									}
HXDLIN(  62)									Float r1;
HXDLIN(  62)									int this6 = ((this4 >> 16) & 255);
HXDLIN(  62)									if ((this6 == 0)) {
HXLINE(  62)										r1 = ((Float)0.);
            									}
            									else {
HXLINE(  62)										r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            									}
HXDLIN(  62)									Float g1;
HXDLIN(  62)									int this7 = ((this4 >> 8) & 255);
HXDLIN(  62)									if ((this7 == 0)) {
HXLINE(  62)										g1 = ((Float)0.);
            									}
            									else {
HXLINE(  62)										g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            									}
HXDLIN(  62)									Float b1;
HXDLIN(  62)									int this8 = (this4 & 255);
HXDLIN(  62)									if ((this8 == 0)) {
HXLINE(  62)										b1 = ((Float)0.);
            									}
            									else {
HXLINE(  62)										b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            									}
HXDLIN(  62)									Float a2;
HXDLIN(  62)									int this9 = ((-16776961 >> 24) & 255);
HXDLIN(  62)									if ((this9 == 0)) {
HXLINE(  62)										a2 = ((Float)0.);
            									}
            									else {
HXLINE(  62)										a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            									}
HXDLIN(  62)									Float r2;
HXDLIN(  62)									int this10 = ((-16776961 >> 16) & 255);
HXDLIN(  62)									if ((this10 == 0)) {
HXLINE(  62)										r2 = ((Float)0.);
            									}
            									else {
HXLINE(  62)										r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            									}
HXDLIN(  62)									Float g2;
HXDLIN(  62)									int this11 = ((-16776961 >> 8) & 255);
HXDLIN(  62)									if ((this11 == 0)) {
HXLINE(  62)										g2 = ((Float)0.);
            									}
            									else {
HXLINE(  62)										g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            									}
HXDLIN(  62)									Float b2;
HXDLIN(  62)									int this12 = (-16776961 & 255);
HXDLIN(  62)									if ((this12 == 0)) {
HXLINE(  62)										b2 = ((Float)0.);
            									}
            									else {
HXLINE(  62)										b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            									}
HXDLIN(  62)									Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  62)									int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  62)									int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  62)									int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  62)									int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  62)									int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  62)									{
HXLINE(  62)										::haxe::io::ArrayBufferViewImpl this13 = pixelShape->image;
HXDLIN(  62)										int value;
HXDLIN(  62)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  62)											value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            										}
            										else {
HXLINE(  62)											value = blended;
            										}
HXDLIN(  62)										bool _hx_tmp;
HXDLIN(  62)										if ((location >= 0)) {
HXLINE(  62)											_hx_tmp = (location < (this13->byteLength >> 2));
            										}
            										else {
HXLINE(  62)											_hx_tmp = false;
            										}
HXDLIN(  62)										if (_hx_tmp) {
HXLINE(  62)											::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  62)											int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  62)											_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  62)											_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  62)											_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  62)											_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            										}
            									}
            								}
            								else {
HXLINE(  62)									::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  62)									int index;
HXDLIN(  62)									if (pixelShape->useVirtualPos) {
HXLINE(  62)										index = ::Std_obj::_hx_int(((((( (Float)(q2) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x) - pixelShape->virtualX));
            									}
            									else {
HXLINE(  62)										index = ::Std_obj::_hx_int(( (Float)(((q2 * pixelShape->width) + x)) ));
            									}
HXDLIN(  62)									int value;
HXDLIN(  62)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  62)										value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXLINE(  62)										value = c;
            									}
HXDLIN(  62)									bool _hx_tmp;
HXDLIN(  62)									if ((index >= 0)) {
HXLINE(  62)										_hx_tmp = (index < (this1->byteLength >> 2));
            									}
            									else {
HXLINE(  62)										_hx_tmp = false;
            									}
HXDLIN(  62)									if (_hx_tmp) {
HXLINE(  62)										::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  62)										int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  62)										_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  62)										_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  62)										_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  62)										_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            									}
            								}
            							}
HXDLIN(  62)							if ((p2 > maxX2)) {
HXLINE( 247)								p2 = xx2;
HXLINE(  62)								q2 = (q2 + 1);
            							}
HXDLIN(  62)							if ((q2 > maxY2)) {
HXLINE(  62)								goto _hx_goto_5;
            							}
            						}
            						_hx_goto_5:;
            					}
HXDLIN(  62)					{
HXLINE(  62)						Float x3 = (dx - ((Float)6.));
HXDLIN(  62)						Float y3 = (dy - ((Float)6.));
HXDLIN(  62)						int p3 = ::Std_obj::_hx_int(x3);
HXDLIN(  62)						int xx3 = p3;
HXDLIN(  62)						int q3 = ::Std_obj::_hx_int(y3);
HXDLIN(  62)						int maxX3 = ::Std_obj::_hx_int((x3 + 12));
HXDLIN(  62)						int maxY3 = ::Std_obj::_hx_int((y3 + 12));
HXDLIN(  62)						while(true){
HXLINE(  62)							{
HXLINE(  62)								p3 = (p3 + 1);
HXDLIN(  62)								int x = (p3 - 1);
HXDLIN(  62)								int this1 = -1048336;
HXDLIN(  62)								int c = this1;
HXDLIN(  62)								bool _hx_tmp;
HXDLIN(  62)								if ((((c >> 24) & 255) < 254)) {
HXLINE(  62)									_hx_tmp = pixelShape->transparent;
            								}
            								else {
HXLINE(  62)									_hx_tmp = false;
            								}
HXDLIN(  62)								if (_hx_tmp) {
HXLINE(  62)									int location;
HXDLIN(  62)									if (pixelShape->useVirtualPos) {
HXLINE(  62)										location = ::Std_obj::_hx_int(((((( (Float)(q3) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x) - pixelShape->virtualX));
            									}
            									else {
HXLINE(  62)										location = ::Std_obj::_hx_int(( (Float)(((q3 * pixelShape->width) + x)) ));
            									}
HXDLIN(  62)									::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  62)									::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  62)									int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  62)									int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  62)									int this3 = this2;
HXDLIN(  62)									int this4;
HXDLIN(  62)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  62)										this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            									}
            									else {
HXLINE(  62)										this4 = this3;
            									}
HXDLIN(  62)									Float a1;
HXDLIN(  62)									int this5 = ((this4 >> 24) & 255);
HXDLIN(  62)									if ((this5 == 0)) {
HXLINE(  62)										a1 = ((Float)0.);
            									}
            									else {
HXLINE(  62)										a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            									}
HXDLIN(  62)									Float r1;
HXDLIN(  62)									int this6 = ((this4 >> 16) & 255);
HXDLIN(  62)									if ((this6 == 0)) {
HXLINE(  62)										r1 = ((Float)0.);
            									}
            									else {
HXLINE(  62)										r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            									}
HXDLIN(  62)									Float g1;
HXDLIN(  62)									int this7 = ((this4 >> 8) & 255);
HXDLIN(  62)									if ((this7 == 0)) {
HXLINE(  62)										g1 = ((Float)0.);
            									}
            									else {
HXLINE(  62)										g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            									}
HXDLIN(  62)									Float b1;
HXDLIN(  62)									int this8 = (this4 & 255);
HXDLIN(  62)									if ((this8 == 0)) {
HXLINE(  62)										b1 = ((Float)0.);
            									}
            									else {
HXLINE(  62)										b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            									}
HXDLIN(  62)									Float a2;
HXDLIN(  62)									int this9 = ((-1048336 >> 24) & 255);
HXDLIN(  62)									if ((this9 == 0)) {
HXLINE(  62)										a2 = ((Float)0.);
            									}
            									else {
HXLINE(  62)										a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            									}
HXDLIN(  62)									Float r2;
HXDLIN(  62)									int this10 = ((-1048336 >> 16) & 255);
HXDLIN(  62)									if ((this10 == 0)) {
HXLINE(  62)										r2 = ((Float)0.);
            									}
            									else {
HXLINE(  62)										r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            									}
HXDLIN(  62)									Float g2;
HXDLIN(  62)									int this11 = ((-1048336 >> 8) & 255);
HXDLIN(  62)									if ((this11 == 0)) {
HXLINE(  62)										g2 = ((Float)0.);
            									}
            									else {
HXLINE(  62)										g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            									}
HXDLIN(  62)									Float b2;
HXDLIN(  62)									int this12 = (-1048336 & 255);
HXDLIN(  62)									if ((this12 == 0)) {
HXLINE(  62)										b2 = ((Float)0.);
            									}
            									else {
HXLINE(  62)										b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            									}
HXDLIN(  62)									Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  62)									int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  62)									int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  62)									int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  62)									int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  62)									int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  62)									{
HXLINE(  62)										::haxe::io::ArrayBufferViewImpl this13 = pixelShape->image;
HXDLIN(  62)										int value;
HXDLIN(  62)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  62)											value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            										}
            										else {
HXLINE(  62)											value = blended;
            										}
HXDLIN(  62)										bool _hx_tmp;
HXDLIN(  62)										if ((location >= 0)) {
HXLINE(  62)											_hx_tmp = (location < (this13->byteLength >> 2));
            										}
            										else {
HXLINE(  62)											_hx_tmp = false;
            										}
HXDLIN(  62)										if (_hx_tmp) {
HXLINE(  62)											::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  62)											int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  62)											_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  62)											_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  62)											_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  62)											_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            										}
            									}
            								}
            								else {
HXLINE(  62)									::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  62)									int index;
HXDLIN(  62)									if (pixelShape->useVirtualPos) {
HXLINE(  62)										index = ::Std_obj::_hx_int(((((( (Float)(q3) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x) - pixelShape->virtualX));
            									}
            									else {
HXLINE(  62)										index = ::Std_obj::_hx_int(( (Float)(((q3 * pixelShape->width) + x)) ));
            									}
HXDLIN(  62)									int value;
HXDLIN(  62)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  62)										value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXLINE(  62)										value = c;
            									}
HXDLIN(  62)									bool _hx_tmp;
HXDLIN(  62)									if ((index >= 0)) {
HXLINE(  62)										_hx_tmp = (index < (this1->byteLength >> 2));
            									}
            									else {
HXLINE(  62)										_hx_tmp = false;
            									}
HXDLIN(  62)									if (_hx_tmp) {
HXLINE(  62)										::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  62)										int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  62)										_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  62)										_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  62)										_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  62)										_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            									}
            								}
            							}
HXDLIN(  62)							if ((p3 > maxX3)) {
HXLINE( 247)								p3 = xx3;
HXLINE(  62)								q3 = (q3 + 1);
            							}
HXDLIN(  62)							if ((q3 > maxY3)) {
HXLINE(  62)								goto _hx_goto_6;
            							}
            						}
            						_hx_goto_6:;
            					}
            				}
HXDLIN(  62)				{
HXLINE(  62)					{
HXLINE(  62)						Float bx1 = bx;
HXDLIN(  62)						Float by1 = by;
HXDLIN(  62)						Float cx1 = dx;
HXDLIN(  62)						Float cy1 = dy;
HXDLIN(  62)						bool adjustWinding = (((((ax * by1) - (bx1 * ay)) + ((bx1 * cy1) - (cx1 * by1))) + ((cx1 * ay) - (ax * cy1))) > 0);
HXDLIN(  62)						if (!(adjustWinding)) {
HXLINE(  62)							Float bx_ = bx1;
HXDLIN(  62)							Float by_ = by1;
HXLINE( 188)							bx1 = cx1;
HXLINE( 189)							by1 = cy1;
HXLINE( 190)							cx1 = bx_;
HXLINE( 191)							cy1 = by_;
            						}
HXLINE(  62)						{
HXLINE(  62)							bool hasUndo = false;
HXDLIN(  62)							Float s0 = ((ay * cx1) - (ax * cy1));
HXDLIN(  62)							Float sx = (cy1 - ay);
HXDLIN(  62)							Float sy = (ax - cx1);
HXDLIN(  62)							Float t0 = ((ax * by1) - (ay * bx1));
HXDLIN(  62)							Float tx = (ay - by1);
HXDLIN(  62)							Float ty = (bx1 - ax);
HXDLIN(  62)							Float A = ((((-(by1) * cx1) + (ay * (-(bx1) + cx1))) + (ax * (by1 - cy1))) + (bx1 * cy1));
HXDLIN(  62)							::pixelimage::iter::IntIterStart xIter3;
HXDLIN(  62)							if ((ax > bx1)) {
HXLINE(  62)								if ((ax > cx1)) {
HXLINE(  62)									int min;
HXDLIN(  62)									if ((bx1 > cx1)) {
HXLINE(  62)										min = ::Math_obj::floor(cx1);
            									}
            									else {
HXLINE(  62)										min = ::Math_obj::floor(bx1);
            									}
HXDLIN(  62)									int ii_min = min;
HXDLIN(  62)									int ii_max = ::Math_obj::ceil(ax);
HXDLIN(  62)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  62)									xIter3 = this1;
            								}
            								else {
HXLINE(  62)									int ii_min = ::Math_obj::floor(bx1);
HXDLIN(  62)									int ii_max = ::Math_obj::ceil(cx1);
HXDLIN(  62)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  62)									xIter3 = this1;
            								}
            							}
            							else {
HXLINE(  62)								if ((bx1 > cx1)) {
HXLINE(  62)									int min;
HXDLIN(  62)									if ((ax > cx1)) {
HXLINE(  62)										min = ::Math_obj::floor(cx1);
            									}
            									else {
HXLINE(  62)										min = ::Math_obj::ceil(ax);
            									}
HXDLIN(  62)									int ii_min = min;
HXDLIN(  62)									int ii_max = ::Math_obj::ceil(bx1);
HXDLIN(  62)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  62)									xIter3 = this1;
            								}
            								else {
HXLINE(  62)									int ii_min = ::Math_obj::floor(ax);
HXDLIN(  62)									int ii_max = ::Math_obj::ceil(cx1);
HXDLIN(  62)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  62)									xIter3 = this1;
            								}
            							}
HXDLIN(  62)							::pixelimage::iter::IntIterStart yIter3;
HXDLIN(  62)							if ((ay > by1)) {
HXLINE(  62)								if ((ay > cy1)) {
HXLINE(  62)									int min;
HXDLIN(  62)									if ((by1 > cy1)) {
HXLINE(  62)										min = ::Math_obj::floor(cy1);
            									}
            									else {
HXLINE(  62)										min = ::Math_obj::floor(by1);
            									}
HXDLIN(  62)									int ii_min = min;
HXDLIN(  62)									int ii_max = ::Math_obj::ceil(ay);
HXDLIN(  62)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  62)									yIter3 = this1;
            								}
            								else {
HXLINE(  62)									int ii_min = ::Math_obj::floor(by1);
HXDLIN(  62)									int ii_max = ::Math_obj::ceil(cy1);
HXDLIN(  62)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  62)									yIter3 = this1;
            								}
            							}
            							else {
HXLINE(  62)								if ((by1 > cy1)) {
HXLINE(  62)									int min;
HXDLIN(  62)									if ((ay > cy1)) {
HXLINE(  62)										min = ::Math_obj::floor(cy1);
            									}
            									else {
HXLINE(  62)										min = ::Math_obj::ceil(ay);
            									}
HXDLIN(  62)									int ii_min = min;
HXDLIN(  62)									int ii_max = ::Math_obj::ceil(by1);
HXDLIN(  62)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  62)									yIter3 = this1;
            								}
            								else {
HXLINE(  62)									int ii_min = ::Math_obj::floor(ay);
HXDLIN(  62)									int ii_max = ::Math_obj::ceil(cy1);
HXDLIN(  62)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  62)									yIter3 = this1;
            								}
            							}
HXDLIN(  62)							::pixelimage::ImageStruct undoImage = null();
HXDLIN(  62)							if (hasUndo) {
HXLINE(  62)								int w = ((xIter3->max - xIter3->start) + 1);
HXDLIN(  62)								int h = ((yIter3->max - yIter3->start) + 1);
HXDLIN(  62)								int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN(  62)								::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  62)								::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN(  62)								::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN(  62)								undoImage = this3;
HXDLIN(  62)								{
HXLINE(  62)									int rectLeft = xIter3->start;
HXDLIN(  62)									int rectTop = yIter3->start;
HXDLIN(  62)									int rectRight = xIter3->max;
HXDLIN(  62)									bool forceClear = false;
HXDLIN(  62)									{
HXLINE(  62)										int _g = rectTop;
HXDLIN(  62)										int _g1 = yIter3->max;
HXDLIN(  62)										while((_g < _g1)){
HXLINE(  62)											_g = (_g + 1);
HXDLIN(  62)											int dy = (_g - 1);
HXDLIN(  62)											{
HXLINE(  62)												int _g1 = rectLeft;
HXDLIN(  62)												int _g2 = rectRight;
HXDLIN(  62)												while((_g1 < _g2)){
HXLINE(  62)													_g1 = (_g1 + 1);
HXDLIN(  62)													int dx = (_g1 - 1);
HXDLIN(  62)													::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  62)													int index;
HXDLIN(  62)													if (pixelShape->useVirtualPos) {
HXLINE(  62)														index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + dx) - pixelShape->virtualX));
            													}
            													else {
HXLINE(  62)														index = ::Std_obj::_hx_int(( (Float)(((dy * pixelShape->width) + dx)) ));
            													}
HXDLIN(  62)													::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  62)													int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  62)													int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  62)													int col;
HXDLIN(  62)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  62)														col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE(  62)														col = c;
            													}
HXDLIN(  62)													bool _hx_tmp;
HXDLIN(  62)													if (pixelShape->useMask) {
HXLINE(  62)														_hx_tmp = ::hx::IsNotNull( pixelShape->mask );
            													}
            													else {
HXLINE(  62)														_hx_tmp = false;
            													}
HXDLIN(  62)													if (_hx_tmp) {
HXLINE(  62)														::pixelimage::ImageStruct this1 = pixelShape->mask;
HXDLIN(  62)														::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  62)														int index;
HXDLIN(  62)														if (this1->useVirtualPos) {
HXLINE(  62)															index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            														}
            														else {
HXLINE(  62)															index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            														}
HXDLIN(  62)														::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  62)														int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  62)														int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  62)														int v;
HXDLIN(  62)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  62)															v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            														}
            														else {
HXLINE(  62)															v = c;
            														}
HXDLIN(  62)														int this3 = v;
HXDLIN(  62)														int maskPixel = this3;
HXDLIN(  62)														int this4 = col;
HXDLIN(  62)														int this5 = this4;
HXDLIN(  62)														if ((maskPixel == 0)) {
HXLINE(  62)															int this1 = this5;
HXDLIN(  62)															col = this1;
            														}
            														else {
HXLINE(  62)															Float m0;
HXDLIN(  62)															int this1 = ((maskPixel >> 24) & 255);
HXDLIN(  62)															if ((this1 == 0)) {
HXLINE(  62)																m0 = ((Float)0.);
            															}
            															else {
HXLINE(  62)																m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            															}
HXDLIN(  62)															Float m1;
HXDLIN(  62)															int this2 = ((maskPixel >> 16) & 255);
HXDLIN(  62)															if ((this2 == 0)) {
HXLINE(  62)																m1 = ((Float)0.);
            															}
            															else {
HXLINE(  62)																m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            															}
HXDLIN(  62)															Float m2;
HXDLIN(  62)															int this3 = ((maskPixel >> 8) & 255);
HXDLIN(  62)															if ((this3 == 0)) {
HXLINE(  62)																m2 = ((Float)0.);
            															}
            															else {
HXLINE(  62)																m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            															}
HXDLIN(  62)															Float m3;
HXDLIN(  62)															int this4 = (maskPixel & 255);
HXDLIN(  62)															if ((this4 == 0)) {
HXLINE(  62)																m3 = ((Float)0.);
            															}
            															else {
HXLINE(  62)																m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            															}
HXDLIN(  62)															int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN(  62)															int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN(  62)															int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN(  62)															int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN(  62)															col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            														}
            													}
HXDLIN(  62)													if ((col != 0)) {
HXLINE(  62)														int x = (dx - rectLeft);
HXDLIN(  62)														int y = (dy - rectTop);
HXDLIN(  62)														int this1 = col;
HXDLIN(  62)														int c = this1;
HXDLIN(  62)														bool _hx_tmp;
HXDLIN(  62)														if ((((c >> 24) & 255) < 254)) {
HXLINE(  62)															_hx_tmp = undoImage->transparent;
            														}
            														else {
HXLINE(  62)															_hx_tmp = false;
            														}
HXDLIN(  62)														if (_hx_tmp) {
HXLINE(  62)															int location;
HXDLIN(  62)															if (undoImage->useVirtualPos) {
HXLINE(  62)																location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            															}
            															else {
HXLINE(  62)																location = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            															}
HXDLIN(  62)															::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  62)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  62)															int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  62)															int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  62)															int this3 = this2;
HXDLIN(  62)															int this4;
HXDLIN(  62)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  62)																this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            															}
            															else {
HXLINE(  62)																this4 = this3;
            															}
HXDLIN(  62)															Float a1;
HXDLIN(  62)															int this5 = ((this4 >> 24) & 255);
HXDLIN(  62)															if ((this5 == 0)) {
HXLINE(  62)																a1 = ((Float)0.);
            															}
            															else {
HXLINE(  62)																a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            															}
HXDLIN(  62)															Float r1;
HXDLIN(  62)															int this6 = ((this4 >> 16) & 255);
HXDLIN(  62)															if ((this6 == 0)) {
HXLINE(  62)																r1 = ((Float)0.);
            															}
            															else {
HXLINE(  62)																r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            															}
HXDLIN(  62)															Float g1;
HXDLIN(  62)															int this7 = ((this4 >> 8) & 255);
HXDLIN(  62)															if ((this7 == 0)) {
HXLINE(  62)																g1 = ((Float)0.);
            															}
            															else {
HXLINE(  62)																g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            															}
HXDLIN(  62)															Float b1;
HXDLIN(  62)															int this8 = (this4 & 255);
HXDLIN(  62)															if ((this8 == 0)) {
HXLINE(  62)																b1 = ((Float)0.);
            															}
            															else {
HXLINE(  62)																b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            															}
HXDLIN(  62)															Float a2;
HXDLIN(  62)															int this9 = ((col >> 24) & 255);
HXDLIN(  62)															if ((this9 == 0)) {
HXLINE(  62)																a2 = ((Float)0.);
            															}
            															else {
HXLINE(  62)																a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            															}
HXDLIN(  62)															Float r2;
HXDLIN(  62)															int this10 = ((col >> 16) & 255);
HXDLIN(  62)															if ((this10 == 0)) {
HXLINE(  62)																r2 = ((Float)0.);
            															}
            															else {
HXLINE(  62)																r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            															}
HXDLIN(  62)															Float g2;
HXDLIN(  62)															int this11 = ((col >> 8) & 255);
HXDLIN(  62)															if ((this11 == 0)) {
HXLINE(  62)																g2 = ((Float)0.);
            															}
            															else {
HXLINE(  62)																g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            															}
HXDLIN(  62)															Float b2;
HXDLIN(  62)															int this12 = (col & 255);
HXDLIN(  62)															if ((this12 == 0)) {
HXLINE(  62)																b2 = ((Float)0.);
            															}
            															else {
HXLINE(  62)																b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            															}
HXDLIN(  62)															Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  62)															int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  62)															int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  62)															int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  62)															int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  62)															int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  62)															{
HXLINE(  62)																::haxe::io::ArrayBufferViewImpl this13 = undoImage->image;
HXDLIN(  62)																int value;
HXDLIN(  62)																if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  62)																	value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																}
            																else {
HXLINE(  62)																	value = blended;
            																}
HXDLIN(  62)																bool _hx_tmp;
HXDLIN(  62)																if ((location >= 0)) {
HXLINE(  62)																	_hx_tmp = (location < (this13->byteLength >> 2));
            																}
            																else {
HXLINE(  62)																	_hx_tmp = false;
            																}
HXDLIN(  62)																if (_hx_tmp) {
HXLINE(  62)																	::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  62)																	int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  62)																	_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  62)																	_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  62)																	_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  62)																	_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																}
            															}
            														}
            														else {
HXLINE(  62)															::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  62)															int index;
HXDLIN(  62)															if (undoImage->useVirtualPos) {
HXLINE(  62)																index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            															}
            															else {
HXLINE(  62)																index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            															}
HXDLIN(  62)															int value;
HXDLIN(  62)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  62)																value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            															}
            															else {
HXLINE(  62)																value = c;
            															}
HXDLIN(  62)															bool _hx_tmp;
HXDLIN(  62)															if ((index >= 0)) {
HXLINE(  62)																_hx_tmp = (index < (this1->byteLength >> 2));
            															}
            															else {
HXLINE(  62)																_hx_tmp = false;
            															}
HXDLIN(  62)															if (_hx_tmp) {
HXLINE(  62)																::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  62)																int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  62)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  62)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  62)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  62)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
            													else {
HXLINE(  62)														if (forceClear) {
HXLINE(  62)															::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  62)															int x = (dx - rectLeft);
HXDLIN(  62)															int y = (dy - rectTop);
HXDLIN(  62)															int index;
HXDLIN(  62)															if (undoImage->useVirtualPos) {
HXLINE(  62)																index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            															}
            															else {
HXLINE(  62)																index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            															}
HXDLIN(  62)															bool _hx_tmp;
HXDLIN(  62)															if ((index >= 0)) {
HXLINE(  62)																_hx_tmp = (index < (this1->byteLength >> 2));
            															}
            															else {
HXLINE(  62)																_hx_tmp = false;
            															}
HXDLIN(  62)															if (_hx_tmp) {
HXLINE(  62)																::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  62)																int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  62)																_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  62)																_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  62)																_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  62)																_this->b[(pos + 3)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  62)							bool foundY = false;
HXDLIN(  62)							Float s = ((Float)0.);
HXDLIN(  62)							Float t = ((Float)0.);
HXDLIN(  62)							Float sxx = ((Float)0.);
HXDLIN(  62)							Float txx = ((Float)0.);
HXDLIN(  62)							{
HXLINE(  62)								int _g_min = xIter3->start;
HXDLIN(  62)								int _g_max = xIter3->max;
HXDLIN(  62)								while((_g_min < _g_max)){
HXLINE(  62)									_g_min = (_g_min + 1);
HXDLIN(  62)									int x = (_g_min - 1);
HXLINE( 223)									sxx = (sx * ( (Float)(x) ));
HXLINE( 224)									txx = (tx * ( (Float)(x) ));
HXLINE( 225)									foundY = false;
HXLINE(  62)									{
HXLINE(  62)										int _g_min1 = yIter3->start;
HXDLIN(  62)										int _g_max = yIter3->max;
HXDLIN(  62)										while((_g_min1 < _g_max)){
HXLINE(  62)											_g_min1 = (_g_min1 + 1);
HXDLIN(  62)											int y = (_g_min1 - 1);
HXLINE( 227)											s = ((s0 + sxx) + (sy * ( (Float)(y) )));
HXLINE( 228)											t = ((t0 + txx) + (ty * ( (Float)(y) )));
HXLINE(  62)											bool _hx_tmp;
HXDLIN(  62)											if (!((s <= 0))) {
HXLINE(  62)												_hx_tmp = (t <= 0);
            											}
            											else {
HXLINE(  62)												_hx_tmp = true;
            											}
HXDLIN(  62)											if (_hx_tmp) {
HXLINE(  62)												if (foundY) {
HXLINE(  62)													goto _hx_goto_10;
            												}
            											}
            											else {
HXLINE(  62)												if (((s + t) < A)) {
HXLINE(  62)													int x1 = ::hx::Mod(x,tileImage->width);
HXDLIN(  62)													int y1 = ::hx::Mod(y,tileImage->height);
HXDLIN(  62)													::haxe::io::ArrayBufferViewImpl this1 = tileImage->image;
HXDLIN(  62)													int index;
HXDLIN(  62)													if (tileImage->useVirtualPos) {
HXLINE(  62)														index = ::Std_obj::_hx_int(((((( (Float)(y1) ) - tileImage->virtualY) * ( (Float)(tileImage->width) )) + x1) - tileImage->virtualX));
            													}
            													else {
HXLINE(  62)														index = ::Std_obj::_hx_int(( (Float)(((y1 * tileImage->width) + x1)) ));
            													}
HXDLIN(  62)													::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  62)													int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  62)													int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  62)													int color;
HXDLIN(  62)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  62)														color = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE(  62)														color = c;
            													}
HXDLIN(  62)													{
HXLINE(  62)														int this2 = color;
HXDLIN(  62)														int c1 = this2;
HXDLIN(  62)														bool _hx_tmp;
HXDLIN(  62)														if ((((c1 >> 24) & 255) < 254)) {
HXLINE(  62)															_hx_tmp = pixelShape->transparent;
            														}
            														else {
HXLINE(  62)															_hx_tmp = false;
            														}
HXDLIN(  62)														if (_hx_tmp) {
HXLINE(  62)															int location;
HXDLIN(  62)															if (pixelShape->useVirtualPos) {
HXLINE(  62)																location = ::Std_obj::_hx_int(((((( (Float)(y) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x) - pixelShape->virtualX));
            															}
            															else {
HXLINE(  62)																location = ::Std_obj::_hx_int(( (Float)(((y * pixelShape->width) + x)) ));
            															}
HXDLIN(  62)															::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  62)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  62)															int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  62)															int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  62)															int this3 = this2;
HXDLIN(  62)															int this4;
HXDLIN(  62)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  62)																this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            															}
            															else {
HXLINE(  62)																this4 = this3;
            															}
HXDLIN(  62)															Float a1;
HXDLIN(  62)															int this5 = ((this4 >> 24) & 255);
HXDLIN(  62)															if ((this5 == 0)) {
HXLINE(  62)																a1 = ((Float)0.);
            															}
            															else {
HXLINE(  62)																a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            															}
HXDLIN(  62)															Float r1;
HXDLIN(  62)															int this6 = ((this4 >> 16) & 255);
HXDLIN(  62)															if ((this6 == 0)) {
HXLINE(  62)																r1 = ((Float)0.);
            															}
            															else {
HXLINE(  62)																r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            															}
HXDLIN(  62)															Float g1;
HXDLIN(  62)															int this7 = ((this4 >> 8) & 255);
HXDLIN(  62)															if ((this7 == 0)) {
HXLINE(  62)																g1 = ((Float)0.);
            															}
            															else {
HXLINE(  62)																g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            															}
HXDLIN(  62)															Float b1;
HXDLIN(  62)															int this8 = (this4 & 255);
HXDLIN(  62)															if ((this8 == 0)) {
HXLINE(  62)																b1 = ((Float)0.);
            															}
            															else {
HXLINE(  62)																b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            															}
HXDLIN(  62)															Float a2;
HXDLIN(  62)															int this9 = ((color >> 24) & 255);
HXDLIN(  62)															if ((this9 == 0)) {
HXLINE(  62)																a2 = ((Float)0.);
            															}
            															else {
HXLINE(  62)																a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            															}
HXDLIN(  62)															Float r2;
HXDLIN(  62)															int this10 = ((color >> 16) & 255);
HXDLIN(  62)															if ((this10 == 0)) {
HXLINE(  62)																r2 = ((Float)0.);
            															}
            															else {
HXLINE(  62)																r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            															}
HXDLIN(  62)															Float g2;
HXDLIN(  62)															int this11 = ((color >> 8) & 255);
HXDLIN(  62)															if ((this11 == 0)) {
HXLINE(  62)																g2 = ((Float)0.);
            															}
            															else {
HXLINE(  62)																g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            															}
HXDLIN(  62)															Float b2;
HXDLIN(  62)															int this12 = (color & 255);
HXDLIN(  62)															if ((this12 == 0)) {
HXLINE(  62)																b2 = ((Float)0.);
            															}
            															else {
HXLINE(  62)																b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            															}
HXDLIN(  62)															Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  62)															int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  62)															int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  62)															int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  62)															int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  62)															int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  62)															{
HXLINE(  62)																::haxe::io::ArrayBufferViewImpl this13 = pixelShape->image;
HXDLIN(  62)																int value;
HXDLIN(  62)																if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  62)																	value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																}
            																else {
HXLINE(  62)																	value = blended;
            																}
HXDLIN(  62)																bool _hx_tmp;
HXDLIN(  62)																if ((location >= 0)) {
HXLINE(  62)																	_hx_tmp = (location < (this13->byteLength >> 2));
            																}
            																else {
HXLINE(  62)																	_hx_tmp = false;
            																}
HXDLIN(  62)																if (_hx_tmp) {
HXLINE(  62)																	::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  62)																	int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  62)																	_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  62)																	_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  62)																	_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  62)																	_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																}
            															}
            														}
            														else {
HXLINE(  62)															::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  62)															int index;
HXDLIN(  62)															if (pixelShape->useVirtualPos) {
HXLINE(  62)																index = ::Std_obj::_hx_int(((((( (Float)(y) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x) - pixelShape->virtualX));
            															}
            															else {
HXLINE(  62)																index = ::Std_obj::_hx_int(( (Float)(((y * pixelShape->width) + x)) ));
            															}
HXDLIN(  62)															int value;
HXDLIN(  62)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  62)																value = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            															}
            															else {
HXLINE(  62)																value = c1;
            															}
HXDLIN(  62)															bool _hx_tmp;
HXDLIN(  62)															if ((index >= 0)) {
HXLINE(  62)																_hx_tmp = (index < (this1->byteLength >> 2));
            															}
            															else {
HXLINE(  62)																_hx_tmp = false;
            															}
HXDLIN(  62)															if (_hx_tmp) {
HXLINE(  62)																::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  62)																int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  62)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  62)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  62)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  62)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
HXLINE( 237)													foundY = true;
            												}
            												else {
HXLINE(  62)													if (foundY) {
HXLINE(  62)														goto _hx_goto_10;
            													}
            												}
            											}
            										}
            										_hx_goto_10:;
            									}
            								}
            							}
HXDLIN(  62)							if ((hasHit == false)) {
HXLINE(  62)								::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,ax,ay,bx1,by1,cx1,cy1,true);
HXDLIN(  62)								if (hasUndo) {
HXLINE(  62)									v->undoImage = undoImage;
HXDLIN(  62)									v->undoX = xIter3->start;
HXDLIN(  62)									v->undoY = yIter3->start;
            								}
            							}
            						}
            					}
HXDLIN(  62)					{
HXLINE(  62)						Float bx2 = cx;
HXDLIN(  62)						Float by2 = cy;
HXDLIN(  62)						Float cx2 = dx;
HXDLIN(  62)						Float cy2 = dy;
HXDLIN(  62)						bool adjustWinding1 = (((((bx * by2) - (bx2 * by)) + ((bx2 * cy2) - (cx2 * by2))) + ((cx2 * by) - (bx * cy2))) > 0);
HXDLIN(  62)						if (!(adjustWinding1)) {
HXLINE(  62)							Float bx_ = bx2;
HXDLIN(  62)							Float by_ = by2;
HXLINE( 188)							bx2 = cx2;
HXLINE( 189)							by2 = cy2;
HXLINE( 190)							cx2 = bx_;
HXLINE( 191)							cy2 = by_;
            						}
HXLINE(  62)						{
HXLINE(  62)							bool hasUndo1 = false;
HXDLIN(  62)							Float s01 = ((by * cx2) - (bx * cy2));
HXDLIN(  62)							Float sx1 = (cy2 - by);
HXDLIN(  62)							Float sy1 = (bx - cx2);
HXDLIN(  62)							Float t01 = ((bx * by2) - (by * bx2));
HXDLIN(  62)							Float tx1 = (by - by2);
HXDLIN(  62)							Float ty1 = (bx2 - bx);
HXDLIN(  62)							Float A1 = ((((-(by2) * cx2) + (by * (-(bx2) + cx2))) + (bx * (by2 - cy2))) + (bx2 * cy2));
HXDLIN(  62)							::pixelimage::iter::IntIterStart xIter31;
HXDLIN(  62)							if ((bx > bx2)) {
HXLINE(  62)								if ((bx > cx2)) {
HXLINE(  62)									int min;
HXDLIN(  62)									if ((bx2 > cx2)) {
HXLINE(  62)										min = ::Math_obj::floor(cx2);
            									}
            									else {
HXLINE(  62)										min = ::Math_obj::floor(bx2);
            									}
HXDLIN(  62)									int ii_min = min;
HXDLIN(  62)									int ii_max = ::Math_obj::ceil(bx);
HXDLIN(  62)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  62)									xIter31 = this1;
            								}
            								else {
HXLINE(  62)									int ii_min = ::Math_obj::floor(bx2);
HXDLIN(  62)									int ii_max = ::Math_obj::ceil(cx2);
HXDLIN(  62)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  62)									xIter31 = this1;
            								}
            							}
            							else {
HXLINE(  62)								if ((bx2 > cx2)) {
HXLINE(  62)									int min;
HXDLIN(  62)									if ((bx > cx2)) {
HXLINE(  62)										min = ::Math_obj::floor(cx2);
            									}
            									else {
HXLINE(  62)										min = ::Math_obj::ceil(bx);
            									}
HXDLIN(  62)									int ii_min = min;
HXDLIN(  62)									int ii_max = ::Math_obj::ceil(bx2);
HXDLIN(  62)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  62)									xIter31 = this1;
            								}
            								else {
HXLINE(  62)									int ii_min = ::Math_obj::floor(bx);
HXDLIN(  62)									int ii_max = ::Math_obj::ceil(cx2);
HXDLIN(  62)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  62)									xIter31 = this1;
            								}
            							}
HXDLIN(  62)							::pixelimage::iter::IntIterStart yIter31;
HXDLIN(  62)							if ((by > by2)) {
HXLINE(  62)								if ((by > cy2)) {
HXLINE(  62)									int min;
HXDLIN(  62)									if ((by2 > cy2)) {
HXLINE(  62)										min = ::Math_obj::floor(cy2);
            									}
            									else {
HXLINE(  62)										min = ::Math_obj::floor(by2);
            									}
HXDLIN(  62)									int ii_min = min;
HXDLIN(  62)									int ii_max = ::Math_obj::ceil(by);
HXDLIN(  62)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  62)									yIter31 = this1;
            								}
            								else {
HXLINE(  62)									int ii_min = ::Math_obj::floor(by2);
HXDLIN(  62)									int ii_max = ::Math_obj::ceil(cy2);
HXDLIN(  62)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  62)									yIter31 = this1;
            								}
            							}
            							else {
HXLINE(  62)								if ((by2 > cy2)) {
HXLINE(  62)									int min;
HXDLIN(  62)									if ((by > cy2)) {
HXLINE(  62)										min = ::Math_obj::floor(cy2);
            									}
            									else {
HXLINE(  62)										min = ::Math_obj::ceil(by);
            									}
HXDLIN(  62)									int ii_min = min;
HXDLIN(  62)									int ii_max = ::Math_obj::ceil(by2);
HXDLIN(  62)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  62)									yIter31 = this1;
            								}
            								else {
HXLINE(  62)									int ii_min = ::Math_obj::floor(by);
HXDLIN(  62)									int ii_max = ::Math_obj::ceil(cy2);
HXDLIN(  62)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  62)									yIter31 = this1;
            								}
            							}
HXDLIN(  62)							::pixelimage::ImageStruct undoImage1 = null();
HXDLIN(  62)							if (hasUndo1) {
HXLINE(  62)								int w = ((xIter31->max - xIter31->start) + 1);
HXDLIN(  62)								int h = ((yIter31->max - yIter31->start) + 1);
HXDLIN(  62)								int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN(  62)								::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  62)								::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN(  62)								::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN(  62)								undoImage1 = this3;
HXDLIN(  62)								{
HXLINE(  62)									int rectLeft = xIter31->start;
HXDLIN(  62)									int rectTop = yIter31->start;
HXDLIN(  62)									int rectRight = xIter31->max;
HXDLIN(  62)									bool forceClear = false;
HXDLIN(  62)									{
HXLINE(  62)										int _g = rectTop;
HXDLIN(  62)										int _g1 = yIter31->max;
HXDLIN(  62)										while((_g < _g1)){
HXLINE(  62)											_g = (_g + 1);
HXDLIN(  62)											int dy = (_g - 1);
HXDLIN(  62)											{
HXLINE(  62)												int _g1 = rectLeft;
HXDLIN(  62)												int _g2 = rectRight;
HXDLIN(  62)												while((_g1 < _g2)){
HXLINE(  62)													_g1 = (_g1 + 1);
HXDLIN(  62)													int dx = (_g1 - 1);
HXDLIN(  62)													::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  62)													int index;
HXDLIN(  62)													if (pixelShape->useVirtualPos) {
HXLINE(  62)														index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + dx) - pixelShape->virtualX));
            													}
            													else {
HXLINE(  62)														index = ::Std_obj::_hx_int(( (Float)(((dy * pixelShape->width) + dx)) ));
            													}
HXDLIN(  62)													::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  62)													int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  62)													int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  62)													int col;
HXDLIN(  62)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  62)														col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE(  62)														col = c;
            													}
HXDLIN(  62)													bool _hx_tmp;
HXDLIN(  62)													if (pixelShape->useMask) {
HXLINE(  62)														_hx_tmp = ::hx::IsNotNull( pixelShape->mask );
            													}
            													else {
HXLINE(  62)														_hx_tmp = false;
            													}
HXDLIN(  62)													if (_hx_tmp) {
HXLINE(  62)														::pixelimage::ImageStruct this1 = pixelShape->mask;
HXDLIN(  62)														::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  62)														int index;
HXDLIN(  62)														if (this1->useVirtualPos) {
HXLINE(  62)															index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            														}
            														else {
HXLINE(  62)															index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            														}
HXDLIN(  62)														::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  62)														int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  62)														int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  62)														int v;
HXDLIN(  62)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  62)															v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            														}
            														else {
HXLINE(  62)															v = c;
            														}
HXDLIN(  62)														int this3 = v;
HXDLIN(  62)														int maskPixel = this3;
HXDLIN(  62)														int this4 = col;
HXDLIN(  62)														int this5 = this4;
HXDLIN(  62)														if ((maskPixel == 0)) {
HXLINE(  62)															int this1 = this5;
HXDLIN(  62)															col = this1;
            														}
            														else {
HXLINE(  62)															Float m0;
HXDLIN(  62)															int this1 = ((maskPixel >> 24) & 255);
HXDLIN(  62)															if ((this1 == 0)) {
HXLINE(  62)																m0 = ((Float)0.);
            															}
            															else {
HXLINE(  62)																m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            															}
HXDLIN(  62)															Float m1;
HXDLIN(  62)															int this2 = ((maskPixel >> 16) & 255);
HXDLIN(  62)															if ((this2 == 0)) {
HXLINE(  62)																m1 = ((Float)0.);
            															}
            															else {
HXLINE(  62)																m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            															}
HXDLIN(  62)															Float m2;
HXDLIN(  62)															int this3 = ((maskPixel >> 8) & 255);
HXDLIN(  62)															if ((this3 == 0)) {
HXLINE(  62)																m2 = ((Float)0.);
            															}
            															else {
HXLINE(  62)																m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            															}
HXDLIN(  62)															Float m3;
HXDLIN(  62)															int this4 = (maskPixel & 255);
HXDLIN(  62)															if ((this4 == 0)) {
HXLINE(  62)																m3 = ((Float)0.);
            															}
            															else {
HXLINE(  62)																m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            															}
HXDLIN(  62)															int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN(  62)															int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN(  62)															int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN(  62)															int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN(  62)															col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            														}
            													}
HXDLIN(  62)													if ((col != 0)) {
HXLINE(  62)														int x = (dx - rectLeft);
HXDLIN(  62)														int y = (dy - rectTop);
HXDLIN(  62)														int this1 = col;
HXDLIN(  62)														int c = this1;
HXDLIN(  62)														bool _hx_tmp;
HXDLIN(  62)														if ((((c >> 24) & 255) < 254)) {
HXLINE(  62)															_hx_tmp = undoImage1->transparent;
            														}
            														else {
HXLINE(  62)															_hx_tmp = false;
            														}
HXDLIN(  62)														if (_hx_tmp) {
HXLINE(  62)															int location;
HXDLIN(  62)															if (undoImage1->useVirtualPos) {
HXLINE(  62)																location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            															}
            															else {
HXLINE(  62)																location = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            															}
HXDLIN(  62)															::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN(  62)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  62)															int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  62)															int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  62)															int this3 = this2;
HXDLIN(  62)															int this4;
HXDLIN(  62)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  62)																this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            															}
            															else {
HXLINE(  62)																this4 = this3;
            															}
HXDLIN(  62)															Float a1;
HXDLIN(  62)															int this5 = ((this4 >> 24) & 255);
HXDLIN(  62)															if ((this5 == 0)) {
HXLINE(  62)																a1 = ((Float)0.);
            															}
            															else {
HXLINE(  62)																a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            															}
HXDLIN(  62)															Float r1;
HXDLIN(  62)															int this6 = ((this4 >> 16) & 255);
HXDLIN(  62)															if ((this6 == 0)) {
HXLINE(  62)																r1 = ((Float)0.);
            															}
            															else {
HXLINE(  62)																r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            															}
HXDLIN(  62)															Float g1;
HXDLIN(  62)															int this7 = ((this4 >> 8) & 255);
HXDLIN(  62)															if ((this7 == 0)) {
HXLINE(  62)																g1 = ((Float)0.);
            															}
            															else {
HXLINE(  62)																g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            															}
HXDLIN(  62)															Float b1;
HXDLIN(  62)															int this8 = (this4 & 255);
HXDLIN(  62)															if ((this8 == 0)) {
HXLINE(  62)																b1 = ((Float)0.);
            															}
            															else {
HXLINE(  62)																b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            															}
HXDLIN(  62)															Float a2;
HXDLIN(  62)															int this9 = ((col >> 24) & 255);
HXDLIN(  62)															if ((this9 == 0)) {
HXLINE(  62)																a2 = ((Float)0.);
            															}
            															else {
HXLINE(  62)																a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            															}
HXDLIN(  62)															Float r2;
HXDLIN(  62)															int this10 = ((col >> 16) & 255);
HXDLIN(  62)															if ((this10 == 0)) {
HXLINE(  62)																r2 = ((Float)0.);
            															}
            															else {
HXLINE(  62)																r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            															}
HXDLIN(  62)															Float g2;
HXDLIN(  62)															int this11 = ((col >> 8) & 255);
HXDLIN(  62)															if ((this11 == 0)) {
HXLINE(  62)																g2 = ((Float)0.);
            															}
            															else {
HXLINE(  62)																g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            															}
HXDLIN(  62)															Float b2;
HXDLIN(  62)															int this12 = (col & 255);
HXDLIN(  62)															if ((this12 == 0)) {
HXLINE(  62)																b2 = ((Float)0.);
            															}
            															else {
HXLINE(  62)																b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            															}
HXDLIN(  62)															Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  62)															int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  62)															int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  62)															int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  62)															int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  62)															int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  62)															{
HXLINE(  62)																::haxe::io::ArrayBufferViewImpl this13 = undoImage1->image;
HXDLIN(  62)																int value;
HXDLIN(  62)																if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  62)																	value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																}
            																else {
HXLINE(  62)																	value = blended;
            																}
HXDLIN(  62)																bool _hx_tmp;
HXDLIN(  62)																if ((location >= 0)) {
HXLINE(  62)																	_hx_tmp = (location < (this13->byteLength >> 2));
            																}
            																else {
HXLINE(  62)																	_hx_tmp = false;
            																}
HXDLIN(  62)																if (_hx_tmp) {
HXLINE(  62)																	::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  62)																	int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  62)																	_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  62)																	_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  62)																	_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  62)																	_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																}
            															}
            														}
            														else {
HXLINE(  62)															::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN(  62)															int index;
HXDLIN(  62)															if (undoImage1->useVirtualPos) {
HXLINE(  62)																index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            															}
            															else {
HXLINE(  62)																index = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            															}
HXDLIN(  62)															int value;
HXDLIN(  62)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  62)																value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            															}
            															else {
HXLINE(  62)																value = c;
            															}
HXDLIN(  62)															bool _hx_tmp;
HXDLIN(  62)															if ((index >= 0)) {
HXLINE(  62)																_hx_tmp = (index < (this1->byteLength >> 2));
            															}
            															else {
HXLINE(  62)																_hx_tmp = false;
            															}
HXDLIN(  62)															if (_hx_tmp) {
HXLINE(  62)																::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  62)																int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  62)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  62)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  62)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  62)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
            													else {
HXLINE(  62)														if (forceClear) {
HXLINE(  62)															::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN(  62)															int x = (dx - rectLeft);
HXDLIN(  62)															int y = (dy - rectTop);
HXDLIN(  62)															int index;
HXDLIN(  62)															if (undoImage1->useVirtualPos) {
HXLINE(  62)																index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            															}
            															else {
HXLINE(  62)																index = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            															}
HXDLIN(  62)															bool _hx_tmp;
HXDLIN(  62)															if ((index >= 0)) {
HXLINE(  62)																_hx_tmp = (index < (this1->byteLength >> 2));
            															}
            															else {
HXLINE(  62)																_hx_tmp = false;
            															}
HXDLIN(  62)															if (_hx_tmp) {
HXLINE(  62)																::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  62)																int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  62)																_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  62)																_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  62)																_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  62)																_this->b[(pos + 3)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN(  62)							bool foundY1 = false;
HXDLIN(  62)							Float s1 = ((Float)0.);
HXDLIN(  62)							Float t1 = ((Float)0.);
HXDLIN(  62)							Float sxx1 = ((Float)0.);
HXDLIN(  62)							Float txx1 = ((Float)0.);
HXDLIN(  62)							{
HXLINE(  62)								int _g_min1 = xIter31->start;
HXDLIN(  62)								int _g_max1 = xIter31->max;
HXDLIN(  62)								while((_g_min1 < _g_max1)){
HXLINE(  62)									_g_min1 = (_g_min1 + 1);
HXDLIN(  62)									int x = (_g_min1 - 1);
HXLINE( 223)									sxx1 = (sx1 * ( (Float)(x) ));
HXLINE( 224)									txx1 = (tx1 * ( (Float)(x) ));
HXLINE( 225)									foundY1 = false;
HXLINE(  62)									{
HXLINE(  62)										int _g_min = yIter31->start;
HXDLIN(  62)										int _g_max = yIter31->max;
HXDLIN(  62)										while((_g_min < _g_max)){
HXLINE(  62)											_g_min = (_g_min + 1);
HXDLIN(  62)											int y = (_g_min - 1);
HXLINE( 227)											s1 = ((s01 + sxx1) + (sy1 * ( (Float)(y) )));
HXLINE( 228)											t1 = ((t01 + txx1) + (ty1 * ( (Float)(y) )));
HXLINE(  62)											bool _hx_tmp;
HXDLIN(  62)											if (!((s1 <= 0))) {
HXLINE(  62)												_hx_tmp = (t1 <= 0);
            											}
            											else {
HXLINE(  62)												_hx_tmp = true;
            											}
HXDLIN(  62)											if (_hx_tmp) {
HXLINE(  62)												if (foundY1) {
HXLINE(  62)													goto _hx_goto_14;
            												}
            											}
            											else {
HXLINE(  62)												if (((s1 + t1) < A1)) {
HXLINE(  62)													int x1 = ::hx::Mod(x,tileImage->width);
HXDLIN(  62)													int y1 = ::hx::Mod(y,tileImage->height);
HXDLIN(  62)													::haxe::io::ArrayBufferViewImpl this1 = tileImage->image;
HXDLIN(  62)													int index;
HXDLIN(  62)													if (tileImage->useVirtualPos) {
HXLINE(  62)														index = ::Std_obj::_hx_int(((((( (Float)(y1) ) - tileImage->virtualY) * ( (Float)(tileImage->width) )) + x1) - tileImage->virtualX));
            													}
            													else {
HXLINE(  62)														index = ::Std_obj::_hx_int(( (Float)(((y1 * tileImage->width) + x1)) ));
            													}
HXDLIN(  62)													::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  62)													int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  62)													int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  62)													int color;
HXDLIN(  62)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  62)														color = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE(  62)														color = c;
            													}
HXDLIN(  62)													{
HXLINE(  62)														int this2 = color;
HXDLIN(  62)														int c1 = this2;
HXDLIN(  62)														bool _hx_tmp;
HXDLIN(  62)														if ((((c1 >> 24) & 255) < 254)) {
HXLINE(  62)															_hx_tmp = pixelShape->transparent;
            														}
            														else {
HXLINE(  62)															_hx_tmp = false;
            														}
HXDLIN(  62)														if (_hx_tmp) {
HXLINE(  62)															int location;
HXDLIN(  62)															if (pixelShape->useVirtualPos) {
HXLINE(  62)																location = ::Std_obj::_hx_int(((((( (Float)(y) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x) - pixelShape->virtualX));
            															}
            															else {
HXLINE(  62)																location = ::Std_obj::_hx_int(( (Float)(((y * pixelShape->width) + x)) ));
            															}
HXDLIN(  62)															::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  62)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  62)															int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  62)															int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  62)															int this3 = this2;
HXDLIN(  62)															int this4;
HXDLIN(  62)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  62)																this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            															}
            															else {
HXLINE(  62)																this4 = this3;
            															}
HXDLIN(  62)															Float a1;
HXDLIN(  62)															int this5 = ((this4 >> 24) & 255);
HXDLIN(  62)															if ((this5 == 0)) {
HXLINE(  62)																a1 = ((Float)0.);
            															}
            															else {
HXLINE(  62)																a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            															}
HXDLIN(  62)															Float r1;
HXDLIN(  62)															int this6 = ((this4 >> 16) & 255);
HXDLIN(  62)															if ((this6 == 0)) {
HXLINE(  62)																r1 = ((Float)0.);
            															}
            															else {
HXLINE(  62)																r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            															}
HXDLIN(  62)															Float g1;
HXDLIN(  62)															int this7 = ((this4 >> 8) & 255);
HXDLIN(  62)															if ((this7 == 0)) {
HXLINE(  62)																g1 = ((Float)0.);
            															}
            															else {
HXLINE(  62)																g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            															}
HXDLIN(  62)															Float b1;
HXDLIN(  62)															int this8 = (this4 & 255);
HXDLIN(  62)															if ((this8 == 0)) {
HXLINE(  62)																b1 = ((Float)0.);
            															}
            															else {
HXLINE(  62)																b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            															}
HXDLIN(  62)															Float a2;
HXDLIN(  62)															int this9 = ((color >> 24) & 255);
HXDLIN(  62)															if ((this9 == 0)) {
HXLINE(  62)																a2 = ((Float)0.);
            															}
            															else {
HXLINE(  62)																a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            															}
HXDLIN(  62)															Float r2;
HXDLIN(  62)															int this10 = ((color >> 16) & 255);
HXDLIN(  62)															if ((this10 == 0)) {
HXLINE(  62)																r2 = ((Float)0.);
            															}
            															else {
HXLINE(  62)																r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            															}
HXDLIN(  62)															Float g2;
HXDLIN(  62)															int this11 = ((color >> 8) & 255);
HXDLIN(  62)															if ((this11 == 0)) {
HXLINE(  62)																g2 = ((Float)0.);
            															}
            															else {
HXLINE(  62)																g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            															}
HXDLIN(  62)															Float b2;
HXDLIN(  62)															int this12 = (color & 255);
HXDLIN(  62)															if ((this12 == 0)) {
HXLINE(  62)																b2 = ((Float)0.);
            															}
            															else {
HXLINE(  62)																b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            															}
HXDLIN(  62)															Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  62)															int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  62)															int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  62)															int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  62)															int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  62)															int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  62)															{
HXLINE(  62)																::haxe::io::ArrayBufferViewImpl this13 = pixelShape->image;
HXDLIN(  62)																int value;
HXDLIN(  62)																if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  62)																	value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																}
            																else {
HXLINE(  62)																	value = blended;
            																}
HXDLIN(  62)																bool _hx_tmp;
HXDLIN(  62)																if ((location >= 0)) {
HXLINE(  62)																	_hx_tmp = (location < (this13->byteLength >> 2));
            																}
            																else {
HXLINE(  62)																	_hx_tmp = false;
            																}
HXDLIN(  62)																if (_hx_tmp) {
HXLINE(  62)																	::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  62)																	int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  62)																	_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  62)																	_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  62)																	_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  62)																	_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																}
            															}
            														}
            														else {
HXLINE(  62)															::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  62)															int index;
HXDLIN(  62)															if (pixelShape->useVirtualPos) {
HXLINE(  62)																index = ::Std_obj::_hx_int(((((( (Float)(y) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x) - pixelShape->virtualX));
            															}
            															else {
HXLINE(  62)																index = ::Std_obj::_hx_int(( (Float)(((y * pixelShape->width) + x)) ));
            															}
HXDLIN(  62)															int value;
HXDLIN(  62)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  62)																value = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            															}
            															else {
HXLINE(  62)																value = c1;
            															}
HXDLIN(  62)															bool _hx_tmp;
HXDLIN(  62)															if ((index >= 0)) {
HXLINE(  62)																_hx_tmp = (index < (this1->byteLength >> 2));
            															}
            															else {
HXLINE(  62)																_hx_tmp = false;
            															}
HXDLIN(  62)															if (_hx_tmp) {
HXLINE(  62)																::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  62)																int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  62)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  62)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  62)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  62)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
HXLINE( 237)													foundY1 = true;
            												}
            												else {
HXLINE(  62)													if (foundY1) {
HXLINE(  62)														goto _hx_goto_14;
            													}
            												}
            											}
            										}
            										_hx_goto_14:;
            									}
            								}
            							}
HXDLIN(  62)							if ((hasHit == false)) {
HXLINE(  62)								::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,bx,by,bx2,by2,cx2,cy2,true);
HXDLIN(  62)								if (hasUndo1) {
HXLINE(  62)									v->undoImage = undoImage1;
HXDLIN(  62)									v->undoX = xIter31->start;
HXDLIN(  62)									v->undoY = yIter31->start;
            								}
            							}
            						}
            					}
HXDLIN(  62)					if ((hasHit == true)) {
HXLINE(  62)						::pixelimage::algo::HitQuad v = ::pixelimage::algo::HitQuad_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,dx,dy,true);
            					}
            				}
            			}
            		}
HXLINE(  63)		return this->super::render(pixelShape);
            	}



::hx::ObjectPtr< LinePattern_obj > LinePattern_obj::__new(::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< int >  __o_strokeColor,::hx::Null< Float >  __o_strokeWidth,::Array< ::String > strokeDashGapArray,::hx::Null< int >  __o_strokeColor0,::hx::Null< int >  __o_strokeColor1,::Array< bool > strokePatternFill, ::Dynamic strokePatternWidth, ::Dynamic strokePatternHeight,::hx::Null< bool >  __o_strokePatternAcross,::hx::Null< int >  __o_strokePatternScale,::hx::Null< Float >  __o_x1,::hx::Null< Float >  __o_y1,::hx::Null< Float >  __o_x2,::hx::Null< Float >  __o_y2) {
	::hx::ObjectPtr< LinePattern_obj > __this = new LinePattern_obj();
	__this->__construct(__o_opacity,__o_visibility,__o_strokeColor,__o_strokeWidth,strokeDashGapArray,__o_strokeColor0,__o_strokeColor1,strokePatternFill,strokePatternWidth,strokePatternHeight,__o_strokePatternAcross,__o_strokePatternScale,__o_x1,__o_y1,__o_x2,__o_y2);
	return __this;
}

::hx::ObjectPtr< LinePattern_obj > LinePattern_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< int >  __o_strokeColor,::hx::Null< Float >  __o_strokeWidth,::Array< ::String > strokeDashGapArray,::hx::Null< int >  __o_strokeColor0,::hx::Null< int >  __o_strokeColor1,::Array< bool > strokePatternFill, ::Dynamic strokePatternWidth, ::Dynamic strokePatternHeight,::hx::Null< bool >  __o_strokePatternAcross,::hx::Null< int >  __o_strokePatternScale,::hx::Null< Float >  __o_x1,::hx::Null< Float >  __o_y1,::hx::Null< Float >  __o_x2,::hx::Null< Float >  __o_y2) {
	LinePattern_obj *__this = (LinePattern_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(LinePattern_obj), true, "pixelimage.triangleGML.patternContour.LinePattern"));
	*(void **)__this = LinePattern_obj::_hx_vtable;
	__this->__construct(__o_opacity,__o_visibility,__o_strokeColor,__o_strokeWidth,strokeDashGapArray,__o_strokeColor0,__o_strokeColor1,strokePatternFill,strokePatternWidth,strokePatternHeight,__o_strokePatternAcross,__o_strokePatternScale,__o_x1,__o_y1,__o_x2,__o_y2);
	return __this;
}

LinePattern_obj::LinePattern_obj()
{
}

::hx::Val LinePattern_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"x1") ) { return ::hx::Val( x1 ); }
		if (HX_FIELD_EQ(inName,"y1") ) { return ::hx::Val( y1 ); }
		if (HX_FIELD_EQ(inName,"x2") ) { return ::hx::Val( x2 ); }
		if (HX_FIELD_EQ(inName,"y2") ) { return ::hx::Val( y2 ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { return ::hx::Val( render_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setParameter") ) { return ::hx::Val( setParameter_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val LinePattern_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"x1") ) { x1=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y1") ) { y1=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"x2") ) { x2=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y2") ) { y2=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void LinePattern_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("x1",b9,68,00,00));
	outFields->push(HX_("y1",98,69,00,00));
	outFields->push(HX_("x2",ba,68,00,00));
	outFields->push(HX_("y2",99,69,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo LinePattern_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(LinePattern_obj,x1),HX_("x1",b9,68,00,00)},
	{::hx::fsFloat,(int)offsetof(LinePattern_obj,y1),HX_("y1",98,69,00,00)},
	{::hx::fsFloat,(int)offsetof(LinePattern_obj,x2),HX_("x2",ba,68,00,00)},
	{::hx::fsFloat,(int)offsetof(LinePattern_obj,y2),HX_("y2",99,69,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *LinePattern_obj_sStaticStorageInfo = 0;
#endif

static ::String LinePattern_obj_sMemberFields[] = {
	HX_("x1",b9,68,00,00),
	HX_("y1",98,69,00,00),
	HX_("x2",ba,68,00,00),
	HX_("y2",99,69,00,00),
	HX_("setParameter",a7,f5,ff,6c),
	HX_("render",56,6b,29,05),
	::String(null()) };

::hx::Class LinePattern_obj::__mClass;

void LinePattern_obj::__register()
{
	LinePattern_obj _hx_dummy;
	LinePattern_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pixelimage.triangleGML.patternContour.LinePattern",a1,34,3e,7b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(LinePattern_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< LinePattern_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LinePattern_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LinePattern_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pixelimage
} // end namespace triangleGML
} // end namespace patternContour
