// Generated by Haxe 4.3.0-rc.1+
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_ArrayBufferViewImpl
#include <haxe/io/ArrayBufferViewImpl.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_pixelimage_ImageStruct
#include <pixelimage/ImageStruct.h>
#endif
#ifndef INCLUDED_pixelimage__Endian_Endian_Fields_
#include <pixelimage/_Endian/Endian_Fields_.h>
#endif
#ifndef INCLUDED_pixelimage_algo_HitQuad
#include <pixelimage/algo/HitQuad.h>
#endif
#ifndef INCLUDED_pixelimage_algo_HitTri
#include <pixelimage/algo/HitTri.h>
#endif
#ifndef INCLUDED_pixelimage_algo_IhitObj
#include <pixelimage/algo/IhitObj.h>
#endif
#ifndef INCLUDED_pixelimage_iter_IntIterStart
#include <pixelimage/iter/IntIterStart.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_BasicGradient
#include <pixelimage/triangleGML/coreShape/BasicGradient.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_GroupShape
#include <pixelimage/triangleGML/coreShape/GroupShape.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_ShapeInterface
#include <pixelimage/triangleGML/coreShape/ShapeInterface.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_gradientContour_LineGradient
#include <pixelimage/triangleGML/gradientContour/LineGradient.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_9dcdec5f8c67c999_24_new,"pixelimage.triangleGML.gradientContour.LineGradient","new",0x7c884203,"pixelimage.triangleGML.gradientContour.LineGradient.new","pixelimage/triangleGML/gradientContour/LineGradient.hx",24,0x0e3c38aa)
HX_LOCAL_STACK_FRAME(_hx_pos_9dcdec5f8c67c999_33_setParameter,"pixelimage.triangleGML.gradientContour.LineGradient","setParameter",0x189fb7a4,"pixelimage.triangleGML.gradientContour.LineGradient.setParameter","pixelimage/triangleGML/gradientContour/LineGradient.hx",33,0x0e3c38aa)
HX_LOCAL_STACK_FRAME(_hx_pos_9dcdec5f8c67c999_68_render,"pixelimage.triangleGML.gradientContour.LineGradient","render",0x3e4f6193,"pixelimage.triangleGML.gradientContour.LineGradient.render","pixelimage/triangleGML/gradientContour/LineGradient.hx",68,0x0e3c38aa)
namespace pixelimage{
namespace triangleGML{
namespace gradientContour{

void LineGradient_obj::__construct(::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< Float >  __o_x1,::hx::Null< Float >  __o_y1,::hx::Null< Float >  __o_x2,::hx::Null< Float >  __o_y2,::hx::Null< int >  __o_colorA,::hx::Null< int >  __o_colorB,::hx::Null< int >  __o_colorC,::hx::Null< int >  __o_colorD,::hx::Null< Float >  __o_strokeWidth){
            		Float opacity = __o_opacity.Default(((Float)1.));
            		bool visibility = __o_visibility.Default(true);
            		Float x1 = __o_x1.Default(((Float)0.));
            		Float y1 = __o_y1.Default(((Float)0.));
            		Float x2 = __o_x2.Default(((Float)0.));
            		Float y2 = __o_y2.Default(((Float)0.));
            		int colorA = __o_colorA.Default(-26368);
            		int colorB = __o_colorB.Default(-4194560);
            		int colorC = __o_colorC.Default(-16717057);
            		int colorD = __o_colorD.Default(-9240321);
            		Float strokeWidth = __o_strokeWidth.Default(((Float)1.));
            	HX_STACKFRAME(&_hx_pos_9dcdec5f8c67c999_24_new)
HXLINE(  25)		super::__construct(opacity,visibility,::Array_obj< int >::__new(4)->init(0,colorA)->init(1,colorB)->init(2,colorC)->init(3,colorD));
HXLINE(  26)		this->x1 = x1;
HXLINE(  27)		this->y1 = y1;
HXLINE(  28)		this->x2 = x2;
HXLINE(  29)		this->y2 = y2;
HXLINE(  30)		this->strokeWidth = strokeWidth;
            	}

Dynamic LineGradient_obj::__CreateEmpty() { return new LineGradient_obj; }

void *LineGradient_obj::_hx_vtable = 0;

Dynamic LineGradient_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< LineGradient_obj > _hx_result = new LineGradient_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10]);
	return _hx_result;
}

bool LineGradient_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x24e92cfb) {
		if (inClassId<=(int)0x2250a209) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2250a209;
		} else {
			return inClassId==(int)0x24e92cfb;
		}
	} else {
		return inClassId==(int)0x68e012c5;
	}
}

void LineGradient_obj::setParameter(::String name,::String value){
            	HX_STACKFRAME(&_hx_pos_9dcdec5f8c67c999_33_setParameter)
HXDLIN(  33)		::String _hx_switch_0 = name;
            		if (  (_hx_switch_0==HX_("colorA",7e,c5,86,c6)) ){
HXLINE(  45)			this->cornerColors[0] = ( (int)(::Std_obj::parseInt(value)) );
HXDLIN(  45)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("colorB",7f,c5,86,c6)) ){
HXLINE(  47)			this->cornerColors[1] = ( (int)(::Std_obj::parseInt(value)) );
HXDLIN(  47)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("colorBottom",ae,78,a1,1f)) ){
HXLINE(  62)			this->cornerColors[4] = ( (int)(::Std_obj::parseInt(value)) );
HXLINE(  63)			this->cornerColors[3] = ( (int)(::Std_obj::parseInt(value)) );
HXLINE(  61)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("colorC",80,c5,86,c6)) ){
HXLINE(  49)			this->cornerColors[2] = ( (int)(::Std_obj::parseInt(value)) );
HXDLIN(  49)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("colorD",81,c5,86,c6)) ){
HXLINE(  51)			this->cornerColors[3] = ( (int)(::Std_obj::parseInt(value)) );
HXDLIN(  51)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("colorFirst",cd,8f,09,25)) ){
HXLINE(  53)			this->cornerColors[0] = ( (int)(::Std_obj::parseInt(value)) );
HXLINE(  54)			this->cornerColors[4] = ( (int)(::Std_obj::parseInt(value)) );
HXLINE(  52)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("colorSecond",37,61,70,1e)) ){
HXLINE(  56)			this->cornerColors[2] = ( (int)(::Std_obj::parseInt(value)) );
HXLINE(  57)			this->cornerColors[3] = ( (int)(::Std_obj::parseInt(value)) );
HXLINE(  55)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("colorTop",f2,6c,f0,89)) ){
HXLINE(  59)			this->cornerColors[0] = ( (int)(::Std_obj::parseInt(value)) );
HXLINE(  60)			this->cornerColors[2] = ( (int)(::Std_obj::parseInt(value)) );
HXLINE(  58)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("strokeWidth",2e,f7,1c,e3)) ){
HXLINE(  35)			this->strokeWidth = ::Std_obj::parseFloat(value);
HXDLIN(  35)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("x1",b9,68,00,00)) ){
HXLINE(  37)			this->x1 = ::Std_obj::parseFloat(value);
HXDLIN(  37)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("x2",ba,68,00,00)) ){
HXLINE(  41)			this->x2 = ::Std_obj::parseFloat(value);
HXDLIN(  41)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("y1",98,69,00,00)) ){
HXLINE(  39)			this->y1 = ::Std_obj::parseFloat(value);
HXDLIN(  39)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("y2",99,69,00,00)) ){
HXLINE(  43)			this->y2 = ::Std_obj::parseFloat(value);
HXDLIN(  43)			goto _hx_goto_1;
            		}
            		/* default */{
HXLINE(  65)			this->super::setParameter(name,value);
            		}
            		_hx_goto_1:;
            	}


::pixelimage::ImageStruct LineGradient_obj::render(::pixelimage::ImageStruct pixelShape){
            	HX_GC_STACKFRAME(&_hx_pos_9dcdec5f8c67c999_68_render)
HXLINE(  69)		Float px = (this->x1 + this->offX);
HXLINE(  70)		Float qx = (this->x2 + this->offX);
HXLINE(  71)		Float py = (this->y1 + this->offY);
HXLINE(  72)		Float qy = (this->y2 + this->offY);
HXLINE(  73)		{
HXLINE(  73)			int colorA = this->cornerColors->__get(0);
HXDLIN(  73)			int colorB = this->cornerColors->__get(1);
HXDLIN(  73)			int colorC = this->cornerColors->__get(2);
HXDLIN(  73)			int colorD = this->cornerColors->__get(3);
HXDLIN(  73)			bool hasHit = false;
HXDLIN(  73)			Float o = (qy - py);
HXDLIN(  73)			Float a = (qx - px);
HXDLIN(  73)			Float h = ::Math_obj::pow(((o * o) + (a * a)),((Float)0.5));
HXDLIN(  73)			Float theta = ::Math_obj::atan2(o,a);
HXDLIN(  73)			{
HXLINE(  73)				 ::Dynamic debugCorners = false;
HXDLIN(  73)				if (::hx::IsNull( debugCorners )) {
HXLINE( 910)					debugCorners = false;
            				}
HXLINE(  73)				Float sin = ::Math_obj::sin(theta);
HXDLIN(  73)				Float cos = ::Math_obj::cos(theta);
HXDLIN(  73)				Float radius = (this->strokeWidth / ( (Float)(2) ));
HXDLIN(  73)				Float dx = ((Float)0.1);
HXDLIN(  73)				Float dy = radius;
HXDLIN(  73)				Float cx = h;
HXDLIN(  73)				Float cy = radius;
HXDLIN(  73)				Float bx = h;
HXDLIN(  73)				Float by = -(radius);
HXDLIN(  73)				Float ax = ((Float)0.1);
HXDLIN(  73)				Float ay = -(radius);
HXDLIN(  73)				Float temp = ((Float)0.);
HXLINE( 474)				temp = (px + ((ax * cos) - (ay * sin)));
HXLINE( 475)				ay = (py + ((ay * cos) + (ax * sin)));
HXLINE( 476)				ax = temp;
HXLINE( 478)				temp = (px + ((bx * cos) - (by * sin)));
HXLINE( 479)				by = (py + ((by * cos) + (bx * sin)));
HXLINE( 480)				bx = temp;
HXLINE( 482)				temp = (px + ((cx * cos) - (cy * sin)));
HXLINE( 483)				cy = (py + ((cy * cos) + (cx * sin)));
HXLINE( 484)				cx = temp;
HXLINE( 486)				temp = (px + ((dx * cos) - (dy * sin)));
HXLINE( 487)				dy = (py + ((dy * cos) + (dx * sin)));
HXLINE( 488)				dx = temp;
HXLINE(  73)				if (( (bool)(debugCorners) )) {
HXLINE(  73)					{
HXLINE(  73)						Float x = (ax - ((Float)6.));
HXDLIN(  73)						Float y = (ay - ((Float)6.));
HXDLIN(  73)						int p = ::Std_obj::_hx_int(x);
HXDLIN(  73)						int xx = p;
HXDLIN(  73)						int q = ::Std_obj::_hx_int(y);
HXDLIN(  73)						int maxX = ::Std_obj::_hx_int((x + 12));
HXDLIN(  73)						int maxY = ::Std_obj::_hx_int((y + 12));
HXDLIN(  73)						while(true){
HXLINE(  73)							{
HXLINE(  73)								p = (p + 1);
HXDLIN(  73)								int x = (p - 1);
HXDLIN(  73)								int this1 = colorA;
HXDLIN(  73)								int c = this1;
HXDLIN(  73)								bool _hx_tmp;
HXDLIN(  73)								if ((((c >> 24) & 255) < 254)) {
HXLINE(  73)									_hx_tmp = pixelShape->transparent;
            								}
            								else {
HXLINE(  73)									_hx_tmp = false;
            								}
HXDLIN(  73)								if (_hx_tmp) {
HXLINE(  73)									int location;
HXDLIN(  73)									if (pixelShape->useVirtualPos) {
HXLINE(  73)										location = ::Std_obj::_hx_int(((((( (Float)(q) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x) - pixelShape->virtualX));
            									}
            									else {
HXLINE(  73)										location = ::Std_obj::_hx_int(( (Float)(((q * pixelShape->width) + x)) ));
            									}
HXDLIN(  73)									::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  73)									::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)									int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  73)									int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  73)									int this3 = this2;
HXDLIN(  73)									int this4;
HXDLIN(  73)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)										this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            									}
            									else {
HXLINE(  73)										this4 = this3;
            									}
HXDLIN(  73)									Float a1;
HXDLIN(  73)									int this5 = ((this4 >> 24) & 255);
HXDLIN(  73)									if ((this5 == 0)) {
HXLINE(  73)										a1 = ((Float)0.);
            									}
            									else {
HXLINE(  73)										a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            									}
HXDLIN(  73)									Float r1;
HXDLIN(  73)									int this6 = ((this4 >> 16) & 255);
HXDLIN(  73)									if ((this6 == 0)) {
HXLINE(  73)										r1 = ((Float)0.);
            									}
            									else {
HXLINE(  73)										r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            									}
HXDLIN(  73)									Float g1;
HXDLIN(  73)									int this7 = ((this4 >> 8) & 255);
HXDLIN(  73)									if ((this7 == 0)) {
HXLINE(  73)										g1 = ((Float)0.);
            									}
            									else {
HXLINE(  73)										g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            									}
HXDLIN(  73)									Float b1;
HXDLIN(  73)									int this8 = (this4 & 255);
HXDLIN(  73)									if ((this8 == 0)) {
HXLINE(  73)										b1 = ((Float)0.);
            									}
            									else {
HXLINE(  73)										b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            									}
HXDLIN(  73)									Float a2;
HXDLIN(  73)									int this9 = ((colorA >> 24) & 255);
HXDLIN(  73)									if ((this9 == 0)) {
HXLINE(  73)										a2 = ((Float)0.);
            									}
            									else {
HXLINE(  73)										a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            									}
HXDLIN(  73)									Float r2;
HXDLIN(  73)									int this10 = ((colorA >> 16) & 255);
HXDLIN(  73)									if ((this10 == 0)) {
HXLINE(  73)										r2 = ((Float)0.);
            									}
            									else {
HXLINE(  73)										r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            									}
HXDLIN(  73)									Float g2;
HXDLIN(  73)									int this11 = ((colorA >> 8) & 255);
HXDLIN(  73)									if ((this11 == 0)) {
HXLINE(  73)										g2 = ((Float)0.);
            									}
            									else {
HXLINE(  73)										g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            									}
HXDLIN(  73)									Float b2;
HXDLIN(  73)									int this12 = (colorA & 255);
HXDLIN(  73)									if ((this12 == 0)) {
HXLINE(  73)										b2 = ((Float)0.);
            									}
            									else {
HXLINE(  73)										b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            									}
HXDLIN(  73)									Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  73)									int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  73)									int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  73)									int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  73)									int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  73)									int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  73)									{
HXLINE(  73)										::haxe::io::ArrayBufferViewImpl this13 = pixelShape->image;
HXDLIN(  73)										int value;
HXDLIN(  73)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)											value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            										}
            										else {
HXLINE(  73)											value = blended;
            										}
HXDLIN(  73)										bool _hx_tmp;
HXDLIN(  73)										if ((location >= 0)) {
HXLINE(  73)											_hx_tmp = (location < (this13->byteLength >> 2));
            										}
            										else {
HXLINE(  73)											_hx_tmp = false;
            										}
HXDLIN(  73)										if (_hx_tmp) {
HXLINE(  73)											::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  73)											int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  73)											_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  73)											_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  73)											_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  73)											_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            										}
            									}
            								}
            								else {
HXLINE(  73)									::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  73)									int index;
HXDLIN(  73)									if (pixelShape->useVirtualPos) {
HXLINE(  73)										index = ::Std_obj::_hx_int(((((( (Float)(q) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x) - pixelShape->virtualX));
            									}
            									else {
HXLINE(  73)										index = ::Std_obj::_hx_int(( (Float)(((q * pixelShape->width) + x)) ));
            									}
HXDLIN(  73)									int value;
HXDLIN(  73)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)										value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXLINE(  73)										value = c;
            									}
HXDLIN(  73)									bool _hx_tmp;
HXDLIN(  73)									if ((index >= 0)) {
HXLINE(  73)										_hx_tmp = (index < (this1->byteLength >> 2));
            									}
            									else {
HXLINE(  73)										_hx_tmp = false;
            									}
HXDLIN(  73)									if (_hx_tmp) {
HXLINE(  73)										::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)										int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  73)										_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  73)										_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  73)										_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  73)										_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            									}
            								}
            							}
HXDLIN(  73)							if ((p > maxX)) {
HXLINE( 247)								p = xx;
HXLINE(  73)								q = (q + 1);
            							}
HXDLIN(  73)							if ((q > maxY)) {
HXLINE(  73)								goto _hx_goto_3;
            							}
            						}
            						_hx_goto_3:;
            					}
HXDLIN(  73)					{
HXLINE(  73)						Float x1 = (bx - ((Float)6.));
HXDLIN(  73)						Float y1 = (by - ((Float)6.));
HXDLIN(  73)						int p1 = ::Std_obj::_hx_int(x1);
HXDLIN(  73)						int xx1 = p1;
HXDLIN(  73)						int q1 = ::Std_obj::_hx_int(y1);
HXDLIN(  73)						int maxX1 = ::Std_obj::_hx_int((x1 + 12));
HXDLIN(  73)						int maxY1 = ::Std_obj::_hx_int((y1 + 12));
HXDLIN(  73)						while(true){
HXLINE(  73)							{
HXLINE(  73)								p1 = (p1 + 1);
HXDLIN(  73)								int x = (p1 - 1);
HXDLIN(  73)								int this1 = colorB;
HXDLIN(  73)								int c = this1;
HXDLIN(  73)								bool _hx_tmp;
HXDLIN(  73)								if ((((c >> 24) & 255) < 254)) {
HXLINE(  73)									_hx_tmp = pixelShape->transparent;
            								}
            								else {
HXLINE(  73)									_hx_tmp = false;
            								}
HXDLIN(  73)								if (_hx_tmp) {
HXLINE(  73)									int location;
HXDLIN(  73)									if (pixelShape->useVirtualPos) {
HXLINE(  73)										location = ::Std_obj::_hx_int(((((( (Float)(q1) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x) - pixelShape->virtualX));
            									}
            									else {
HXLINE(  73)										location = ::Std_obj::_hx_int(( (Float)(((q1 * pixelShape->width) + x)) ));
            									}
HXDLIN(  73)									::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  73)									::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)									int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  73)									int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  73)									int this3 = this2;
HXDLIN(  73)									int this4;
HXDLIN(  73)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)										this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            									}
            									else {
HXLINE(  73)										this4 = this3;
            									}
HXDLIN(  73)									Float a1;
HXDLIN(  73)									int this5 = ((this4 >> 24) & 255);
HXDLIN(  73)									if ((this5 == 0)) {
HXLINE(  73)										a1 = ((Float)0.);
            									}
            									else {
HXLINE(  73)										a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            									}
HXDLIN(  73)									Float r1;
HXDLIN(  73)									int this6 = ((this4 >> 16) & 255);
HXDLIN(  73)									if ((this6 == 0)) {
HXLINE(  73)										r1 = ((Float)0.);
            									}
            									else {
HXLINE(  73)										r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            									}
HXDLIN(  73)									Float g1;
HXDLIN(  73)									int this7 = ((this4 >> 8) & 255);
HXDLIN(  73)									if ((this7 == 0)) {
HXLINE(  73)										g1 = ((Float)0.);
            									}
            									else {
HXLINE(  73)										g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            									}
HXDLIN(  73)									Float b1;
HXDLIN(  73)									int this8 = (this4 & 255);
HXDLIN(  73)									if ((this8 == 0)) {
HXLINE(  73)										b1 = ((Float)0.);
            									}
            									else {
HXLINE(  73)										b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            									}
HXDLIN(  73)									Float a2;
HXDLIN(  73)									int this9 = ((colorB >> 24) & 255);
HXDLIN(  73)									if ((this9 == 0)) {
HXLINE(  73)										a2 = ((Float)0.);
            									}
            									else {
HXLINE(  73)										a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            									}
HXDLIN(  73)									Float r2;
HXDLIN(  73)									int this10 = ((colorB >> 16) & 255);
HXDLIN(  73)									if ((this10 == 0)) {
HXLINE(  73)										r2 = ((Float)0.);
            									}
            									else {
HXLINE(  73)										r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            									}
HXDLIN(  73)									Float g2;
HXDLIN(  73)									int this11 = ((colorB >> 8) & 255);
HXDLIN(  73)									if ((this11 == 0)) {
HXLINE(  73)										g2 = ((Float)0.);
            									}
            									else {
HXLINE(  73)										g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            									}
HXDLIN(  73)									Float b2;
HXDLIN(  73)									int this12 = (colorB & 255);
HXDLIN(  73)									if ((this12 == 0)) {
HXLINE(  73)										b2 = ((Float)0.);
            									}
            									else {
HXLINE(  73)										b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            									}
HXDLIN(  73)									Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  73)									int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  73)									int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  73)									int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  73)									int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  73)									int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  73)									{
HXLINE(  73)										::haxe::io::ArrayBufferViewImpl this13 = pixelShape->image;
HXDLIN(  73)										int value;
HXDLIN(  73)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)											value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            										}
            										else {
HXLINE(  73)											value = blended;
            										}
HXDLIN(  73)										bool _hx_tmp;
HXDLIN(  73)										if ((location >= 0)) {
HXLINE(  73)											_hx_tmp = (location < (this13->byteLength >> 2));
            										}
            										else {
HXLINE(  73)											_hx_tmp = false;
            										}
HXDLIN(  73)										if (_hx_tmp) {
HXLINE(  73)											::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  73)											int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  73)											_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  73)											_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  73)											_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  73)											_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            										}
            									}
            								}
            								else {
HXLINE(  73)									::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  73)									int index;
HXDLIN(  73)									if (pixelShape->useVirtualPos) {
HXLINE(  73)										index = ::Std_obj::_hx_int(((((( (Float)(q1) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x) - pixelShape->virtualX));
            									}
            									else {
HXLINE(  73)										index = ::Std_obj::_hx_int(( (Float)(((q1 * pixelShape->width) + x)) ));
            									}
HXDLIN(  73)									int value;
HXDLIN(  73)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)										value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXLINE(  73)										value = c;
            									}
HXDLIN(  73)									bool _hx_tmp;
HXDLIN(  73)									if ((index >= 0)) {
HXLINE(  73)										_hx_tmp = (index < (this1->byteLength >> 2));
            									}
            									else {
HXLINE(  73)										_hx_tmp = false;
            									}
HXDLIN(  73)									if (_hx_tmp) {
HXLINE(  73)										::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)										int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  73)										_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  73)										_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  73)										_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  73)										_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            									}
            								}
            							}
HXDLIN(  73)							if ((p1 > maxX1)) {
HXLINE( 247)								p1 = xx1;
HXLINE(  73)								q1 = (q1 + 1);
            							}
HXDLIN(  73)							if ((q1 > maxY1)) {
HXLINE(  73)								goto _hx_goto_4;
            							}
            						}
            						_hx_goto_4:;
            					}
HXDLIN(  73)					{
HXLINE(  73)						Float x2 = (cx - ((Float)6.));
HXDLIN(  73)						Float y2 = (cy - ((Float)6.));
HXDLIN(  73)						int p2 = ::Std_obj::_hx_int(x2);
HXDLIN(  73)						int xx2 = p2;
HXDLIN(  73)						int q2 = ::Std_obj::_hx_int(y2);
HXDLIN(  73)						int maxX2 = ::Std_obj::_hx_int((x2 + 12));
HXDLIN(  73)						int maxY2 = ::Std_obj::_hx_int((y2 + 12));
HXDLIN(  73)						while(true){
HXLINE(  73)							{
HXLINE(  73)								p2 = (p2 + 1);
HXDLIN(  73)								int x = (p2 - 1);
HXDLIN(  73)								int this1 = colorC;
HXDLIN(  73)								int c = this1;
HXDLIN(  73)								bool _hx_tmp;
HXDLIN(  73)								if ((((c >> 24) & 255) < 254)) {
HXLINE(  73)									_hx_tmp = pixelShape->transparent;
            								}
            								else {
HXLINE(  73)									_hx_tmp = false;
            								}
HXDLIN(  73)								if (_hx_tmp) {
HXLINE(  73)									int location;
HXDLIN(  73)									if (pixelShape->useVirtualPos) {
HXLINE(  73)										location = ::Std_obj::_hx_int(((((( (Float)(q2) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x) - pixelShape->virtualX));
            									}
            									else {
HXLINE(  73)										location = ::Std_obj::_hx_int(( (Float)(((q2 * pixelShape->width) + x)) ));
            									}
HXDLIN(  73)									::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  73)									::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)									int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  73)									int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  73)									int this3 = this2;
HXDLIN(  73)									int this4;
HXDLIN(  73)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)										this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            									}
            									else {
HXLINE(  73)										this4 = this3;
            									}
HXDLIN(  73)									Float a1;
HXDLIN(  73)									int this5 = ((this4 >> 24) & 255);
HXDLIN(  73)									if ((this5 == 0)) {
HXLINE(  73)										a1 = ((Float)0.);
            									}
            									else {
HXLINE(  73)										a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            									}
HXDLIN(  73)									Float r1;
HXDLIN(  73)									int this6 = ((this4 >> 16) & 255);
HXDLIN(  73)									if ((this6 == 0)) {
HXLINE(  73)										r1 = ((Float)0.);
            									}
            									else {
HXLINE(  73)										r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            									}
HXDLIN(  73)									Float g1;
HXDLIN(  73)									int this7 = ((this4 >> 8) & 255);
HXDLIN(  73)									if ((this7 == 0)) {
HXLINE(  73)										g1 = ((Float)0.);
            									}
            									else {
HXLINE(  73)										g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            									}
HXDLIN(  73)									Float b1;
HXDLIN(  73)									int this8 = (this4 & 255);
HXDLIN(  73)									if ((this8 == 0)) {
HXLINE(  73)										b1 = ((Float)0.);
            									}
            									else {
HXLINE(  73)										b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            									}
HXDLIN(  73)									Float a2;
HXDLIN(  73)									int this9 = ((colorC >> 24) & 255);
HXDLIN(  73)									if ((this9 == 0)) {
HXLINE(  73)										a2 = ((Float)0.);
            									}
            									else {
HXLINE(  73)										a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            									}
HXDLIN(  73)									Float r2;
HXDLIN(  73)									int this10 = ((colorC >> 16) & 255);
HXDLIN(  73)									if ((this10 == 0)) {
HXLINE(  73)										r2 = ((Float)0.);
            									}
            									else {
HXLINE(  73)										r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            									}
HXDLIN(  73)									Float g2;
HXDLIN(  73)									int this11 = ((colorC >> 8) & 255);
HXDLIN(  73)									if ((this11 == 0)) {
HXLINE(  73)										g2 = ((Float)0.);
            									}
            									else {
HXLINE(  73)										g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            									}
HXDLIN(  73)									Float b2;
HXDLIN(  73)									int this12 = (colorC & 255);
HXDLIN(  73)									if ((this12 == 0)) {
HXLINE(  73)										b2 = ((Float)0.);
            									}
            									else {
HXLINE(  73)										b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            									}
HXDLIN(  73)									Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  73)									int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  73)									int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  73)									int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  73)									int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  73)									int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  73)									{
HXLINE(  73)										::haxe::io::ArrayBufferViewImpl this13 = pixelShape->image;
HXDLIN(  73)										int value;
HXDLIN(  73)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)											value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            										}
            										else {
HXLINE(  73)											value = blended;
            										}
HXDLIN(  73)										bool _hx_tmp;
HXDLIN(  73)										if ((location >= 0)) {
HXLINE(  73)											_hx_tmp = (location < (this13->byteLength >> 2));
            										}
            										else {
HXLINE(  73)											_hx_tmp = false;
            										}
HXDLIN(  73)										if (_hx_tmp) {
HXLINE(  73)											::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  73)											int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  73)											_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  73)											_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  73)											_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  73)											_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            										}
            									}
            								}
            								else {
HXLINE(  73)									::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  73)									int index;
HXDLIN(  73)									if (pixelShape->useVirtualPos) {
HXLINE(  73)										index = ::Std_obj::_hx_int(((((( (Float)(q2) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x) - pixelShape->virtualX));
            									}
            									else {
HXLINE(  73)										index = ::Std_obj::_hx_int(( (Float)(((q2 * pixelShape->width) + x)) ));
            									}
HXDLIN(  73)									int value;
HXDLIN(  73)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)										value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXLINE(  73)										value = c;
            									}
HXDLIN(  73)									bool _hx_tmp;
HXDLIN(  73)									if ((index >= 0)) {
HXLINE(  73)										_hx_tmp = (index < (this1->byteLength >> 2));
            									}
            									else {
HXLINE(  73)										_hx_tmp = false;
            									}
HXDLIN(  73)									if (_hx_tmp) {
HXLINE(  73)										::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)										int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  73)										_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  73)										_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  73)										_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  73)										_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            									}
            								}
            							}
HXDLIN(  73)							if ((p2 > maxX2)) {
HXLINE( 247)								p2 = xx2;
HXLINE(  73)								q2 = (q2 + 1);
            							}
HXDLIN(  73)							if ((q2 > maxY2)) {
HXLINE(  73)								goto _hx_goto_5;
            							}
            						}
            						_hx_goto_5:;
            					}
HXDLIN(  73)					{
HXLINE(  73)						Float x3 = (dx - ((Float)6.));
HXDLIN(  73)						Float y3 = (dy - ((Float)6.));
HXDLIN(  73)						int p3 = ::Std_obj::_hx_int(x3);
HXDLIN(  73)						int xx3 = p3;
HXDLIN(  73)						int q3 = ::Std_obj::_hx_int(y3);
HXDLIN(  73)						int maxX3 = ::Std_obj::_hx_int((x3 + 12));
HXDLIN(  73)						int maxY3 = ::Std_obj::_hx_int((y3 + 12));
HXDLIN(  73)						while(true){
HXLINE(  73)							{
HXLINE(  73)								p3 = (p3 + 1);
HXDLIN(  73)								int x = (p3 - 1);
HXDLIN(  73)								int this1 = colorD;
HXDLIN(  73)								int c = this1;
HXDLIN(  73)								bool _hx_tmp;
HXDLIN(  73)								if ((((c >> 24) & 255) < 254)) {
HXLINE(  73)									_hx_tmp = pixelShape->transparent;
            								}
            								else {
HXLINE(  73)									_hx_tmp = false;
            								}
HXDLIN(  73)								if (_hx_tmp) {
HXLINE(  73)									int location;
HXDLIN(  73)									if (pixelShape->useVirtualPos) {
HXLINE(  73)										location = ::Std_obj::_hx_int(((((( (Float)(q3) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x) - pixelShape->virtualX));
            									}
            									else {
HXLINE(  73)										location = ::Std_obj::_hx_int(( (Float)(((q3 * pixelShape->width) + x)) ));
            									}
HXDLIN(  73)									::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  73)									::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)									int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  73)									int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  73)									int this3 = this2;
HXDLIN(  73)									int this4;
HXDLIN(  73)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)										this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            									}
            									else {
HXLINE(  73)										this4 = this3;
            									}
HXDLIN(  73)									Float a1;
HXDLIN(  73)									int this5 = ((this4 >> 24) & 255);
HXDLIN(  73)									if ((this5 == 0)) {
HXLINE(  73)										a1 = ((Float)0.);
            									}
            									else {
HXLINE(  73)										a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            									}
HXDLIN(  73)									Float r1;
HXDLIN(  73)									int this6 = ((this4 >> 16) & 255);
HXDLIN(  73)									if ((this6 == 0)) {
HXLINE(  73)										r1 = ((Float)0.);
            									}
            									else {
HXLINE(  73)										r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            									}
HXDLIN(  73)									Float g1;
HXDLIN(  73)									int this7 = ((this4 >> 8) & 255);
HXDLIN(  73)									if ((this7 == 0)) {
HXLINE(  73)										g1 = ((Float)0.);
            									}
            									else {
HXLINE(  73)										g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            									}
HXDLIN(  73)									Float b1;
HXDLIN(  73)									int this8 = (this4 & 255);
HXDLIN(  73)									if ((this8 == 0)) {
HXLINE(  73)										b1 = ((Float)0.);
            									}
            									else {
HXLINE(  73)										b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            									}
HXDLIN(  73)									Float a2;
HXDLIN(  73)									int this9 = ((colorD >> 24) & 255);
HXDLIN(  73)									if ((this9 == 0)) {
HXLINE(  73)										a2 = ((Float)0.);
            									}
            									else {
HXLINE(  73)										a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            									}
HXDLIN(  73)									Float r2;
HXDLIN(  73)									int this10 = ((colorD >> 16) & 255);
HXDLIN(  73)									if ((this10 == 0)) {
HXLINE(  73)										r2 = ((Float)0.);
            									}
            									else {
HXLINE(  73)										r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            									}
HXDLIN(  73)									Float g2;
HXDLIN(  73)									int this11 = ((colorD >> 8) & 255);
HXDLIN(  73)									if ((this11 == 0)) {
HXLINE(  73)										g2 = ((Float)0.);
            									}
            									else {
HXLINE(  73)										g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            									}
HXDLIN(  73)									Float b2;
HXDLIN(  73)									int this12 = (colorD & 255);
HXDLIN(  73)									if ((this12 == 0)) {
HXLINE(  73)										b2 = ((Float)0.);
            									}
            									else {
HXLINE(  73)										b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            									}
HXDLIN(  73)									Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  73)									int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  73)									int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  73)									int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  73)									int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  73)									int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  73)									{
HXLINE(  73)										::haxe::io::ArrayBufferViewImpl this13 = pixelShape->image;
HXDLIN(  73)										int value;
HXDLIN(  73)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)											value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            										}
            										else {
HXLINE(  73)											value = blended;
            										}
HXDLIN(  73)										bool _hx_tmp;
HXDLIN(  73)										if ((location >= 0)) {
HXLINE(  73)											_hx_tmp = (location < (this13->byteLength >> 2));
            										}
            										else {
HXLINE(  73)											_hx_tmp = false;
            										}
HXDLIN(  73)										if (_hx_tmp) {
HXLINE(  73)											::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  73)											int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  73)											_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  73)											_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  73)											_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  73)											_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            										}
            									}
            								}
            								else {
HXLINE(  73)									::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  73)									int index;
HXDLIN(  73)									if (pixelShape->useVirtualPos) {
HXLINE(  73)										index = ::Std_obj::_hx_int(((((( (Float)(q3) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x) - pixelShape->virtualX));
            									}
            									else {
HXLINE(  73)										index = ::Std_obj::_hx_int(( (Float)(((q3 * pixelShape->width) + x)) ));
            									}
HXDLIN(  73)									int value;
HXDLIN(  73)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)										value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXLINE(  73)										value = c;
            									}
HXDLIN(  73)									bool _hx_tmp;
HXDLIN(  73)									if ((index >= 0)) {
HXLINE(  73)										_hx_tmp = (index < (this1->byteLength >> 2));
            									}
            									else {
HXLINE(  73)										_hx_tmp = false;
            									}
HXDLIN(  73)									if (_hx_tmp) {
HXLINE(  73)										::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)										int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  73)										_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  73)										_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  73)										_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  73)										_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            									}
            								}
            							}
HXDLIN(  73)							if ((p3 > maxX3)) {
HXLINE( 247)								p3 = xx3;
HXLINE(  73)								q3 = (q3 + 1);
            							}
HXDLIN(  73)							if ((q3 > maxY3)) {
HXLINE(  73)								goto _hx_goto_6;
            							}
            						}
            						_hx_goto_6:;
            					}
            				}
HXDLIN(  73)				{
HXLINE(  73)					{
HXLINE(  73)						bool hasUndo = false;
HXDLIN(  73)						int aA = ((colorB >> 24) & 255);
HXDLIN(  73)						int rA = ((colorB >> 16) & 255);
HXDLIN(  73)						int gA = ((colorB >> 8) & 255);
HXDLIN(  73)						int bA = (colorB & 255);
HXDLIN(  73)						int aB = ((colorA >> 24) & 255);
HXDLIN(  73)						int rB = ((colorA >> 16) & 255);
HXDLIN(  73)						int gB = ((colorA >> 8) & 255);
HXDLIN(  73)						int bB = (colorA & 255);
HXDLIN(  73)						int aC = ((colorD >> 24) & 255);
HXDLIN(  73)						int rC = ((colorD >> 16) & 255);
HXDLIN(  73)						int gC = ((colorD >> 8) & 255);
HXDLIN(  73)						int bC = (colorD & 255);
HXDLIN(  73)						Float bcx = (bx - dx);
HXDLIN(  73)						Float bcy = (by - dy);
HXDLIN(  73)						Float acx = (ax - dx);
HXDLIN(  73)						Float acy = (ay - dy);
HXDLIN(  73)						Float dot11 = ((bcx * bcx) + (bcy * bcy));
HXDLIN(  73)						Float dot12 = ((bcx * acx) + (bcy * acy));
HXDLIN(  73)						Float dot22 = ((acx * acx) + (acy * acy));
HXDLIN(  73)						Float denom1 = (( (Float)(1) ) / ((dot11 * dot22) - (dot12 * dot12)));
HXDLIN(  73)						::pixelimage::iter::IntIterStart xIter3;
HXDLIN(  73)						if ((ax > bx)) {
HXLINE(  73)							if ((ax > dx)) {
HXLINE(  73)								int min;
HXDLIN(  73)								if ((bx > dx)) {
HXLINE(  73)									min = ::Math_obj::floor(dx);
            								}
            								else {
HXLINE(  73)									min = ::Math_obj::floor(bx);
            								}
HXDLIN(  73)								int ii_min = min;
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(ax);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								xIter3 = this1;
            							}
            							else {
HXLINE(  73)								int ii_min = ::Math_obj::floor(bx);
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(dx);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								xIter3 = this1;
            							}
            						}
            						else {
HXLINE(  73)							if ((bx > dx)) {
HXLINE(  73)								int min;
HXDLIN(  73)								if ((ax > dx)) {
HXLINE(  73)									min = ::Math_obj::floor(dx);
            								}
            								else {
HXLINE(  73)									min = ::Math_obj::ceil(ax);
            								}
HXDLIN(  73)								int ii_min = min;
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(bx);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								xIter3 = this1;
            							}
            							else {
HXLINE(  73)								int ii_min = ::Math_obj::floor(ax);
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(dx);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								xIter3 = this1;
            							}
            						}
HXDLIN(  73)						::pixelimage::iter::IntIterStart yIter3;
HXDLIN(  73)						if ((ay > by)) {
HXLINE(  73)							if ((ay > dy)) {
HXLINE(  73)								int min;
HXDLIN(  73)								if ((by > dy)) {
HXLINE(  73)									min = ::Math_obj::floor(dy);
            								}
            								else {
HXLINE(  73)									min = ::Math_obj::floor(by);
            								}
HXDLIN(  73)								int ii_min = min;
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(ay);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								yIter3 = this1;
            							}
            							else {
HXLINE(  73)								int ii_min = ::Math_obj::floor(by);
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(dy);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								yIter3 = this1;
            							}
            						}
            						else {
HXLINE(  73)							if ((by > dy)) {
HXLINE(  73)								int min;
HXDLIN(  73)								if ((ay > dy)) {
HXLINE(  73)									min = ::Math_obj::floor(dy);
            								}
            								else {
HXLINE(  73)									min = ::Math_obj::ceil(ay);
            								}
HXDLIN(  73)								int ii_min = min;
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(by);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								yIter3 = this1;
            							}
            							else {
HXLINE(  73)								int ii_min = ::Math_obj::floor(ay);
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(dy);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								yIter3 = this1;
            							}
            						}
HXDLIN(  73)						::pixelimage::ImageStruct undoImage = null();
HXDLIN(  73)						if (hasUndo) {
HXLINE(  73)							int w = ((xIter3->max - xIter3->start) + 1);
HXDLIN(  73)							int h = ((yIter3->max - yIter3->start) + 1);
HXDLIN(  73)							int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN(  73)							::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  73)							::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN(  73)							::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN(  73)							undoImage = this3;
HXDLIN(  73)							{
HXLINE(  73)								int rectLeft = xIter3->start;
HXDLIN(  73)								int rectTop = yIter3->start;
HXDLIN(  73)								int rectRight = xIter3->max;
HXDLIN(  73)								bool forceClear = false;
HXDLIN(  73)								{
HXLINE(  73)									int _g = rectTop;
HXDLIN(  73)									int _g1 = yIter3->max;
HXDLIN(  73)									while((_g < _g1)){
HXLINE(  73)										_g = (_g + 1);
HXDLIN(  73)										int dy = (_g - 1);
HXDLIN(  73)										{
HXLINE(  73)											int _g1 = rectLeft;
HXDLIN(  73)											int _g2 = rectRight;
HXDLIN(  73)											while((_g1 < _g2)){
HXLINE(  73)												_g1 = (_g1 + 1);
HXDLIN(  73)												int dx = (_g1 - 1);
HXDLIN(  73)												::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  73)												int index;
HXDLIN(  73)												if (pixelShape->useVirtualPos) {
HXLINE(  73)													index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + dx) - pixelShape->virtualX));
            												}
            												else {
HXLINE(  73)													index = ::Std_obj::_hx_int(( (Float)(((dy * pixelShape->width) + dx)) ));
            												}
HXDLIN(  73)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)												int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  73)												int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  73)												int col;
HXDLIN(  73)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)													col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE(  73)													col = c;
            												}
HXDLIN(  73)												bool _hx_tmp;
HXDLIN(  73)												if (pixelShape->useMask) {
HXLINE(  73)													_hx_tmp = ::hx::IsNotNull( pixelShape->mask );
            												}
            												else {
HXLINE(  73)													_hx_tmp = false;
            												}
HXDLIN(  73)												if (_hx_tmp) {
HXLINE(  73)													::pixelimage::ImageStruct this1 = pixelShape->mask;
HXDLIN(  73)													::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  73)													int index;
HXDLIN(  73)													if (this1->useVirtualPos) {
HXLINE(  73)														index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            													}
            													else {
HXLINE(  73)														index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            													}
HXDLIN(  73)													::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  73)													int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  73)													int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  73)													int v;
HXDLIN(  73)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)														v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE(  73)														v = c;
            													}
HXDLIN(  73)													int this3 = v;
HXDLIN(  73)													int maskPixel = this3;
HXDLIN(  73)													int this4 = col;
HXDLIN(  73)													int this5 = this4;
HXDLIN(  73)													if ((maskPixel == 0)) {
HXLINE(  73)														int this1 = this5;
HXDLIN(  73)														col = this1;
            													}
            													else {
HXLINE(  73)														Float m0;
HXDLIN(  73)														int this1 = ((maskPixel >> 24) & 255);
HXDLIN(  73)														if ((this1 == 0)) {
HXLINE(  73)															m0 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float m1;
HXDLIN(  73)														int this2 = ((maskPixel >> 16) & 255);
HXDLIN(  73)														if ((this2 == 0)) {
HXLINE(  73)															m1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float m2;
HXDLIN(  73)														int this3 = ((maskPixel >> 8) & 255);
HXDLIN(  73)														if ((this3 == 0)) {
HXLINE(  73)															m2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float m3;
HXDLIN(  73)														int this4 = (maskPixel & 255);
HXDLIN(  73)														if ((this4 == 0)) {
HXLINE(  73)															m3 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN(  73)														int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN(  73)														int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN(  73)														int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN(  73)														col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            													}
            												}
HXDLIN(  73)												if ((col != 0)) {
HXLINE(  73)													int x = (dx - rectLeft);
HXDLIN(  73)													int y = (dy - rectTop);
HXDLIN(  73)													int this1 = col;
HXDLIN(  73)													int c = this1;
HXDLIN(  73)													bool _hx_tmp;
HXDLIN(  73)													if ((((c >> 24) & 255) < 254)) {
HXLINE(  73)														_hx_tmp = undoImage->transparent;
            													}
            													else {
HXLINE(  73)														_hx_tmp = false;
            													}
HXDLIN(  73)													if (_hx_tmp) {
HXLINE(  73)														int location;
HXDLIN(  73)														if (undoImage->useVirtualPos) {
HXLINE(  73)															location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            														}
            														else {
HXLINE(  73)															location = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            														}
HXDLIN(  73)														::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  73)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)														int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  73)														int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  73)														int this3 = this2;
HXDLIN(  73)														int this4;
HXDLIN(  73)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)															this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            														}
            														else {
HXLINE(  73)															this4 = this3;
            														}
HXDLIN(  73)														Float a1;
HXDLIN(  73)														int this5 = ((this4 >> 24) & 255);
HXDLIN(  73)														if ((this5 == 0)) {
HXLINE(  73)															a1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float r1;
HXDLIN(  73)														int this6 = ((this4 >> 16) & 255);
HXDLIN(  73)														if ((this6 == 0)) {
HXLINE(  73)															r1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float g1;
HXDLIN(  73)														int this7 = ((this4 >> 8) & 255);
HXDLIN(  73)														if ((this7 == 0)) {
HXLINE(  73)															g1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float b1;
HXDLIN(  73)														int this8 = (this4 & 255);
HXDLIN(  73)														if ((this8 == 0)) {
HXLINE(  73)															b1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float a2;
HXDLIN(  73)														int this9 = ((col >> 24) & 255);
HXDLIN(  73)														if ((this9 == 0)) {
HXLINE(  73)															a2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float r2;
HXDLIN(  73)														int this10 = ((col >> 16) & 255);
HXDLIN(  73)														if ((this10 == 0)) {
HXLINE(  73)															r2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float g2;
HXDLIN(  73)														int this11 = ((col >> 8) & 255);
HXDLIN(  73)														if ((this11 == 0)) {
HXLINE(  73)															g2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float b2;
HXDLIN(  73)														int this12 = (col & 255);
HXDLIN(  73)														if ((this12 == 0)) {
HXLINE(  73)															b2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  73)														int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  73)														int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  73)														int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  73)														int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  73)														int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  73)														{
HXLINE(  73)															::haxe::io::ArrayBufferViewImpl this13 = undoImage->image;
HXDLIN(  73)															int value;
HXDLIN(  73)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)																value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            															}
            															else {
HXLINE(  73)																value = blended;
            															}
HXDLIN(  73)															bool _hx_tmp;
HXDLIN(  73)															if ((location >= 0)) {
HXLINE(  73)																_hx_tmp = (location < (this13->byteLength >> 2));
            															}
            															else {
HXLINE(  73)																_hx_tmp = false;
            															}
HXDLIN(  73)															if (_hx_tmp) {
HXLINE(  73)																::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  73)																int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  73)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  73)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  73)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  73)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
            													else {
HXLINE(  73)														::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  73)														int index;
HXDLIN(  73)														if (undoImage->useVirtualPos) {
HXLINE(  73)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            														}
            														else {
HXLINE(  73)															index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            														}
HXDLIN(  73)														int value;
HXDLIN(  73)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)															value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            														}
            														else {
HXLINE(  73)															value = c;
            														}
HXDLIN(  73)														bool _hx_tmp;
HXDLIN(  73)														if ((index >= 0)) {
HXLINE(  73)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE(  73)															_hx_tmp = false;
            														}
HXDLIN(  73)														if (_hx_tmp) {
HXLINE(  73)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  73)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  73)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  73)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  73)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
            												else {
HXLINE(  73)													if (forceClear) {
HXLINE(  73)														::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  73)														int x = (dx - rectLeft);
HXDLIN(  73)														int y = (dy - rectTop);
HXDLIN(  73)														int index;
HXDLIN(  73)														if (undoImage->useVirtualPos) {
HXLINE(  73)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            														}
            														else {
HXLINE(  73)															index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            														}
HXDLIN(  73)														bool _hx_tmp;
HXDLIN(  73)														if ((index >= 0)) {
HXLINE(  73)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE(  73)															_hx_tmp = false;
            														}
HXDLIN(  73)														if (_hx_tmp) {
HXLINE(  73)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  73)															_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  73)															_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  73)															_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  73)															_this->b[(pos + 3)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  73)						{
HXLINE(  73)							int _g_min = xIter3->start;
HXDLIN(  73)							int _g_max = xIter3->max;
HXDLIN(  73)							while((_g_min < _g_max)){
HXLINE(  73)								_g_min = (_g_min + 1);
HXDLIN(  73)								int px = (_g_min - 1);
HXDLIN(  73)								Float pcx = (( (Float)(px) ) - dx);
HXDLIN(  73)								{
HXLINE(  73)									int _g_min1 = yIter3->start;
HXDLIN(  73)									int _g_max = yIter3->max;
HXDLIN(  73)									while((_g_min1 < _g_max)){
HXLINE(  73)										_g_min1 = (_g_min1 + 1);
HXDLIN(  73)										int py = (_g_min1 - 1);
HXDLIN(  73)										Float pcy = (( (Float)(py) ) - dy);
HXDLIN(  73)										Float dot31 = ((pcx * bcx) + (pcy * bcy));
HXDLIN(  73)										Float dot32 = ((pcx * acx) + (pcy * acy));
HXDLIN(  73)										Float ratioA = (((dot22 * dot31) - (dot12 * dot32)) * denom1);
HXDLIN(  73)										Float ratioB = (((dot11 * dot32) - (dot12 * dot31)) * denom1);
HXDLIN(  73)										Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN(  73)										bool _hx_tmp;
HXDLIN(  73)										bool _hx_tmp1;
HXDLIN(  73)										if ((ratioA >= 0)) {
HXLINE(  73)											_hx_tmp1 = (ratioB >= 0);
            										}
            										else {
HXLINE(  73)											_hx_tmp1 = false;
            										}
HXDLIN(  73)										if (_hx_tmp1) {
HXLINE(  73)											_hx_tmp = (ratioC >= 0);
            										}
            										else {
HXLINE(  73)											_hx_tmp = false;
            										}
HXDLIN(  73)										if (_hx_tmp) {
HXLINE(  73)											int i = ::Std_obj::_hx_int((((( (Float)(aA) ) * ratioA) + (( (Float)(aB) ) * ratioB)) + (( (Float)(aC) ) * ratioC)));
HXDLIN(  73)											if ((i > 255)) {
HXLINE(  24)												i = 255;
            											}
HXLINE(  73)											if ((i < 0)) {
HXLINE(  25)												i = 0;
            											}
HXLINE(  73)											int this1 = i;
HXDLIN(  73)											int a = this1;
HXDLIN(  73)											int i1 = ::Std_obj::_hx_int((((( (Float)(rA) ) * ratioA) + (( (Float)(rB) ) * ratioB)) + (( (Float)(rC) ) * ratioC)));
HXDLIN(  73)											if ((i1 > 255)) {
HXLINE(  24)												i1 = 255;
            											}
HXLINE(  73)											if ((i1 < 0)) {
HXLINE(  25)												i1 = 0;
            											}
HXLINE(  73)											int this2 = i1;
HXDLIN(  73)											int r = this2;
HXDLIN(  73)											int i2 = ::Std_obj::_hx_int((((( (Float)(gA) ) * ratioA) + (( (Float)(gB) ) * ratioB)) + (( (Float)(gC) ) * ratioC)));
HXDLIN(  73)											if ((i2 > 255)) {
HXLINE(  24)												i2 = 255;
            											}
HXLINE(  73)											if ((i2 < 0)) {
HXLINE(  25)												i2 = 0;
            											}
HXLINE(  73)											int this3 = i2;
HXDLIN(  73)											int g = this3;
HXDLIN(  73)											int i3 = ::Std_obj::_hx_int((((( (Float)(bA) ) * ratioA) + (( (Float)(bB) ) * ratioB)) + (( (Float)(bC) ) * ratioC)));
HXDLIN(  73)											if ((i3 > 255)) {
HXLINE(  24)												i3 = 255;
            											}
HXLINE(  73)											if ((i3 < 0)) {
HXLINE(  25)												i3 = 0;
            											}
HXLINE(  73)											int this4 = i3;
HXDLIN(  73)											int b = this4;
HXDLIN(  73)											{
HXLINE(  73)												int location;
HXDLIN(  73)												if (pixelShape->useVirtualPos) {
HXLINE(  73)													location = ::Std_obj::_hx_int(((((( (Float)(py) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + px) - pixelShape->virtualX));
            												}
            												else {
HXLINE(  73)													location = ::Std_obj::_hx_int(( (Float)(((py * pixelShape->width) + px)) ));
            												}
HXDLIN(  73)												bool _hx_tmp;
HXDLIN(  73)												if (pixelShape->transparent) {
HXLINE(  73)													_hx_tmp = (a < 254);
            												}
            												else {
HXLINE(  73)													_hx_tmp = false;
            												}
HXDLIN(  73)												if (_hx_tmp) {
HXLINE(  73)													::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  73)													::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)													int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  73)													int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  73)													int this3 = this2;
HXDLIN(  73)													int old;
HXDLIN(  73)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)														old = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            													}
            													else {
HXLINE(  73)														old = this3;
            													}
HXDLIN(  73)													int rhs = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  73)													Float a1;
HXDLIN(  73)													int this4 = ((old >> 24) & 255);
HXDLIN(  73)													if ((this4 == 0)) {
HXLINE(  73)														a1 = ((Float)0.);
            													}
            													else {
HXLINE(  73)														a1 = (( (Float)(this4) ) / ( (Float)(255) ));
            													}
HXDLIN(  73)													Float r1;
HXDLIN(  73)													int this5 = ((old >> 16) & 255);
HXDLIN(  73)													if ((this5 == 0)) {
HXLINE(  73)														r1 = ((Float)0.);
            													}
            													else {
HXLINE(  73)														r1 = (( (Float)(this5) ) / ( (Float)(255) ));
            													}
HXDLIN(  73)													Float g1;
HXDLIN(  73)													int this6 = ((old >> 8) & 255);
HXDLIN(  73)													if ((this6 == 0)) {
HXLINE(  73)														g1 = ((Float)0.);
            													}
            													else {
HXLINE(  73)														g1 = (( (Float)(this6) ) / ( (Float)(255) ));
            													}
HXDLIN(  73)													Float b1;
HXDLIN(  73)													int this7 = (old & 255);
HXDLIN(  73)													if ((this7 == 0)) {
HXLINE(  73)														b1 = ((Float)0.);
            													}
            													else {
HXLINE(  73)														b1 = (( (Float)(this7) ) / ( (Float)(255) ));
            													}
HXDLIN(  73)													Float a2;
HXDLIN(  73)													int this8 = ((rhs >> 24) & 255);
HXDLIN(  73)													if ((this8 == 0)) {
HXLINE(  73)														a2 = ((Float)0.);
            													}
            													else {
HXLINE(  73)														a2 = (( (Float)(this8) ) / ( (Float)(255) ));
            													}
HXDLIN(  73)													Float r2;
HXDLIN(  73)													int this9 = ((rhs >> 16) & 255);
HXDLIN(  73)													if ((this9 == 0)) {
HXLINE(  73)														r2 = ((Float)0.);
            													}
            													else {
HXLINE(  73)														r2 = (( (Float)(this9) ) / ( (Float)(255) ));
            													}
HXDLIN(  73)													Float g2;
HXDLIN(  73)													int this10 = ((rhs >> 8) & 255);
HXDLIN(  73)													if ((this10 == 0)) {
HXLINE(  73)														g2 = ((Float)0.);
            													}
            													else {
HXLINE(  73)														g2 = (( (Float)(this10) ) / ( (Float)(255) ));
            													}
HXDLIN(  73)													Float b2;
HXDLIN(  73)													int this11 = (rhs & 255);
HXDLIN(  73)													if ((this11 == 0)) {
HXLINE(  73)														b2 = ((Float)0.);
            													}
            													else {
HXLINE(  73)														b2 = (( (Float)(this11) ) / ( (Float)(255) ));
            													}
HXDLIN(  73)													Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  73)													int r3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  73)													int g3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  73)													int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  73)													int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  73)													int blended = ((((a4 << 24) | (r3 << 16)) | (g3 << 8)) | b3);
HXDLIN(  73)													{
HXLINE(  73)														::haxe::io::ArrayBufferViewImpl this12 = pixelShape->image;
HXDLIN(  73)														int value;
HXDLIN(  73)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)															value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            														}
            														else {
HXLINE(  73)															value = blended;
            														}
HXDLIN(  73)														bool _hx_tmp;
HXDLIN(  73)														if ((location >= 0)) {
HXLINE(  73)															_hx_tmp = (location < (this12->byteLength >> 2));
            														}
            														else {
HXLINE(  73)															_hx_tmp = false;
            														}
HXDLIN(  73)														if (_hx_tmp) {
HXLINE(  73)															::haxe::io::Bytes _this = this12->bytes;
HXDLIN(  73)															int pos = ((location << 2) + this12->byteOffset);
HXDLIN(  73)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  73)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  73)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  73)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
            												else {
HXLINE(  73)													::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  73)													int value;
HXDLIN(  73)													if (pixelShape->isLittle) {
HXLINE(  73)														value = ((((a << 24) | (b << 16)) | (g << 8)) | r);
            													}
            													else {
HXLINE(  73)														value = ((((a << 24) | (r << 16)) | (g << 8)) | b);
            													}
HXDLIN(  73)													bool _hx_tmp;
HXDLIN(  73)													if ((location >= 0)) {
HXLINE(  73)														_hx_tmp = (location < (this1->byteLength >> 2));
            													}
            													else {
HXLINE(  73)														_hx_tmp = false;
            													}
HXDLIN(  73)													if (_hx_tmp) {
HXLINE(  73)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)														int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  73)														_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  73)														_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  73)														_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  73)														_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  73)						if ((hasHit == false)) {
HXLINE(  73)							::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,ax,ay,bx,by,dx,dy,true);
HXDLIN(  73)							if (hasUndo) {
HXLINE(  73)								v->undoImage = undoImage;
HXDLIN(  73)								v->undoX = xIter3->start;
HXDLIN(  73)								v->undoY = yIter3->start;
            							}
            						}
            					}
HXDLIN(  73)					{
HXLINE(  73)						bool hasHit1 = false;
HXDLIN(  73)						bool hasUndo1 = false;
HXDLIN(  73)						int aA1 = ((colorC >> 24) & 255);
HXDLIN(  73)						int rA1 = ((colorC >> 16) & 255);
HXDLIN(  73)						int gA1 = ((colorC >> 8) & 255);
HXDLIN(  73)						int bA1 = (colorC & 255);
HXDLIN(  73)						int aB1 = ((colorB >> 24) & 255);
HXDLIN(  73)						int rB1 = ((colorB >> 16) & 255);
HXDLIN(  73)						int gB1 = ((colorB >> 8) & 255);
HXDLIN(  73)						int bB1 = (colorB & 255);
HXDLIN(  73)						int aC1 = ((colorD >> 24) & 255);
HXDLIN(  73)						int rC1 = ((colorD >> 16) & 255);
HXDLIN(  73)						int gC1 = ((colorD >> 8) & 255);
HXDLIN(  73)						int bC1 = (colorD & 255);
HXDLIN(  73)						Float bcx1 = (cx - dx);
HXDLIN(  73)						Float bcy1 = (cy - dy);
HXDLIN(  73)						Float acx1 = (bx - dx);
HXDLIN(  73)						Float acy1 = (by - dy);
HXDLIN(  73)						Float dot111 = ((bcx1 * bcx1) + (bcy1 * bcy1));
HXDLIN(  73)						Float dot121 = ((bcx1 * acx1) + (bcy1 * acy1));
HXDLIN(  73)						Float dot221 = ((acx1 * acx1) + (acy1 * acy1));
HXDLIN(  73)						Float denom11 = (( (Float)(1) ) / ((dot111 * dot221) - (dot121 * dot121)));
HXDLIN(  73)						::pixelimage::iter::IntIterStart xIter31;
HXDLIN(  73)						if ((bx > cx)) {
HXLINE(  73)							if ((bx > dx)) {
HXLINE(  73)								int min;
HXDLIN(  73)								if ((cx > dx)) {
HXLINE(  73)									min = ::Math_obj::floor(dx);
            								}
            								else {
HXLINE(  73)									min = ::Math_obj::floor(cx);
            								}
HXDLIN(  73)								int ii_min = min;
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(bx);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								xIter31 = this1;
            							}
            							else {
HXLINE(  73)								int ii_min = ::Math_obj::floor(cx);
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(dx);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								xIter31 = this1;
            							}
            						}
            						else {
HXLINE(  73)							if ((cx > dx)) {
HXLINE(  73)								int min;
HXDLIN(  73)								if ((bx > dx)) {
HXLINE(  73)									min = ::Math_obj::floor(dx);
            								}
            								else {
HXLINE(  73)									min = ::Math_obj::ceil(bx);
            								}
HXDLIN(  73)								int ii_min = min;
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(cx);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								xIter31 = this1;
            							}
            							else {
HXLINE(  73)								int ii_min = ::Math_obj::floor(bx);
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(dx);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								xIter31 = this1;
            							}
            						}
HXDLIN(  73)						::pixelimage::iter::IntIterStart yIter31;
HXDLIN(  73)						if ((by > cy)) {
HXLINE(  73)							if ((by > dy)) {
HXLINE(  73)								int min;
HXDLIN(  73)								if ((cy > dy)) {
HXLINE(  73)									min = ::Math_obj::floor(dy);
            								}
            								else {
HXLINE(  73)									min = ::Math_obj::floor(cy);
            								}
HXDLIN(  73)								int ii_min = min;
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(by);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								yIter31 = this1;
            							}
            							else {
HXLINE(  73)								int ii_min = ::Math_obj::floor(cy);
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(dy);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								yIter31 = this1;
            							}
            						}
            						else {
HXLINE(  73)							if ((cy > dy)) {
HXLINE(  73)								int min;
HXDLIN(  73)								if ((by > dy)) {
HXLINE(  73)									min = ::Math_obj::floor(dy);
            								}
            								else {
HXLINE(  73)									min = ::Math_obj::ceil(by);
            								}
HXDLIN(  73)								int ii_min = min;
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(cy);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								yIter31 = this1;
            							}
            							else {
HXLINE(  73)								int ii_min = ::Math_obj::floor(by);
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(dy);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								yIter31 = this1;
            							}
            						}
HXDLIN(  73)						::pixelimage::ImageStruct undoImage1 = null();
HXDLIN(  73)						if (hasUndo1) {
HXLINE(  73)							int w = ((xIter31->max - xIter31->start) + 1);
HXDLIN(  73)							int h = ((yIter31->max - yIter31->start) + 1);
HXDLIN(  73)							int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN(  73)							::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  73)							::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN(  73)							::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN(  73)							undoImage1 = this3;
HXDLIN(  73)							{
HXLINE(  73)								int rectLeft = xIter31->start;
HXDLIN(  73)								int rectTop = yIter31->start;
HXDLIN(  73)								int rectRight = xIter31->max;
HXDLIN(  73)								bool forceClear = false;
HXDLIN(  73)								{
HXLINE(  73)									int _g = rectTop;
HXDLIN(  73)									int _g1 = yIter31->max;
HXDLIN(  73)									while((_g < _g1)){
HXLINE(  73)										_g = (_g + 1);
HXDLIN(  73)										int dy = (_g - 1);
HXDLIN(  73)										{
HXLINE(  73)											int _g1 = rectLeft;
HXDLIN(  73)											int _g2 = rectRight;
HXDLIN(  73)											while((_g1 < _g2)){
HXLINE(  73)												_g1 = (_g1 + 1);
HXDLIN(  73)												int dx = (_g1 - 1);
HXDLIN(  73)												::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  73)												int index;
HXDLIN(  73)												if (pixelShape->useVirtualPos) {
HXLINE(  73)													index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + dx) - pixelShape->virtualX));
            												}
            												else {
HXLINE(  73)													index = ::Std_obj::_hx_int(( (Float)(((dy * pixelShape->width) + dx)) ));
            												}
HXDLIN(  73)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)												int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  73)												int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  73)												int col;
HXDLIN(  73)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)													col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE(  73)													col = c;
            												}
HXDLIN(  73)												bool _hx_tmp;
HXDLIN(  73)												if (pixelShape->useMask) {
HXLINE(  73)													_hx_tmp = ::hx::IsNotNull( pixelShape->mask );
            												}
            												else {
HXLINE(  73)													_hx_tmp = false;
            												}
HXDLIN(  73)												if (_hx_tmp) {
HXLINE(  73)													::pixelimage::ImageStruct this1 = pixelShape->mask;
HXDLIN(  73)													::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  73)													int index;
HXDLIN(  73)													if (this1->useVirtualPos) {
HXLINE(  73)														index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            													}
            													else {
HXLINE(  73)														index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            													}
HXDLIN(  73)													::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  73)													int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  73)													int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  73)													int v;
HXDLIN(  73)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)														v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE(  73)														v = c;
            													}
HXDLIN(  73)													int this3 = v;
HXDLIN(  73)													int maskPixel = this3;
HXDLIN(  73)													int this4 = col;
HXDLIN(  73)													int this5 = this4;
HXDLIN(  73)													if ((maskPixel == 0)) {
HXLINE(  73)														int this1 = this5;
HXDLIN(  73)														col = this1;
            													}
            													else {
HXLINE(  73)														Float m0;
HXDLIN(  73)														int this1 = ((maskPixel >> 24) & 255);
HXDLIN(  73)														if ((this1 == 0)) {
HXLINE(  73)															m0 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float m1;
HXDLIN(  73)														int this2 = ((maskPixel >> 16) & 255);
HXDLIN(  73)														if ((this2 == 0)) {
HXLINE(  73)															m1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float m2;
HXDLIN(  73)														int this3 = ((maskPixel >> 8) & 255);
HXDLIN(  73)														if ((this3 == 0)) {
HXLINE(  73)															m2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float m3;
HXDLIN(  73)														int this4 = (maskPixel & 255);
HXDLIN(  73)														if ((this4 == 0)) {
HXLINE(  73)															m3 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN(  73)														int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN(  73)														int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN(  73)														int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN(  73)														col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            													}
            												}
HXDLIN(  73)												if ((col != 0)) {
HXLINE(  73)													int x = (dx - rectLeft);
HXDLIN(  73)													int y = (dy - rectTop);
HXDLIN(  73)													int this1 = col;
HXDLIN(  73)													int c = this1;
HXDLIN(  73)													bool _hx_tmp;
HXDLIN(  73)													if ((((c >> 24) & 255) < 254)) {
HXLINE(  73)														_hx_tmp = undoImage1->transparent;
            													}
            													else {
HXLINE(  73)														_hx_tmp = false;
            													}
HXDLIN(  73)													if (_hx_tmp) {
HXLINE(  73)														int location;
HXDLIN(  73)														if (undoImage1->useVirtualPos) {
HXLINE(  73)															location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            														}
            														else {
HXLINE(  73)															location = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            														}
HXDLIN(  73)														::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN(  73)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)														int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  73)														int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  73)														int this3 = this2;
HXDLIN(  73)														int this4;
HXDLIN(  73)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)															this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            														}
            														else {
HXLINE(  73)															this4 = this3;
            														}
HXDLIN(  73)														Float a1;
HXDLIN(  73)														int this5 = ((this4 >> 24) & 255);
HXDLIN(  73)														if ((this5 == 0)) {
HXLINE(  73)															a1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float r1;
HXDLIN(  73)														int this6 = ((this4 >> 16) & 255);
HXDLIN(  73)														if ((this6 == 0)) {
HXLINE(  73)															r1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float g1;
HXDLIN(  73)														int this7 = ((this4 >> 8) & 255);
HXDLIN(  73)														if ((this7 == 0)) {
HXLINE(  73)															g1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float b1;
HXDLIN(  73)														int this8 = (this4 & 255);
HXDLIN(  73)														if ((this8 == 0)) {
HXLINE(  73)															b1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float a2;
HXDLIN(  73)														int this9 = ((col >> 24) & 255);
HXDLIN(  73)														if ((this9 == 0)) {
HXLINE(  73)															a2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float r2;
HXDLIN(  73)														int this10 = ((col >> 16) & 255);
HXDLIN(  73)														if ((this10 == 0)) {
HXLINE(  73)															r2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float g2;
HXDLIN(  73)														int this11 = ((col >> 8) & 255);
HXDLIN(  73)														if ((this11 == 0)) {
HXLINE(  73)															g2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float b2;
HXDLIN(  73)														int this12 = (col & 255);
HXDLIN(  73)														if ((this12 == 0)) {
HXLINE(  73)															b2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  73)														int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  73)														int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  73)														int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  73)														int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  73)														int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  73)														{
HXLINE(  73)															::haxe::io::ArrayBufferViewImpl this13 = undoImage1->image;
HXDLIN(  73)															int value;
HXDLIN(  73)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)																value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            															}
            															else {
HXLINE(  73)																value = blended;
            															}
HXDLIN(  73)															bool _hx_tmp;
HXDLIN(  73)															if ((location >= 0)) {
HXLINE(  73)																_hx_tmp = (location < (this13->byteLength >> 2));
            															}
            															else {
HXLINE(  73)																_hx_tmp = false;
            															}
HXDLIN(  73)															if (_hx_tmp) {
HXLINE(  73)																::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  73)																int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  73)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  73)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  73)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  73)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
            													else {
HXLINE(  73)														::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN(  73)														int index;
HXDLIN(  73)														if (undoImage1->useVirtualPos) {
HXLINE(  73)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            														}
            														else {
HXLINE(  73)															index = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            														}
HXDLIN(  73)														int value;
HXDLIN(  73)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)															value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            														}
            														else {
HXLINE(  73)															value = c;
            														}
HXDLIN(  73)														bool _hx_tmp;
HXDLIN(  73)														if ((index >= 0)) {
HXLINE(  73)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE(  73)															_hx_tmp = false;
            														}
HXDLIN(  73)														if (_hx_tmp) {
HXLINE(  73)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  73)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  73)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  73)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  73)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
            												else {
HXLINE(  73)													if (forceClear) {
HXLINE(  73)														::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN(  73)														int x = (dx - rectLeft);
HXDLIN(  73)														int y = (dy - rectTop);
HXDLIN(  73)														int index;
HXDLIN(  73)														if (undoImage1->useVirtualPos) {
HXLINE(  73)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            														}
            														else {
HXLINE(  73)															index = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            														}
HXDLIN(  73)														bool _hx_tmp;
HXDLIN(  73)														if ((index >= 0)) {
HXLINE(  73)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE(  73)															_hx_tmp = false;
            														}
HXDLIN(  73)														if (_hx_tmp) {
HXLINE(  73)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  73)															_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  73)															_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  73)															_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  73)															_this->b[(pos + 3)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  73)						{
HXLINE(  73)							int _g_min1 = xIter31->start;
HXDLIN(  73)							int _g_max1 = xIter31->max;
HXDLIN(  73)							while((_g_min1 < _g_max1)){
HXLINE(  73)								_g_min1 = (_g_min1 + 1);
HXDLIN(  73)								int px = (_g_min1 - 1);
HXDLIN(  73)								Float pcx = (( (Float)(px) ) - dx);
HXDLIN(  73)								{
HXLINE(  73)									int _g_min = yIter31->start;
HXDLIN(  73)									int _g_max = yIter31->max;
HXDLIN(  73)									while((_g_min < _g_max)){
HXLINE(  73)										_g_min = (_g_min + 1);
HXDLIN(  73)										int py = (_g_min - 1);
HXDLIN(  73)										Float pcy = (( (Float)(py) ) - dy);
HXDLIN(  73)										Float dot31 = ((pcx * bcx1) + (pcy * bcy1));
HXDLIN(  73)										Float dot32 = ((pcx * acx1) + (pcy * acy1));
HXDLIN(  73)										Float ratioA = (((dot221 * dot31) - (dot121 * dot32)) * denom11);
HXDLIN(  73)										Float ratioB = (((dot111 * dot32) - (dot121 * dot31)) * denom11);
HXDLIN(  73)										Float ratioC = ((((Float)1.0) - ratioB) - ratioA);
HXDLIN(  73)										bool _hx_tmp;
HXDLIN(  73)										bool _hx_tmp1;
HXDLIN(  73)										if ((ratioA >= 0)) {
HXLINE(  73)											_hx_tmp1 = (ratioB >= 0);
            										}
            										else {
HXLINE(  73)											_hx_tmp1 = false;
            										}
HXDLIN(  73)										if (_hx_tmp1) {
HXLINE(  73)											_hx_tmp = (ratioC >= 0);
            										}
            										else {
HXLINE(  73)											_hx_tmp = false;
            										}
HXDLIN(  73)										if (_hx_tmp) {
HXLINE(  73)											int i = ::Std_obj::_hx_int((((( (Float)(aA1) ) * ratioA) + (( (Float)(aB1) ) * ratioB)) + (( (Float)(aC1) ) * ratioC)));
HXDLIN(  73)											if ((i > 255)) {
HXLINE(  24)												i = 255;
            											}
HXLINE(  73)											if ((i < 0)) {
HXLINE(  25)												i = 0;
            											}
HXLINE(  73)											int this1 = i;
HXDLIN(  73)											int a = this1;
HXDLIN(  73)											int i1 = ::Std_obj::_hx_int((((( (Float)(rA1) ) * ratioA) + (( (Float)(rB1) ) * ratioB)) + (( (Float)(rC1) ) * ratioC)));
HXDLIN(  73)											if ((i1 > 255)) {
HXLINE(  24)												i1 = 255;
            											}
HXLINE(  73)											if ((i1 < 0)) {
HXLINE(  25)												i1 = 0;
            											}
HXLINE(  73)											int this2 = i1;
HXDLIN(  73)											int r = this2;
HXDLIN(  73)											int i2 = ::Std_obj::_hx_int((((( (Float)(gA1) ) * ratioA) + (( (Float)(gB1) ) * ratioB)) + (( (Float)(gC1) ) * ratioC)));
HXDLIN(  73)											if ((i2 > 255)) {
HXLINE(  24)												i2 = 255;
            											}
HXLINE(  73)											if ((i2 < 0)) {
HXLINE(  25)												i2 = 0;
            											}
HXLINE(  73)											int this3 = i2;
HXDLIN(  73)											int g = this3;
HXDLIN(  73)											int i3 = ::Std_obj::_hx_int((((( (Float)(bA1) ) * ratioA) + (( (Float)(bB1) ) * ratioB)) + (( (Float)(bC1) ) * ratioC)));
HXDLIN(  73)											if ((i3 > 255)) {
HXLINE(  24)												i3 = 255;
            											}
HXLINE(  73)											if ((i3 < 0)) {
HXLINE(  25)												i3 = 0;
            											}
HXLINE(  73)											int this4 = i3;
HXDLIN(  73)											int b = this4;
HXDLIN(  73)											{
HXLINE(  73)												int location;
HXDLIN(  73)												if (pixelShape->useVirtualPos) {
HXLINE(  73)													location = ::Std_obj::_hx_int(((((( (Float)(py) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + px) - pixelShape->virtualX));
            												}
            												else {
HXLINE(  73)													location = ::Std_obj::_hx_int(( (Float)(((py * pixelShape->width) + px)) ));
            												}
HXDLIN(  73)												bool _hx_tmp;
HXDLIN(  73)												if (pixelShape->transparent) {
HXLINE(  73)													_hx_tmp = (a < 254);
            												}
            												else {
HXLINE(  73)													_hx_tmp = false;
            												}
HXDLIN(  73)												if (_hx_tmp) {
HXLINE(  73)													::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  73)													::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)													int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  73)													int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  73)													int this3 = this2;
HXDLIN(  73)													int old;
HXDLIN(  73)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)														old = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            													}
            													else {
HXLINE(  73)														old = this3;
            													}
HXDLIN(  73)													int rhs = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  73)													Float a1;
HXDLIN(  73)													int this4 = ((old >> 24) & 255);
HXDLIN(  73)													if ((this4 == 0)) {
HXLINE(  73)														a1 = ((Float)0.);
            													}
            													else {
HXLINE(  73)														a1 = (( (Float)(this4) ) / ( (Float)(255) ));
            													}
HXDLIN(  73)													Float r1;
HXDLIN(  73)													int this5 = ((old >> 16) & 255);
HXDLIN(  73)													if ((this5 == 0)) {
HXLINE(  73)														r1 = ((Float)0.);
            													}
            													else {
HXLINE(  73)														r1 = (( (Float)(this5) ) / ( (Float)(255) ));
            													}
HXDLIN(  73)													Float g1;
HXDLIN(  73)													int this6 = ((old >> 8) & 255);
HXDLIN(  73)													if ((this6 == 0)) {
HXLINE(  73)														g1 = ((Float)0.);
            													}
            													else {
HXLINE(  73)														g1 = (( (Float)(this6) ) / ( (Float)(255) ));
            													}
HXDLIN(  73)													Float b1;
HXDLIN(  73)													int this7 = (old & 255);
HXDLIN(  73)													if ((this7 == 0)) {
HXLINE(  73)														b1 = ((Float)0.);
            													}
            													else {
HXLINE(  73)														b1 = (( (Float)(this7) ) / ( (Float)(255) ));
            													}
HXDLIN(  73)													Float a2;
HXDLIN(  73)													int this8 = ((rhs >> 24) & 255);
HXDLIN(  73)													if ((this8 == 0)) {
HXLINE(  73)														a2 = ((Float)0.);
            													}
            													else {
HXLINE(  73)														a2 = (( (Float)(this8) ) / ( (Float)(255) ));
            													}
HXDLIN(  73)													Float r2;
HXDLIN(  73)													int this9 = ((rhs >> 16) & 255);
HXDLIN(  73)													if ((this9 == 0)) {
HXLINE(  73)														r2 = ((Float)0.);
            													}
            													else {
HXLINE(  73)														r2 = (( (Float)(this9) ) / ( (Float)(255) ));
            													}
HXDLIN(  73)													Float g2;
HXDLIN(  73)													int this10 = ((rhs >> 8) & 255);
HXDLIN(  73)													if ((this10 == 0)) {
HXLINE(  73)														g2 = ((Float)0.);
            													}
            													else {
HXLINE(  73)														g2 = (( (Float)(this10) ) / ( (Float)(255) ));
            													}
HXDLIN(  73)													Float b2;
HXDLIN(  73)													int this11 = (rhs & 255);
HXDLIN(  73)													if ((this11 == 0)) {
HXLINE(  73)														b2 = ((Float)0.);
            													}
            													else {
HXLINE(  73)														b2 = (( (Float)(this11) ) / ( (Float)(255) ));
            													}
HXDLIN(  73)													Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  73)													int r3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  73)													int g3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  73)													int b3 = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  73)													int a4 = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  73)													int blended = ((((a4 << 24) | (r3 << 16)) | (g3 << 8)) | b3);
HXDLIN(  73)													{
HXLINE(  73)														::haxe::io::ArrayBufferViewImpl this12 = pixelShape->image;
HXDLIN(  73)														int value;
HXDLIN(  73)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)															value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            														}
            														else {
HXLINE(  73)															value = blended;
            														}
HXDLIN(  73)														bool _hx_tmp;
HXDLIN(  73)														if ((location >= 0)) {
HXLINE(  73)															_hx_tmp = (location < (this12->byteLength >> 2));
            														}
            														else {
HXLINE(  73)															_hx_tmp = false;
            														}
HXDLIN(  73)														if (_hx_tmp) {
HXLINE(  73)															::haxe::io::Bytes _this = this12->bytes;
HXDLIN(  73)															int pos = ((location << 2) + this12->byteOffset);
HXDLIN(  73)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  73)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  73)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  73)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
            												else {
HXLINE(  73)													::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  73)													int value;
HXDLIN(  73)													if (pixelShape->isLittle) {
HXLINE(  73)														value = ((((a << 24) | (b << 16)) | (g << 8)) | r);
            													}
            													else {
HXLINE(  73)														value = ((((a << 24) | (r << 16)) | (g << 8)) | b);
            													}
HXDLIN(  73)													bool _hx_tmp;
HXDLIN(  73)													if ((location >= 0)) {
HXLINE(  73)														_hx_tmp = (location < (this1->byteLength >> 2));
            													}
            													else {
HXLINE(  73)														_hx_tmp = false;
            													}
HXDLIN(  73)													if (_hx_tmp) {
HXLINE(  73)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)														int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  73)														_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  73)														_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  73)														_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  73)														_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  73)						if ((hasHit1 == false)) {
HXLINE(  73)							::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,bx,by,cx,cy,dx,dy,true);
HXDLIN(  73)							if (hasUndo1) {
HXLINE(  73)								v->undoImage = undoImage1;
HXDLIN(  73)								v->undoX = xIter31->start;
HXDLIN(  73)								v->undoY = yIter31->start;
            							}
            						}
            					}
HXDLIN(  73)					if ((hasHit == true)) {
HXLINE(  73)						::pixelimage::algo::HitQuad v = ::pixelimage::algo::HitQuad_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,dx,dy,true);
            					}
            				}
            			}
            		}
HXLINE(  75)		return this->super::render(pixelShape);
            	}



::hx::ObjectPtr< LineGradient_obj > LineGradient_obj::__new(::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< Float >  __o_x1,::hx::Null< Float >  __o_y1,::hx::Null< Float >  __o_x2,::hx::Null< Float >  __o_y2,::hx::Null< int >  __o_colorA,::hx::Null< int >  __o_colorB,::hx::Null< int >  __o_colorC,::hx::Null< int >  __o_colorD,::hx::Null< Float >  __o_strokeWidth) {
	::hx::ObjectPtr< LineGradient_obj > __this = new LineGradient_obj();
	__this->__construct(__o_opacity,__o_visibility,__o_x1,__o_y1,__o_x2,__o_y2,__o_colorA,__o_colorB,__o_colorC,__o_colorD,__o_strokeWidth);
	return __this;
}

::hx::ObjectPtr< LineGradient_obj > LineGradient_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< Float >  __o_x1,::hx::Null< Float >  __o_y1,::hx::Null< Float >  __o_x2,::hx::Null< Float >  __o_y2,::hx::Null< int >  __o_colorA,::hx::Null< int >  __o_colorB,::hx::Null< int >  __o_colorC,::hx::Null< int >  __o_colorD,::hx::Null< Float >  __o_strokeWidth) {
	LineGradient_obj *__this = (LineGradient_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(LineGradient_obj), true, "pixelimage.triangleGML.gradientContour.LineGradient"));
	*(void **)__this = LineGradient_obj::_hx_vtable;
	__this->__construct(__o_opacity,__o_visibility,__o_x1,__o_y1,__o_x2,__o_y2,__o_colorA,__o_colorB,__o_colorC,__o_colorD,__o_strokeWidth);
	return __this;
}

LineGradient_obj::LineGradient_obj()
{
}

::hx::Val LineGradient_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"x1") ) { return ::hx::Val( x1 ); }
		if (HX_FIELD_EQ(inName,"y1") ) { return ::hx::Val( y1 ); }
		if (HX_FIELD_EQ(inName,"x2") ) { return ::hx::Val( x2 ); }
		if (HX_FIELD_EQ(inName,"y2") ) { return ::hx::Val( y2 ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { return ::hx::Val( render_dyn() ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"strokeWidth") ) { return ::hx::Val( strokeWidth ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setParameter") ) { return ::hx::Val( setParameter_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val LineGradient_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"x1") ) { x1=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y1") ) { y1=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"x2") ) { x2=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y2") ) { y2=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"strokeWidth") ) { strokeWidth=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void LineGradient_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("x1",b9,68,00,00));
	outFields->push(HX_("y1",98,69,00,00));
	outFields->push(HX_("x2",ba,68,00,00));
	outFields->push(HX_("y2",99,69,00,00));
	outFields->push(HX_("strokeWidth",2e,f7,1c,e3));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo LineGradient_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(LineGradient_obj,x1),HX_("x1",b9,68,00,00)},
	{::hx::fsFloat,(int)offsetof(LineGradient_obj,y1),HX_("y1",98,69,00,00)},
	{::hx::fsFloat,(int)offsetof(LineGradient_obj,x2),HX_("x2",ba,68,00,00)},
	{::hx::fsFloat,(int)offsetof(LineGradient_obj,y2),HX_("y2",99,69,00,00)},
	{::hx::fsFloat,(int)offsetof(LineGradient_obj,strokeWidth),HX_("strokeWidth",2e,f7,1c,e3)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *LineGradient_obj_sStaticStorageInfo = 0;
#endif

static ::String LineGradient_obj_sMemberFields[] = {
	HX_("x1",b9,68,00,00),
	HX_("y1",98,69,00,00),
	HX_("x2",ba,68,00,00),
	HX_("y2",99,69,00,00),
	HX_("strokeWidth",2e,f7,1c,e3),
	HX_("setParameter",a7,f5,ff,6c),
	HX_("render",56,6b,29,05),
	::String(null()) };

::hx::Class LineGradient_obj::__mClass;

void LineGradient_obj::__register()
{
	LineGradient_obj _hx_dummy;
	LineGradient_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pixelimage.triangleGML.gradientContour.LineGradient",91,84,20,6c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(LineGradient_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< LineGradient_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = LineGradient_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = LineGradient_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pixelimage
} // end namespace triangleGML
} // end namespace gradientContour
