// Generated by Haxe 4.3.0-rc.1+
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_ArrayBufferViewImpl
#include <haxe/io/ArrayBufferViewImpl.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_pixelimage_ImageStruct
#include <pixelimage/ImageStruct.h>
#endif
#ifndef INCLUDED_pixelimage__Endian_Endian_Fields_
#include <pixelimage/_Endian/Endian_Fields_.h>
#endif
#ifndef INCLUDED_pixelimage_algo_HitQuad
#include <pixelimage/algo/HitQuad.h>
#endif
#ifndef INCLUDED_pixelimage_algo_HitTri
#include <pixelimage/algo/HitTri.h>
#endif
#ifndef INCLUDED_pixelimage_algo_IhitObj
#include <pixelimage/algo/IhitObj.h>
#endif
#ifndef INCLUDED_pixelimage_iter_IntIterStart
#include <pixelimage/iter/IntIterStart.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_BasicShape
#include <pixelimage/triangleGML/coreShape/BasicShape.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_FillShape
#include <pixelimage/triangleGML/coreShape/FillShape.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_GroupShape
#include <pixelimage/triangleGML/coreShape/GroupShape.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_ShapeInterface
#include <pixelimage/triangleGML/coreShape/ShapeInterface.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_shape_QuadrilateralShape
#include <pixelimage/triangleGML/shape/QuadrilateralShape.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_2d44117325b279f2_33_new,"pixelimage.triangleGML.shape.QuadrilateralShape","new",0xc524f070,"pixelimage.triangleGML.shape.QuadrilateralShape.new","pixelimage/triangleGML/shape/QuadrilateralShape.hx",33,0x1d59611d)
HX_LOCAL_STACK_FRAME(_hx_pos_2d44117325b279f2_45_setParameter,"pixelimage.triangleGML.shape.QuadrilateralShape","setParameter",0x59b25397,"pixelimage.triangleGML.shape.QuadrilateralShape.setParameter","pixelimage/triangleGML/shape/QuadrilateralShape.hx",45,0x1d59611d)
HX_LOCAL_STACK_FRAME(_hx_pos_2d44117325b279f2_66_render,"pixelimage.triangleGML.shape.QuadrilateralShape","render",0x8a5fb546,"pixelimage.triangleGML.shape.QuadrilateralShape.render","pixelimage/triangleGML/shape/QuadrilateralShape.hx",66,0x1d59611d)
namespace pixelimage{
namespace triangleGML{
namespace shape{

void QuadrilateralShape_obj::__construct(::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< int >  __o_strokeColor,::hx::Null< Float >  __o_strokeWidth,::Array< ::String > strokeDashGapArray,::hx::Null< int >  __o_fill,::hx::Null< Float >  __o_x1,::hx::Null< Float >  __o_y1,::hx::Null< Float >  __o_x2,::hx::Null< Float >  __o_y2,::hx::Null< Float >  __o_x3,::hx::Null< Float >  __o_y3,::hx::Null< Float >  __o_x4,::hx::Null< Float >  __o_y4){
            		Float opacity = __o_opacity.Default(((Float)1.));
            		bool visibility = __o_visibility.Default(true);
            		int strokeColor = __o_strokeColor.Default(0);
            		Float strokeWidth = __o_strokeWidth.Default(((Float)1.));
            		int fill = __o_fill.Default(0);
            		Float x1 = __o_x1.Default(((Float)0.));
            		Float y1 = __o_y1.Default(((Float)0.));
            		Float x2 = __o_x2.Default(((Float)0.));
            		Float y2 = __o_y2.Default(((Float)0.));
            		Float x3 = __o_x3.Default(((Float)0.));
            		Float y3 = __o_y3.Default(((Float)0.));
            		Float x4 = __o_x4.Default(((Float)0.));
            		Float y4 = __o_y4.Default(((Float)0.));
            	HX_STACKFRAME(&_hx_pos_2d44117325b279f2_33_new)
HXLINE(  34)		super::__construct(opacity,visibility,strokeColor,strokeWidth,strokeDashGapArray,fill);
HXLINE(  35)		this->x1 = x1;
HXLINE(  36)		this->y1 = y1;
HXLINE(  37)		this->x2 = x2;
HXLINE(  38)		this->y2 = y2;
HXLINE(  39)		this->x3 = x3;
HXLINE(  40)		this->y3 = y3;
HXLINE(  41)		this->x4 = x4;
HXLINE(  42)		this->y4 = y4;
            	}

Dynamic QuadrilateralShape_obj::__CreateEmpty() { return new QuadrilateralShape_obj; }

void *QuadrilateralShape_obj::_hx_vtable = 0;

Dynamic QuadrilateralShape_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< QuadrilateralShape_obj > _hx_result = new QuadrilateralShape_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10],inArgs[11],inArgs[12],inArgs[13]);
	return _hx_result;
}

bool QuadrilateralShape_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x24e92cfb) {
		if (inClassId<=(int)0x2091632c) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2091632c;
		} else {
			return inClassId==(int)0x24e92cfb;
		}
	} else {
		return inClassId==(int)0x3377a80c || inClassId==(int)0x389f4e25;
	}
}

void QuadrilateralShape_obj::setParameter(::String name,::String value){
            	HX_STACKFRAME(&_hx_pos_2d44117325b279f2_45_setParameter)
HXDLIN(  45)		::String _hx_switch_0 = name;
            		if (  (_hx_switch_0==HX_("x1",b9,68,00,00)) ){
HXLINE(  47)			this->x1 = ::Std_obj::parseFloat(value);
HXDLIN(  47)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("x2",ba,68,00,00)) ){
HXLINE(  51)			this->x2 = ::Std_obj::parseFloat(value);
HXDLIN(  51)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("x3",bb,68,00,00)) ){
HXLINE(  55)			this->x3 = ::Std_obj::parseFloat(value);
HXDLIN(  55)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("x4",bc,68,00,00)) ){
HXLINE(  59)			this->x4 = ::Std_obj::parseFloat(value);
HXDLIN(  59)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("y1",98,69,00,00)) ){
HXLINE(  49)			this->y1 = ::Std_obj::parseFloat(value);
HXDLIN(  49)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("y2",99,69,00,00)) ){
HXLINE(  53)			this->y2 = ::Std_obj::parseFloat(value);
HXDLIN(  53)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("y3",9a,69,00,00)) ){
HXLINE(  57)			this->y3 = ::Std_obj::parseFloat(value);
HXDLIN(  57)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("y4",9b,69,00,00)) ){
HXLINE(  61)			this->y4 = ::Std_obj::parseFloat(value);
HXDLIN(  61)			goto _hx_goto_1;
            		}
            		/* default */{
HXLINE(  63)			this->super::setParameter(name,value);
            		}
            		_hx_goto_1:;
            	}


::pixelimage::ImageStruct QuadrilateralShape_obj::render(::pixelimage::ImageStruct pixelShape){
            	HX_GC_STACKFRAME(&_hx_pos_2d44117325b279f2_66_render)
HXLINE(  67)		Float a = this->x1;
HXDLIN(  67)		Float b = this->x2;
HXDLIN(  67)		Float c = this->x3;
HXDLIN(  67)		Float d = this->x4;
HXDLIN(  67)		int min = ::Math_obj::floor(a);
HXDLIN(  67)		int max = ::Math_obj::ceil(a);
HXDLIN(  67)		if ((b < min)) {
HXLINE(  31)			min = ::Math_obj::floor(b);
            		}
            		else {
HXLINE(  67)			if ((b > max)) {
HXLINE(  33)				max = ::Math_obj::ceil(b);
            			}
            		}
HXLINE(  67)		if ((c < min)) {
HXLINE(  36)			min = ::Math_obj::floor(c);
            		}
            		else {
HXLINE(  67)			if ((c > max)) {
HXLINE(  38)				max = ::Math_obj::ceil(c);
            			}
            		}
HXLINE(  67)		if ((d < min)) {
HXLINE(  41)			min = ::Math_obj::floor(d);
            		}
            		else {
HXLINE(  67)			if ((d > max)) {
HXLINE(  43)				max = ::Math_obj::ceil(d);
            			}
            		}
HXLINE(  67)		int ii_min = min;
HXDLIN(  67)		int ii_max = max;
HXDLIN(  67)		::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  67)		::pixelimage::iter::IntIterStart iterX = this1;
HXLINE(  68)		Float a1 = this->y1;
HXDLIN(  68)		Float b1 = this->y2;
HXDLIN(  68)		Float c1 = this->y3;
HXDLIN(  68)		Float d1 = this->y4;
HXDLIN(  68)		int min1 = ::Math_obj::floor(a1);
HXDLIN(  68)		int max1 = ::Math_obj::ceil(a1);
HXDLIN(  68)		if ((b1 < min1)) {
HXLINE(  31)			min1 = ::Math_obj::floor(b1);
            		}
            		else {
HXLINE(  68)			if ((b1 > max1)) {
HXLINE(  33)				max1 = ::Math_obj::ceil(b1);
            			}
            		}
HXLINE(  68)		if ((c1 < min1)) {
HXLINE(  36)			min1 = ::Math_obj::floor(c1);
            		}
            		else {
HXLINE(  68)			if ((c1 > max1)) {
HXLINE(  38)				max1 = ::Math_obj::ceil(c1);
            			}
            		}
HXLINE(  68)		if ((d1 < min1)) {
HXLINE(  41)			min1 = ::Math_obj::floor(d1);
            		}
            		else {
HXLINE(  68)			if ((d1 > max1)) {
HXLINE(  43)				max1 = ::Math_obj::ceil(d1);
            			}
            		}
HXLINE(  68)		int ii_min1 = min1;
HXDLIN(  68)		int ii_max1 = max1;
HXDLIN(  68)		::pixelimage::iter::IntIterStart this2 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min1,ii_max1);
HXDLIN(  68)		::pixelimage::iter::IntIterStart iterY = this2;
HXLINE(  69)		int left = iterX->start;
HXLINE(  70)		int top = iterY->start;
HXLINE(  71)		int width = (iterX->max - left);
HXLINE(  72)		int height = (iterY->max - top);
HXLINE(  73)		int w = ::Math_obj::ceil(( (Float)(width) ));
HXDLIN(  73)		int h = ::Math_obj::ceil(( (Float)(height) ));
HXDLIN(  73)		int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN(  73)		::haxe::io::ArrayBufferViewImpl this3 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  73)		::haxe::io::ArrayBufferViewImpl this4 = this3;
HXDLIN(  73)		::pixelimage::ImageStruct this5 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this4);
HXDLIN(  73)		::pixelimage::ImageStruct this6 = this5;
HXDLIN(  73)		::pixelimage::ImageStruct temp = this6;
HXLINE(  74)		temp->transparent = false;
HXLINE(  75)		Float rx = (( (Float)(width) ) / ( (Float)(2) ));
HXLINE(  76)		Float ry = (( (Float)(height) ) / ( (Float)(2) ));
HXLINE(  78)		Float x1_ = (this->x1 - ( (Float)(left) ));
HXLINE(  79)		Float x2_ = (this->x2 - ( (Float)(left) ));
HXLINE(  80)		Float x3_ = (this->x2 - ( (Float)(left) ));
HXLINE(  81)		Float x4_ = (this->x4 - ( (Float)(left) ));
HXLINE(  83)		Float y1_ = (this->y1 - ( (Float)(top) ));
HXLINE(  84)		Float y2_ = (this->y2 - ( (Float)(top) ));
HXLINE(  85)		Float y3_ = (this->y3 - ( (Float)(top) ));
HXLINE(  86)		Float y4_ = (this->y4 - ( (Float)(top) ));
HXLINE(  89)		{
HXLINE(  89)			int color = this->strokeColor;
HXDLIN(  89)			bool hasHit = false;
HXDLIN(  89)			{
HXLINE(  89)				{
HXLINE(  89)					Float bx = x2_;
HXDLIN(  89)					Float by = y2_;
HXDLIN(  89)					Float cx = x4_;
HXDLIN(  89)					Float cy = y4_;
HXDLIN(  89)					bool hasUndo = false;
HXDLIN(  89)					bool adjustWinding = (((((x1_ * by) - (bx * y1_)) + ((bx * cy) - (cx * by))) + ((cx * y1_) - (x1_ * cy))) > 0);
HXDLIN(  89)					if (!(adjustWinding)) {
HXLINE(  89)						Float bx_ = bx;
HXDLIN(  89)						Float by_ = by;
HXLINE(  26)						bx = cx;
HXLINE(  27)						by = cy;
HXLINE(  28)						cx = bx_;
HXLINE(  29)						cy = by_;
            					}
HXLINE(  89)					{
HXLINE(  89)						Float s0 = ((y1_ * cx) - (x1_ * cy));
HXDLIN(  89)						Float sx = (cy - y1_);
HXDLIN(  89)						Float sy = (x1_ - cx);
HXDLIN(  89)						Float t0 = ((x1_ * by) - (y1_ * bx));
HXDLIN(  89)						Float tx = (y1_ - by);
HXDLIN(  89)						Float ty = (bx - x1_);
HXDLIN(  89)						Float A = ((((-(by) * cx) + (y1_ * (-(bx) + cx))) + (x1_ * (by - cy))) + (bx * cy));
HXDLIN(  89)						::pixelimage::iter::IntIterStart xIter3;
HXDLIN(  89)						if ((x1_ > bx)) {
HXLINE(  89)							if ((x1_ > cx)) {
HXLINE(  89)								int min;
HXDLIN(  89)								if ((bx > cx)) {
HXLINE(  89)									min = ::Math_obj::floor(cx);
            								}
            								else {
HXLINE(  89)									min = ::Math_obj::floor(bx);
            								}
HXDLIN(  89)								int ii_min = min;
HXDLIN(  89)								int ii_max = ::Math_obj::ceil(x1_);
HXDLIN(  89)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  89)								xIter3 = this1;
            							}
            							else {
HXLINE(  89)								int ii_min = ::Math_obj::floor(bx);
HXDLIN(  89)								int ii_max = ::Math_obj::ceil(cx);
HXDLIN(  89)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  89)								xIter3 = this1;
            							}
            						}
            						else {
HXLINE(  89)							if ((bx > cx)) {
HXLINE(  89)								int min;
HXDLIN(  89)								if ((x1_ > cx)) {
HXLINE(  89)									min = ::Math_obj::floor(cx);
            								}
            								else {
HXLINE(  89)									min = ::Math_obj::ceil(x1_);
            								}
HXDLIN(  89)								int ii_min = min;
HXDLIN(  89)								int ii_max = ::Math_obj::ceil(bx);
HXDLIN(  89)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  89)								xIter3 = this1;
            							}
            							else {
HXLINE(  89)								int ii_min = ::Math_obj::floor(x1_);
HXDLIN(  89)								int ii_max = ::Math_obj::ceil(cx);
HXDLIN(  89)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  89)								xIter3 = this1;
            							}
            						}
HXDLIN(  89)						::pixelimage::iter::IntIterStart yIter3;
HXDLIN(  89)						if ((y1_ > by)) {
HXLINE(  89)							if ((y1_ > cy)) {
HXLINE(  89)								int min;
HXDLIN(  89)								if ((by > cy)) {
HXLINE(  89)									min = ::Math_obj::floor(cy);
            								}
            								else {
HXLINE(  89)									min = ::Math_obj::floor(by);
            								}
HXDLIN(  89)								int ii_min = min;
HXDLIN(  89)								int ii_max = ::Math_obj::ceil(y1_);
HXDLIN(  89)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  89)								yIter3 = this1;
            							}
            							else {
HXLINE(  89)								int ii_min = ::Math_obj::floor(by);
HXDLIN(  89)								int ii_max = ::Math_obj::ceil(cy);
HXDLIN(  89)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  89)								yIter3 = this1;
            							}
            						}
            						else {
HXLINE(  89)							if ((by > cy)) {
HXLINE(  89)								int min;
HXDLIN(  89)								if ((y1_ > cy)) {
HXLINE(  89)									min = ::Math_obj::floor(cy);
            								}
            								else {
HXLINE(  89)									min = ::Math_obj::ceil(y1_);
            								}
HXDLIN(  89)								int ii_min = min;
HXDLIN(  89)								int ii_max = ::Math_obj::ceil(by);
HXDLIN(  89)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  89)								yIter3 = this1;
            							}
            							else {
HXLINE(  89)								int ii_min = ::Math_obj::floor(y1_);
HXDLIN(  89)								int ii_max = ::Math_obj::ceil(cy);
HXDLIN(  89)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  89)								yIter3 = this1;
            							}
            						}
HXDLIN(  89)						::pixelimage::ImageStruct undoImage = null();
HXDLIN(  89)						if (hasUndo) {
HXLINE(  89)							int w = ((xIter3->max - xIter3->start) + 1);
HXDLIN(  89)							int h = ((yIter3->max - yIter3->start) + 1);
HXDLIN(  89)							int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN(  89)							::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  89)							::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN(  89)							::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN(  89)							undoImage = this3;
HXDLIN(  89)							{
HXLINE(  89)								int rectLeft = xIter3->start;
HXDLIN(  89)								int rectTop = yIter3->start;
HXDLIN(  89)								int rectRight = xIter3->max;
HXDLIN(  89)								bool forceClear = false;
HXDLIN(  89)								{
HXLINE(  89)									int _g = rectTop;
HXDLIN(  89)									int _g1 = yIter3->max;
HXDLIN(  89)									while((_g < _g1)){
HXLINE(  89)										_g = (_g + 1);
HXDLIN(  89)										int dy = (_g - 1);
HXDLIN(  89)										{
HXLINE(  89)											int _g1 = rectLeft;
HXDLIN(  89)											int _g2 = rectRight;
HXDLIN(  89)											while((_g1 < _g2)){
HXLINE(  89)												_g1 = (_g1 + 1);
HXDLIN(  89)												int dx = (_g1 - 1);
HXDLIN(  89)												::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN(  89)												int index;
HXDLIN(  89)												if (temp->useVirtualPos) {
HXLINE(  89)													index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - temp->virtualY) * ( (Float)(temp->width) )) + dx) - temp->virtualX));
            												}
            												else {
HXLINE(  89)													index = ::Std_obj::_hx_int(( (Float)(((dy * temp->width) + dx)) ));
            												}
HXDLIN(  89)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  89)												int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  89)												int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  89)												int col;
HXDLIN(  89)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  89)													col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE(  89)													col = c;
            												}
HXDLIN(  89)												bool _hx_tmp;
HXDLIN(  89)												if (temp->useMask) {
HXLINE(  89)													_hx_tmp = ::hx::IsNotNull( temp->mask );
            												}
            												else {
HXLINE(  89)													_hx_tmp = false;
            												}
HXDLIN(  89)												if (_hx_tmp) {
HXLINE(  89)													::pixelimage::ImageStruct this1 = temp->mask;
HXDLIN(  89)													::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  89)													int index;
HXDLIN(  89)													if (this1->useVirtualPos) {
HXLINE(  89)														index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            													}
            													else {
HXLINE(  89)														index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            													}
HXDLIN(  89)													::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  89)													int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  89)													int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  89)													int v;
HXDLIN(  89)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  89)														v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE(  89)														v = c;
            													}
HXDLIN(  89)													int this3 = v;
HXDLIN(  89)													int maskPixel = this3;
HXDLIN(  89)													int this4 = col;
HXDLIN(  89)													int this5 = this4;
HXDLIN(  89)													if ((maskPixel == 0)) {
HXLINE(  89)														int this1 = this5;
HXDLIN(  89)														col = this1;
            													}
            													else {
HXLINE(  89)														Float m0;
HXDLIN(  89)														int this1 = ((maskPixel >> 24) & 255);
HXDLIN(  89)														if ((this1 == 0)) {
HXLINE(  89)															m0 = ((Float)0.);
            														}
            														else {
HXLINE(  89)															m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            														}
HXDLIN(  89)														Float m1;
HXDLIN(  89)														int this2 = ((maskPixel >> 16) & 255);
HXDLIN(  89)														if ((this2 == 0)) {
HXLINE(  89)															m1 = ((Float)0.);
            														}
            														else {
HXLINE(  89)															m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            														}
HXDLIN(  89)														Float m2;
HXDLIN(  89)														int this3 = ((maskPixel >> 8) & 255);
HXDLIN(  89)														if ((this3 == 0)) {
HXLINE(  89)															m2 = ((Float)0.);
            														}
            														else {
HXLINE(  89)															m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            														}
HXDLIN(  89)														Float m3;
HXDLIN(  89)														int this4 = (maskPixel & 255);
HXDLIN(  89)														if ((this4 == 0)) {
HXLINE(  89)															m3 = ((Float)0.);
            														}
            														else {
HXLINE(  89)															m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            														}
HXDLIN(  89)														int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN(  89)														int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN(  89)														int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN(  89)														int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN(  89)														col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            													}
            												}
HXDLIN(  89)												if ((col != 0)) {
HXLINE(  89)													int x = (dx - rectLeft);
HXDLIN(  89)													int y = (dy - rectTop);
HXDLIN(  89)													int this1 = col;
HXDLIN(  89)													int c = this1;
HXDLIN(  89)													bool _hx_tmp;
HXDLIN(  89)													if ((((c >> 24) & 255) < 254)) {
HXLINE(  89)														_hx_tmp = undoImage->transparent;
            													}
            													else {
HXLINE(  89)														_hx_tmp = false;
            													}
HXDLIN(  89)													if (_hx_tmp) {
HXLINE(  89)														int location;
HXDLIN(  89)														if (undoImage->useVirtualPos) {
HXLINE(  89)															location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            														}
            														else {
HXLINE(  89)															location = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            														}
HXDLIN(  89)														::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  89)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  89)														int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  89)														int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  89)														int this3 = this2;
HXDLIN(  89)														int this4;
HXDLIN(  89)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  89)															this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            														}
            														else {
HXLINE(  89)															this4 = this3;
            														}
HXDLIN(  89)														Float a1;
HXDLIN(  89)														int this5 = ((this4 >> 24) & 255);
HXDLIN(  89)														if ((this5 == 0)) {
HXLINE(  89)															a1 = ((Float)0.);
            														}
            														else {
HXLINE(  89)															a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            														}
HXDLIN(  89)														Float r1;
HXDLIN(  89)														int this6 = ((this4 >> 16) & 255);
HXDLIN(  89)														if ((this6 == 0)) {
HXLINE(  89)															r1 = ((Float)0.);
            														}
            														else {
HXLINE(  89)															r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            														}
HXDLIN(  89)														Float g1;
HXDLIN(  89)														int this7 = ((this4 >> 8) & 255);
HXDLIN(  89)														if ((this7 == 0)) {
HXLINE(  89)															g1 = ((Float)0.);
            														}
            														else {
HXLINE(  89)															g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            														}
HXDLIN(  89)														Float b1;
HXDLIN(  89)														int this8 = (this4 & 255);
HXDLIN(  89)														if ((this8 == 0)) {
HXLINE(  89)															b1 = ((Float)0.);
            														}
            														else {
HXLINE(  89)															b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            														}
HXDLIN(  89)														Float a2;
HXDLIN(  89)														int this9 = ((col >> 24) & 255);
HXDLIN(  89)														if ((this9 == 0)) {
HXLINE(  89)															a2 = ((Float)0.);
            														}
            														else {
HXLINE(  89)															a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            														}
HXDLIN(  89)														Float r2;
HXDLIN(  89)														int this10 = ((col >> 16) & 255);
HXDLIN(  89)														if ((this10 == 0)) {
HXLINE(  89)															r2 = ((Float)0.);
            														}
            														else {
HXLINE(  89)															r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            														}
HXDLIN(  89)														Float g2;
HXDLIN(  89)														int this11 = ((col >> 8) & 255);
HXDLIN(  89)														if ((this11 == 0)) {
HXLINE(  89)															g2 = ((Float)0.);
            														}
            														else {
HXLINE(  89)															g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            														}
HXDLIN(  89)														Float b2;
HXDLIN(  89)														int this12 = (col & 255);
HXDLIN(  89)														if ((this12 == 0)) {
HXLINE(  89)															b2 = ((Float)0.);
            														}
            														else {
HXLINE(  89)															b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            														}
HXDLIN(  89)														Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  89)														int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  89)														int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  89)														int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  89)														int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  89)														int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  89)														{
HXLINE(  89)															::haxe::io::ArrayBufferViewImpl this13 = undoImage->image;
HXDLIN(  89)															int value;
HXDLIN(  89)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  89)																value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            															}
            															else {
HXLINE(  89)																value = blended;
            															}
HXDLIN(  89)															bool _hx_tmp;
HXDLIN(  89)															if ((location >= 0)) {
HXLINE(  89)																_hx_tmp = (location < (this13->byteLength >> 2));
            															}
            															else {
HXLINE(  89)																_hx_tmp = false;
            															}
HXDLIN(  89)															if (_hx_tmp) {
HXLINE(  89)																::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  89)																int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  89)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  89)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  89)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  89)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
            													else {
HXLINE(  89)														::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  89)														int index;
HXDLIN(  89)														if (undoImage->useVirtualPos) {
HXLINE(  89)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            														}
            														else {
HXLINE(  89)															index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            														}
HXDLIN(  89)														int value;
HXDLIN(  89)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  89)															value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            														}
            														else {
HXLINE(  89)															value = c;
            														}
HXDLIN(  89)														bool _hx_tmp;
HXDLIN(  89)														if ((index >= 0)) {
HXLINE(  89)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE(  89)															_hx_tmp = false;
            														}
HXDLIN(  89)														if (_hx_tmp) {
HXLINE(  89)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  89)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  89)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  89)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  89)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  89)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
            												else {
HXLINE(  89)													if (forceClear) {
HXLINE(  89)														::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  89)														int x = (dx - rectLeft);
HXDLIN(  89)														int y = (dy - rectTop);
HXDLIN(  89)														int index;
HXDLIN(  89)														if (undoImage->useVirtualPos) {
HXLINE(  89)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            														}
            														else {
HXLINE(  89)															index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            														}
HXDLIN(  89)														bool _hx_tmp;
HXDLIN(  89)														if ((index >= 0)) {
HXLINE(  89)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE(  89)															_hx_tmp = false;
            														}
HXDLIN(  89)														if (_hx_tmp) {
HXLINE(  89)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  89)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  89)															_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  89)															_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  89)															_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  89)															_this->b[(pos + 3)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  89)						bool found = false;
HXDLIN(  89)						Float s = ((Float)0.);
HXDLIN(  89)						Float t = ((Float)0.);
HXDLIN(  89)						Float sxx = ((Float)0.);
HXDLIN(  89)						Float txx = ((Float)0.);
HXDLIN(  89)						{
HXLINE(  89)							int _g_min = xIter3->start;
HXDLIN(  89)							int _g_max = xIter3->max;
HXDLIN(  89)							while((_g_min < _g_max)){
HXLINE(  89)								_g_min = (_g_min + 1);
HXDLIN(  89)								int x = (_g_min - 1);
HXLINE(  61)								sxx = (sx * ( (Float)(x) ));
HXLINE(  62)								txx = (tx * ( (Float)(x) ));
HXLINE(  63)								found = false;
HXLINE(  89)								{
HXLINE(  89)									int _g_min1 = yIter3->start;
HXDLIN(  89)									int _g_max = yIter3->max;
HXDLIN(  89)									while((_g_min1 < _g_max)){
HXLINE(  89)										_g_min1 = (_g_min1 + 1);
HXDLIN(  89)										int y = (_g_min1 - 1);
HXLINE(  65)										s = ((s0 + sxx) + (sy * ( (Float)(y) )));
HXLINE(  66)										t = ((t0 + txx) + (ty * ( (Float)(y) )));
HXLINE(  89)										bool _hx_tmp;
HXDLIN(  89)										if (!((s <= 0))) {
HXLINE(  89)											_hx_tmp = (t <= 0);
            										}
            										else {
HXLINE(  89)											_hx_tmp = true;
            										}
HXDLIN(  89)										if (_hx_tmp) {
HXLINE(  89)											if (found) {
HXLINE(  89)												goto _hx_goto_6;
            											}
            										}
            										else {
HXLINE(  89)											if (((s + t) < A)) {
HXLINE(  89)												{
HXLINE(  89)													int this1 = color;
HXDLIN(  89)													int c = this1;
HXDLIN(  89)													bool _hx_tmp;
HXDLIN(  89)													if ((((c >> 24) & 255) < 254)) {
HXLINE(  89)														_hx_tmp = temp->transparent;
            													}
            													else {
HXLINE(  89)														_hx_tmp = false;
            													}
HXDLIN(  89)													if (_hx_tmp) {
HXLINE(  89)														int location;
HXDLIN(  89)														if (temp->useVirtualPos) {
HXLINE(  89)															location = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            														}
            														else {
HXLINE(  89)															location = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            														}
HXDLIN(  89)														::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN(  89)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  89)														int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  89)														int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  89)														int this3 = this2;
HXDLIN(  89)														int this4;
HXDLIN(  89)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  89)															this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            														}
            														else {
HXLINE(  89)															this4 = this3;
            														}
HXDLIN(  89)														Float a1;
HXDLIN(  89)														int this5 = ((this4 >> 24) & 255);
HXDLIN(  89)														if ((this5 == 0)) {
HXLINE(  89)															a1 = ((Float)0.);
            														}
            														else {
HXLINE(  89)															a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            														}
HXDLIN(  89)														Float r1;
HXDLIN(  89)														int this6 = ((this4 >> 16) & 255);
HXDLIN(  89)														if ((this6 == 0)) {
HXLINE(  89)															r1 = ((Float)0.);
            														}
            														else {
HXLINE(  89)															r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            														}
HXDLIN(  89)														Float g1;
HXDLIN(  89)														int this7 = ((this4 >> 8) & 255);
HXDLIN(  89)														if ((this7 == 0)) {
HXLINE(  89)															g1 = ((Float)0.);
            														}
            														else {
HXLINE(  89)															g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            														}
HXDLIN(  89)														Float b1;
HXDLIN(  89)														int this8 = (this4 & 255);
HXDLIN(  89)														if ((this8 == 0)) {
HXLINE(  89)															b1 = ((Float)0.);
            														}
            														else {
HXLINE(  89)															b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            														}
HXDLIN(  89)														Float a2;
HXDLIN(  89)														int this9 = ((color >> 24) & 255);
HXDLIN(  89)														if ((this9 == 0)) {
HXLINE(  89)															a2 = ((Float)0.);
            														}
            														else {
HXLINE(  89)															a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            														}
HXDLIN(  89)														Float r2;
HXDLIN(  89)														int this10 = ((color >> 16) & 255);
HXDLIN(  89)														if ((this10 == 0)) {
HXLINE(  89)															r2 = ((Float)0.);
            														}
            														else {
HXLINE(  89)															r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            														}
HXDLIN(  89)														Float g2;
HXDLIN(  89)														int this11 = ((color >> 8) & 255);
HXDLIN(  89)														if ((this11 == 0)) {
HXLINE(  89)															g2 = ((Float)0.);
            														}
            														else {
HXLINE(  89)															g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            														}
HXDLIN(  89)														Float b2;
HXDLIN(  89)														int this12 = (color & 255);
HXDLIN(  89)														if ((this12 == 0)) {
HXLINE(  89)															b2 = ((Float)0.);
            														}
            														else {
HXLINE(  89)															b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            														}
HXDLIN(  89)														Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  89)														int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  89)														int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  89)														int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  89)														int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  89)														int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  89)														{
HXLINE(  89)															::haxe::io::ArrayBufferViewImpl this13 = temp->image;
HXDLIN(  89)															int value;
HXDLIN(  89)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  89)																value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            															}
            															else {
HXLINE(  89)																value = blended;
            															}
HXDLIN(  89)															bool _hx_tmp;
HXDLIN(  89)															if ((location >= 0)) {
HXLINE(  89)																_hx_tmp = (location < (this13->byteLength >> 2));
            															}
            															else {
HXLINE(  89)																_hx_tmp = false;
            															}
HXDLIN(  89)															if (_hx_tmp) {
HXLINE(  89)																::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  89)																int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  89)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  89)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  89)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  89)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
            													else {
HXLINE(  89)														::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN(  89)														int index;
HXDLIN(  89)														if (temp->useVirtualPos) {
HXLINE(  89)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            														}
            														else {
HXLINE(  89)															index = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            														}
HXDLIN(  89)														int value;
HXDLIN(  89)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  89)															value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            														}
            														else {
HXLINE(  89)															value = c;
            														}
HXDLIN(  89)														bool _hx_tmp;
HXDLIN(  89)														if ((index >= 0)) {
HXLINE(  89)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE(  89)															_hx_tmp = false;
            														}
HXDLIN(  89)														if (_hx_tmp) {
HXLINE(  89)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  89)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  89)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  89)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  89)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  89)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
HXLINE(  74)												found = true;
            											}
            											else {
HXLINE(  89)												if (found) {
HXLINE(  89)													goto _hx_goto_6;
            												}
            											}
            										}
            									}
            									_hx_goto_6:;
            								}
            							}
            						}
HXDLIN(  89)						if ((hasHit == true)) {
HXLINE(  89)							::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,x1_,y1_,bx,by,cx,cy,true);
HXDLIN(  89)							if (hasUndo) {
HXLINE(  89)								v->undoImage = undoImage;
HXDLIN(  89)								v->undoX = xIter3->start;
HXDLIN(  89)								v->undoY = yIter3->start;
            							}
            						}
            					}
            				}
HXDLIN(  89)				{
HXLINE(  89)					Float bx1 = x3_;
HXDLIN(  89)					Float by1 = y3_;
HXDLIN(  89)					Float cx1 = x4_;
HXDLIN(  89)					Float cy1 = y4_;
HXDLIN(  89)					bool hasUndo1 = false;
HXDLIN(  89)					bool adjustWinding1 = (((((x2_ * by1) - (bx1 * y2_)) + ((bx1 * cy1) - (cx1 * by1))) + ((cx1 * y2_) - (x2_ * cy1))) > 0);
HXDLIN(  89)					if (!(adjustWinding1)) {
HXLINE(  89)						Float bx_ = bx1;
HXDLIN(  89)						Float by_ = by1;
HXLINE(  26)						bx1 = cx1;
HXLINE(  27)						by1 = cy1;
HXLINE(  28)						cx1 = bx_;
HXLINE(  29)						cy1 = by_;
            					}
HXLINE(  89)					{
HXLINE(  89)						Float s01 = ((y2_ * cx1) - (x2_ * cy1));
HXDLIN(  89)						Float sx1 = (cy1 - y2_);
HXDLIN(  89)						Float sy1 = (x2_ - cx1);
HXDLIN(  89)						Float t01 = ((x2_ * by1) - (y2_ * bx1));
HXDLIN(  89)						Float tx1 = (y2_ - by1);
HXDLIN(  89)						Float ty1 = (bx1 - x2_);
HXDLIN(  89)						Float A1 = ((((-(by1) * cx1) + (y2_ * (-(bx1) + cx1))) + (x2_ * (by1 - cy1))) + (bx1 * cy1));
HXDLIN(  89)						::pixelimage::iter::IntIterStart xIter31;
HXDLIN(  89)						if ((x2_ > bx1)) {
HXLINE(  89)							if ((x2_ > cx1)) {
HXLINE(  89)								int min;
HXDLIN(  89)								if ((bx1 > cx1)) {
HXLINE(  89)									min = ::Math_obj::floor(cx1);
            								}
            								else {
HXLINE(  89)									min = ::Math_obj::floor(bx1);
            								}
HXDLIN(  89)								int ii_min = min;
HXDLIN(  89)								int ii_max = ::Math_obj::ceil(x2_);
HXDLIN(  89)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  89)								xIter31 = this1;
            							}
            							else {
HXLINE(  89)								int ii_min = ::Math_obj::floor(bx1);
HXDLIN(  89)								int ii_max = ::Math_obj::ceil(cx1);
HXDLIN(  89)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  89)								xIter31 = this1;
            							}
            						}
            						else {
HXLINE(  89)							if ((bx1 > cx1)) {
HXLINE(  89)								int min;
HXDLIN(  89)								if ((x2_ > cx1)) {
HXLINE(  89)									min = ::Math_obj::floor(cx1);
            								}
            								else {
HXLINE(  89)									min = ::Math_obj::ceil(x2_);
            								}
HXDLIN(  89)								int ii_min = min;
HXDLIN(  89)								int ii_max = ::Math_obj::ceil(bx1);
HXDLIN(  89)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  89)								xIter31 = this1;
            							}
            							else {
HXLINE(  89)								int ii_min = ::Math_obj::floor(x2_);
HXDLIN(  89)								int ii_max = ::Math_obj::ceil(cx1);
HXDLIN(  89)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  89)								xIter31 = this1;
            							}
            						}
HXDLIN(  89)						::pixelimage::iter::IntIterStart yIter31;
HXDLIN(  89)						if ((y2_ > by1)) {
HXLINE(  89)							if ((y2_ > cy1)) {
HXLINE(  89)								int min;
HXDLIN(  89)								if ((by1 > cy1)) {
HXLINE(  89)									min = ::Math_obj::floor(cy1);
            								}
            								else {
HXLINE(  89)									min = ::Math_obj::floor(by1);
            								}
HXDLIN(  89)								int ii_min = min;
HXDLIN(  89)								int ii_max = ::Math_obj::ceil(y2_);
HXDLIN(  89)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  89)								yIter31 = this1;
            							}
            							else {
HXLINE(  89)								int ii_min = ::Math_obj::floor(by1);
HXDLIN(  89)								int ii_max = ::Math_obj::ceil(cy1);
HXDLIN(  89)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  89)								yIter31 = this1;
            							}
            						}
            						else {
HXLINE(  89)							if ((by1 > cy1)) {
HXLINE(  89)								int min;
HXDLIN(  89)								if ((y2_ > cy1)) {
HXLINE(  89)									min = ::Math_obj::floor(cy1);
            								}
            								else {
HXLINE(  89)									min = ::Math_obj::ceil(y2_);
            								}
HXDLIN(  89)								int ii_min = min;
HXDLIN(  89)								int ii_max = ::Math_obj::ceil(by1);
HXDLIN(  89)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  89)								yIter31 = this1;
            							}
            							else {
HXLINE(  89)								int ii_min = ::Math_obj::floor(y2_);
HXDLIN(  89)								int ii_max = ::Math_obj::ceil(cy1);
HXDLIN(  89)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  89)								yIter31 = this1;
            							}
            						}
HXDLIN(  89)						::pixelimage::ImageStruct undoImage1 = null();
HXDLIN(  89)						if (hasUndo1) {
HXLINE(  89)							int w = ((xIter31->max - xIter31->start) + 1);
HXDLIN(  89)							int h = ((yIter31->max - yIter31->start) + 1);
HXDLIN(  89)							int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN(  89)							::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  89)							::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN(  89)							::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN(  89)							undoImage1 = this3;
HXDLIN(  89)							{
HXLINE(  89)								int rectLeft = xIter31->start;
HXDLIN(  89)								int rectTop = yIter31->start;
HXDLIN(  89)								int rectRight = xIter31->max;
HXDLIN(  89)								bool forceClear = false;
HXDLIN(  89)								{
HXLINE(  89)									int _g = rectTop;
HXDLIN(  89)									int _g1 = yIter31->max;
HXDLIN(  89)									while((_g < _g1)){
HXLINE(  89)										_g = (_g + 1);
HXDLIN(  89)										int dy = (_g - 1);
HXDLIN(  89)										{
HXLINE(  89)											int _g1 = rectLeft;
HXDLIN(  89)											int _g2 = rectRight;
HXDLIN(  89)											while((_g1 < _g2)){
HXLINE(  89)												_g1 = (_g1 + 1);
HXDLIN(  89)												int dx = (_g1 - 1);
HXDLIN(  89)												::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN(  89)												int index;
HXDLIN(  89)												if (temp->useVirtualPos) {
HXLINE(  89)													index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - temp->virtualY) * ( (Float)(temp->width) )) + dx) - temp->virtualX));
            												}
            												else {
HXLINE(  89)													index = ::Std_obj::_hx_int(( (Float)(((dy * temp->width) + dx)) ));
            												}
HXDLIN(  89)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  89)												int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  89)												int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  89)												int col;
HXDLIN(  89)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  89)													col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE(  89)													col = c;
            												}
HXDLIN(  89)												bool _hx_tmp;
HXDLIN(  89)												if (temp->useMask) {
HXLINE(  89)													_hx_tmp = ::hx::IsNotNull( temp->mask );
            												}
            												else {
HXLINE(  89)													_hx_tmp = false;
            												}
HXDLIN(  89)												if (_hx_tmp) {
HXLINE(  89)													::pixelimage::ImageStruct this1 = temp->mask;
HXDLIN(  89)													::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  89)													int index;
HXDLIN(  89)													if (this1->useVirtualPos) {
HXLINE(  89)														index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            													}
            													else {
HXLINE(  89)														index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            													}
HXDLIN(  89)													::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  89)													int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  89)													int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  89)													int v;
HXDLIN(  89)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  89)														v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE(  89)														v = c;
            													}
HXDLIN(  89)													int this3 = v;
HXDLIN(  89)													int maskPixel = this3;
HXDLIN(  89)													int this4 = col;
HXDLIN(  89)													int this5 = this4;
HXDLIN(  89)													if ((maskPixel == 0)) {
HXLINE(  89)														int this1 = this5;
HXDLIN(  89)														col = this1;
            													}
            													else {
HXLINE(  89)														Float m0;
HXDLIN(  89)														int this1 = ((maskPixel >> 24) & 255);
HXDLIN(  89)														if ((this1 == 0)) {
HXLINE(  89)															m0 = ((Float)0.);
            														}
            														else {
HXLINE(  89)															m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            														}
HXDLIN(  89)														Float m1;
HXDLIN(  89)														int this2 = ((maskPixel >> 16) & 255);
HXDLIN(  89)														if ((this2 == 0)) {
HXLINE(  89)															m1 = ((Float)0.);
            														}
            														else {
HXLINE(  89)															m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            														}
HXDLIN(  89)														Float m2;
HXDLIN(  89)														int this3 = ((maskPixel >> 8) & 255);
HXDLIN(  89)														if ((this3 == 0)) {
HXLINE(  89)															m2 = ((Float)0.);
            														}
            														else {
HXLINE(  89)															m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            														}
HXDLIN(  89)														Float m3;
HXDLIN(  89)														int this4 = (maskPixel & 255);
HXDLIN(  89)														if ((this4 == 0)) {
HXLINE(  89)															m3 = ((Float)0.);
            														}
            														else {
HXLINE(  89)															m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            														}
HXDLIN(  89)														int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN(  89)														int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN(  89)														int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN(  89)														int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN(  89)														col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            													}
            												}
HXDLIN(  89)												if ((col != 0)) {
HXLINE(  89)													int x = (dx - rectLeft);
HXDLIN(  89)													int y = (dy - rectTop);
HXDLIN(  89)													int this1 = col;
HXDLIN(  89)													int c = this1;
HXDLIN(  89)													bool _hx_tmp;
HXDLIN(  89)													if ((((c >> 24) & 255) < 254)) {
HXLINE(  89)														_hx_tmp = undoImage1->transparent;
            													}
            													else {
HXLINE(  89)														_hx_tmp = false;
            													}
HXDLIN(  89)													if (_hx_tmp) {
HXLINE(  89)														int location;
HXDLIN(  89)														if (undoImage1->useVirtualPos) {
HXLINE(  89)															location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            														}
            														else {
HXLINE(  89)															location = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            														}
HXDLIN(  89)														::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN(  89)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  89)														int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  89)														int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  89)														int this3 = this2;
HXDLIN(  89)														int this4;
HXDLIN(  89)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  89)															this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            														}
            														else {
HXLINE(  89)															this4 = this3;
            														}
HXDLIN(  89)														Float a1;
HXDLIN(  89)														int this5 = ((this4 >> 24) & 255);
HXDLIN(  89)														if ((this5 == 0)) {
HXLINE(  89)															a1 = ((Float)0.);
            														}
            														else {
HXLINE(  89)															a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            														}
HXDLIN(  89)														Float r1;
HXDLIN(  89)														int this6 = ((this4 >> 16) & 255);
HXDLIN(  89)														if ((this6 == 0)) {
HXLINE(  89)															r1 = ((Float)0.);
            														}
            														else {
HXLINE(  89)															r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            														}
HXDLIN(  89)														Float g1;
HXDLIN(  89)														int this7 = ((this4 >> 8) & 255);
HXDLIN(  89)														if ((this7 == 0)) {
HXLINE(  89)															g1 = ((Float)0.);
            														}
            														else {
HXLINE(  89)															g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            														}
HXDLIN(  89)														Float b1;
HXDLIN(  89)														int this8 = (this4 & 255);
HXDLIN(  89)														if ((this8 == 0)) {
HXLINE(  89)															b1 = ((Float)0.);
            														}
            														else {
HXLINE(  89)															b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            														}
HXDLIN(  89)														Float a2;
HXDLIN(  89)														int this9 = ((col >> 24) & 255);
HXDLIN(  89)														if ((this9 == 0)) {
HXLINE(  89)															a2 = ((Float)0.);
            														}
            														else {
HXLINE(  89)															a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            														}
HXDLIN(  89)														Float r2;
HXDLIN(  89)														int this10 = ((col >> 16) & 255);
HXDLIN(  89)														if ((this10 == 0)) {
HXLINE(  89)															r2 = ((Float)0.);
            														}
            														else {
HXLINE(  89)															r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            														}
HXDLIN(  89)														Float g2;
HXDLIN(  89)														int this11 = ((col >> 8) & 255);
HXDLIN(  89)														if ((this11 == 0)) {
HXLINE(  89)															g2 = ((Float)0.);
            														}
            														else {
HXLINE(  89)															g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            														}
HXDLIN(  89)														Float b2;
HXDLIN(  89)														int this12 = (col & 255);
HXDLIN(  89)														if ((this12 == 0)) {
HXLINE(  89)															b2 = ((Float)0.);
            														}
            														else {
HXLINE(  89)															b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            														}
HXDLIN(  89)														Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  89)														int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  89)														int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  89)														int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  89)														int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  89)														int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  89)														{
HXLINE(  89)															::haxe::io::ArrayBufferViewImpl this13 = undoImage1->image;
HXDLIN(  89)															int value;
HXDLIN(  89)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  89)																value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            															}
            															else {
HXLINE(  89)																value = blended;
            															}
HXDLIN(  89)															bool _hx_tmp;
HXDLIN(  89)															if ((location >= 0)) {
HXLINE(  89)																_hx_tmp = (location < (this13->byteLength >> 2));
            															}
            															else {
HXLINE(  89)																_hx_tmp = false;
            															}
HXDLIN(  89)															if (_hx_tmp) {
HXLINE(  89)																::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  89)																int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  89)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  89)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  89)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  89)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
            													else {
HXLINE(  89)														::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN(  89)														int index;
HXDLIN(  89)														if (undoImage1->useVirtualPos) {
HXLINE(  89)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            														}
            														else {
HXLINE(  89)															index = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            														}
HXDLIN(  89)														int value;
HXDLIN(  89)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  89)															value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            														}
            														else {
HXLINE(  89)															value = c;
            														}
HXDLIN(  89)														bool _hx_tmp;
HXDLIN(  89)														if ((index >= 0)) {
HXLINE(  89)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE(  89)															_hx_tmp = false;
            														}
HXDLIN(  89)														if (_hx_tmp) {
HXLINE(  89)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  89)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  89)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  89)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  89)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  89)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
            												else {
HXLINE(  89)													if (forceClear) {
HXLINE(  89)														::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN(  89)														int x = (dx - rectLeft);
HXDLIN(  89)														int y = (dy - rectTop);
HXDLIN(  89)														int index;
HXDLIN(  89)														if (undoImage1->useVirtualPos) {
HXLINE(  89)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            														}
            														else {
HXLINE(  89)															index = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            														}
HXDLIN(  89)														bool _hx_tmp;
HXDLIN(  89)														if ((index >= 0)) {
HXLINE(  89)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE(  89)															_hx_tmp = false;
            														}
HXDLIN(  89)														if (_hx_tmp) {
HXLINE(  89)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  89)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  89)															_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  89)															_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  89)															_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  89)															_this->b[(pos + 3)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  89)						bool found1 = false;
HXDLIN(  89)						Float s1 = ((Float)0.);
HXDLIN(  89)						Float t1 = ((Float)0.);
HXDLIN(  89)						Float sxx1 = ((Float)0.);
HXDLIN(  89)						Float txx1 = ((Float)0.);
HXDLIN(  89)						{
HXLINE(  89)							int _g_min1 = xIter31->start;
HXDLIN(  89)							int _g_max1 = xIter31->max;
HXDLIN(  89)							while((_g_min1 < _g_max1)){
HXLINE(  89)								_g_min1 = (_g_min1 + 1);
HXDLIN(  89)								int x = (_g_min1 - 1);
HXLINE(  61)								sxx1 = (sx1 * ( (Float)(x) ));
HXLINE(  62)								txx1 = (tx1 * ( (Float)(x) ));
HXLINE(  63)								found1 = false;
HXLINE(  89)								{
HXLINE(  89)									int _g_min = yIter31->start;
HXDLIN(  89)									int _g_max = yIter31->max;
HXDLIN(  89)									while((_g_min < _g_max)){
HXLINE(  89)										_g_min = (_g_min + 1);
HXDLIN(  89)										int y = (_g_min - 1);
HXLINE(  65)										s1 = ((s01 + sxx1) + (sy1 * ( (Float)(y) )));
HXLINE(  66)										t1 = ((t01 + txx1) + (ty1 * ( (Float)(y) )));
HXLINE(  89)										bool _hx_tmp;
HXDLIN(  89)										if (!((s1 <= 0))) {
HXLINE(  89)											_hx_tmp = (t1 <= 0);
            										}
            										else {
HXLINE(  89)											_hx_tmp = true;
            										}
HXDLIN(  89)										if (_hx_tmp) {
HXLINE(  89)											if (found1) {
HXLINE(  89)												goto _hx_goto_10;
            											}
            										}
            										else {
HXLINE(  89)											if (((s1 + t1) < A1)) {
HXLINE(  89)												{
HXLINE(  89)													int this1 = color;
HXDLIN(  89)													int c = this1;
HXDLIN(  89)													bool _hx_tmp;
HXDLIN(  89)													if ((((c >> 24) & 255) < 254)) {
HXLINE(  89)														_hx_tmp = temp->transparent;
            													}
            													else {
HXLINE(  89)														_hx_tmp = false;
            													}
HXDLIN(  89)													if (_hx_tmp) {
HXLINE(  89)														int location;
HXDLIN(  89)														if (temp->useVirtualPos) {
HXLINE(  89)															location = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            														}
            														else {
HXLINE(  89)															location = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            														}
HXDLIN(  89)														::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN(  89)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  89)														int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  89)														int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  89)														int this3 = this2;
HXDLIN(  89)														int this4;
HXDLIN(  89)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  89)															this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            														}
            														else {
HXLINE(  89)															this4 = this3;
            														}
HXDLIN(  89)														Float a1;
HXDLIN(  89)														int this5 = ((this4 >> 24) & 255);
HXDLIN(  89)														if ((this5 == 0)) {
HXLINE(  89)															a1 = ((Float)0.);
            														}
            														else {
HXLINE(  89)															a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            														}
HXDLIN(  89)														Float r1;
HXDLIN(  89)														int this6 = ((this4 >> 16) & 255);
HXDLIN(  89)														if ((this6 == 0)) {
HXLINE(  89)															r1 = ((Float)0.);
            														}
            														else {
HXLINE(  89)															r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            														}
HXDLIN(  89)														Float g1;
HXDLIN(  89)														int this7 = ((this4 >> 8) & 255);
HXDLIN(  89)														if ((this7 == 0)) {
HXLINE(  89)															g1 = ((Float)0.);
            														}
            														else {
HXLINE(  89)															g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            														}
HXDLIN(  89)														Float b1;
HXDLIN(  89)														int this8 = (this4 & 255);
HXDLIN(  89)														if ((this8 == 0)) {
HXLINE(  89)															b1 = ((Float)0.);
            														}
            														else {
HXLINE(  89)															b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            														}
HXDLIN(  89)														Float a2;
HXDLIN(  89)														int this9 = ((color >> 24) & 255);
HXDLIN(  89)														if ((this9 == 0)) {
HXLINE(  89)															a2 = ((Float)0.);
            														}
            														else {
HXLINE(  89)															a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            														}
HXDLIN(  89)														Float r2;
HXDLIN(  89)														int this10 = ((color >> 16) & 255);
HXDLIN(  89)														if ((this10 == 0)) {
HXLINE(  89)															r2 = ((Float)0.);
            														}
            														else {
HXLINE(  89)															r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            														}
HXDLIN(  89)														Float g2;
HXDLIN(  89)														int this11 = ((color >> 8) & 255);
HXDLIN(  89)														if ((this11 == 0)) {
HXLINE(  89)															g2 = ((Float)0.);
            														}
            														else {
HXLINE(  89)															g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            														}
HXDLIN(  89)														Float b2;
HXDLIN(  89)														int this12 = (color & 255);
HXDLIN(  89)														if ((this12 == 0)) {
HXLINE(  89)															b2 = ((Float)0.);
            														}
            														else {
HXLINE(  89)															b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            														}
HXDLIN(  89)														Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  89)														int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  89)														int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  89)														int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  89)														int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  89)														int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  89)														{
HXLINE(  89)															::haxe::io::ArrayBufferViewImpl this13 = temp->image;
HXDLIN(  89)															int value;
HXDLIN(  89)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  89)																value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            															}
            															else {
HXLINE(  89)																value = blended;
            															}
HXDLIN(  89)															bool _hx_tmp;
HXDLIN(  89)															if ((location >= 0)) {
HXLINE(  89)																_hx_tmp = (location < (this13->byteLength >> 2));
            															}
            															else {
HXLINE(  89)																_hx_tmp = false;
            															}
HXDLIN(  89)															if (_hx_tmp) {
HXLINE(  89)																::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  89)																int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  89)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  89)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  89)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  89)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
            													else {
HXLINE(  89)														::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN(  89)														int index;
HXDLIN(  89)														if (temp->useVirtualPos) {
HXLINE(  89)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            														}
            														else {
HXLINE(  89)															index = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            														}
HXDLIN(  89)														int value;
HXDLIN(  89)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  89)															value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            														}
            														else {
HXLINE(  89)															value = c;
            														}
HXDLIN(  89)														bool _hx_tmp;
HXDLIN(  89)														if ((index >= 0)) {
HXLINE(  89)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE(  89)															_hx_tmp = false;
            														}
HXDLIN(  89)														if (_hx_tmp) {
HXLINE(  89)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  89)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  89)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  89)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  89)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  89)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
HXLINE(  74)												found1 = true;
            											}
            											else {
HXLINE(  89)												if (found1) {
HXLINE(  89)													goto _hx_goto_10;
            												}
            											}
            										}
            									}
            									_hx_goto_10:;
            								}
            							}
            						}
HXDLIN(  89)						if ((hasHit == true)) {
HXLINE(  89)							::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,x2_,y2_,bx1,by1,cx1,cy1,true);
HXDLIN(  89)							if (hasUndo1) {
HXLINE(  89)								v->undoImage = undoImage1;
HXDLIN(  89)								v->undoX = xIter31->start;
HXDLIN(  89)								v->undoY = yIter31->start;
            							}
            						}
            					}
            				}
HXDLIN(  89)				if ((hasHit == true)) {
HXLINE(  89)					::pixelimage::algo::HitQuad v = ::pixelimage::algo::HitQuad_obj::__alloc( HX_CTX ,x1_,y1_,x2_,y2_,x3_,y3_,x4_,y4_,true);
            				}
            			}
            		}
HXLINE(  91)		x1_ = (x1_ + this->strokeWidth);
HXLINE(  92)		x2_ = (x2_ + this->strokeWidth);
HXLINE(  93)		x3_ = (x3_ + this->strokeWidth);
HXLINE(  94)		x4_ = (x4_ + this->strokeWidth);
HXLINE(  96)		y1_ = (y1_ + this->strokeWidth);
HXLINE(  97)		y2_ = (y2_ + this->strokeWidth);
HXLINE(  98)		y3_ = (y3_ + this->strokeWidth);
HXLINE(  99)		y4_ = (y4_ + this->strokeWidth);
HXLINE( 102)		{
HXLINE( 102)			int color1 = this->fill;
HXDLIN( 102)			bool hasHit1 = false;
HXDLIN( 102)			{
HXLINE( 102)				{
HXLINE( 102)					Float bx2 = x2_;
HXDLIN( 102)					Float by2 = y2_;
HXDLIN( 102)					Float cx2 = x4_;
HXDLIN( 102)					Float cy2 = y4_;
HXDLIN( 102)					bool hasUndo2 = false;
HXDLIN( 102)					bool adjustWinding2 = (((((x1_ * by2) - (bx2 * y1_)) + ((bx2 * cy2) - (cx2 * by2))) + ((cx2 * y1_) - (x1_ * cy2))) > 0);
HXDLIN( 102)					if (!(adjustWinding2)) {
HXLINE( 102)						Float bx_ = bx2;
HXDLIN( 102)						Float by_ = by2;
HXLINE(  26)						bx2 = cx2;
HXLINE(  27)						by2 = cy2;
HXLINE(  28)						cx2 = bx_;
HXLINE(  29)						cy2 = by_;
            					}
HXLINE( 102)					{
HXLINE( 102)						Float s02 = ((y1_ * cx2) - (x1_ * cy2));
HXDLIN( 102)						Float sx2 = (cy2 - y1_);
HXDLIN( 102)						Float sy2 = (x1_ - cx2);
HXDLIN( 102)						Float t02 = ((x1_ * by2) - (y1_ * bx2));
HXDLIN( 102)						Float tx2 = (y1_ - by2);
HXDLIN( 102)						Float ty2 = (bx2 - x1_);
HXDLIN( 102)						Float A2 = ((((-(by2) * cx2) + (y1_ * (-(bx2) + cx2))) + (x1_ * (by2 - cy2))) + (bx2 * cy2));
HXDLIN( 102)						::pixelimage::iter::IntIterStart xIter32;
HXDLIN( 102)						if ((x1_ > bx2)) {
HXLINE( 102)							if ((x1_ > cx2)) {
HXLINE( 102)								int min;
HXDLIN( 102)								if ((bx2 > cx2)) {
HXLINE( 102)									min = ::Math_obj::floor(cx2);
            								}
            								else {
HXLINE( 102)									min = ::Math_obj::floor(bx2);
            								}
HXDLIN( 102)								int ii_min = min;
HXDLIN( 102)								int ii_max = ::Math_obj::ceil(x1_);
HXDLIN( 102)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 102)								xIter32 = this1;
            							}
            							else {
HXLINE( 102)								int ii_min = ::Math_obj::floor(bx2);
HXDLIN( 102)								int ii_max = ::Math_obj::ceil(cx2);
HXDLIN( 102)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 102)								xIter32 = this1;
            							}
            						}
            						else {
HXLINE( 102)							if ((bx2 > cx2)) {
HXLINE( 102)								int min;
HXDLIN( 102)								if ((x1_ > cx2)) {
HXLINE( 102)									min = ::Math_obj::floor(cx2);
            								}
            								else {
HXLINE( 102)									min = ::Math_obj::ceil(x1_);
            								}
HXDLIN( 102)								int ii_min = min;
HXDLIN( 102)								int ii_max = ::Math_obj::ceil(bx2);
HXDLIN( 102)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 102)								xIter32 = this1;
            							}
            							else {
HXLINE( 102)								int ii_min = ::Math_obj::floor(x1_);
HXDLIN( 102)								int ii_max = ::Math_obj::ceil(cx2);
HXDLIN( 102)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 102)								xIter32 = this1;
            							}
            						}
HXDLIN( 102)						::pixelimage::iter::IntIterStart yIter32;
HXDLIN( 102)						if ((y1_ > by2)) {
HXLINE( 102)							if ((y1_ > cy2)) {
HXLINE( 102)								int min;
HXDLIN( 102)								if ((by2 > cy2)) {
HXLINE( 102)									min = ::Math_obj::floor(cy2);
            								}
            								else {
HXLINE( 102)									min = ::Math_obj::floor(by2);
            								}
HXDLIN( 102)								int ii_min = min;
HXDLIN( 102)								int ii_max = ::Math_obj::ceil(y1_);
HXDLIN( 102)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 102)								yIter32 = this1;
            							}
            							else {
HXLINE( 102)								int ii_min = ::Math_obj::floor(by2);
HXDLIN( 102)								int ii_max = ::Math_obj::ceil(cy2);
HXDLIN( 102)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 102)								yIter32 = this1;
            							}
            						}
            						else {
HXLINE( 102)							if ((by2 > cy2)) {
HXLINE( 102)								int min;
HXDLIN( 102)								if ((y1_ > cy2)) {
HXLINE( 102)									min = ::Math_obj::floor(cy2);
            								}
            								else {
HXLINE( 102)									min = ::Math_obj::ceil(y1_);
            								}
HXDLIN( 102)								int ii_min = min;
HXDLIN( 102)								int ii_max = ::Math_obj::ceil(by2);
HXDLIN( 102)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 102)								yIter32 = this1;
            							}
            							else {
HXLINE( 102)								int ii_min = ::Math_obj::floor(y1_);
HXDLIN( 102)								int ii_max = ::Math_obj::ceil(cy2);
HXDLIN( 102)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 102)								yIter32 = this1;
            							}
            						}
HXDLIN( 102)						::pixelimage::ImageStruct undoImage2 = null();
HXDLIN( 102)						if (hasUndo2) {
HXLINE( 102)							int w = ((xIter32->max - xIter32->start) + 1);
HXDLIN( 102)							int h = ((yIter32->max - yIter32->start) + 1);
HXDLIN( 102)							int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN( 102)							::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 102)							::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN( 102)							::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN( 102)							undoImage2 = this3;
HXDLIN( 102)							{
HXLINE( 102)								int rectLeft = xIter32->start;
HXDLIN( 102)								int rectTop = yIter32->start;
HXDLIN( 102)								int rectRight = xIter32->max;
HXDLIN( 102)								bool forceClear = false;
HXDLIN( 102)								{
HXLINE( 102)									int _g = rectTop;
HXDLIN( 102)									int _g1 = yIter32->max;
HXDLIN( 102)									while((_g < _g1)){
HXLINE( 102)										_g = (_g + 1);
HXDLIN( 102)										int dy = (_g - 1);
HXDLIN( 102)										{
HXLINE( 102)											int _g1 = rectLeft;
HXDLIN( 102)											int _g2 = rectRight;
HXDLIN( 102)											while((_g1 < _g2)){
HXLINE( 102)												_g1 = (_g1 + 1);
HXDLIN( 102)												int dx = (_g1 - 1);
HXDLIN( 102)												::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 102)												int index;
HXDLIN( 102)												if (temp->useVirtualPos) {
HXLINE( 102)													index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - temp->virtualY) * ( (Float)(temp->width) )) + dx) - temp->virtualX));
            												}
            												else {
HXLINE( 102)													index = ::Std_obj::_hx_int(( (Float)(((dy * temp->width) + dx)) ));
            												}
HXDLIN( 102)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 102)												int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 102)												int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 102)												int col;
HXDLIN( 102)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 102)													col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE( 102)													col = c;
            												}
HXDLIN( 102)												bool _hx_tmp;
HXDLIN( 102)												if (temp->useMask) {
HXLINE( 102)													_hx_tmp = ::hx::IsNotNull( temp->mask );
            												}
            												else {
HXLINE( 102)													_hx_tmp = false;
            												}
HXDLIN( 102)												if (_hx_tmp) {
HXLINE( 102)													::pixelimage::ImageStruct this1 = temp->mask;
HXDLIN( 102)													::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 102)													int index;
HXDLIN( 102)													if (this1->useVirtualPos) {
HXLINE( 102)														index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            													}
            													else {
HXLINE( 102)														index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            													}
HXDLIN( 102)													::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 102)													int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 102)													int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 102)													int v;
HXDLIN( 102)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 102)														v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE( 102)														v = c;
            													}
HXDLIN( 102)													int this3 = v;
HXDLIN( 102)													int maskPixel = this3;
HXDLIN( 102)													int this4 = col;
HXDLIN( 102)													int this5 = this4;
HXDLIN( 102)													if ((maskPixel == 0)) {
HXLINE( 102)														int this1 = this5;
HXDLIN( 102)														col = this1;
            													}
            													else {
HXLINE( 102)														Float m0;
HXDLIN( 102)														int this1 = ((maskPixel >> 24) & 255);
HXDLIN( 102)														if ((this1 == 0)) {
HXLINE( 102)															m0 = ((Float)0.);
            														}
            														else {
HXLINE( 102)															m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            														}
HXDLIN( 102)														Float m1;
HXDLIN( 102)														int this2 = ((maskPixel >> 16) & 255);
HXDLIN( 102)														if ((this2 == 0)) {
HXLINE( 102)															m1 = ((Float)0.);
            														}
            														else {
HXLINE( 102)															m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            														}
HXDLIN( 102)														Float m2;
HXDLIN( 102)														int this3 = ((maskPixel >> 8) & 255);
HXDLIN( 102)														if ((this3 == 0)) {
HXLINE( 102)															m2 = ((Float)0.);
            														}
            														else {
HXLINE( 102)															m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            														}
HXDLIN( 102)														Float m3;
HXDLIN( 102)														int this4 = (maskPixel & 255);
HXDLIN( 102)														if ((this4 == 0)) {
HXLINE( 102)															m3 = ((Float)0.);
            														}
            														else {
HXLINE( 102)															m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            														}
HXDLIN( 102)														int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN( 102)														int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN( 102)														int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN( 102)														int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN( 102)														col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            													}
            												}
HXDLIN( 102)												if ((col != 0)) {
HXLINE( 102)													int x = (dx - rectLeft);
HXDLIN( 102)													int y = (dy - rectTop);
HXDLIN( 102)													int this1 = col;
HXDLIN( 102)													int c = this1;
HXDLIN( 102)													bool _hx_tmp;
HXDLIN( 102)													if ((((c >> 24) & 255) < 254)) {
HXLINE( 102)														_hx_tmp = undoImage2->transparent;
            													}
            													else {
HXLINE( 102)														_hx_tmp = false;
            													}
HXDLIN( 102)													if (_hx_tmp) {
HXLINE( 102)														int location;
HXDLIN( 102)														if (undoImage2->useVirtualPos) {
HXLINE( 102)															location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage2->virtualY) * ( (Float)(undoImage2->width) )) + x) - undoImage2->virtualX));
            														}
            														else {
HXLINE( 102)															location = ::Std_obj::_hx_int(( (Float)(((y * undoImage2->width) + x)) ));
            														}
HXDLIN( 102)														::haxe::io::ArrayBufferViewImpl this1 = undoImage2->image;
HXDLIN( 102)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 102)														int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 102)														int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 102)														int this3 = this2;
HXDLIN( 102)														int this4;
HXDLIN( 102)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 102)															this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            														}
            														else {
HXLINE( 102)															this4 = this3;
            														}
HXDLIN( 102)														Float a1;
HXDLIN( 102)														int this5 = ((this4 >> 24) & 255);
HXDLIN( 102)														if ((this5 == 0)) {
HXLINE( 102)															a1 = ((Float)0.);
            														}
            														else {
HXLINE( 102)															a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            														}
HXDLIN( 102)														Float r1;
HXDLIN( 102)														int this6 = ((this4 >> 16) & 255);
HXDLIN( 102)														if ((this6 == 0)) {
HXLINE( 102)															r1 = ((Float)0.);
            														}
            														else {
HXLINE( 102)															r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            														}
HXDLIN( 102)														Float g1;
HXDLIN( 102)														int this7 = ((this4 >> 8) & 255);
HXDLIN( 102)														if ((this7 == 0)) {
HXLINE( 102)															g1 = ((Float)0.);
            														}
            														else {
HXLINE( 102)															g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            														}
HXDLIN( 102)														Float b1;
HXDLIN( 102)														int this8 = (this4 & 255);
HXDLIN( 102)														if ((this8 == 0)) {
HXLINE( 102)															b1 = ((Float)0.);
            														}
            														else {
HXLINE( 102)															b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            														}
HXDLIN( 102)														Float a2;
HXDLIN( 102)														int this9 = ((col >> 24) & 255);
HXDLIN( 102)														if ((this9 == 0)) {
HXLINE( 102)															a2 = ((Float)0.);
            														}
            														else {
HXLINE( 102)															a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            														}
HXDLIN( 102)														Float r2;
HXDLIN( 102)														int this10 = ((col >> 16) & 255);
HXDLIN( 102)														if ((this10 == 0)) {
HXLINE( 102)															r2 = ((Float)0.);
            														}
            														else {
HXLINE( 102)															r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            														}
HXDLIN( 102)														Float g2;
HXDLIN( 102)														int this11 = ((col >> 8) & 255);
HXDLIN( 102)														if ((this11 == 0)) {
HXLINE( 102)															g2 = ((Float)0.);
            														}
            														else {
HXLINE( 102)															g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            														}
HXDLIN( 102)														Float b2;
HXDLIN( 102)														int this12 = (col & 255);
HXDLIN( 102)														if ((this12 == 0)) {
HXLINE( 102)															b2 = ((Float)0.);
            														}
            														else {
HXLINE( 102)															b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            														}
HXDLIN( 102)														Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 102)														int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 102)														int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 102)														int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 102)														int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 102)														int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 102)														{
HXLINE( 102)															::haxe::io::ArrayBufferViewImpl this13 = undoImage2->image;
HXDLIN( 102)															int value;
HXDLIN( 102)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 102)																value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            															}
            															else {
HXLINE( 102)																value = blended;
            															}
HXDLIN( 102)															bool _hx_tmp;
HXDLIN( 102)															if ((location >= 0)) {
HXLINE( 102)																_hx_tmp = (location < (this13->byteLength >> 2));
            															}
            															else {
HXLINE( 102)																_hx_tmp = false;
            															}
HXDLIN( 102)															if (_hx_tmp) {
HXLINE( 102)																::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 102)																int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 102)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 102)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 102)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 102)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
            													else {
HXLINE( 102)														::haxe::io::ArrayBufferViewImpl this1 = undoImage2->image;
HXDLIN( 102)														int index;
HXDLIN( 102)														if (undoImage2->useVirtualPos) {
HXLINE( 102)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage2->virtualY) * ( (Float)(undoImage2->width) )) + x) - undoImage2->virtualX));
            														}
            														else {
HXLINE( 102)															index = ::Std_obj::_hx_int(( (Float)(((y * undoImage2->width) + x)) ));
            														}
HXDLIN( 102)														int value;
HXDLIN( 102)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 102)															value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            														}
            														else {
HXLINE( 102)															value = c;
            														}
HXDLIN( 102)														bool _hx_tmp;
HXDLIN( 102)														if ((index >= 0)) {
HXLINE( 102)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE( 102)															_hx_tmp = false;
            														}
HXDLIN( 102)														if (_hx_tmp) {
HXLINE( 102)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 102)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 102)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 102)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 102)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 102)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
            												else {
HXLINE( 102)													if (forceClear) {
HXLINE( 102)														::haxe::io::ArrayBufferViewImpl this1 = undoImage2->image;
HXDLIN( 102)														int x = (dx - rectLeft);
HXDLIN( 102)														int y = (dy - rectTop);
HXDLIN( 102)														int index;
HXDLIN( 102)														if (undoImage2->useVirtualPos) {
HXLINE( 102)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage2->virtualY) * ( (Float)(undoImage2->width) )) + x) - undoImage2->virtualX));
            														}
            														else {
HXLINE( 102)															index = ::Std_obj::_hx_int(( (Float)(((y * undoImage2->width) + x)) ));
            														}
HXDLIN( 102)														bool _hx_tmp;
HXDLIN( 102)														if ((index >= 0)) {
HXLINE( 102)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE( 102)															_hx_tmp = false;
            														}
HXDLIN( 102)														if (_hx_tmp) {
HXLINE( 102)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 102)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 102)															_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 102)															_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 102)															_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 102)															_this->b[(pos + 3)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 102)						bool found2 = false;
HXDLIN( 102)						Float s2 = ((Float)0.);
HXDLIN( 102)						Float t2 = ((Float)0.);
HXDLIN( 102)						Float sxx2 = ((Float)0.);
HXDLIN( 102)						Float txx2 = ((Float)0.);
HXDLIN( 102)						{
HXLINE( 102)							int _g_min2 = xIter32->start;
HXDLIN( 102)							int _g_max2 = xIter32->max;
HXDLIN( 102)							while((_g_min2 < _g_max2)){
HXLINE( 102)								_g_min2 = (_g_min2 + 1);
HXDLIN( 102)								int x = (_g_min2 - 1);
HXLINE(  61)								sxx2 = (sx2 * ( (Float)(x) ));
HXLINE(  62)								txx2 = (tx2 * ( (Float)(x) ));
HXLINE(  63)								found2 = false;
HXLINE( 102)								{
HXLINE( 102)									int _g_min = yIter32->start;
HXDLIN( 102)									int _g_max = yIter32->max;
HXDLIN( 102)									while((_g_min < _g_max)){
HXLINE( 102)										_g_min = (_g_min + 1);
HXDLIN( 102)										int y = (_g_min - 1);
HXLINE(  65)										s2 = ((s02 + sxx2) + (sy2 * ( (Float)(y) )));
HXLINE(  66)										t2 = ((t02 + txx2) + (ty2 * ( (Float)(y) )));
HXLINE( 102)										bool _hx_tmp;
HXDLIN( 102)										if (!((s2 <= 0))) {
HXLINE( 102)											_hx_tmp = (t2 <= 0);
            										}
            										else {
HXLINE( 102)											_hx_tmp = true;
            										}
HXDLIN( 102)										if (_hx_tmp) {
HXLINE( 102)											if (found2) {
HXLINE( 102)												goto _hx_goto_14;
            											}
            										}
            										else {
HXLINE( 102)											if (((s2 + t2) < A2)) {
HXLINE( 102)												{
HXLINE( 102)													int this1 = color1;
HXDLIN( 102)													int c = this1;
HXDLIN( 102)													bool _hx_tmp;
HXDLIN( 102)													if ((((c >> 24) & 255) < 254)) {
HXLINE( 102)														_hx_tmp = temp->transparent;
            													}
            													else {
HXLINE( 102)														_hx_tmp = false;
            													}
HXDLIN( 102)													if (_hx_tmp) {
HXLINE( 102)														int location;
HXDLIN( 102)														if (temp->useVirtualPos) {
HXLINE( 102)															location = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            														}
            														else {
HXLINE( 102)															location = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            														}
HXDLIN( 102)														::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 102)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 102)														int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 102)														int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 102)														int this3 = this2;
HXDLIN( 102)														int this4;
HXDLIN( 102)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 102)															this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            														}
            														else {
HXLINE( 102)															this4 = this3;
            														}
HXDLIN( 102)														Float a1;
HXDLIN( 102)														int this5 = ((this4 >> 24) & 255);
HXDLIN( 102)														if ((this5 == 0)) {
HXLINE( 102)															a1 = ((Float)0.);
            														}
            														else {
HXLINE( 102)															a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            														}
HXDLIN( 102)														Float r1;
HXDLIN( 102)														int this6 = ((this4 >> 16) & 255);
HXDLIN( 102)														if ((this6 == 0)) {
HXLINE( 102)															r1 = ((Float)0.);
            														}
            														else {
HXLINE( 102)															r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            														}
HXDLIN( 102)														Float g1;
HXDLIN( 102)														int this7 = ((this4 >> 8) & 255);
HXDLIN( 102)														if ((this7 == 0)) {
HXLINE( 102)															g1 = ((Float)0.);
            														}
            														else {
HXLINE( 102)															g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            														}
HXDLIN( 102)														Float b1;
HXDLIN( 102)														int this8 = (this4 & 255);
HXDLIN( 102)														if ((this8 == 0)) {
HXLINE( 102)															b1 = ((Float)0.);
            														}
            														else {
HXLINE( 102)															b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            														}
HXDLIN( 102)														Float a2;
HXDLIN( 102)														int this9 = ((color1 >> 24) & 255);
HXDLIN( 102)														if ((this9 == 0)) {
HXLINE( 102)															a2 = ((Float)0.);
            														}
            														else {
HXLINE( 102)															a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            														}
HXDLIN( 102)														Float r2;
HXDLIN( 102)														int this10 = ((color1 >> 16) & 255);
HXDLIN( 102)														if ((this10 == 0)) {
HXLINE( 102)															r2 = ((Float)0.);
            														}
            														else {
HXLINE( 102)															r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            														}
HXDLIN( 102)														Float g2;
HXDLIN( 102)														int this11 = ((color1 >> 8) & 255);
HXDLIN( 102)														if ((this11 == 0)) {
HXLINE( 102)															g2 = ((Float)0.);
            														}
            														else {
HXLINE( 102)															g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            														}
HXDLIN( 102)														Float b2;
HXDLIN( 102)														int this12 = (color1 & 255);
HXDLIN( 102)														if ((this12 == 0)) {
HXLINE( 102)															b2 = ((Float)0.);
            														}
            														else {
HXLINE( 102)															b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            														}
HXDLIN( 102)														Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 102)														int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 102)														int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 102)														int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 102)														int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 102)														int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 102)														{
HXLINE( 102)															::haxe::io::ArrayBufferViewImpl this13 = temp->image;
HXDLIN( 102)															int value;
HXDLIN( 102)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 102)																value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            															}
            															else {
HXLINE( 102)																value = blended;
            															}
HXDLIN( 102)															bool _hx_tmp;
HXDLIN( 102)															if ((location >= 0)) {
HXLINE( 102)																_hx_tmp = (location < (this13->byteLength >> 2));
            															}
            															else {
HXLINE( 102)																_hx_tmp = false;
            															}
HXDLIN( 102)															if (_hx_tmp) {
HXLINE( 102)																::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 102)																int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 102)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 102)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 102)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 102)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
            													else {
HXLINE( 102)														::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 102)														int index;
HXDLIN( 102)														if (temp->useVirtualPos) {
HXLINE( 102)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            														}
            														else {
HXLINE( 102)															index = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            														}
HXDLIN( 102)														int value;
HXDLIN( 102)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 102)															value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            														}
            														else {
HXLINE( 102)															value = c;
            														}
HXDLIN( 102)														bool _hx_tmp;
HXDLIN( 102)														if ((index >= 0)) {
HXLINE( 102)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE( 102)															_hx_tmp = false;
            														}
HXDLIN( 102)														if (_hx_tmp) {
HXLINE( 102)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 102)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 102)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 102)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 102)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 102)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
HXLINE(  74)												found2 = true;
            											}
            											else {
HXLINE( 102)												if (found2) {
HXLINE( 102)													goto _hx_goto_14;
            												}
            											}
            										}
            									}
            									_hx_goto_14:;
            								}
            							}
            						}
HXDLIN( 102)						if ((hasHit1 == true)) {
HXLINE( 102)							::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,x1_,y1_,bx2,by2,cx2,cy2,true);
HXDLIN( 102)							if (hasUndo2) {
HXLINE( 102)								v->undoImage = undoImage2;
HXDLIN( 102)								v->undoX = xIter32->start;
HXDLIN( 102)								v->undoY = yIter32->start;
            							}
            						}
            					}
            				}
HXDLIN( 102)				{
HXLINE( 102)					Float bx3 = x3_;
HXDLIN( 102)					Float by3 = y3_;
HXDLIN( 102)					Float cx3 = x4_;
HXDLIN( 102)					Float cy3 = y4_;
HXDLIN( 102)					bool hasUndo3 = false;
HXDLIN( 102)					bool adjustWinding3 = (((((x2_ * by3) - (bx3 * y2_)) + ((bx3 * cy3) - (cx3 * by3))) + ((cx3 * y2_) - (x2_ * cy3))) > 0);
HXDLIN( 102)					if (!(adjustWinding3)) {
HXLINE( 102)						Float bx_ = bx3;
HXDLIN( 102)						Float by_ = by3;
HXLINE(  26)						bx3 = cx3;
HXLINE(  27)						by3 = cy3;
HXLINE(  28)						cx3 = bx_;
HXLINE(  29)						cy3 = by_;
            					}
HXLINE( 102)					{
HXLINE( 102)						Float s03 = ((y2_ * cx3) - (x2_ * cy3));
HXDLIN( 102)						Float sx3 = (cy3 - y2_);
HXDLIN( 102)						Float sy3 = (x2_ - cx3);
HXDLIN( 102)						Float t03 = ((x2_ * by3) - (y2_ * bx3));
HXDLIN( 102)						Float tx3 = (y2_ - by3);
HXDLIN( 102)						Float ty3 = (bx3 - x2_);
HXDLIN( 102)						Float A3 = ((((-(by3) * cx3) + (y2_ * (-(bx3) + cx3))) + (x2_ * (by3 - cy3))) + (bx3 * cy3));
HXDLIN( 102)						::pixelimage::iter::IntIterStart xIter33;
HXDLIN( 102)						if ((x2_ > bx3)) {
HXLINE( 102)							if ((x2_ > cx3)) {
HXLINE( 102)								int min;
HXDLIN( 102)								if ((bx3 > cx3)) {
HXLINE( 102)									min = ::Math_obj::floor(cx3);
            								}
            								else {
HXLINE( 102)									min = ::Math_obj::floor(bx3);
            								}
HXDLIN( 102)								int ii_min = min;
HXDLIN( 102)								int ii_max = ::Math_obj::ceil(x2_);
HXDLIN( 102)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 102)								xIter33 = this1;
            							}
            							else {
HXLINE( 102)								int ii_min = ::Math_obj::floor(bx3);
HXDLIN( 102)								int ii_max = ::Math_obj::ceil(cx3);
HXDLIN( 102)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 102)								xIter33 = this1;
            							}
            						}
            						else {
HXLINE( 102)							if ((bx3 > cx3)) {
HXLINE( 102)								int min;
HXDLIN( 102)								if ((x2_ > cx3)) {
HXLINE( 102)									min = ::Math_obj::floor(cx3);
            								}
            								else {
HXLINE( 102)									min = ::Math_obj::ceil(x2_);
            								}
HXDLIN( 102)								int ii_min = min;
HXDLIN( 102)								int ii_max = ::Math_obj::ceil(bx3);
HXDLIN( 102)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 102)								xIter33 = this1;
            							}
            							else {
HXLINE( 102)								int ii_min = ::Math_obj::floor(x2_);
HXDLIN( 102)								int ii_max = ::Math_obj::ceil(cx3);
HXDLIN( 102)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 102)								xIter33 = this1;
            							}
            						}
HXDLIN( 102)						::pixelimage::iter::IntIterStart yIter33;
HXDLIN( 102)						if ((y2_ > by3)) {
HXLINE( 102)							if ((y2_ > cy3)) {
HXLINE( 102)								int min;
HXDLIN( 102)								if ((by3 > cy3)) {
HXLINE( 102)									min = ::Math_obj::floor(cy3);
            								}
            								else {
HXLINE( 102)									min = ::Math_obj::floor(by3);
            								}
HXDLIN( 102)								int ii_min = min;
HXDLIN( 102)								int ii_max = ::Math_obj::ceil(y2_);
HXDLIN( 102)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 102)								yIter33 = this1;
            							}
            							else {
HXLINE( 102)								int ii_min = ::Math_obj::floor(by3);
HXDLIN( 102)								int ii_max = ::Math_obj::ceil(cy3);
HXDLIN( 102)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 102)								yIter33 = this1;
            							}
            						}
            						else {
HXLINE( 102)							if ((by3 > cy3)) {
HXLINE( 102)								int min;
HXDLIN( 102)								if ((y2_ > cy3)) {
HXLINE( 102)									min = ::Math_obj::floor(cy3);
            								}
            								else {
HXLINE( 102)									min = ::Math_obj::ceil(y2_);
            								}
HXDLIN( 102)								int ii_min = min;
HXDLIN( 102)								int ii_max = ::Math_obj::ceil(by3);
HXDLIN( 102)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 102)								yIter33 = this1;
            							}
            							else {
HXLINE( 102)								int ii_min = ::Math_obj::floor(y2_);
HXDLIN( 102)								int ii_max = ::Math_obj::ceil(cy3);
HXDLIN( 102)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 102)								yIter33 = this1;
            							}
            						}
HXDLIN( 102)						::pixelimage::ImageStruct undoImage3 = null();
HXDLIN( 102)						if (hasUndo3) {
HXLINE( 102)							int w = ((xIter33->max - xIter33->start) + 1);
HXDLIN( 102)							int h = ((yIter33->max - yIter33->start) + 1);
HXDLIN( 102)							int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN( 102)							::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 102)							::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN( 102)							::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN( 102)							undoImage3 = this3;
HXDLIN( 102)							{
HXLINE( 102)								int rectLeft = xIter33->start;
HXDLIN( 102)								int rectTop = yIter33->start;
HXDLIN( 102)								int rectRight = xIter33->max;
HXDLIN( 102)								bool forceClear = false;
HXDLIN( 102)								{
HXLINE( 102)									int _g = rectTop;
HXDLIN( 102)									int _g1 = yIter33->max;
HXDLIN( 102)									while((_g < _g1)){
HXLINE( 102)										_g = (_g + 1);
HXDLIN( 102)										int dy = (_g - 1);
HXDLIN( 102)										{
HXLINE( 102)											int _g1 = rectLeft;
HXDLIN( 102)											int _g2 = rectRight;
HXDLIN( 102)											while((_g1 < _g2)){
HXLINE( 102)												_g1 = (_g1 + 1);
HXDLIN( 102)												int dx = (_g1 - 1);
HXDLIN( 102)												::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 102)												int index;
HXDLIN( 102)												if (temp->useVirtualPos) {
HXLINE( 102)													index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - temp->virtualY) * ( (Float)(temp->width) )) + dx) - temp->virtualX));
            												}
            												else {
HXLINE( 102)													index = ::Std_obj::_hx_int(( (Float)(((dy * temp->width) + dx)) ));
            												}
HXDLIN( 102)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 102)												int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 102)												int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 102)												int col;
HXDLIN( 102)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 102)													col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE( 102)													col = c;
            												}
HXDLIN( 102)												bool _hx_tmp;
HXDLIN( 102)												if (temp->useMask) {
HXLINE( 102)													_hx_tmp = ::hx::IsNotNull( temp->mask );
            												}
            												else {
HXLINE( 102)													_hx_tmp = false;
            												}
HXDLIN( 102)												if (_hx_tmp) {
HXLINE( 102)													::pixelimage::ImageStruct this1 = temp->mask;
HXDLIN( 102)													::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 102)													int index;
HXDLIN( 102)													if (this1->useVirtualPos) {
HXLINE( 102)														index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            													}
            													else {
HXLINE( 102)														index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            													}
HXDLIN( 102)													::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 102)													int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 102)													int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 102)													int v;
HXDLIN( 102)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 102)														v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE( 102)														v = c;
            													}
HXDLIN( 102)													int this3 = v;
HXDLIN( 102)													int maskPixel = this3;
HXDLIN( 102)													int this4 = col;
HXDLIN( 102)													int this5 = this4;
HXDLIN( 102)													if ((maskPixel == 0)) {
HXLINE( 102)														int this1 = this5;
HXDLIN( 102)														col = this1;
            													}
            													else {
HXLINE( 102)														Float m0;
HXDLIN( 102)														int this1 = ((maskPixel >> 24) & 255);
HXDLIN( 102)														if ((this1 == 0)) {
HXLINE( 102)															m0 = ((Float)0.);
            														}
            														else {
HXLINE( 102)															m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            														}
HXDLIN( 102)														Float m1;
HXDLIN( 102)														int this2 = ((maskPixel >> 16) & 255);
HXDLIN( 102)														if ((this2 == 0)) {
HXLINE( 102)															m1 = ((Float)0.);
            														}
            														else {
HXLINE( 102)															m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            														}
HXDLIN( 102)														Float m2;
HXDLIN( 102)														int this3 = ((maskPixel >> 8) & 255);
HXDLIN( 102)														if ((this3 == 0)) {
HXLINE( 102)															m2 = ((Float)0.);
            														}
            														else {
HXLINE( 102)															m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            														}
HXDLIN( 102)														Float m3;
HXDLIN( 102)														int this4 = (maskPixel & 255);
HXDLIN( 102)														if ((this4 == 0)) {
HXLINE( 102)															m3 = ((Float)0.);
            														}
            														else {
HXLINE( 102)															m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            														}
HXDLIN( 102)														int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN( 102)														int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN( 102)														int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN( 102)														int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN( 102)														col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            													}
            												}
HXDLIN( 102)												if ((col != 0)) {
HXLINE( 102)													int x = (dx - rectLeft);
HXDLIN( 102)													int y = (dy - rectTop);
HXDLIN( 102)													int this1 = col;
HXDLIN( 102)													int c = this1;
HXDLIN( 102)													bool _hx_tmp;
HXDLIN( 102)													if ((((c >> 24) & 255) < 254)) {
HXLINE( 102)														_hx_tmp = undoImage3->transparent;
            													}
            													else {
HXLINE( 102)														_hx_tmp = false;
            													}
HXDLIN( 102)													if (_hx_tmp) {
HXLINE( 102)														int location;
HXDLIN( 102)														if (undoImage3->useVirtualPos) {
HXLINE( 102)															location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x) - undoImage3->virtualX));
            														}
            														else {
HXLINE( 102)															location = ::Std_obj::_hx_int(( (Float)(((y * undoImage3->width) + x)) ));
            														}
HXDLIN( 102)														::haxe::io::ArrayBufferViewImpl this1 = undoImage3->image;
HXDLIN( 102)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 102)														int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 102)														int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 102)														int this3 = this2;
HXDLIN( 102)														int this4;
HXDLIN( 102)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 102)															this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            														}
            														else {
HXLINE( 102)															this4 = this3;
            														}
HXDLIN( 102)														Float a1;
HXDLIN( 102)														int this5 = ((this4 >> 24) & 255);
HXDLIN( 102)														if ((this5 == 0)) {
HXLINE( 102)															a1 = ((Float)0.);
            														}
            														else {
HXLINE( 102)															a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            														}
HXDLIN( 102)														Float r1;
HXDLIN( 102)														int this6 = ((this4 >> 16) & 255);
HXDLIN( 102)														if ((this6 == 0)) {
HXLINE( 102)															r1 = ((Float)0.);
            														}
            														else {
HXLINE( 102)															r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            														}
HXDLIN( 102)														Float g1;
HXDLIN( 102)														int this7 = ((this4 >> 8) & 255);
HXDLIN( 102)														if ((this7 == 0)) {
HXLINE( 102)															g1 = ((Float)0.);
            														}
            														else {
HXLINE( 102)															g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            														}
HXDLIN( 102)														Float b1;
HXDLIN( 102)														int this8 = (this4 & 255);
HXDLIN( 102)														if ((this8 == 0)) {
HXLINE( 102)															b1 = ((Float)0.);
            														}
            														else {
HXLINE( 102)															b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            														}
HXDLIN( 102)														Float a2;
HXDLIN( 102)														int this9 = ((col >> 24) & 255);
HXDLIN( 102)														if ((this9 == 0)) {
HXLINE( 102)															a2 = ((Float)0.);
            														}
            														else {
HXLINE( 102)															a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            														}
HXDLIN( 102)														Float r2;
HXDLIN( 102)														int this10 = ((col >> 16) & 255);
HXDLIN( 102)														if ((this10 == 0)) {
HXLINE( 102)															r2 = ((Float)0.);
            														}
            														else {
HXLINE( 102)															r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            														}
HXDLIN( 102)														Float g2;
HXDLIN( 102)														int this11 = ((col >> 8) & 255);
HXDLIN( 102)														if ((this11 == 0)) {
HXLINE( 102)															g2 = ((Float)0.);
            														}
            														else {
HXLINE( 102)															g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            														}
HXDLIN( 102)														Float b2;
HXDLIN( 102)														int this12 = (col & 255);
HXDLIN( 102)														if ((this12 == 0)) {
HXLINE( 102)															b2 = ((Float)0.);
            														}
            														else {
HXLINE( 102)															b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            														}
HXDLIN( 102)														Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 102)														int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 102)														int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 102)														int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 102)														int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 102)														int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 102)														{
HXLINE( 102)															::haxe::io::ArrayBufferViewImpl this13 = undoImage3->image;
HXDLIN( 102)															int value;
HXDLIN( 102)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 102)																value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            															}
            															else {
HXLINE( 102)																value = blended;
            															}
HXDLIN( 102)															bool _hx_tmp;
HXDLIN( 102)															if ((location >= 0)) {
HXLINE( 102)																_hx_tmp = (location < (this13->byteLength >> 2));
            															}
            															else {
HXLINE( 102)																_hx_tmp = false;
            															}
HXDLIN( 102)															if (_hx_tmp) {
HXLINE( 102)																::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 102)																int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 102)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 102)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 102)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 102)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
            													else {
HXLINE( 102)														::haxe::io::ArrayBufferViewImpl this1 = undoImage3->image;
HXDLIN( 102)														int index;
HXDLIN( 102)														if (undoImage3->useVirtualPos) {
HXLINE( 102)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x) - undoImage3->virtualX));
            														}
            														else {
HXLINE( 102)															index = ::Std_obj::_hx_int(( (Float)(((y * undoImage3->width) + x)) ));
            														}
HXDLIN( 102)														int value;
HXDLIN( 102)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 102)															value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            														}
            														else {
HXLINE( 102)															value = c;
            														}
HXDLIN( 102)														bool _hx_tmp;
HXDLIN( 102)														if ((index >= 0)) {
HXLINE( 102)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE( 102)															_hx_tmp = false;
            														}
HXDLIN( 102)														if (_hx_tmp) {
HXLINE( 102)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 102)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 102)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 102)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 102)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 102)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
            												else {
HXLINE( 102)													if (forceClear) {
HXLINE( 102)														::haxe::io::ArrayBufferViewImpl this1 = undoImage3->image;
HXDLIN( 102)														int x = (dx - rectLeft);
HXDLIN( 102)														int y = (dy - rectTop);
HXDLIN( 102)														int index;
HXDLIN( 102)														if (undoImage3->useVirtualPos) {
HXLINE( 102)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x) - undoImage3->virtualX));
            														}
            														else {
HXLINE( 102)															index = ::Std_obj::_hx_int(( (Float)(((y * undoImage3->width) + x)) ));
            														}
HXDLIN( 102)														bool _hx_tmp;
HXDLIN( 102)														if ((index >= 0)) {
HXLINE( 102)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE( 102)															_hx_tmp = false;
            														}
HXDLIN( 102)														if (_hx_tmp) {
HXLINE( 102)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 102)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 102)															_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 102)															_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 102)															_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 102)															_this->b[(pos + 3)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 102)						bool found3 = false;
HXDLIN( 102)						Float s3 = ((Float)0.);
HXDLIN( 102)						Float t3 = ((Float)0.);
HXDLIN( 102)						Float sxx3 = ((Float)0.);
HXDLIN( 102)						Float txx3 = ((Float)0.);
HXDLIN( 102)						{
HXLINE( 102)							int _g_min3 = xIter33->start;
HXDLIN( 102)							int _g_max3 = xIter33->max;
HXDLIN( 102)							while((_g_min3 < _g_max3)){
HXLINE( 102)								_g_min3 = (_g_min3 + 1);
HXDLIN( 102)								int x = (_g_min3 - 1);
HXLINE(  61)								sxx3 = (sx3 * ( (Float)(x) ));
HXLINE(  62)								txx3 = (tx3 * ( (Float)(x) ));
HXLINE(  63)								found3 = false;
HXLINE( 102)								{
HXLINE( 102)									int _g_min = yIter33->start;
HXDLIN( 102)									int _g_max = yIter33->max;
HXDLIN( 102)									while((_g_min < _g_max)){
HXLINE( 102)										_g_min = (_g_min + 1);
HXDLIN( 102)										int y = (_g_min - 1);
HXLINE(  65)										s3 = ((s03 + sxx3) + (sy3 * ( (Float)(y) )));
HXLINE(  66)										t3 = ((t03 + txx3) + (ty3 * ( (Float)(y) )));
HXLINE( 102)										bool _hx_tmp;
HXDLIN( 102)										if (!((s3 <= 0))) {
HXLINE( 102)											_hx_tmp = (t3 <= 0);
            										}
            										else {
HXLINE( 102)											_hx_tmp = true;
            										}
HXDLIN( 102)										if (_hx_tmp) {
HXLINE( 102)											if (found3) {
HXLINE( 102)												goto _hx_goto_18;
            											}
            										}
            										else {
HXLINE( 102)											if (((s3 + t3) < A3)) {
HXLINE( 102)												{
HXLINE( 102)													int this1 = color1;
HXDLIN( 102)													int c = this1;
HXDLIN( 102)													bool _hx_tmp;
HXDLIN( 102)													if ((((c >> 24) & 255) < 254)) {
HXLINE( 102)														_hx_tmp = temp->transparent;
            													}
            													else {
HXLINE( 102)														_hx_tmp = false;
            													}
HXDLIN( 102)													if (_hx_tmp) {
HXLINE( 102)														int location;
HXDLIN( 102)														if (temp->useVirtualPos) {
HXLINE( 102)															location = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            														}
            														else {
HXLINE( 102)															location = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            														}
HXDLIN( 102)														::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 102)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 102)														int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 102)														int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 102)														int this3 = this2;
HXDLIN( 102)														int this4;
HXDLIN( 102)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 102)															this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            														}
            														else {
HXLINE( 102)															this4 = this3;
            														}
HXDLIN( 102)														Float a1;
HXDLIN( 102)														int this5 = ((this4 >> 24) & 255);
HXDLIN( 102)														if ((this5 == 0)) {
HXLINE( 102)															a1 = ((Float)0.);
            														}
            														else {
HXLINE( 102)															a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            														}
HXDLIN( 102)														Float r1;
HXDLIN( 102)														int this6 = ((this4 >> 16) & 255);
HXDLIN( 102)														if ((this6 == 0)) {
HXLINE( 102)															r1 = ((Float)0.);
            														}
            														else {
HXLINE( 102)															r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            														}
HXDLIN( 102)														Float g1;
HXDLIN( 102)														int this7 = ((this4 >> 8) & 255);
HXDLIN( 102)														if ((this7 == 0)) {
HXLINE( 102)															g1 = ((Float)0.);
            														}
            														else {
HXLINE( 102)															g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            														}
HXDLIN( 102)														Float b1;
HXDLIN( 102)														int this8 = (this4 & 255);
HXDLIN( 102)														if ((this8 == 0)) {
HXLINE( 102)															b1 = ((Float)0.);
            														}
            														else {
HXLINE( 102)															b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            														}
HXDLIN( 102)														Float a2;
HXDLIN( 102)														int this9 = ((color1 >> 24) & 255);
HXDLIN( 102)														if ((this9 == 0)) {
HXLINE( 102)															a2 = ((Float)0.);
            														}
            														else {
HXLINE( 102)															a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            														}
HXDLIN( 102)														Float r2;
HXDLIN( 102)														int this10 = ((color1 >> 16) & 255);
HXDLIN( 102)														if ((this10 == 0)) {
HXLINE( 102)															r2 = ((Float)0.);
            														}
            														else {
HXLINE( 102)															r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            														}
HXDLIN( 102)														Float g2;
HXDLIN( 102)														int this11 = ((color1 >> 8) & 255);
HXDLIN( 102)														if ((this11 == 0)) {
HXLINE( 102)															g2 = ((Float)0.);
            														}
            														else {
HXLINE( 102)															g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            														}
HXDLIN( 102)														Float b2;
HXDLIN( 102)														int this12 = (color1 & 255);
HXDLIN( 102)														if ((this12 == 0)) {
HXLINE( 102)															b2 = ((Float)0.);
            														}
            														else {
HXLINE( 102)															b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            														}
HXDLIN( 102)														Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 102)														int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 102)														int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 102)														int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 102)														int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 102)														int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 102)														{
HXLINE( 102)															::haxe::io::ArrayBufferViewImpl this13 = temp->image;
HXDLIN( 102)															int value;
HXDLIN( 102)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 102)																value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            															}
            															else {
HXLINE( 102)																value = blended;
            															}
HXDLIN( 102)															bool _hx_tmp;
HXDLIN( 102)															if ((location >= 0)) {
HXLINE( 102)																_hx_tmp = (location < (this13->byteLength >> 2));
            															}
            															else {
HXLINE( 102)																_hx_tmp = false;
            															}
HXDLIN( 102)															if (_hx_tmp) {
HXLINE( 102)																::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 102)																int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 102)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 102)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 102)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 102)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
            													else {
HXLINE( 102)														::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 102)														int index;
HXDLIN( 102)														if (temp->useVirtualPos) {
HXLINE( 102)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            														}
            														else {
HXLINE( 102)															index = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            														}
HXDLIN( 102)														int value;
HXDLIN( 102)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 102)															value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            														}
            														else {
HXLINE( 102)															value = c;
            														}
HXDLIN( 102)														bool _hx_tmp;
HXDLIN( 102)														if ((index >= 0)) {
HXLINE( 102)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE( 102)															_hx_tmp = false;
            														}
HXDLIN( 102)														if (_hx_tmp) {
HXLINE( 102)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 102)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 102)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 102)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 102)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 102)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
HXLINE(  74)												found3 = true;
            											}
            											else {
HXLINE( 102)												if (found3) {
HXLINE( 102)													goto _hx_goto_18;
            												}
            											}
            										}
            									}
            									_hx_goto_18:;
            								}
            							}
            						}
HXDLIN( 102)						if ((hasHit1 == true)) {
HXLINE( 102)							::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,x2_,y2_,bx3,by3,cx3,cy3,true);
HXDLIN( 102)							if (hasUndo3) {
HXLINE( 102)								v->undoImage = undoImage3;
HXDLIN( 102)								v->undoX = xIter33->start;
HXDLIN( 102)								v->undoY = yIter33->start;
            							}
            						}
            					}
            				}
HXDLIN( 102)				if ((hasHit1 == true)) {
HXLINE( 102)					::pixelimage::algo::HitQuad v = ::pixelimage::algo::HitQuad_obj::__alloc( HX_CTX ,x1_,y1_,x2_,y2_,x3_,y3_,x4_,y4_,true);
            				}
            			}
            		}
HXLINE( 104)		{
HXLINE( 104)			int x = ::Std_obj::_hx_int((left + this->offX));
HXDLIN( 104)			int y = ::Std_obj::_hx_int((top + this->offY));
HXDLIN( 104)			bool forceClear = false;
HXDLIN( 104)			{
HXLINE( 104)				int _g = 0;
HXDLIN( 104)				int _g1 = temp->height;
HXDLIN( 104)				while((_g < _g1)){
HXLINE( 104)					_g = (_g + 1);
HXDLIN( 104)					int dy = (_g - 1);
HXDLIN( 104)					{
HXLINE( 104)						int _g1 = 0;
HXDLIN( 104)						int _g2 = temp->width;
HXDLIN( 104)						while((_g1 < _g2)){
HXLINE( 104)							_g1 = (_g1 + 1);
HXDLIN( 104)							int dx = (_g1 - 1);
HXDLIN( 104)							::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 104)							int index;
HXDLIN( 104)							if (temp->useVirtualPos) {
HXLINE( 104)								index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - temp->virtualY) * ( (Float)(temp->width) )) + dx) - temp->virtualX));
            							}
            							else {
HXLINE( 104)								index = ::Std_obj::_hx_int(( (Float)(((dy * temp->width) + dx)) ));
            							}
HXDLIN( 104)							::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 104)							int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 104)							int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 104)							int col;
HXDLIN( 104)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 104)								col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            							}
            							else {
HXLINE( 104)								col = c;
            							}
HXDLIN( 104)							bool _hx_tmp;
HXDLIN( 104)							if (temp->useMask) {
HXLINE( 104)								_hx_tmp = ::hx::IsNotNull( temp->mask );
            							}
            							else {
HXLINE( 104)								_hx_tmp = false;
            							}
HXDLIN( 104)							if (_hx_tmp) {
HXLINE( 104)								::pixelimage::ImageStruct this1 = temp->mask;
HXDLIN( 104)								::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 104)								int index;
HXDLIN( 104)								if (this1->useVirtualPos) {
HXLINE( 104)									index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            								}
            								else {
HXLINE( 104)									index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            								}
HXDLIN( 104)								::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 104)								int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 104)								int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 104)								int v;
HXDLIN( 104)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 104)									v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            								}
            								else {
HXLINE( 104)									v = c;
            								}
HXDLIN( 104)								int this3 = v;
HXDLIN( 104)								int maskPixel = this3;
HXDLIN( 104)								int this4 = col;
HXDLIN( 104)								int this5 = this4;
HXDLIN( 104)								if ((maskPixel == 0)) {
HXLINE( 104)									int this1 = this5;
HXDLIN( 104)									col = this1;
            								}
            								else {
HXLINE( 104)									Float m0;
HXDLIN( 104)									int this1 = ((maskPixel >> 24) & 255);
HXDLIN( 104)									if ((this1 == 0)) {
HXLINE( 104)										m0 = ((Float)0.);
            									}
            									else {
HXLINE( 104)										m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            									}
HXDLIN( 104)									Float m1;
HXDLIN( 104)									int this2 = ((maskPixel >> 16) & 255);
HXDLIN( 104)									if ((this2 == 0)) {
HXLINE( 104)										m1 = ((Float)0.);
            									}
            									else {
HXLINE( 104)										m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            									}
HXDLIN( 104)									Float m2;
HXDLIN( 104)									int this3 = ((maskPixel >> 8) & 255);
HXDLIN( 104)									if ((this3 == 0)) {
HXLINE( 104)										m2 = ((Float)0.);
            									}
            									else {
HXLINE( 104)										m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            									}
HXDLIN( 104)									Float m3;
HXDLIN( 104)									int this4 = (maskPixel & 255);
HXDLIN( 104)									if ((this4 == 0)) {
HXLINE( 104)										m3 = ((Float)0.);
            									}
            									else {
HXLINE( 104)										m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            									}
HXDLIN( 104)									int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN( 104)									int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN( 104)									int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN( 104)									int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN( 104)									col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            								}
            							}
HXDLIN( 104)							if ((col != 0)) {
HXLINE( 104)								int x1 = (x + dx);
HXDLIN( 104)								int y1 = (y + dy);
HXDLIN( 104)								int this1 = col;
HXDLIN( 104)								int c = this1;
HXDLIN( 104)								bool _hx_tmp;
HXDLIN( 104)								if ((((c >> 24) & 255) < 254)) {
HXLINE( 104)									_hx_tmp = pixelShape->transparent;
            								}
            								else {
HXLINE( 104)									_hx_tmp = false;
            								}
HXDLIN( 104)								if (_hx_tmp) {
HXLINE( 104)									int location;
HXDLIN( 104)									if (pixelShape->useVirtualPos) {
HXLINE( 104)										location = ::Std_obj::_hx_int(((((( (Float)(y1) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x1) - pixelShape->virtualX));
            									}
            									else {
HXLINE( 104)										location = ::Std_obj::_hx_int(( (Float)(((y1 * pixelShape->width) + x1)) ));
            									}
HXDLIN( 104)									::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN( 104)									::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 104)									int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 104)									int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 104)									int this3 = this2;
HXDLIN( 104)									int this4;
HXDLIN( 104)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 104)										this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            									}
            									else {
HXLINE( 104)										this4 = this3;
            									}
HXDLIN( 104)									Float a1;
HXDLIN( 104)									int this5 = ((this4 >> 24) & 255);
HXDLIN( 104)									if ((this5 == 0)) {
HXLINE( 104)										a1 = ((Float)0.);
            									}
            									else {
HXLINE( 104)										a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            									}
HXDLIN( 104)									Float r1;
HXDLIN( 104)									int this6 = ((this4 >> 16) & 255);
HXDLIN( 104)									if ((this6 == 0)) {
HXLINE( 104)										r1 = ((Float)0.);
            									}
            									else {
HXLINE( 104)										r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            									}
HXDLIN( 104)									Float g1;
HXDLIN( 104)									int this7 = ((this4 >> 8) & 255);
HXDLIN( 104)									if ((this7 == 0)) {
HXLINE( 104)										g1 = ((Float)0.);
            									}
            									else {
HXLINE( 104)										g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            									}
HXDLIN( 104)									Float b1;
HXDLIN( 104)									int this8 = (this4 & 255);
HXDLIN( 104)									if ((this8 == 0)) {
HXLINE( 104)										b1 = ((Float)0.);
            									}
            									else {
HXLINE( 104)										b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            									}
HXDLIN( 104)									Float a2;
HXDLIN( 104)									int this9 = ((col >> 24) & 255);
HXDLIN( 104)									if ((this9 == 0)) {
HXLINE( 104)										a2 = ((Float)0.);
            									}
            									else {
HXLINE( 104)										a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            									}
HXDLIN( 104)									Float r2;
HXDLIN( 104)									int this10 = ((col >> 16) & 255);
HXDLIN( 104)									if ((this10 == 0)) {
HXLINE( 104)										r2 = ((Float)0.);
            									}
            									else {
HXLINE( 104)										r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            									}
HXDLIN( 104)									Float g2;
HXDLIN( 104)									int this11 = ((col >> 8) & 255);
HXDLIN( 104)									if ((this11 == 0)) {
HXLINE( 104)										g2 = ((Float)0.);
            									}
            									else {
HXLINE( 104)										g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            									}
HXDLIN( 104)									Float b2;
HXDLIN( 104)									int this12 = (col & 255);
HXDLIN( 104)									if ((this12 == 0)) {
HXLINE( 104)										b2 = ((Float)0.);
            									}
            									else {
HXLINE( 104)										b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            									}
HXDLIN( 104)									Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 104)									int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 104)									int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 104)									int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 104)									int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 104)									int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 104)									{
HXLINE( 104)										::haxe::io::ArrayBufferViewImpl this13 = pixelShape->image;
HXDLIN( 104)										int value;
HXDLIN( 104)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 104)											value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            										}
            										else {
HXLINE( 104)											value = blended;
            										}
HXDLIN( 104)										bool _hx_tmp;
HXDLIN( 104)										if ((location >= 0)) {
HXLINE( 104)											_hx_tmp = (location < (this13->byteLength >> 2));
            										}
            										else {
HXLINE( 104)											_hx_tmp = false;
            										}
HXDLIN( 104)										if (_hx_tmp) {
HXLINE( 104)											::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 104)											int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 104)											_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 104)											_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 104)											_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 104)											_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            										}
            									}
            								}
            								else {
HXLINE( 104)									::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN( 104)									int index;
HXDLIN( 104)									if (pixelShape->useVirtualPos) {
HXLINE( 104)										index = ::Std_obj::_hx_int(((((( (Float)(y1) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x1) - pixelShape->virtualX));
            									}
            									else {
HXLINE( 104)										index = ::Std_obj::_hx_int(( (Float)(((y1 * pixelShape->width) + x1)) ));
            									}
HXDLIN( 104)									int value;
HXDLIN( 104)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 104)										value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXLINE( 104)										value = c;
            									}
HXDLIN( 104)									bool _hx_tmp;
HXDLIN( 104)									if ((index >= 0)) {
HXLINE( 104)										_hx_tmp = (index < (this1->byteLength >> 2));
            									}
            									else {
HXLINE( 104)										_hx_tmp = false;
            									}
HXDLIN( 104)									if (_hx_tmp) {
HXLINE( 104)										::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 104)										int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 104)										_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 104)										_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 104)										_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 104)										_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            									}
            								}
            							}
            							else {
HXLINE( 104)								if (forceClear) {
HXLINE( 104)									::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN( 104)									int x1 = (x + dx);
HXDLIN( 104)									int y1 = (y + dy);
HXDLIN( 104)									int index;
HXDLIN( 104)									if (pixelShape->useVirtualPos) {
HXLINE( 104)										index = ::Std_obj::_hx_int(((((( (Float)(y1) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x1) - pixelShape->virtualX));
            									}
            									else {
HXLINE( 104)										index = ::Std_obj::_hx_int(( (Float)(((y1 * pixelShape->width) + x1)) ));
            									}
HXDLIN( 104)									bool _hx_tmp;
HXDLIN( 104)									if ((index >= 0)) {
HXLINE( 104)										_hx_tmp = (index < (this1->byteLength >> 2));
            									}
            									else {
HXLINE( 104)										_hx_tmp = false;
            									}
HXDLIN( 104)									if (_hx_tmp) {
HXLINE( 104)										::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 104)										int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 104)										_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 104)										_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 104)										_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 104)										_this->b[(pos + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE( 105)		temp = null();
HXLINE( 107)		return this->super::render(pixelShape);
            	}



::hx::ObjectPtr< QuadrilateralShape_obj > QuadrilateralShape_obj::__new(::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< int >  __o_strokeColor,::hx::Null< Float >  __o_strokeWidth,::Array< ::String > strokeDashGapArray,::hx::Null< int >  __o_fill,::hx::Null< Float >  __o_x1,::hx::Null< Float >  __o_y1,::hx::Null< Float >  __o_x2,::hx::Null< Float >  __o_y2,::hx::Null< Float >  __o_x3,::hx::Null< Float >  __o_y3,::hx::Null< Float >  __o_x4,::hx::Null< Float >  __o_y4) {
	::hx::ObjectPtr< QuadrilateralShape_obj > __this = new QuadrilateralShape_obj();
	__this->__construct(__o_opacity,__o_visibility,__o_strokeColor,__o_strokeWidth,strokeDashGapArray,__o_fill,__o_x1,__o_y1,__o_x2,__o_y2,__o_x3,__o_y3,__o_x4,__o_y4);
	return __this;
}

::hx::ObjectPtr< QuadrilateralShape_obj > QuadrilateralShape_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< int >  __o_strokeColor,::hx::Null< Float >  __o_strokeWidth,::Array< ::String > strokeDashGapArray,::hx::Null< int >  __o_fill,::hx::Null< Float >  __o_x1,::hx::Null< Float >  __o_y1,::hx::Null< Float >  __o_x2,::hx::Null< Float >  __o_y2,::hx::Null< Float >  __o_x3,::hx::Null< Float >  __o_y3,::hx::Null< Float >  __o_x4,::hx::Null< Float >  __o_y4) {
	QuadrilateralShape_obj *__this = (QuadrilateralShape_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(QuadrilateralShape_obj), true, "pixelimage.triangleGML.shape.QuadrilateralShape"));
	*(void **)__this = QuadrilateralShape_obj::_hx_vtable;
	__this->__construct(__o_opacity,__o_visibility,__o_strokeColor,__o_strokeWidth,strokeDashGapArray,__o_fill,__o_x1,__o_y1,__o_x2,__o_y2,__o_x3,__o_y3,__o_x4,__o_y4);
	return __this;
}

QuadrilateralShape_obj::QuadrilateralShape_obj()
{
}

::hx::Val QuadrilateralShape_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"x1") ) { return ::hx::Val( x1 ); }
		if (HX_FIELD_EQ(inName,"y1") ) { return ::hx::Val( y1 ); }
		if (HX_FIELD_EQ(inName,"x2") ) { return ::hx::Val( x2 ); }
		if (HX_FIELD_EQ(inName,"y2") ) { return ::hx::Val( y2 ); }
		if (HX_FIELD_EQ(inName,"x3") ) { return ::hx::Val( x3 ); }
		if (HX_FIELD_EQ(inName,"y3") ) { return ::hx::Val( y3 ); }
		if (HX_FIELD_EQ(inName,"x4") ) { return ::hx::Val( x4 ); }
		if (HX_FIELD_EQ(inName,"y4") ) { return ::hx::Val( y4 ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { return ::hx::Val( render_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setParameter") ) { return ::hx::Val( setParameter_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val QuadrilateralShape_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"x1") ) { x1=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y1") ) { y1=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"x2") ) { x2=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y2") ) { y2=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"x3") ) { x3=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y3") ) { y3=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"x4") ) { x4=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y4") ) { y4=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void QuadrilateralShape_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("x1",b9,68,00,00));
	outFields->push(HX_("y1",98,69,00,00));
	outFields->push(HX_("x2",ba,68,00,00));
	outFields->push(HX_("y2",99,69,00,00));
	outFields->push(HX_("x3",bb,68,00,00));
	outFields->push(HX_("y3",9a,69,00,00));
	outFields->push(HX_("x4",bc,68,00,00));
	outFields->push(HX_("y4",9b,69,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo QuadrilateralShape_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(QuadrilateralShape_obj,x1),HX_("x1",b9,68,00,00)},
	{::hx::fsFloat,(int)offsetof(QuadrilateralShape_obj,y1),HX_("y1",98,69,00,00)},
	{::hx::fsFloat,(int)offsetof(QuadrilateralShape_obj,x2),HX_("x2",ba,68,00,00)},
	{::hx::fsFloat,(int)offsetof(QuadrilateralShape_obj,y2),HX_("y2",99,69,00,00)},
	{::hx::fsFloat,(int)offsetof(QuadrilateralShape_obj,x3),HX_("x3",bb,68,00,00)},
	{::hx::fsFloat,(int)offsetof(QuadrilateralShape_obj,y3),HX_("y3",9a,69,00,00)},
	{::hx::fsFloat,(int)offsetof(QuadrilateralShape_obj,x4),HX_("x4",bc,68,00,00)},
	{::hx::fsFloat,(int)offsetof(QuadrilateralShape_obj,y4),HX_("y4",9b,69,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *QuadrilateralShape_obj_sStaticStorageInfo = 0;
#endif

static ::String QuadrilateralShape_obj_sMemberFields[] = {
	HX_("x1",b9,68,00,00),
	HX_("y1",98,69,00,00),
	HX_("x2",ba,68,00,00),
	HX_("y2",99,69,00,00),
	HX_("x3",bb,68,00,00),
	HX_("y3",9a,69,00,00),
	HX_("x4",bc,68,00,00),
	HX_("y4",9b,69,00,00),
	HX_("setParameter",a7,f5,ff,6c),
	HX_("render",56,6b,29,05),
	::String(null()) };

::hx::Class QuadrilateralShape_obj::__mClass;

void QuadrilateralShape_obj::__register()
{
	QuadrilateralShape_obj _hx_dummy;
	QuadrilateralShape_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pixelimage.triangleGML.shape.QuadrilateralShape",7e,38,70,31);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(QuadrilateralShape_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< QuadrilateralShape_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = QuadrilateralShape_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = QuadrilateralShape_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pixelimage
} // end namespace triangleGML
} // end namespace shape
