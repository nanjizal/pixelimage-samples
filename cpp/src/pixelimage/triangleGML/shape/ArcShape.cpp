// Generated by Haxe 4.3.0-rc.1+
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_ArrayBufferViewImpl
#include <haxe/io/ArrayBufferViewImpl.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_pixelimage_ImageStruct
#include <pixelimage/ImageStruct.h>
#endif
#ifndef INCLUDED_pixelimage__Endian_Endian_Fields_
#include <pixelimage/_Endian/Endian_Fields_.h>
#endif
#ifndef INCLUDED_pixelimage_algo_HitQuad
#include <pixelimage/algo/HitQuad.h>
#endif
#ifndef INCLUDED_pixelimage_algo_HitTri
#include <pixelimage/algo/HitTri.h>
#endif
#ifndef INCLUDED_pixelimage_algo_HitTriArray
#include <pixelimage/algo/HitTriArray.h>
#endif
#ifndef INCLUDED_pixelimage_algo_IhitObj
#include <pixelimage/algo/IhitObj.h>
#endif
#ifndef INCLUDED_pixelimage_iter_IntIterStart
#include <pixelimage/iter/IntIterStart.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_BasicShape
#include <pixelimage/triangleGML/coreShape/BasicShape.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_FillShape
#include <pixelimage/triangleGML/coreShape/FillShape.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_GroupShape
#include <pixelimage/triangleGML/coreShape/GroupShape.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_ShapeInterface
#include <pixelimage/triangleGML/coreShape/ShapeInterface.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_shape_ArcShape
#include <pixelimage/triangleGML/shape/ArcShape.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_903fa8f91efddc1c_38_new,"pixelimage.triangleGML.shape.ArcShape","new",0x9039d577,"pixelimage.triangleGML.shape.ArcShape.new","pixelimage/triangleGML/shape/ArcShape.hx",38,0x1af963b6)
HX_LOCAL_STACK_FRAME(_hx_pos_903fa8f91efddc1c_50_setParameter,"pixelimage.triangleGML.shape.ArcShape","setParameter",0x6b6215b0,"pixelimage.triangleGML.shape.ArcShape.setParameter","pixelimage/triangleGML/shape/ArcShape.hx",50,0x1af963b6)
HX_LOCAL_STACK_FRAME(_hx_pos_903fa8f91efddc1c_74_render,"pixelimage.triangleGML.shape.ArcShape","render",0x46486e9f,"pixelimage.triangleGML.shape.ArcShape.render","pixelimage/triangleGML/shape/ArcShape.hx",74,0x1af963b6)
HX_LOCAL_STACK_FRAME(_hx_pos_903fa8f91efddc1c_89_chord,"pixelimage.triangleGML.shape.ArcShape","chord",0x1f00f533,"pixelimage.triangleGML.shape.ArcShape.chord","pixelimage/triangleGML/shape/ArcShape.hx",89,0x1af963b6)
HX_LOCAL_STACK_FRAME(_hx_pos_903fa8f91efddc1c_111_ellipse,"pixelimage.triangleGML.shape.ArcShape","ellipse",0xc58a1d75,"pixelimage.triangleGML.shape.ArcShape.ellipse","pixelimage/triangleGML/shape/ArcShape.hx",111,0x1af963b6)
HX_LOCAL_STACK_FRAME(_hx_pos_903fa8f91efddc1c_115_pie,"pixelimage.triangleGML.shape.ArcShape","pie",0x903b5d63,"pixelimage.triangleGML.shape.ArcShape.pie","pixelimage/triangleGML/shape/ArcShape.hx",115,0x1af963b6)
namespace pixelimage{
namespace triangleGML{
namespace shape{

void ArcShape_obj::__construct(::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< int >  __o_strokeColor,::hx::Null< Float >  __o_strokeWidth,::Array< ::String > strokeDashGapArray,::hx::Null< int >  __o_fill,::hx::Null< Float >  __o_left,::hx::Null< Float >  __o_top,::hx::Null< Float >  __o_width,::hx::Null< Float >  __o_height,::hx::Null< Float >  __o_startAngle,::hx::Null< Float >  __o_sweepAngle,::String __o_arcType){
            		Float opacity = __o_opacity.Default(((Float)1.));
            		bool visibility = __o_visibility.Default(true);
            		int strokeColor = __o_strokeColor.Default(0);
            		Float strokeWidth = __o_strokeWidth.Default(((Float)1.));
            		int fill = __o_fill.Default(0);
            		Float left = __o_left.Default(((Float)0.));
            		Float top = __o_top.Default(((Float)0.));
            		Float width = __o_width.Default(((Float)1.));
            		Float height = __o_height.Default(((Float)1.));
            		Float startAngle = __o_startAngle.Default(((Float)0.));
            		Float sweepAngle = __o_sweepAngle.Default(((Float)0.));
            		::String arcType = __o_arcType;
            		if (::hx::IsNull(__o_arcType)) arcType = HX_("pie",4c,58,55,00);
            	HX_STACKFRAME(&_hx_pos_903fa8f91efddc1c_38_new)
HXLINE(  39)		super::__construct(opacity,visibility,strokeColor,strokeWidth,strokeDashGapArray,fill);
HXLINE(  40)		this->left = left;
HXLINE(  41)		this->top = top;
HXLINE(  42)		this->width = width;
HXLINE(  43)		this->height = height;
HXLINE(  44)		this->startAngle = startAngle;
HXLINE(  45)		this->sweepAngle = sweepAngle;
HXLINE(  46)		this->arcType = arcType;
HXLINE(  47)		this->rx = (width / ( (Float)(2) ));
HXLINE(  48)		this->ry = (height / ( (Float)(2) ));
            	}

Dynamic ArcShape_obj::__CreateEmpty() { return new ArcShape_obj; }

void *ArcShape_obj::_hx_vtable = 0;

Dynamic ArcShape_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< ArcShape_obj > _hx_result = new ArcShape_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10],inArgs[11],inArgs[12]);
	return _hx_result;
}

bool ArcShape_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x24e92cfb) {
		if (inClassId<=(int)0x2091632c) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2091632c;
		} else {
			return inClassId==(int)0x24e92cfb;
		}
	} else {
		return inClassId==(int)0x2beb7fe7 || inClassId==(int)0x389f4e25;
	}
}

void ArcShape_obj::setParameter(::String name,::String value){
            	HX_STACKFRAME(&_hx_pos_903fa8f91efddc1c_50_setParameter)
HXLINE(  51)		::String _hx_switch_0 = name;
            		if (  (_hx_switch_0==HX_("arcType",2c,ae,de,8e)) ){
HXLINE(  67)			this->arcType = value;
HXDLIN(  67)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("height",e7,07,4c,02)) ){
HXLINE(  59)			this->height = ::Std_obj::parseFloat(value);
HXDLIN(  59)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("left",07,08,b0,47)) ){
HXLINE(  53)			this->left = ::Std_obj::parseFloat(value);
HXDLIN(  53)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("startAngle",11,1c,f9,3e)) ){
HXLINE(  61)			Float degree = ::Std_obj::parseFloat(value);
HXLINE(  62)			Float _hx_tmp;
HXDLIN(  62)			if ((degree == 0)) {
HXLINE(  62)				_hx_tmp = ( (Float)(0) );
            			}
            			else {
HXLINE(  62)				_hx_tmp = ((::Math_obj::PI * degree) / ( (Float)(180) ));
            			}
HXDLIN(  62)			this->startAngle = _hx_tmp;
HXLINE(  60)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("sweepAngle",47,a6,92,e6)) ){
HXLINE(  64)			Float degree = ::Std_obj::parseFloat(value);
HXLINE(  65)			Float _hx_tmp;
HXDLIN(  65)			if ((degree == 0)) {
HXLINE(  65)				_hx_tmp = ( (Float)(0) );
            			}
            			else {
HXLINE(  65)				_hx_tmp = ((::Math_obj::PI * degree) / ( (Float)(180) ));
            			}
HXDLIN(  65)			this->sweepAngle = _hx_tmp;
HXLINE(  63)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("top",95,66,58,00)) ){
HXLINE(  55)			this->top = ::Std_obj::parseFloat(value);
HXDLIN(  55)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("width",06,b6,62,ca)) ){
HXLINE(  57)			this->width = ::Std_obj::parseFloat(value);
HXDLIN(  57)			goto _hx_goto_1;
            		}
            		/* default */{
HXLINE(  69)			this->super::setParameter(name,value);
            		}
            		_hx_goto_1:;
HXLINE(  71)		this->rx = (this->width / ( (Float)(2) ));
HXLINE(  72)		this->ry = (this->height / ( (Float)(2) ));
            	}


::pixelimage::ImageStruct ArcShape_obj::render(::pixelimage::ImageStruct pixelShape){
            	HX_GC_STACKFRAME(&_hx_pos_903fa8f91efddc1c_74_render)
HXLINE(  75)		int w = ::Math_obj::ceil(this->width);
HXDLIN(  75)		int h = ::Math_obj::ceil(this->height);
HXDLIN(  75)		int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN(  75)		::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  75)		::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN(  75)		::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN(  75)		::pixelimage::ImageStruct this4 = this3;
HXDLIN(  75)		::pixelimage::ImageStruct temp = this4;
HXLINE(  76)		temp->transparent = false;
HXLINE(  77)		::String _hx_switch_0 = this->arcType;
            		if (  (_hx_switch_0==HX_("chord",5c,3c,be,45)) ){
HXLINE(  79)			this->chord(temp);
HXDLIN(  79)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("ellipse",de,40,86,0b)) ){
HXLINE(  81)			this->ellipse(temp);
HXDLIN(  81)			goto _hx_goto_3;
            		}
            		if (  (_hx_switch_0==HX_("pie",4c,58,55,00)) ){
HXLINE(  83)			this->pie(temp);
HXDLIN(  83)			goto _hx_goto_3;
            		}
            		_hx_goto_3:;
HXLINE(  85)		{
HXLINE(  85)			int x = ::Std_obj::_hx_int((this->left + this->offX));
HXDLIN(  85)			int y = ::Std_obj::_hx_int((this->top + this->offY));
HXDLIN(  85)			bool forceClear = false;
HXDLIN(  85)			{
HXLINE(  85)				int _g = 0;
HXDLIN(  85)				int _g1 = temp->height;
HXDLIN(  85)				while((_g < _g1)){
HXLINE(  85)					_g = (_g + 1);
HXDLIN(  85)					int dy = (_g - 1);
HXDLIN(  85)					{
HXLINE(  85)						int _g1 = 0;
HXDLIN(  85)						int _g2 = temp->width;
HXDLIN(  85)						while((_g1 < _g2)){
HXLINE(  85)							_g1 = (_g1 + 1);
HXDLIN(  85)							int dx = (_g1 - 1);
HXDLIN(  85)							::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN(  85)							int index;
HXDLIN(  85)							if (temp->useVirtualPos) {
HXLINE(  85)								index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - temp->virtualY) * ( (Float)(temp->width) )) + dx) - temp->virtualX));
            							}
            							else {
HXLINE(  85)								index = ::Std_obj::_hx_int(( (Float)(((dy * temp->width) + dx)) ));
            							}
HXDLIN(  85)							::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  85)							int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  85)							int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  85)							int col;
HXDLIN(  85)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  85)								col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            							}
            							else {
HXLINE(  85)								col = c;
            							}
HXDLIN(  85)							bool _hx_tmp;
HXDLIN(  85)							if (temp->useMask) {
HXLINE(  85)								_hx_tmp = ::hx::IsNotNull( temp->mask );
            							}
            							else {
HXLINE(  85)								_hx_tmp = false;
            							}
HXDLIN(  85)							if (_hx_tmp) {
HXLINE(  85)								::pixelimage::ImageStruct this1 = temp->mask;
HXDLIN(  85)								::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  85)								int index;
HXDLIN(  85)								if (this1->useVirtualPos) {
HXLINE(  85)									index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            								}
            								else {
HXLINE(  85)									index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            								}
HXDLIN(  85)								::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  85)								int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  85)								int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  85)								int v;
HXDLIN(  85)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  85)									v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            								}
            								else {
HXLINE(  85)									v = c;
            								}
HXDLIN(  85)								int this3 = v;
HXDLIN(  85)								int maskPixel = this3;
HXDLIN(  85)								int this4 = col;
HXDLIN(  85)								int this5 = this4;
HXDLIN(  85)								if ((maskPixel == 0)) {
HXLINE(  85)									int this1 = this5;
HXDLIN(  85)									col = this1;
            								}
            								else {
HXLINE(  85)									Float m0;
HXDLIN(  85)									int this1 = ((maskPixel >> 24) & 255);
HXDLIN(  85)									if ((this1 == 0)) {
HXLINE(  85)										m0 = ((Float)0.);
            									}
            									else {
HXLINE(  85)										m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            									}
HXDLIN(  85)									Float m1;
HXDLIN(  85)									int this2 = ((maskPixel >> 16) & 255);
HXDLIN(  85)									if ((this2 == 0)) {
HXLINE(  85)										m1 = ((Float)0.);
            									}
            									else {
HXLINE(  85)										m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            									}
HXDLIN(  85)									Float m2;
HXDLIN(  85)									int this3 = ((maskPixel >> 8) & 255);
HXDLIN(  85)									if ((this3 == 0)) {
HXLINE(  85)										m2 = ((Float)0.);
            									}
            									else {
HXLINE(  85)										m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            									}
HXDLIN(  85)									Float m3;
HXDLIN(  85)									int this4 = (maskPixel & 255);
HXDLIN(  85)									if ((this4 == 0)) {
HXLINE(  85)										m3 = ((Float)0.);
            									}
            									else {
HXLINE(  85)										m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            									}
HXDLIN(  85)									int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN(  85)									int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN(  85)									int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN(  85)									int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN(  85)									col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            								}
            							}
HXDLIN(  85)							if ((col != 0)) {
HXLINE(  85)								int x1 = (x + dx);
HXDLIN(  85)								int y1 = (y + dy);
HXDLIN(  85)								int this1 = col;
HXDLIN(  85)								int c = this1;
HXDLIN(  85)								bool _hx_tmp;
HXDLIN(  85)								if ((((c >> 24) & 255) < 254)) {
HXLINE(  85)									_hx_tmp = pixelShape->transparent;
            								}
            								else {
HXLINE(  85)									_hx_tmp = false;
            								}
HXDLIN(  85)								if (_hx_tmp) {
HXLINE(  85)									int location;
HXDLIN(  85)									if (pixelShape->useVirtualPos) {
HXLINE(  85)										location = ::Std_obj::_hx_int(((((( (Float)(y1) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x1) - pixelShape->virtualX));
            									}
            									else {
HXLINE(  85)										location = ::Std_obj::_hx_int(( (Float)(((y1 * pixelShape->width) + x1)) ));
            									}
HXDLIN(  85)									::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  85)									::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  85)									int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  85)									int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  85)									int this3 = this2;
HXDLIN(  85)									int this4;
HXDLIN(  85)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  85)										this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            									}
            									else {
HXLINE(  85)										this4 = this3;
            									}
HXDLIN(  85)									Float a1;
HXDLIN(  85)									int this5 = ((this4 >> 24) & 255);
HXDLIN(  85)									if ((this5 == 0)) {
HXLINE(  85)										a1 = ((Float)0.);
            									}
            									else {
HXLINE(  85)										a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            									}
HXDLIN(  85)									Float r1;
HXDLIN(  85)									int this6 = ((this4 >> 16) & 255);
HXDLIN(  85)									if ((this6 == 0)) {
HXLINE(  85)										r1 = ((Float)0.);
            									}
            									else {
HXLINE(  85)										r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            									}
HXDLIN(  85)									Float g1;
HXDLIN(  85)									int this7 = ((this4 >> 8) & 255);
HXDLIN(  85)									if ((this7 == 0)) {
HXLINE(  85)										g1 = ((Float)0.);
            									}
            									else {
HXLINE(  85)										g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            									}
HXDLIN(  85)									Float b1;
HXDLIN(  85)									int this8 = (this4 & 255);
HXDLIN(  85)									if ((this8 == 0)) {
HXLINE(  85)										b1 = ((Float)0.);
            									}
            									else {
HXLINE(  85)										b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            									}
HXDLIN(  85)									Float a2;
HXDLIN(  85)									int this9 = ((col >> 24) & 255);
HXDLIN(  85)									if ((this9 == 0)) {
HXLINE(  85)										a2 = ((Float)0.);
            									}
            									else {
HXLINE(  85)										a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            									}
HXDLIN(  85)									Float r2;
HXDLIN(  85)									int this10 = ((col >> 16) & 255);
HXDLIN(  85)									if ((this10 == 0)) {
HXLINE(  85)										r2 = ((Float)0.);
            									}
            									else {
HXLINE(  85)										r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            									}
HXDLIN(  85)									Float g2;
HXDLIN(  85)									int this11 = ((col >> 8) & 255);
HXDLIN(  85)									if ((this11 == 0)) {
HXLINE(  85)										g2 = ((Float)0.);
            									}
            									else {
HXLINE(  85)										g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            									}
HXDLIN(  85)									Float b2;
HXDLIN(  85)									int this12 = (col & 255);
HXDLIN(  85)									if ((this12 == 0)) {
HXLINE(  85)										b2 = ((Float)0.);
            									}
            									else {
HXLINE(  85)										b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            									}
HXDLIN(  85)									Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  85)									int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  85)									int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  85)									int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  85)									int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  85)									int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  85)									{
HXLINE(  85)										::haxe::io::ArrayBufferViewImpl this13 = pixelShape->image;
HXDLIN(  85)										int value;
HXDLIN(  85)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  85)											value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            										}
            										else {
HXLINE(  85)											value = blended;
            										}
HXDLIN(  85)										bool _hx_tmp;
HXDLIN(  85)										if ((location >= 0)) {
HXLINE(  85)											_hx_tmp = (location < (this13->byteLength >> 2));
            										}
            										else {
HXLINE(  85)											_hx_tmp = false;
            										}
HXDLIN(  85)										if (_hx_tmp) {
HXLINE(  85)											::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  85)											int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  85)											_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  85)											_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  85)											_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  85)											_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            										}
            									}
            								}
            								else {
HXLINE(  85)									::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  85)									int index;
HXDLIN(  85)									if (pixelShape->useVirtualPos) {
HXLINE(  85)										index = ::Std_obj::_hx_int(((((( (Float)(y1) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x1) - pixelShape->virtualX));
            									}
            									else {
HXLINE(  85)										index = ::Std_obj::_hx_int(( (Float)(((y1 * pixelShape->width) + x1)) ));
            									}
HXDLIN(  85)									int value;
HXDLIN(  85)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  85)										value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXLINE(  85)										value = c;
            									}
HXDLIN(  85)									bool _hx_tmp;
HXDLIN(  85)									if ((index >= 0)) {
HXLINE(  85)										_hx_tmp = (index < (this1->byteLength >> 2));
            									}
            									else {
HXLINE(  85)										_hx_tmp = false;
            									}
HXDLIN(  85)									if (_hx_tmp) {
HXLINE(  85)										::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  85)										int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  85)										_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  85)										_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  85)										_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  85)										_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            									}
            								}
            							}
            							else {
HXLINE(  85)								if (forceClear) {
HXLINE(  85)									::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  85)									int x1 = (x + dx);
HXDLIN(  85)									int y1 = (y + dy);
HXDLIN(  85)									int index;
HXDLIN(  85)									if (pixelShape->useVirtualPos) {
HXLINE(  85)										index = ::Std_obj::_hx_int(((((( (Float)(y1) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x1) - pixelShape->virtualX));
            									}
            									else {
HXLINE(  85)										index = ::Std_obj::_hx_int(( (Float)(((y1 * pixelShape->width) + x1)) ));
            									}
HXDLIN(  85)									bool _hx_tmp;
HXDLIN(  85)									if ((index >= 0)) {
HXLINE(  85)										_hx_tmp = (index < (this1->byteLength >> 2));
            									}
            									else {
HXLINE(  85)										_hx_tmp = false;
            									}
HXDLIN(  85)									if (_hx_tmp) {
HXLINE(  85)										::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  85)										int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  85)										_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  85)										_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  85)										_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  85)										_this->b[(pos + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(  86)		temp = null();
HXLINE(  87)		return this->super::render(pixelShape);
            	}


void ArcShape_obj::chord(::pixelimage::ImageStruct temp){
            	HX_GC_STACKFRAME(&_hx_pos_903fa8f91efddc1c_89_chord)
HXLINE(  90)		this->ellipse(temp);
HXLINE(  92)		Float endAngle = (this->startAngle + this->sweepAngle);
HXLINE(  93)		Float bx = ((this->rx * ::Math_obj::cos(this->startAngle)) + this->rx);
HXLINE(  94)		Float by = ((this->ry * ::Math_obj::sin(this->startAngle)) + this->ry);
HXLINE(  95)		Float cx = ((this->rx * ::Math_obj::cos(endAngle)) + this->rx);
HXLINE(  96)		Float cy = ((this->ry * ::Math_obj::sin(endAngle)) + this->ry);
HXLINE(  97)		if ((this->sweepAngle < ::Math_obj::PI)) {
HXLINE(  98)			Float bxS = (((this->rx - this->strokeWidth) * ::Math_obj::cos(this->startAngle)) + this->rx);
HXLINE(  99)			Float byS = (((this->ry - this->strokeWidth) * ::Math_obj::sin(this->startAngle)) + this->ry);
HXLINE( 100)			Float cxS = (((this->rx - this->strokeWidth) * ::Math_obj::cos((endAngle + ((Float)0.01)))) + this->rx);
HXLINE( 101)			Float cyS = (((this->ry - this->strokeWidth) * ::Math_obj::sin((endAngle + ((Float)0.01)))) + this->ry);
HXLINE( 102)			{
HXLINE( 102)				Float d = this->strokeWidth;
HXDLIN( 102)				{
HXLINE( 102)					Float x = (this->rx - (d / ( (Float)(2) )));
HXDLIN( 102)					Float y = (this->ry - (d / ( (Float)(2) )));
HXDLIN( 102)					int p = ::Std_obj::_hx_int(x);
HXDLIN( 102)					int xx = p;
HXDLIN( 102)					int q = ::Std_obj::_hx_int(y);
HXDLIN( 102)					int maxX = ::Std_obj::_hx_int((x + d));
HXDLIN( 102)					int maxY = ::Std_obj::_hx_int((y + d));
HXDLIN( 102)					while(true){
HXLINE( 102)						{
HXLINE( 102)							p = (p + 1);
HXDLIN( 102)							int x = (p - 1);
HXDLIN( 102)							int this1 = 0;
HXDLIN( 102)							int c = this1;
HXDLIN( 102)							bool _hx_tmp;
HXDLIN( 102)							if ((((c >> 24) & 255) < 254)) {
HXLINE( 102)								_hx_tmp = temp->transparent;
            							}
            							else {
HXLINE( 102)								_hx_tmp = false;
            							}
HXDLIN( 102)							if (_hx_tmp) {
HXLINE( 102)								int location;
HXDLIN( 102)								if (temp->useVirtualPos) {
HXLINE( 102)									location = ::Std_obj::_hx_int(((((( (Float)(q) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            								}
            								else {
HXLINE( 102)									location = ::Std_obj::_hx_int(( (Float)(((q * temp->width) + x)) ));
            								}
HXDLIN( 102)								::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 102)								::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 102)								int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 102)								int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 102)								int this3 = this2;
HXDLIN( 102)								int this4;
HXDLIN( 102)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 102)									this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            								}
            								else {
HXLINE( 102)									this4 = this3;
            								}
HXDLIN( 102)								Float a1;
HXDLIN( 102)								int this5 = ((this4 >> 24) & 255);
HXDLIN( 102)								if ((this5 == 0)) {
HXLINE( 102)									a1 = ((Float)0.);
            								}
            								else {
HXLINE( 102)									a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            								}
HXDLIN( 102)								Float r1;
HXDLIN( 102)								int this6 = ((this4 >> 16) & 255);
HXDLIN( 102)								if ((this6 == 0)) {
HXLINE( 102)									r1 = ((Float)0.);
            								}
            								else {
HXLINE( 102)									r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            								}
HXDLIN( 102)								Float g1;
HXDLIN( 102)								int this7 = ((this4 >> 8) & 255);
HXDLIN( 102)								if ((this7 == 0)) {
HXLINE( 102)									g1 = ((Float)0.);
            								}
            								else {
HXLINE( 102)									g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            								}
HXDLIN( 102)								Float b1;
HXDLIN( 102)								int this8 = (this4 & 255);
HXDLIN( 102)								if ((this8 == 0)) {
HXLINE( 102)									b1 = ((Float)0.);
            								}
            								else {
HXLINE( 102)									b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            								}
HXDLIN( 102)								Float a2;
HXDLIN( 102)								int this9 = ((0 >> 24) & 255);
HXDLIN( 102)								if ((this9 == 0)) {
HXLINE( 102)									a2 = ((Float)0.);
            								}
            								else {
HXLINE( 102)									a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            								}
HXDLIN( 102)								Float r2;
HXDLIN( 102)								int this10 = ((0 >> 16) & 255);
HXDLIN( 102)								if ((this10 == 0)) {
HXLINE( 102)									r2 = ((Float)0.);
            								}
            								else {
HXLINE( 102)									r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            								}
HXDLIN( 102)								Float g2;
HXDLIN( 102)								int this11 = ((0 >> 8) & 255);
HXDLIN( 102)								if ((this11 == 0)) {
HXLINE( 102)									g2 = ((Float)0.);
            								}
            								else {
HXLINE( 102)									g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            								}
HXDLIN( 102)								Float b2;
HXDLIN( 102)								int this12 = (0 & 255);
HXDLIN( 102)								if ((this12 == 0)) {
HXLINE( 102)									b2 = ((Float)0.);
            								}
            								else {
HXLINE( 102)									b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            								}
HXDLIN( 102)								Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 102)								int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 102)								int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 102)								int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 102)								int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 102)								int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 102)								{
HXLINE( 102)									::haxe::io::ArrayBufferViewImpl this13 = temp->image;
HXDLIN( 102)									int value;
HXDLIN( 102)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 102)										value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            									}
            									else {
HXLINE( 102)										value = blended;
            									}
HXDLIN( 102)									bool _hx_tmp;
HXDLIN( 102)									if ((location >= 0)) {
HXLINE( 102)										_hx_tmp = (location < (this13->byteLength >> 2));
            									}
            									else {
HXLINE( 102)										_hx_tmp = false;
            									}
HXDLIN( 102)									if (_hx_tmp) {
HXLINE( 102)										::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 102)										int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 102)										_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 102)										_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 102)										_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 102)										_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            									}
            								}
            							}
            							else {
HXLINE( 102)								::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 102)								int index;
HXDLIN( 102)								if (temp->useVirtualPos) {
HXLINE( 102)									index = ::Std_obj::_hx_int(((((( (Float)(q) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            								}
            								else {
HXLINE( 102)									index = ::Std_obj::_hx_int(( (Float)(((q * temp->width) + x)) ));
            								}
HXDLIN( 102)								int value;
HXDLIN( 102)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 102)									value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            								}
            								else {
HXLINE( 102)									value = c;
            								}
HXDLIN( 102)								bool _hx_tmp;
HXDLIN( 102)								if ((index >= 0)) {
HXLINE( 102)									_hx_tmp = (index < (this1->byteLength >> 2));
            								}
            								else {
HXLINE( 102)									_hx_tmp = false;
            								}
HXDLIN( 102)								if (_hx_tmp) {
HXLINE( 102)									::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 102)									int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 102)									_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 102)									_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 102)									_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 102)									_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            								}
            							}
            						}
HXDLIN( 102)						if ((p > maxX)) {
HXLINE( 247)							p = xx;
HXLINE( 102)							q = (q + 1);
            						}
HXDLIN( 102)						if ((q > maxY)) {
HXLINE( 102)							goto _hx_goto_7;
            						}
            					}
            					_hx_goto_7:;
            				}
            			}
HXLINE( 103)			{
HXLINE( 103)				Float ax = this->rx;
HXDLIN( 103)				Float ay = this->ry;
HXDLIN( 103)				int color = this->strokeColor;
HXDLIN( 103)				bool hasHit = false;
HXDLIN( 103)				bool hasUndo = false;
HXDLIN( 103)				{
HXLINE( 103)					Float bx1 = bx;
HXDLIN( 103)					Float by1 = by;
HXDLIN( 103)					Float cx1 = cx;
HXDLIN( 103)					Float cy1 = cy;
HXDLIN( 103)					bool adjustWinding = (((((ax * by1) - (bx1 * ay)) + ((bx1 * cy1) - (cx1 * by1))) + ((cx1 * ay) - (ax * cy1))) > 0);
HXDLIN( 103)					if (!(adjustWinding)) {
HXLINE( 103)						Float bx_ = bx1;
HXDLIN( 103)						Float by_ = by1;
HXLINE(  26)						bx1 = cx1;
HXLINE(  27)						by1 = cy1;
HXLINE(  28)						cx1 = bx_;
HXLINE(  29)						cy1 = by_;
            					}
HXLINE( 103)					{
HXLINE( 103)						Float s0 = ((ay * cx1) - (ax * cy1));
HXDLIN( 103)						Float sx = (cy1 - ay);
HXDLIN( 103)						Float sy = (ax - cx1);
HXDLIN( 103)						Float t0 = ((ax * by1) - (ay * bx1));
HXDLIN( 103)						Float tx = (ay - by1);
HXDLIN( 103)						Float ty = (bx1 - ax);
HXDLIN( 103)						Float A = ((((-(by1) * cx1) + (ay * (-(bx1) + cx1))) + (ax * (by1 - cy1))) + (bx1 * cy1));
HXDLIN( 103)						::pixelimage::iter::IntIterStart xIter3;
HXDLIN( 103)						if ((ax > bx1)) {
HXLINE( 103)							if ((ax > cx1)) {
HXLINE( 103)								int min;
HXDLIN( 103)								if ((bx1 > cx1)) {
HXLINE( 103)									min = ::Math_obj::floor(cx1);
            								}
            								else {
HXLINE( 103)									min = ::Math_obj::floor(bx1);
            								}
HXDLIN( 103)								int ii_min = min;
HXDLIN( 103)								int ii_max = ::Math_obj::ceil(ax);
HXDLIN( 103)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 103)								xIter3 = this1;
            							}
            							else {
HXLINE( 103)								int ii_min = ::Math_obj::floor(bx1);
HXDLIN( 103)								int ii_max = ::Math_obj::ceil(cx1);
HXDLIN( 103)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 103)								xIter3 = this1;
            							}
            						}
            						else {
HXLINE( 103)							if ((bx1 > cx1)) {
HXLINE( 103)								int min;
HXDLIN( 103)								if ((ax > cx1)) {
HXLINE( 103)									min = ::Math_obj::floor(cx1);
            								}
            								else {
HXLINE( 103)									min = ::Math_obj::ceil(ax);
            								}
HXDLIN( 103)								int ii_min = min;
HXDLIN( 103)								int ii_max = ::Math_obj::ceil(bx1);
HXDLIN( 103)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 103)								xIter3 = this1;
            							}
            							else {
HXLINE( 103)								int ii_min = ::Math_obj::floor(ax);
HXDLIN( 103)								int ii_max = ::Math_obj::ceil(cx1);
HXDLIN( 103)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 103)								xIter3 = this1;
            							}
            						}
HXDLIN( 103)						::pixelimage::iter::IntIterStart yIter3;
HXDLIN( 103)						if ((ay > by1)) {
HXLINE( 103)							if ((ay > cy1)) {
HXLINE( 103)								int min;
HXDLIN( 103)								if ((by1 > cy1)) {
HXLINE( 103)									min = ::Math_obj::floor(cy1);
            								}
            								else {
HXLINE( 103)									min = ::Math_obj::floor(by1);
            								}
HXDLIN( 103)								int ii_min = min;
HXDLIN( 103)								int ii_max = ::Math_obj::ceil(ay);
HXDLIN( 103)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 103)								yIter3 = this1;
            							}
            							else {
HXLINE( 103)								int ii_min = ::Math_obj::floor(by1);
HXDLIN( 103)								int ii_max = ::Math_obj::ceil(cy1);
HXDLIN( 103)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 103)								yIter3 = this1;
            							}
            						}
            						else {
HXLINE( 103)							if ((by1 > cy1)) {
HXLINE( 103)								int min;
HXDLIN( 103)								if ((ay > cy1)) {
HXLINE( 103)									min = ::Math_obj::floor(cy1);
            								}
            								else {
HXLINE( 103)									min = ::Math_obj::ceil(ay);
            								}
HXDLIN( 103)								int ii_min = min;
HXDLIN( 103)								int ii_max = ::Math_obj::ceil(by1);
HXDLIN( 103)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 103)								yIter3 = this1;
            							}
            							else {
HXLINE( 103)								int ii_min = ::Math_obj::floor(ay);
HXDLIN( 103)								int ii_max = ::Math_obj::ceil(cy1);
HXDLIN( 103)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 103)								yIter3 = this1;
            							}
            						}
HXDLIN( 103)						::pixelimage::ImageStruct undoImage = null();
HXDLIN( 103)						if (hasUndo) {
HXLINE( 103)							int w = ((xIter3->max - xIter3->start) + 1);
HXDLIN( 103)							int h = ((yIter3->max - yIter3->start) + 1);
HXDLIN( 103)							int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN( 103)							::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 103)							::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN( 103)							::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN( 103)							undoImage = this3;
HXDLIN( 103)							{
HXLINE( 103)								int rectLeft = xIter3->start;
HXDLIN( 103)								int rectTop = yIter3->start;
HXDLIN( 103)								int rectRight = xIter3->max;
HXDLIN( 103)								bool forceClear = false;
HXDLIN( 103)								{
HXLINE( 103)									int _g = rectTop;
HXDLIN( 103)									int _g1 = yIter3->max;
HXDLIN( 103)									while((_g < _g1)){
HXLINE( 103)										_g = (_g + 1);
HXDLIN( 103)										int dy = (_g - 1);
HXDLIN( 103)										{
HXLINE( 103)											int _g1 = rectLeft;
HXDLIN( 103)											int _g2 = rectRight;
HXDLIN( 103)											while((_g1 < _g2)){
HXLINE( 103)												_g1 = (_g1 + 1);
HXDLIN( 103)												int dx = (_g1 - 1);
HXDLIN( 103)												::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 103)												int index;
HXDLIN( 103)												if (temp->useVirtualPos) {
HXLINE( 103)													index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - temp->virtualY) * ( (Float)(temp->width) )) + dx) - temp->virtualX));
            												}
            												else {
HXLINE( 103)													index = ::Std_obj::_hx_int(( (Float)(((dy * temp->width) + dx)) ));
            												}
HXDLIN( 103)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 103)												int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 103)												int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 103)												int col;
HXDLIN( 103)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 103)													col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE( 103)													col = c;
            												}
HXDLIN( 103)												bool _hx_tmp;
HXDLIN( 103)												if (temp->useMask) {
HXLINE( 103)													_hx_tmp = ::hx::IsNotNull( temp->mask );
            												}
            												else {
HXLINE( 103)													_hx_tmp = false;
            												}
HXDLIN( 103)												if (_hx_tmp) {
HXLINE( 103)													::pixelimage::ImageStruct this1 = temp->mask;
HXDLIN( 103)													::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 103)													int index;
HXDLIN( 103)													if (this1->useVirtualPos) {
HXLINE( 103)														index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            													}
            													else {
HXLINE( 103)														index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            													}
HXDLIN( 103)													::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 103)													int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 103)													int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 103)													int v;
HXDLIN( 103)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 103)														v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE( 103)														v = c;
            													}
HXDLIN( 103)													int this3 = v;
HXDLIN( 103)													int maskPixel = this3;
HXDLIN( 103)													int this4 = col;
HXDLIN( 103)													int this5 = this4;
HXDLIN( 103)													if ((maskPixel == 0)) {
HXLINE( 103)														int this1 = this5;
HXDLIN( 103)														col = this1;
            													}
            													else {
HXLINE( 103)														Float m0;
HXDLIN( 103)														int this1 = ((maskPixel >> 24) & 255);
HXDLIN( 103)														if ((this1 == 0)) {
HXLINE( 103)															m0 = ((Float)0.);
            														}
            														else {
HXLINE( 103)															m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            														}
HXDLIN( 103)														Float m1;
HXDLIN( 103)														int this2 = ((maskPixel >> 16) & 255);
HXDLIN( 103)														if ((this2 == 0)) {
HXLINE( 103)															m1 = ((Float)0.);
            														}
            														else {
HXLINE( 103)															m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            														}
HXDLIN( 103)														Float m2;
HXDLIN( 103)														int this3 = ((maskPixel >> 8) & 255);
HXDLIN( 103)														if ((this3 == 0)) {
HXLINE( 103)															m2 = ((Float)0.);
            														}
            														else {
HXLINE( 103)															m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            														}
HXDLIN( 103)														Float m3;
HXDLIN( 103)														int this4 = (maskPixel & 255);
HXDLIN( 103)														if ((this4 == 0)) {
HXLINE( 103)															m3 = ((Float)0.);
            														}
            														else {
HXLINE( 103)															m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            														}
HXDLIN( 103)														int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN( 103)														int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN( 103)														int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN( 103)														int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN( 103)														col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            													}
            												}
HXDLIN( 103)												if ((col != 0)) {
HXLINE( 103)													int x = (dx - rectLeft);
HXDLIN( 103)													int y = (dy - rectTop);
HXDLIN( 103)													int this1 = col;
HXDLIN( 103)													int c = this1;
HXDLIN( 103)													bool _hx_tmp;
HXDLIN( 103)													if ((((c >> 24) & 255) < 254)) {
HXLINE( 103)														_hx_tmp = undoImage->transparent;
            													}
            													else {
HXLINE( 103)														_hx_tmp = false;
            													}
HXDLIN( 103)													if (_hx_tmp) {
HXLINE( 103)														int location;
HXDLIN( 103)														if (undoImage->useVirtualPos) {
HXLINE( 103)															location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            														}
            														else {
HXLINE( 103)															location = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            														}
HXDLIN( 103)														::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN( 103)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 103)														int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 103)														int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 103)														int this3 = this2;
HXDLIN( 103)														int this4;
HXDLIN( 103)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 103)															this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            														}
            														else {
HXLINE( 103)															this4 = this3;
            														}
HXDLIN( 103)														Float a1;
HXDLIN( 103)														int this5 = ((this4 >> 24) & 255);
HXDLIN( 103)														if ((this5 == 0)) {
HXLINE( 103)															a1 = ((Float)0.);
            														}
            														else {
HXLINE( 103)															a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            														}
HXDLIN( 103)														Float r1;
HXDLIN( 103)														int this6 = ((this4 >> 16) & 255);
HXDLIN( 103)														if ((this6 == 0)) {
HXLINE( 103)															r1 = ((Float)0.);
            														}
            														else {
HXLINE( 103)															r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            														}
HXDLIN( 103)														Float g1;
HXDLIN( 103)														int this7 = ((this4 >> 8) & 255);
HXDLIN( 103)														if ((this7 == 0)) {
HXLINE( 103)															g1 = ((Float)0.);
            														}
            														else {
HXLINE( 103)															g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            														}
HXDLIN( 103)														Float b1;
HXDLIN( 103)														int this8 = (this4 & 255);
HXDLIN( 103)														if ((this8 == 0)) {
HXLINE( 103)															b1 = ((Float)0.);
            														}
            														else {
HXLINE( 103)															b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            														}
HXDLIN( 103)														Float a2;
HXDLIN( 103)														int this9 = ((col >> 24) & 255);
HXDLIN( 103)														if ((this9 == 0)) {
HXLINE( 103)															a2 = ((Float)0.);
            														}
            														else {
HXLINE( 103)															a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            														}
HXDLIN( 103)														Float r2;
HXDLIN( 103)														int this10 = ((col >> 16) & 255);
HXDLIN( 103)														if ((this10 == 0)) {
HXLINE( 103)															r2 = ((Float)0.);
            														}
            														else {
HXLINE( 103)															r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            														}
HXDLIN( 103)														Float g2;
HXDLIN( 103)														int this11 = ((col >> 8) & 255);
HXDLIN( 103)														if ((this11 == 0)) {
HXLINE( 103)															g2 = ((Float)0.);
            														}
            														else {
HXLINE( 103)															g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            														}
HXDLIN( 103)														Float b2;
HXDLIN( 103)														int this12 = (col & 255);
HXDLIN( 103)														if ((this12 == 0)) {
HXLINE( 103)															b2 = ((Float)0.);
            														}
            														else {
HXLINE( 103)															b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            														}
HXDLIN( 103)														Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 103)														int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 103)														int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 103)														int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 103)														int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 103)														int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 103)														{
HXLINE( 103)															::haxe::io::ArrayBufferViewImpl this13 = undoImage->image;
HXDLIN( 103)															int value;
HXDLIN( 103)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 103)																value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            															}
            															else {
HXLINE( 103)																value = blended;
            															}
HXDLIN( 103)															bool _hx_tmp;
HXDLIN( 103)															if ((location >= 0)) {
HXLINE( 103)																_hx_tmp = (location < (this13->byteLength >> 2));
            															}
            															else {
HXLINE( 103)																_hx_tmp = false;
            															}
HXDLIN( 103)															if (_hx_tmp) {
HXLINE( 103)																::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 103)																int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 103)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 103)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 103)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 103)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
            													else {
HXLINE( 103)														::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN( 103)														int index;
HXDLIN( 103)														if (undoImage->useVirtualPos) {
HXLINE( 103)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            														}
            														else {
HXLINE( 103)															index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            														}
HXDLIN( 103)														int value;
HXDLIN( 103)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 103)															value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            														}
            														else {
HXLINE( 103)															value = c;
            														}
HXDLIN( 103)														bool _hx_tmp;
HXDLIN( 103)														if ((index >= 0)) {
HXLINE( 103)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE( 103)															_hx_tmp = false;
            														}
HXDLIN( 103)														if (_hx_tmp) {
HXLINE( 103)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 103)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 103)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 103)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 103)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 103)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
            												else {
HXLINE( 103)													if (forceClear) {
HXLINE( 103)														::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN( 103)														int x = (dx - rectLeft);
HXDLIN( 103)														int y = (dy - rectTop);
HXDLIN( 103)														int index;
HXDLIN( 103)														if (undoImage->useVirtualPos) {
HXLINE( 103)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            														}
            														else {
HXLINE( 103)															index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            														}
HXDLIN( 103)														bool _hx_tmp;
HXDLIN( 103)														if ((index >= 0)) {
HXLINE( 103)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE( 103)															_hx_tmp = false;
            														}
HXDLIN( 103)														if (_hx_tmp) {
HXLINE( 103)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 103)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 103)															_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 103)															_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 103)															_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 103)															_this->b[(pos + 3)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 103)						bool found = false;
HXDLIN( 103)						Float s = ((Float)0.);
HXDLIN( 103)						Float t = ((Float)0.);
HXDLIN( 103)						Float sxx = ((Float)0.);
HXDLIN( 103)						Float txx = ((Float)0.);
HXDLIN( 103)						{
HXLINE( 103)							int _g_min = xIter3->start;
HXDLIN( 103)							int _g_max = xIter3->max;
HXDLIN( 103)							while((_g_min < _g_max)){
HXLINE( 103)								_g_min = (_g_min + 1);
HXDLIN( 103)								int x = (_g_min - 1);
HXLINE(  61)								sxx = (sx * ( (Float)(x) ));
HXLINE(  62)								txx = (tx * ( (Float)(x) ));
HXLINE(  63)								found = false;
HXLINE( 103)								{
HXLINE( 103)									int _g_min1 = yIter3->start;
HXDLIN( 103)									int _g_max = yIter3->max;
HXDLIN( 103)									while((_g_min1 < _g_max)){
HXLINE( 103)										_g_min1 = (_g_min1 + 1);
HXDLIN( 103)										int y = (_g_min1 - 1);
HXLINE(  65)										s = ((s0 + sxx) + (sy * ( (Float)(y) )));
HXLINE(  66)										t = ((t0 + txx) + (ty * ( (Float)(y) )));
HXLINE( 103)										bool _hx_tmp;
HXDLIN( 103)										if (!((s <= 0))) {
HXLINE( 103)											_hx_tmp = (t <= 0);
            										}
            										else {
HXLINE( 103)											_hx_tmp = true;
            										}
HXDLIN( 103)										if (_hx_tmp) {
HXLINE( 103)											if (found) {
HXLINE( 103)												goto _hx_goto_11;
            											}
            										}
            										else {
HXLINE( 103)											if (((s + t) < A)) {
HXLINE( 103)												{
HXLINE( 103)													int this1 = color;
HXDLIN( 103)													int c = this1;
HXDLIN( 103)													bool _hx_tmp;
HXDLIN( 103)													if ((((c >> 24) & 255) < 254)) {
HXLINE( 103)														_hx_tmp = temp->transparent;
            													}
            													else {
HXLINE( 103)														_hx_tmp = false;
            													}
HXDLIN( 103)													if (_hx_tmp) {
HXLINE( 103)														int location;
HXDLIN( 103)														if (temp->useVirtualPos) {
HXLINE( 103)															location = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            														}
            														else {
HXLINE( 103)															location = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            														}
HXDLIN( 103)														::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 103)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 103)														int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 103)														int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 103)														int this3 = this2;
HXDLIN( 103)														int this4;
HXDLIN( 103)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 103)															this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            														}
            														else {
HXLINE( 103)															this4 = this3;
            														}
HXDLIN( 103)														Float a1;
HXDLIN( 103)														int this5 = ((this4 >> 24) & 255);
HXDLIN( 103)														if ((this5 == 0)) {
HXLINE( 103)															a1 = ((Float)0.);
            														}
            														else {
HXLINE( 103)															a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            														}
HXDLIN( 103)														Float r1;
HXDLIN( 103)														int this6 = ((this4 >> 16) & 255);
HXDLIN( 103)														if ((this6 == 0)) {
HXLINE( 103)															r1 = ((Float)0.);
            														}
            														else {
HXLINE( 103)															r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            														}
HXDLIN( 103)														Float g1;
HXDLIN( 103)														int this7 = ((this4 >> 8) & 255);
HXDLIN( 103)														if ((this7 == 0)) {
HXLINE( 103)															g1 = ((Float)0.);
            														}
            														else {
HXLINE( 103)															g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            														}
HXDLIN( 103)														Float b1;
HXDLIN( 103)														int this8 = (this4 & 255);
HXDLIN( 103)														if ((this8 == 0)) {
HXLINE( 103)															b1 = ((Float)0.);
            														}
            														else {
HXLINE( 103)															b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            														}
HXDLIN( 103)														Float a2;
HXDLIN( 103)														int this9 = ((color >> 24) & 255);
HXDLIN( 103)														if ((this9 == 0)) {
HXLINE( 103)															a2 = ((Float)0.);
            														}
            														else {
HXLINE( 103)															a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            														}
HXDLIN( 103)														Float r2;
HXDLIN( 103)														int this10 = ((color >> 16) & 255);
HXDLIN( 103)														if ((this10 == 0)) {
HXLINE( 103)															r2 = ((Float)0.);
            														}
            														else {
HXLINE( 103)															r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            														}
HXDLIN( 103)														Float g2;
HXDLIN( 103)														int this11 = ((color >> 8) & 255);
HXDLIN( 103)														if ((this11 == 0)) {
HXLINE( 103)															g2 = ((Float)0.);
            														}
            														else {
HXLINE( 103)															g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            														}
HXDLIN( 103)														Float b2;
HXDLIN( 103)														int this12 = (color & 255);
HXDLIN( 103)														if ((this12 == 0)) {
HXLINE( 103)															b2 = ((Float)0.);
            														}
            														else {
HXLINE( 103)															b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            														}
HXDLIN( 103)														Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 103)														int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 103)														int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 103)														int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 103)														int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 103)														int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 103)														{
HXLINE( 103)															::haxe::io::ArrayBufferViewImpl this13 = temp->image;
HXDLIN( 103)															int value;
HXDLIN( 103)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 103)																value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            															}
            															else {
HXLINE( 103)																value = blended;
            															}
HXDLIN( 103)															bool _hx_tmp;
HXDLIN( 103)															if ((location >= 0)) {
HXLINE( 103)																_hx_tmp = (location < (this13->byteLength >> 2));
            															}
            															else {
HXLINE( 103)																_hx_tmp = false;
            															}
HXDLIN( 103)															if (_hx_tmp) {
HXLINE( 103)																::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 103)																int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 103)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 103)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 103)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 103)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
            													else {
HXLINE( 103)														::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 103)														int index;
HXDLIN( 103)														if (temp->useVirtualPos) {
HXLINE( 103)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            														}
            														else {
HXLINE( 103)															index = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            														}
HXDLIN( 103)														int value;
HXDLIN( 103)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 103)															value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            														}
            														else {
HXLINE( 103)															value = c;
            														}
HXDLIN( 103)														bool _hx_tmp;
HXDLIN( 103)														if ((index >= 0)) {
HXLINE( 103)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE( 103)															_hx_tmp = false;
            														}
HXDLIN( 103)														if (_hx_tmp) {
HXLINE( 103)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 103)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 103)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 103)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 103)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 103)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
HXLINE(  74)												found = true;
            											}
            											else {
HXLINE( 103)												if (found) {
HXLINE( 103)													goto _hx_goto_11;
            												}
            											}
            										}
            									}
            									_hx_goto_11:;
            								}
            							}
            						}
HXDLIN( 103)						if ((hasHit == true)) {
HXLINE( 103)							::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,ax,ay,bx1,by1,cx1,cy1,true);
HXDLIN( 103)							if (hasUndo) {
HXLINE( 103)								v->undoImage = undoImage;
HXDLIN( 103)								v->undoX = xIter3->start;
HXDLIN( 103)								v->undoY = yIter3->start;
            							}
            						}
            					}
            				}
            			}
HXLINE( 104)			{
HXLINE( 104)				Float ax1 = this->rx;
HXDLIN( 104)				Float ay1 = this->ry;
HXDLIN( 104)				bool hasHit1 = false;
HXDLIN( 104)				bool hasUndo1 = false;
HXDLIN( 104)				{
HXLINE( 104)					Float bx2 = bxS;
HXDLIN( 104)					Float by2 = byS;
HXDLIN( 104)					Float cx2 = cxS;
HXDLIN( 104)					Float cy2 = cyS;
HXDLIN( 104)					bool adjustWinding1 = (((((ax1 * by2) - (bx2 * ay1)) + ((bx2 * cy2) - (cx2 * by2))) + ((cx2 * ay1) - (ax1 * cy2))) > 0);
HXDLIN( 104)					if (!(adjustWinding1)) {
HXLINE( 104)						Float bx_ = bx2;
HXDLIN( 104)						Float by_ = by2;
HXLINE(  26)						bx2 = cx2;
HXLINE(  27)						by2 = cy2;
HXLINE(  28)						cx2 = bx_;
HXLINE(  29)						cy2 = by_;
            					}
HXLINE( 104)					{
HXLINE( 104)						Float s01 = ((ay1 * cx2) - (ax1 * cy2));
HXDLIN( 104)						Float sx1 = (cy2 - ay1);
HXDLIN( 104)						Float sy1 = (ax1 - cx2);
HXDLIN( 104)						Float t01 = ((ax1 * by2) - (ay1 * bx2));
HXDLIN( 104)						Float tx1 = (ay1 - by2);
HXDLIN( 104)						Float ty1 = (bx2 - ax1);
HXDLIN( 104)						Float A1 = ((((-(by2) * cx2) + (ay1 * (-(bx2) + cx2))) + (ax1 * (by2 - cy2))) + (bx2 * cy2));
HXDLIN( 104)						::pixelimage::iter::IntIterStart xIter31;
HXDLIN( 104)						if ((ax1 > bx2)) {
HXLINE( 104)							if ((ax1 > cx2)) {
HXLINE( 104)								int min;
HXDLIN( 104)								if ((bx2 > cx2)) {
HXLINE( 104)									min = ::Math_obj::floor(cx2);
            								}
            								else {
HXLINE( 104)									min = ::Math_obj::floor(bx2);
            								}
HXDLIN( 104)								int ii_min = min;
HXDLIN( 104)								int ii_max = ::Math_obj::ceil(ax1);
HXDLIN( 104)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 104)								xIter31 = this1;
            							}
            							else {
HXLINE( 104)								int ii_min = ::Math_obj::floor(bx2);
HXDLIN( 104)								int ii_max = ::Math_obj::ceil(cx2);
HXDLIN( 104)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 104)								xIter31 = this1;
            							}
            						}
            						else {
HXLINE( 104)							if ((bx2 > cx2)) {
HXLINE( 104)								int min;
HXDLIN( 104)								if ((ax1 > cx2)) {
HXLINE( 104)									min = ::Math_obj::floor(cx2);
            								}
            								else {
HXLINE( 104)									min = ::Math_obj::ceil(ax1);
            								}
HXDLIN( 104)								int ii_min = min;
HXDLIN( 104)								int ii_max = ::Math_obj::ceil(bx2);
HXDLIN( 104)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 104)								xIter31 = this1;
            							}
            							else {
HXLINE( 104)								int ii_min = ::Math_obj::floor(ax1);
HXDLIN( 104)								int ii_max = ::Math_obj::ceil(cx2);
HXDLIN( 104)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 104)								xIter31 = this1;
            							}
            						}
HXDLIN( 104)						::pixelimage::iter::IntIterStart yIter31;
HXDLIN( 104)						if ((ay1 > by2)) {
HXLINE( 104)							if ((ay1 > cy2)) {
HXLINE( 104)								int min;
HXDLIN( 104)								if ((by2 > cy2)) {
HXLINE( 104)									min = ::Math_obj::floor(cy2);
            								}
            								else {
HXLINE( 104)									min = ::Math_obj::floor(by2);
            								}
HXDLIN( 104)								int ii_min = min;
HXDLIN( 104)								int ii_max = ::Math_obj::ceil(ay1);
HXDLIN( 104)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 104)								yIter31 = this1;
            							}
            							else {
HXLINE( 104)								int ii_min = ::Math_obj::floor(by2);
HXDLIN( 104)								int ii_max = ::Math_obj::ceil(cy2);
HXDLIN( 104)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 104)								yIter31 = this1;
            							}
            						}
            						else {
HXLINE( 104)							if ((by2 > cy2)) {
HXLINE( 104)								int min;
HXDLIN( 104)								if ((ay1 > cy2)) {
HXLINE( 104)									min = ::Math_obj::floor(cy2);
            								}
            								else {
HXLINE( 104)									min = ::Math_obj::ceil(ay1);
            								}
HXDLIN( 104)								int ii_min = min;
HXDLIN( 104)								int ii_max = ::Math_obj::ceil(by2);
HXDLIN( 104)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 104)								yIter31 = this1;
            							}
            							else {
HXLINE( 104)								int ii_min = ::Math_obj::floor(ay1);
HXDLIN( 104)								int ii_max = ::Math_obj::ceil(cy2);
HXDLIN( 104)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 104)								yIter31 = this1;
            							}
            						}
HXDLIN( 104)						::pixelimage::ImageStruct undoImage1 = null();
HXDLIN( 104)						if (hasUndo1) {
HXLINE( 104)							int w = ((xIter31->max - xIter31->start) + 1);
HXDLIN( 104)							int h = ((yIter31->max - yIter31->start) + 1);
HXDLIN( 104)							int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN( 104)							::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 104)							::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN( 104)							::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN( 104)							undoImage1 = this3;
HXDLIN( 104)							{
HXLINE( 104)								int rectLeft = xIter31->start;
HXDLIN( 104)								int rectTop = yIter31->start;
HXDLIN( 104)								int rectRight = xIter31->max;
HXDLIN( 104)								bool forceClear = false;
HXDLIN( 104)								{
HXLINE( 104)									int _g = rectTop;
HXDLIN( 104)									int _g1 = yIter31->max;
HXDLIN( 104)									while((_g < _g1)){
HXLINE( 104)										_g = (_g + 1);
HXDLIN( 104)										int dy = (_g - 1);
HXDLIN( 104)										{
HXLINE( 104)											int _g1 = rectLeft;
HXDLIN( 104)											int _g2 = rectRight;
HXDLIN( 104)											while((_g1 < _g2)){
HXLINE( 104)												_g1 = (_g1 + 1);
HXDLIN( 104)												int dx = (_g1 - 1);
HXDLIN( 104)												::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 104)												int index;
HXDLIN( 104)												if (temp->useVirtualPos) {
HXLINE( 104)													index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - temp->virtualY) * ( (Float)(temp->width) )) + dx) - temp->virtualX));
            												}
            												else {
HXLINE( 104)													index = ::Std_obj::_hx_int(( (Float)(((dy * temp->width) + dx)) ));
            												}
HXDLIN( 104)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 104)												int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 104)												int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 104)												int col;
HXDLIN( 104)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 104)													col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE( 104)													col = c;
            												}
HXDLIN( 104)												bool _hx_tmp;
HXDLIN( 104)												if (temp->useMask) {
HXLINE( 104)													_hx_tmp = ::hx::IsNotNull( temp->mask );
            												}
            												else {
HXLINE( 104)													_hx_tmp = false;
            												}
HXDLIN( 104)												if (_hx_tmp) {
HXLINE( 104)													::pixelimage::ImageStruct this1 = temp->mask;
HXDLIN( 104)													::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 104)													int index;
HXDLIN( 104)													if (this1->useVirtualPos) {
HXLINE( 104)														index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            													}
            													else {
HXLINE( 104)														index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            													}
HXDLIN( 104)													::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 104)													int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 104)													int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 104)													int v;
HXDLIN( 104)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 104)														v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE( 104)														v = c;
            													}
HXDLIN( 104)													int this3 = v;
HXDLIN( 104)													int maskPixel = this3;
HXDLIN( 104)													int this4 = col;
HXDLIN( 104)													int this5 = this4;
HXDLIN( 104)													if ((maskPixel == 0)) {
HXLINE( 104)														int this1 = this5;
HXDLIN( 104)														col = this1;
            													}
            													else {
HXLINE( 104)														Float m0;
HXDLIN( 104)														int this1 = ((maskPixel >> 24) & 255);
HXDLIN( 104)														if ((this1 == 0)) {
HXLINE( 104)															m0 = ((Float)0.);
            														}
            														else {
HXLINE( 104)															m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            														}
HXDLIN( 104)														Float m1;
HXDLIN( 104)														int this2 = ((maskPixel >> 16) & 255);
HXDLIN( 104)														if ((this2 == 0)) {
HXLINE( 104)															m1 = ((Float)0.);
            														}
            														else {
HXLINE( 104)															m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            														}
HXDLIN( 104)														Float m2;
HXDLIN( 104)														int this3 = ((maskPixel >> 8) & 255);
HXDLIN( 104)														if ((this3 == 0)) {
HXLINE( 104)															m2 = ((Float)0.);
            														}
            														else {
HXLINE( 104)															m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            														}
HXDLIN( 104)														Float m3;
HXDLIN( 104)														int this4 = (maskPixel & 255);
HXDLIN( 104)														if ((this4 == 0)) {
HXLINE( 104)															m3 = ((Float)0.);
            														}
            														else {
HXLINE( 104)															m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            														}
HXDLIN( 104)														int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN( 104)														int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN( 104)														int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN( 104)														int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN( 104)														col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            													}
            												}
HXDLIN( 104)												if ((col != 0)) {
HXLINE( 104)													int x = (dx - rectLeft);
HXDLIN( 104)													int y = (dy - rectTop);
HXDLIN( 104)													int this1 = col;
HXDLIN( 104)													int c = this1;
HXDLIN( 104)													bool _hx_tmp;
HXDLIN( 104)													if ((((c >> 24) & 255) < 254)) {
HXLINE( 104)														_hx_tmp = undoImage1->transparent;
            													}
            													else {
HXLINE( 104)														_hx_tmp = false;
            													}
HXDLIN( 104)													if (_hx_tmp) {
HXLINE( 104)														int location;
HXDLIN( 104)														if (undoImage1->useVirtualPos) {
HXLINE( 104)															location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            														}
            														else {
HXLINE( 104)															location = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            														}
HXDLIN( 104)														::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN( 104)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 104)														int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 104)														int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 104)														int this3 = this2;
HXDLIN( 104)														int this4;
HXDLIN( 104)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 104)															this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            														}
            														else {
HXLINE( 104)															this4 = this3;
            														}
HXDLIN( 104)														Float a1;
HXDLIN( 104)														int this5 = ((this4 >> 24) & 255);
HXDLIN( 104)														if ((this5 == 0)) {
HXLINE( 104)															a1 = ((Float)0.);
            														}
            														else {
HXLINE( 104)															a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            														}
HXDLIN( 104)														Float r1;
HXDLIN( 104)														int this6 = ((this4 >> 16) & 255);
HXDLIN( 104)														if ((this6 == 0)) {
HXLINE( 104)															r1 = ((Float)0.);
            														}
            														else {
HXLINE( 104)															r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            														}
HXDLIN( 104)														Float g1;
HXDLIN( 104)														int this7 = ((this4 >> 8) & 255);
HXDLIN( 104)														if ((this7 == 0)) {
HXLINE( 104)															g1 = ((Float)0.);
            														}
            														else {
HXLINE( 104)															g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            														}
HXDLIN( 104)														Float b1;
HXDLIN( 104)														int this8 = (this4 & 255);
HXDLIN( 104)														if ((this8 == 0)) {
HXLINE( 104)															b1 = ((Float)0.);
            														}
            														else {
HXLINE( 104)															b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            														}
HXDLIN( 104)														Float a2;
HXDLIN( 104)														int this9 = ((col >> 24) & 255);
HXDLIN( 104)														if ((this9 == 0)) {
HXLINE( 104)															a2 = ((Float)0.);
            														}
            														else {
HXLINE( 104)															a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            														}
HXDLIN( 104)														Float r2;
HXDLIN( 104)														int this10 = ((col >> 16) & 255);
HXDLIN( 104)														if ((this10 == 0)) {
HXLINE( 104)															r2 = ((Float)0.);
            														}
            														else {
HXLINE( 104)															r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            														}
HXDLIN( 104)														Float g2;
HXDLIN( 104)														int this11 = ((col >> 8) & 255);
HXDLIN( 104)														if ((this11 == 0)) {
HXLINE( 104)															g2 = ((Float)0.);
            														}
            														else {
HXLINE( 104)															g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            														}
HXDLIN( 104)														Float b2;
HXDLIN( 104)														int this12 = (col & 255);
HXDLIN( 104)														if ((this12 == 0)) {
HXLINE( 104)															b2 = ((Float)0.);
            														}
            														else {
HXLINE( 104)															b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            														}
HXDLIN( 104)														Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 104)														int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 104)														int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 104)														int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 104)														int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 104)														int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 104)														{
HXLINE( 104)															::haxe::io::ArrayBufferViewImpl this13 = undoImage1->image;
HXDLIN( 104)															int value;
HXDLIN( 104)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 104)																value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            															}
            															else {
HXLINE( 104)																value = blended;
            															}
HXDLIN( 104)															bool _hx_tmp;
HXDLIN( 104)															if ((location >= 0)) {
HXLINE( 104)																_hx_tmp = (location < (this13->byteLength >> 2));
            															}
            															else {
HXLINE( 104)																_hx_tmp = false;
            															}
HXDLIN( 104)															if (_hx_tmp) {
HXLINE( 104)																::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 104)																int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 104)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 104)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 104)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 104)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
            													else {
HXLINE( 104)														::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN( 104)														int index;
HXDLIN( 104)														if (undoImage1->useVirtualPos) {
HXLINE( 104)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            														}
            														else {
HXLINE( 104)															index = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            														}
HXDLIN( 104)														int value;
HXDLIN( 104)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 104)															value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            														}
            														else {
HXLINE( 104)															value = c;
            														}
HXDLIN( 104)														bool _hx_tmp;
HXDLIN( 104)														if ((index >= 0)) {
HXLINE( 104)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE( 104)															_hx_tmp = false;
            														}
HXDLIN( 104)														if (_hx_tmp) {
HXLINE( 104)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 104)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 104)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 104)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 104)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 104)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
            												else {
HXLINE( 104)													if (forceClear) {
HXLINE( 104)														::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN( 104)														int x = (dx - rectLeft);
HXDLIN( 104)														int y = (dy - rectTop);
HXDLIN( 104)														int index;
HXDLIN( 104)														if (undoImage1->useVirtualPos) {
HXLINE( 104)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            														}
            														else {
HXLINE( 104)															index = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            														}
HXDLIN( 104)														bool _hx_tmp;
HXDLIN( 104)														if ((index >= 0)) {
HXLINE( 104)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE( 104)															_hx_tmp = false;
            														}
HXDLIN( 104)														if (_hx_tmp) {
HXLINE( 104)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 104)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 104)															_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 104)															_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 104)															_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 104)															_this->b[(pos + 3)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 104)						bool found1 = false;
HXDLIN( 104)						Float s1 = ((Float)0.);
HXDLIN( 104)						Float t1 = ((Float)0.);
HXDLIN( 104)						Float sxx1 = ((Float)0.);
HXDLIN( 104)						Float txx1 = ((Float)0.);
HXDLIN( 104)						{
HXLINE( 104)							int _g_min1 = xIter31->start;
HXDLIN( 104)							int _g_max1 = xIter31->max;
HXDLIN( 104)							while((_g_min1 < _g_max1)){
HXLINE( 104)								_g_min1 = (_g_min1 + 1);
HXDLIN( 104)								int x = (_g_min1 - 1);
HXLINE(  61)								sxx1 = (sx1 * ( (Float)(x) ));
HXLINE(  62)								txx1 = (tx1 * ( (Float)(x) ));
HXLINE(  63)								found1 = false;
HXLINE( 104)								{
HXLINE( 104)									int _g_min = yIter31->start;
HXDLIN( 104)									int _g_max = yIter31->max;
HXDLIN( 104)									while((_g_min < _g_max)){
HXLINE( 104)										_g_min = (_g_min + 1);
HXDLIN( 104)										int y = (_g_min - 1);
HXLINE(  65)										s1 = ((s01 + sxx1) + (sy1 * ( (Float)(y) )));
HXLINE(  66)										t1 = ((t01 + txx1) + (ty1 * ( (Float)(y) )));
HXLINE( 104)										bool _hx_tmp;
HXDLIN( 104)										if (!((s1 <= 0))) {
HXLINE( 104)											_hx_tmp = (t1 <= 0);
            										}
            										else {
HXLINE( 104)											_hx_tmp = true;
            										}
HXDLIN( 104)										if (_hx_tmp) {
HXLINE( 104)											if (found1) {
HXLINE( 104)												goto _hx_goto_15;
            											}
            										}
            										else {
HXLINE( 104)											if (((s1 + t1) < A1)) {
HXLINE( 104)												{
HXLINE( 104)													int this1 = 0;
HXDLIN( 104)													int c = this1;
HXDLIN( 104)													bool _hx_tmp;
HXDLIN( 104)													if ((((c >> 24) & 255) < 254)) {
HXLINE( 104)														_hx_tmp = temp->transparent;
            													}
            													else {
HXLINE( 104)														_hx_tmp = false;
            													}
HXDLIN( 104)													if (_hx_tmp) {
HXLINE( 104)														int location;
HXDLIN( 104)														if (temp->useVirtualPos) {
HXLINE( 104)															location = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            														}
            														else {
HXLINE( 104)															location = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            														}
HXDLIN( 104)														::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 104)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 104)														int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 104)														int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 104)														int this3 = this2;
HXDLIN( 104)														int this4;
HXDLIN( 104)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 104)															this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            														}
            														else {
HXLINE( 104)															this4 = this3;
            														}
HXDLIN( 104)														Float a1;
HXDLIN( 104)														int this5 = ((this4 >> 24) & 255);
HXDLIN( 104)														if ((this5 == 0)) {
HXLINE( 104)															a1 = ((Float)0.);
            														}
            														else {
HXLINE( 104)															a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            														}
HXDLIN( 104)														Float r1;
HXDLIN( 104)														int this6 = ((this4 >> 16) & 255);
HXDLIN( 104)														if ((this6 == 0)) {
HXLINE( 104)															r1 = ((Float)0.);
            														}
            														else {
HXLINE( 104)															r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            														}
HXDLIN( 104)														Float g1;
HXDLIN( 104)														int this7 = ((this4 >> 8) & 255);
HXDLIN( 104)														if ((this7 == 0)) {
HXLINE( 104)															g1 = ((Float)0.);
            														}
            														else {
HXLINE( 104)															g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            														}
HXDLIN( 104)														Float b1;
HXDLIN( 104)														int this8 = (this4 & 255);
HXDLIN( 104)														if ((this8 == 0)) {
HXLINE( 104)															b1 = ((Float)0.);
            														}
            														else {
HXLINE( 104)															b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            														}
HXDLIN( 104)														Float a2;
HXDLIN( 104)														int this9 = ((0 >> 24) & 255);
HXDLIN( 104)														if ((this9 == 0)) {
HXLINE( 104)															a2 = ((Float)0.);
            														}
            														else {
HXLINE( 104)															a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            														}
HXDLIN( 104)														Float r2;
HXDLIN( 104)														int this10 = ((0 >> 16) & 255);
HXDLIN( 104)														if ((this10 == 0)) {
HXLINE( 104)															r2 = ((Float)0.);
            														}
            														else {
HXLINE( 104)															r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            														}
HXDLIN( 104)														Float g2;
HXDLIN( 104)														int this11 = ((0 >> 8) & 255);
HXDLIN( 104)														if ((this11 == 0)) {
HXLINE( 104)															g2 = ((Float)0.);
            														}
            														else {
HXLINE( 104)															g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            														}
HXDLIN( 104)														Float b2;
HXDLIN( 104)														int this12 = (0 & 255);
HXDLIN( 104)														if ((this12 == 0)) {
HXLINE( 104)															b2 = ((Float)0.);
            														}
            														else {
HXLINE( 104)															b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            														}
HXDLIN( 104)														Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 104)														int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 104)														int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 104)														int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 104)														int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 104)														int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 104)														{
HXLINE( 104)															::haxe::io::ArrayBufferViewImpl this13 = temp->image;
HXDLIN( 104)															int value;
HXDLIN( 104)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 104)																value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            															}
            															else {
HXLINE( 104)																value = blended;
            															}
HXDLIN( 104)															bool _hx_tmp;
HXDLIN( 104)															if ((location >= 0)) {
HXLINE( 104)																_hx_tmp = (location < (this13->byteLength >> 2));
            															}
            															else {
HXLINE( 104)																_hx_tmp = false;
            															}
HXDLIN( 104)															if (_hx_tmp) {
HXLINE( 104)																::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 104)																int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 104)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 104)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 104)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 104)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
            													else {
HXLINE( 104)														::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 104)														int index;
HXDLIN( 104)														if (temp->useVirtualPos) {
HXLINE( 104)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            														}
            														else {
HXLINE( 104)															index = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            														}
HXDLIN( 104)														int value;
HXDLIN( 104)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 104)															value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            														}
            														else {
HXLINE( 104)															value = c;
            														}
HXDLIN( 104)														bool _hx_tmp;
HXDLIN( 104)														if ((index >= 0)) {
HXLINE( 104)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE( 104)															_hx_tmp = false;
            														}
HXDLIN( 104)														if (_hx_tmp) {
HXLINE( 104)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 104)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 104)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 104)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 104)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 104)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
HXLINE(  74)												found1 = true;
            											}
            											else {
HXLINE( 104)												if (found1) {
HXLINE( 104)													goto _hx_goto_15;
            												}
            											}
            										}
            									}
            									_hx_goto_15:;
            								}
            							}
            						}
HXDLIN( 104)						if ((hasHit1 == true)) {
HXLINE( 104)							::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,ax1,ay1,bx2,by2,cx2,cy2,true);
HXDLIN( 104)							if (hasUndo1) {
HXLINE( 104)								v->undoImage = undoImage1;
HXDLIN( 104)								v->undoX = xIter31->start;
HXDLIN( 104)								v->undoY = yIter31->start;
            							}
            						}
            					}
            				}
            			}
            		}
            		else {
HXLINE( 106)			{
HXLINE( 106)				Float ax = this->rx;
HXDLIN( 106)				Float ay = this->ry;
HXDLIN( 106)				Float rx = this->rx;
HXDLIN( 106)				Float ry = this->ry;
HXDLIN( 106)				int color = this->strokeColor;
HXDLIN( 106)				bool hasHit = false;
HXDLIN( 106)				Float currAngle = endAngle;
HXDLIN( 106)				Float bx1 = ((rx * ::Math_obj::cos(currAngle)) + ax);
HXDLIN( 106)				Float by1 = ((ry * ::Math_obj::sin(currAngle)) + ay);
HXLINE( 388)				currAngle = (endAngle + (((( (Float)(2) ) * ::Math_obj::PI) - this->sweepAngle) + ((Float)0.01)));
HXLINE( 106)				Float cx1 = ((rx * ::Math_obj::cos(currAngle)) + ax);
HXDLIN( 106)				Float cy1 = ((ry * ::Math_obj::sin(currAngle)) + ay);
HXDLIN( 106)				{
HXLINE( 106)					bool hasUndo = false;
HXDLIN( 106)					{
HXLINE( 106)						Float bx2 = bx1;
HXDLIN( 106)						Float by2 = by1;
HXDLIN( 106)						Float cx2 = cx1;
HXDLIN( 106)						Float cy2 = cy1;
HXDLIN( 106)						bool adjustWinding = (((((ax * by2) - (bx2 * ay)) + ((bx2 * cy2) - (cx2 * by2))) + ((cx2 * ay) - (ax * cy2))) > 0);
HXDLIN( 106)						if (!(adjustWinding)) {
HXLINE( 106)							Float bx_ = bx2;
HXDLIN( 106)							Float by_ = by2;
HXLINE(  26)							bx2 = cx2;
HXLINE(  27)							by2 = cy2;
HXLINE(  28)							cx2 = bx_;
HXLINE(  29)							cy2 = by_;
            						}
HXLINE( 106)						{
HXLINE( 106)							Float s0 = ((ay * cx2) - (ax * cy2));
HXDLIN( 106)							Float sx = (cy2 - ay);
HXDLIN( 106)							Float sy = (ax - cx2);
HXDLIN( 106)							Float t0 = ((ax * by2) - (ay * bx2));
HXDLIN( 106)							Float tx = (ay - by2);
HXDLIN( 106)							Float ty = (bx2 - ax);
HXDLIN( 106)							Float A = ((((-(by2) * cx2) + (ay * (-(bx2) + cx2))) + (ax * (by2 - cy2))) + (bx2 * cy2));
HXDLIN( 106)							::pixelimage::iter::IntIterStart xIter3;
HXDLIN( 106)							if ((ax > bx2)) {
HXLINE( 106)								if ((ax > cx2)) {
HXLINE( 106)									int min;
HXDLIN( 106)									if ((bx2 > cx2)) {
HXLINE( 106)										min = ::Math_obj::floor(cx2);
            									}
            									else {
HXLINE( 106)										min = ::Math_obj::floor(bx2);
            									}
HXDLIN( 106)									int ii_min = min;
HXDLIN( 106)									int ii_max = ::Math_obj::ceil(ax);
HXDLIN( 106)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 106)									xIter3 = this1;
            								}
            								else {
HXLINE( 106)									int ii_min = ::Math_obj::floor(bx2);
HXDLIN( 106)									int ii_max = ::Math_obj::ceil(cx2);
HXDLIN( 106)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 106)									xIter3 = this1;
            								}
            							}
            							else {
HXLINE( 106)								if ((bx2 > cx2)) {
HXLINE( 106)									int min;
HXDLIN( 106)									if ((ax > cx2)) {
HXLINE( 106)										min = ::Math_obj::floor(cx2);
            									}
            									else {
HXLINE( 106)										min = ::Math_obj::ceil(ax);
            									}
HXDLIN( 106)									int ii_min = min;
HXDLIN( 106)									int ii_max = ::Math_obj::ceil(bx2);
HXDLIN( 106)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 106)									xIter3 = this1;
            								}
            								else {
HXLINE( 106)									int ii_min = ::Math_obj::floor(ax);
HXDLIN( 106)									int ii_max = ::Math_obj::ceil(cx2);
HXDLIN( 106)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 106)									xIter3 = this1;
            								}
            							}
HXDLIN( 106)							::pixelimage::iter::IntIterStart yIter3;
HXDLIN( 106)							if ((ay > by2)) {
HXLINE( 106)								if ((ay > cy2)) {
HXLINE( 106)									int min;
HXDLIN( 106)									if ((by2 > cy2)) {
HXLINE( 106)										min = ::Math_obj::floor(cy2);
            									}
            									else {
HXLINE( 106)										min = ::Math_obj::floor(by2);
            									}
HXDLIN( 106)									int ii_min = min;
HXDLIN( 106)									int ii_max = ::Math_obj::ceil(ay);
HXDLIN( 106)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 106)									yIter3 = this1;
            								}
            								else {
HXLINE( 106)									int ii_min = ::Math_obj::floor(by2);
HXDLIN( 106)									int ii_max = ::Math_obj::ceil(cy2);
HXDLIN( 106)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 106)									yIter3 = this1;
            								}
            							}
            							else {
HXLINE( 106)								if ((by2 > cy2)) {
HXLINE( 106)									int min;
HXDLIN( 106)									if ((ay > cy2)) {
HXLINE( 106)										min = ::Math_obj::floor(cy2);
            									}
            									else {
HXLINE( 106)										min = ::Math_obj::ceil(ay);
            									}
HXDLIN( 106)									int ii_min = min;
HXDLIN( 106)									int ii_max = ::Math_obj::ceil(by2);
HXDLIN( 106)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 106)									yIter3 = this1;
            								}
            								else {
HXLINE( 106)									int ii_min = ::Math_obj::floor(ay);
HXDLIN( 106)									int ii_max = ::Math_obj::ceil(cy2);
HXDLIN( 106)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 106)									yIter3 = this1;
            								}
            							}
HXDLIN( 106)							::pixelimage::ImageStruct undoImage = null();
HXDLIN( 106)							if (hasUndo) {
HXLINE( 106)								int w = ((xIter3->max - xIter3->start) + 1);
HXDLIN( 106)								int h = ((yIter3->max - yIter3->start) + 1);
HXDLIN( 106)								int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN( 106)								::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 106)								::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN( 106)								::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN( 106)								undoImage = this3;
HXDLIN( 106)								{
HXLINE( 106)									int rectLeft = xIter3->start;
HXDLIN( 106)									int rectTop = yIter3->start;
HXDLIN( 106)									int rectRight = xIter3->max;
HXDLIN( 106)									bool forceClear = false;
HXDLIN( 106)									{
HXLINE( 106)										int _g = rectTop;
HXDLIN( 106)										int _g1 = yIter3->max;
HXDLIN( 106)										while((_g < _g1)){
HXLINE( 106)											_g = (_g + 1);
HXDLIN( 106)											int dy = (_g - 1);
HXDLIN( 106)											{
HXLINE( 106)												int _g1 = rectLeft;
HXDLIN( 106)												int _g2 = rectRight;
HXDLIN( 106)												while((_g1 < _g2)){
HXLINE( 106)													_g1 = (_g1 + 1);
HXDLIN( 106)													int dx = (_g1 - 1);
HXDLIN( 106)													::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 106)													int index;
HXDLIN( 106)													if (temp->useVirtualPos) {
HXLINE( 106)														index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - temp->virtualY) * ( (Float)(temp->width) )) + dx) - temp->virtualX));
            													}
            													else {
HXLINE( 106)														index = ::Std_obj::_hx_int(( (Float)(((dy * temp->width) + dx)) ));
            													}
HXDLIN( 106)													::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 106)													int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 106)													int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 106)													int col;
HXDLIN( 106)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 106)														col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE( 106)														col = c;
            													}
HXDLIN( 106)													bool _hx_tmp;
HXDLIN( 106)													if (temp->useMask) {
HXLINE( 106)														_hx_tmp = ::hx::IsNotNull( temp->mask );
            													}
            													else {
HXLINE( 106)														_hx_tmp = false;
            													}
HXDLIN( 106)													if (_hx_tmp) {
HXLINE( 106)														::pixelimage::ImageStruct this1 = temp->mask;
HXDLIN( 106)														::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 106)														int index;
HXDLIN( 106)														if (this1->useVirtualPos) {
HXLINE( 106)															index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            														}
            														else {
HXLINE( 106)															index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            														}
HXDLIN( 106)														::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 106)														int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 106)														int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 106)														int v;
HXDLIN( 106)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 106)															v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            														}
            														else {
HXLINE( 106)															v = c;
            														}
HXDLIN( 106)														int this3 = v;
HXDLIN( 106)														int maskPixel = this3;
HXDLIN( 106)														int this4 = col;
HXDLIN( 106)														int this5 = this4;
HXDLIN( 106)														if ((maskPixel == 0)) {
HXLINE( 106)															int this1 = this5;
HXDLIN( 106)															col = this1;
            														}
            														else {
HXLINE( 106)															Float m0;
HXDLIN( 106)															int this1 = ((maskPixel >> 24) & 255);
HXDLIN( 106)															if ((this1 == 0)) {
HXLINE( 106)																m0 = ((Float)0.);
            															}
            															else {
HXLINE( 106)																m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            															}
HXDLIN( 106)															Float m1;
HXDLIN( 106)															int this2 = ((maskPixel >> 16) & 255);
HXDLIN( 106)															if ((this2 == 0)) {
HXLINE( 106)																m1 = ((Float)0.);
            															}
            															else {
HXLINE( 106)																m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            															}
HXDLIN( 106)															Float m2;
HXDLIN( 106)															int this3 = ((maskPixel >> 8) & 255);
HXDLIN( 106)															if ((this3 == 0)) {
HXLINE( 106)																m2 = ((Float)0.);
            															}
            															else {
HXLINE( 106)																m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            															}
HXDLIN( 106)															Float m3;
HXDLIN( 106)															int this4 = (maskPixel & 255);
HXDLIN( 106)															if ((this4 == 0)) {
HXLINE( 106)																m3 = ((Float)0.);
            															}
            															else {
HXLINE( 106)																m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            															}
HXDLIN( 106)															int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN( 106)															int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN( 106)															int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN( 106)															int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN( 106)															col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            														}
            													}
HXDLIN( 106)													if ((col != 0)) {
HXLINE( 106)														int x = (dx - rectLeft);
HXDLIN( 106)														int y = (dy - rectTop);
HXDLIN( 106)														int this1 = col;
HXDLIN( 106)														int c = this1;
HXDLIN( 106)														bool _hx_tmp;
HXDLIN( 106)														if ((((c >> 24) & 255) < 254)) {
HXLINE( 106)															_hx_tmp = undoImage->transparent;
            														}
            														else {
HXLINE( 106)															_hx_tmp = false;
            														}
HXDLIN( 106)														if (_hx_tmp) {
HXLINE( 106)															int location;
HXDLIN( 106)															if (undoImage->useVirtualPos) {
HXLINE( 106)																location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            															}
            															else {
HXLINE( 106)																location = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            															}
HXDLIN( 106)															::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN( 106)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 106)															int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 106)															int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 106)															int this3 = this2;
HXDLIN( 106)															int this4;
HXDLIN( 106)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 106)																this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            															}
            															else {
HXLINE( 106)																this4 = this3;
            															}
HXDLIN( 106)															Float a1;
HXDLIN( 106)															int this5 = ((this4 >> 24) & 255);
HXDLIN( 106)															if ((this5 == 0)) {
HXLINE( 106)																a1 = ((Float)0.);
            															}
            															else {
HXLINE( 106)																a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            															}
HXDLIN( 106)															Float r1;
HXDLIN( 106)															int this6 = ((this4 >> 16) & 255);
HXDLIN( 106)															if ((this6 == 0)) {
HXLINE( 106)																r1 = ((Float)0.);
            															}
            															else {
HXLINE( 106)																r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            															}
HXDLIN( 106)															Float g1;
HXDLIN( 106)															int this7 = ((this4 >> 8) & 255);
HXDLIN( 106)															if ((this7 == 0)) {
HXLINE( 106)																g1 = ((Float)0.);
            															}
            															else {
HXLINE( 106)																g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            															}
HXDLIN( 106)															Float b1;
HXDLIN( 106)															int this8 = (this4 & 255);
HXDLIN( 106)															if ((this8 == 0)) {
HXLINE( 106)																b1 = ((Float)0.);
            															}
            															else {
HXLINE( 106)																b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            															}
HXDLIN( 106)															Float a2;
HXDLIN( 106)															int this9 = ((col >> 24) & 255);
HXDLIN( 106)															if ((this9 == 0)) {
HXLINE( 106)																a2 = ((Float)0.);
            															}
            															else {
HXLINE( 106)																a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            															}
HXDLIN( 106)															Float r2;
HXDLIN( 106)															int this10 = ((col >> 16) & 255);
HXDLIN( 106)															if ((this10 == 0)) {
HXLINE( 106)																r2 = ((Float)0.);
            															}
            															else {
HXLINE( 106)																r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            															}
HXDLIN( 106)															Float g2;
HXDLIN( 106)															int this11 = ((col >> 8) & 255);
HXDLIN( 106)															if ((this11 == 0)) {
HXLINE( 106)																g2 = ((Float)0.);
            															}
            															else {
HXLINE( 106)																g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            															}
HXDLIN( 106)															Float b2;
HXDLIN( 106)															int this12 = (col & 255);
HXDLIN( 106)															if ((this12 == 0)) {
HXLINE( 106)																b2 = ((Float)0.);
            															}
            															else {
HXLINE( 106)																b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            															}
HXDLIN( 106)															Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 106)															int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 106)															int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 106)															int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 106)															int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 106)															int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 106)															{
HXLINE( 106)																::haxe::io::ArrayBufferViewImpl this13 = undoImage->image;
HXDLIN( 106)																int value;
HXDLIN( 106)																if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 106)																	value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																}
            																else {
HXLINE( 106)																	value = blended;
            																}
HXDLIN( 106)																bool _hx_tmp;
HXDLIN( 106)																if ((location >= 0)) {
HXLINE( 106)																	_hx_tmp = (location < (this13->byteLength >> 2));
            																}
            																else {
HXLINE( 106)																	_hx_tmp = false;
            																}
HXDLIN( 106)																if (_hx_tmp) {
HXLINE( 106)																	::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 106)																	int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 106)																	_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 106)																	_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 106)																	_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 106)																	_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																}
            															}
            														}
            														else {
HXLINE( 106)															::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN( 106)															int index;
HXDLIN( 106)															if (undoImage->useVirtualPos) {
HXLINE( 106)																index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            															}
            															else {
HXLINE( 106)																index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            															}
HXDLIN( 106)															int value;
HXDLIN( 106)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 106)																value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            															}
            															else {
HXLINE( 106)																value = c;
            															}
HXDLIN( 106)															bool _hx_tmp;
HXDLIN( 106)															if ((index >= 0)) {
HXLINE( 106)																_hx_tmp = (index < (this1->byteLength >> 2));
            															}
            															else {
HXLINE( 106)																_hx_tmp = false;
            															}
HXDLIN( 106)															if (_hx_tmp) {
HXLINE( 106)																::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 106)																int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 106)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 106)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 106)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 106)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
            													else {
HXLINE( 106)														if (forceClear) {
HXLINE( 106)															::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN( 106)															int x = (dx - rectLeft);
HXDLIN( 106)															int y = (dy - rectTop);
HXDLIN( 106)															int index;
HXDLIN( 106)															if (undoImage->useVirtualPos) {
HXLINE( 106)																index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            															}
            															else {
HXLINE( 106)																index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            															}
HXDLIN( 106)															bool _hx_tmp;
HXDLIN( 106)															if ((index >= 0)) {
HXLINE( 106)																_hx_tmp = (index < (this1->byteLength >> 2));
            															}
            															else {
HXLINE( 106)																_hx_tmp = false;
            															}
HXDLIN( 106)															if (_hx_tmp) {
HXLINE( 106)																::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 106)																int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 106)																_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 106)																_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 106)																_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 106)																_this->b[(pos + 3)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 106)							bool found = false;
HXDLIN( 106)							Float s = ((Float)0.);
HXDLIN( 106)							Float t = ((Float)0.);
HXDLIN( 106)							Float sxx = ((Float)0.);
HXDLIN( 106)							Float txx = ((Float)0.);
HXDLIN( 106)							{
HXLINE( 106)								int _g_min = xIter3->start;
HXDLIN( 106)								int _g_max = xIter3->max;
HXDLIN( 106)								while((_g_min < _g_max)){
HXLINE( 106)									_g_min = (_g_min + 1);
HXDLIN( 106)									int x = (_g_min - 1);
HXLINE(  61)									sxx = (sx * ( (Float)(x) ));
HXLINE(  62)									txx = (tx * ( (Float)(x) ));
HXLINE(  63)									found = false;
HXLINE( 106)									{
HXLINE( 106)										int _g_min1 = yIter3->start;
HXDLIN( 106)										int _g_max = yIter3->max;
HXDLIN( 106)										while((_g_min1 < _g_max)){
HXLINE( 106)											_g_min1 = (_g_min1 + 1);
HXDLIN( 106)											int y = (_g_min1 - 1);
HXLINE(  65)											s = ((s0 + sxx) + (sy * ( (Float)(y) )));
HXLINE(  66)											t = ((t0 + txx) + (ty * ( (Float)(y) )));
HXLINE( 106)											bool _hx_tmp;
HXDLIN( 106)											if (!((s <= 0))) {
HXLINE( 106)												_hx_tmp = (t <= 0);
            											}
            											else {
HXLINE( 106)												_hx_tmp = true;
            											}
HXDLIN( 106)											if (_hx_tmp) {
HXLINE( 106)												if (found) {
HXLINE( 106)													goto _hx_goto_19;
            												}
            											}
            											else {
HXLINE( 106)												if (((s + t) < A)) {
HXLINE( 106)													{
HXLINE( 106)														int this1 = color;
HXDLIN( 106)														int c = this1;
HXDLIN( 106)														bool _hx_tmp;
HXDLIN( 106)														if ((((c >> 24) & 255) < 254)) {
HXLINE( 106)															_hx_tmp = temp->transparent;
            														}
            														else {
HXLINE( 106)															_hx_tmp = false;
            														}
HXDLIN( 106)														if (_hx_tmp) {
HXLINE( 106)															int location;
HXDLIN( 106)															if (temp->useVirtualPos) {
HXLINE( 106)																location = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            															}
            															else {
HXLINE( 106)																location = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            															}
HXDLIN( 106)															::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 106)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 106)															int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 106)															int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 106)															int this3 = this2;
HXDLIN( 106)															int this4;
HXDLIN( 106)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 106)																this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            															}
            															else {
HXLINE( 106)																this4 = this3;
            															}
HXDLIN( 106)															Float a1;
HXDLIN( 106)															int this5 = ((this4 >> 24) & 255);
HXDLIN( 106)															if ((this5 == 0)) {
HXLINE( 106)																a1 = ((Float)0.);
            															}
            															else {
HXLINE( 106)																a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            															}
HXDLIN( 106)															Float r1;
HXDLIN( 106)															int this6 = ((this4 >> 16) & 255);
HXDLIN( 106)															if ((this6 == 0)) {
HXLINE( 106)																r1 = ((Float)0.);
            															}
            															else {
HXLINE( 106)																r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            															}
HXDLIN( 106)															Float g1;
HXDLIN( 106)															int this7 = ((this4 >> 8) & 255);
HXDLIN( 106)															if ((this7 == 0)) {
HXLINE( 106)																g1 = ((Float)0.);
            															}
            															else {
HXLINE( 106)																g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            															}
HXDLIN( 106)															Float b1;
HXDLIN( 106)															int this8 = (this4 & 255);
HXDLIN( 106)															if ((this8 == 0)) {
HXLINE( 106)																b1 = ((Float)0.);
            															}
            															else {
HXLINE( 106)																b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            															}
HXDLIN( 106)															Float a2;
HXDLIN( 106)															int this9 = ((color >> 24) & 255);
HXDLIN( 106)															if ((this9 == 0)) {
HXLINE( 106)																a2 = ((Float)0.);
            															}
            															else {
HXLINE( 106)																a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            															}
HXDLIN( 106)															Float r2;
HXDLIN( 106)															int this10 = ((color >> 16) & 255);
HXDLIN( 106)															if ((this10 == 0)) {
HXLINE( 106)																r2 = ((Float)0.);
            															}
            															else {
HXLINE( 106)																r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            															}
HXDLIN( 106)															Float g2;
HXDLIN( 106)															int this11 = ((color >> 8) & 255);
HXDLIN( 106)															if ((this11 == 0)) {
HXLINE( 106)																g2 = ((Float)0.);
            															}
            															else {
HXLINE( 106)																g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            															}
HXDLIN( 106)															Float b2;
HXDLIN( 106)															int this12 = (color & 255);
HXDLIN( 106)															if ((this12 == 0)) {
HXLINE( 106)																b2 = ((Float)0.);
            															}
            															else {
HXLINE( 106)																b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            															}
HXDLIN( 106)															Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 106)															int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 106)															int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 106)															int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 106)															int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 106)															int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 106)															{
HXLINE( 106)																::haxe::io::ArrayBufferViewImpl this13 = temp->image;
HXDLIN( 106)																int value;
HXDLIN( 106)																if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 106)																	value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																}
            																else {
HXLINE( 106)																	value = blended;
            																}
HXDLIN( 106)																bool _hx_tmp;
HXDLIN( 106)																if ((location >= 0)) {
HXLINE( 106)																	_hx_tmp = (location < (this13->byteLength >> 2));
            																}
            																else {
HXLINE( 106)																	_hx_tmp = false;
            																}
HXDLIN( 106)																if (_hx_tmp) {
HXLINE( 106)																	::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 106)																	int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 106)																	_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 106)																	_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 106)																	_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 106)																	_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																}
            															}
            														}
            														else {
HXLINE( 106)															::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 106)															int index;
HXDLIN( 106)															if (temp->useVirtualPos) {
HXLINE( 106)																index = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            															}
            															else {
HXLINE( 106)																index = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            															}
HXDLIN( 106)															int value;
HXDLIN( 106)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 106)																value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            															}
            															else {
HXLINE( 106)																value = c;
            															}
HXDLIN( 106)															bool _hx_tmp;
HXDLIN( 106)															if ((index >= 0)) {
HXLINE( 106)																_hx_tmp = (index < (this1->byteLength >> 2));
            															}
            															else {
HXLINE( 106)																_hx_tmp = false;
            															}
HXDLIN( 106)															if (_hx_tmp) {
HXLINE( 106)																::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 106)																int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 106)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 106)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 106)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 106)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
HXLINE(  74)													found = true;
            												}
            												else {
HXLINE( 106)													if (found) {
HXLINE( 106)														goto _hx_goto_19;
            													}
            												}
            											}
            										}
            										_hx_goto_19:;
            									}
            								}
            							}
HXDLIN( 106)							if ((hasHit == true)) {
HXLINE( 106)								::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,ax,ay,bx2,by2,cx2,cy2,true);
HXDLIN( 106)								if (hasUndo) {
HXLINE( 106)									v->undoImage = undoImage;
HXDLIN( 106)									v->undoX = xIter3->start;
HXDLIN( 106)									v->undoY = yIter3->start;
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 107)			{
HXLINE( 107)				Float ax1 = this->rx;
HXDLIN( 107)				Float ay1 = this->ry;
HXDLIN( 107)				Float rx1 = (this->rx - this->strokeWidth);
HXDLIN( 107)				Float ry1 = (this->ry - this->strokeWidth);
HXDLIN( 107)				int color1 = this->fill;
HXDLIN( 107)				bool hasHit1 = false;
HXDLIN( 107)				Float currAngle1 = endAngle;
HXDLIN( 107)				Float bx3 = ((rx1 * ::Math_obj::cos(currAngle1)) + ax1);
HXDLIN( 107)				Float by3 = ((ry1 * ::Math_obj::sin(currAngle1)) + ay1);
HXLINE( 388)				currAngle1 = (endAngle + (((( (Float)(2) ) * ::Math_obj::PI) - this->sweepAngle) + ((Float)0.01)));
HXLINE( 107)				Float cx3 = ((rx1 * ::Math_obj::cos(currAngle1)) + ax1);
HXDLIN( 107)				Float cy3 = ((ry1 * ::Math_obj::sin(currAngle1)) + ay1);
HXDLIN( 107)				{
HXLINE( 107)					bool hasUndo1 = false;
HXDLIN( 107)					{
HXLINE( 107)						Float bx4 = bx3;
HXDLIN( 107)						Float by4 = by3;
HXDLIN( 107)						Float cx4 = cx3;
HXDLIN( 107)						Float cy4 = cy3;
HXDLIN( 107)						bool adjustWinding1 = (((((ax1 * by4) - (bx4 * ay1)) + ((bx4 * cy4) - (cx4 * by4))) + ((cx4 * ay1) - (ax1 * cy4))) > 0);
HXDLIN( 107)						if (!(adjustWinding1)) {
HXLINE( 107)							Float bx_ = bx4;
HXDLIN( 107)							Float by_ = by4;
HXLINE(  26)							bx4 = cx4;
HXLINE(  27)							by4 = cy4;
HXLINE(  28)							cx4 = bx_;
HXLINE(  29)							cy4 = by_;
            						}
HXLINE( 107)						{
HXLINE( 107)							Float s01 = ((ay1 * cx4) - (ax1 * cy4));
HXDLIN( 107)							Float sx1 = (cy4 - ay1);
HXDLIN( 107)							Float sy1 = (ax1 - cx4);
HXDLIN( 107)							Float t01 = ((ax1 * by4) - (ay1 * bx4));
HXDLIN( 107)							Float tx1 = (ay1 - by4);
HXDLIN( 107)							Float ty1 = (bx4 - ax1);
HXDLIN( 107)							Float A1 = ((((-(by4) * cx4) + (ay1 * (-(bx4) + cx4))) + (ax1 * (by4 - cy4))) + (bx4 * cy4));
HXDLIN( 107)							::pixelimage::iter::IntIterStart xIter31;
HXDLIN( 107)							if ((ax1 > bx4)) {
HXLINE( 107)								if ((ax1 > cx4)) {
HXLINE( 107)									int min;
HXDLIN( 107)									if ((bx4 > cx4)) {
HXLINE( 107)										min = ::Math_obj::floor(cx4);
            									}
            									else {
HXLINE( 107)										min = ::Math_obj::floor(bx4);
            									}
HXDLIN( 107)									int ii_min = min;
HXDLIN( 107)									int ii_max = ::Math_obj::ceil(ax1);
HXDLIN( 107)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 107)									xIter31 = this1;
            								}
            								else {
HXLINE( 107)									int ii_min = ::Math_obj::floor(bx4);
HXDLIN( 107)									int ii_max = ::Math_obj::ceil(cx4);
HXDLIN( 107)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 107)									xIter31 = this1;
            								}
            							}
            							else {
HXLINE( 107)								if ((bx4 > cx4)) {
HXLINE( 107)									int min;
HXDLIN( 107)									if ((ax1 > cx4)) {
HXLINE( 107)										min = ::Math_obj::floor(cx4);
            									}
            									else {
HXLINE( 107)										min = ::Math_obj::ceil(ax1);
            									}
HXDLIN( 107)									int ii_min = min;
HXDLIN( 107)									int ii_max = ::Math_obj::ceil(bx4);
HXDLIN( 107)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 107)									xIter31 = this1;
            								}
            								else {
HXLINE( 107)									int ii_min = ::Math_obj::floor(ax1);
HXDLIN( 107)									int ii_max = ::Math_obj::ceil(cx4);
HXDLIN( 107)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 107)									xIter31 = this1;
            								}
            							}
HXDLIN( 107)							::pixelimage::iter::IntIterStart yIter31;
HXDLIN( 107)							if ((ay1 > by4)) {
HXLINE( 107)								if ((ay1 > cy4)) {
HXLINE( 107)									int min;
HXDLIN( 107)									if ((by4 > cy4)) {
HXLINE( 107)										min = ::Math_obj::floor(cy4);
            									}
            									else {
HXLINE( 107)										min = ::Math_obj::floor(by4);
            									}
HXDLIN( 107)									int ii_min = min;
HXDLIN( 107)									int ii_max = ::Math_obj::ceil(ay1);
HXDLIN( 107)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 107)									yIter31 = this1;
            								}
            								else {
HXLINE( 107)									int ii_min = ::Math_obj::floor(by4);
HXDLIN( 107)									int ii_max = ::Math_obj::ceil(cy4);
HXDLIN( 107)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 107)									yIter31 = this1;
            								}
            							}
            							else {
HXLINE( 107)								if ((by4 > cy4)) {
HXLINE( 107)									int min;
HXDLIN( 107)									if ((ay1 > cy4)) {
HXLINE( 107)										min = ::Math_obj::floor(cy4);
            									}
            									else {
HXLINE( 107)										min = ::Math_obj::ceil(ay1);
            									}
HXDLIN( 107)									int ii_min = min;
HXDLIN( 107)									int ii_max = ::Math_obj::ceil(by4);
HXDLIN( 107)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 107)									yIter31 = this1;
            								}
            								else {
HXLINE( 107)									int ii_min = ::Math_obj::floor(ay1);
HXDLIN( 107)									int ii_max = ::Math_obj::ceil(cy4);
HXDLIN( 107)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 107)									yIter31 = this1;
            								}
            							}
HXDLIN( 107)							::pixelimage::ImageStruct undoImage1 = null();
HXDLIN( 107)							if (hasUndo1) {
HXLINE( 107)								int w = ((xIter31->max - xIter31->start) + 1);
HXDLIN( 107)								int h = ((yIter31->max - yIter31->start) + 1);
HXDLIN( 107)								int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN( 107)								::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 107)								::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN( 107)								::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN( 107)								undoImage1 = this3;
HXDLIN( 107)								{
HXLINE( 107)									int rectLeft = xIter31->start;
HXDLIN( 107)									int rectTop = yIter31->start;
HXDLIN( 107)									int rectRight = xIter31->max;
HXDLIN( 107)									bool forceClear = false;
HXDLIN( 107)									{
HXLINE( 107)										int _g = rectTop;
HXDLIN( 107)										int _g1 = yIter31->max;
HXDLIN( 107)										while((_g < _g1)){
HXLINE( 107)											_g = (_g + 1);
HXDLIN( 107)											int dy = (_g - 1);
HXDLIN( 107)											{
HXLINE( 107)												int _g1 = rectLeft;
HXDLIN( 107)												int _g2 = rectRight;
HXDLIN( 107)												while((_g1 < _g2)){
HXLINE( 107)													_g1 = (_g1 + 1);
HXDLIN( 107)													int dx = (_g1 - 1);
HXDLIN( 107)													::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 107)													int index;
HXDLIN( 107)													if (temp->useVirtualPos) {
HXLINE( 107)														index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - temp->virtualY) * ( (Float)(temp->width) )) + dx) - temp->virtualX));
            													}
            													else {
HXLINE( 107)														index = ::Std_obj::_hx_int(( (Float)(((dy * temp->width) + dx)) ));
            													}
HXDLIN( 107)													::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 107)													int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 107)													int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 107)													int col;
HXDLIN( 107)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 107)														col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE( 107)														col = c;
            													}
HXDLIN( 107)													bool _hx_tmp;
HXDLIN( 107)													if (temp->useMask) {
HXLINE( 107)														_hx_tmp = ::hx::IsNotNull( temp->mask );
            													}
            													else {
HXLINE( 107)														_hx_tmp = false;
            													}
HXDLIN( 107)													if (_hx_tmp) {
HXLINE( 107)														::pixelimage::ImageStruct this1 = temp->mask;
HXDLIN( 107)														::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 107)														int index;
HXDLIN( 107)														if (this1->useVirtualPos) {
HXLINE( 107)															index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            														}
            														else {
HXLINE( 107)															index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            														}
HXDLIN( 107)														::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 107)														int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 107)														int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 107)														int v;
HXDLIN( 107)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 107)															v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            														}
            														else {
HXLINE( 107)															v = c;
            														}
HXDLIN( 107)														int this3 = v;
HXDLIN( 107)														int maskPixel = this3;
HXDLIN( 107)														int this4 = col;
HXDLIN( 107)														int this5 = this4;
HXDLIN( 107)														if ((maskPixel == 0)) {
HXLINE( 107)															int this1 = this5;
HXDLIN( 107)															col = this1;
            														}
            														else {
HXLINE( 107)															Float m0;
HXDLIN( 107)															int this1 = ((maskPixel >> 24) & 255);
HXDLIN( 107)															if ((this1 == 0)) {
HXLINE( 107)																m0 = ((Float)0.);
            															}
            															else {
HXLINE( 107)																m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            															}
HXDLIN( 107)															Float m1;
HXDLIN( 107)															int this2 = ((maskPixel >> 16) & 255);
HXDLIN( 107)															if ((this2 == 0)) {
HXLINE( 107)																m1 = ((Float)0.);
            															}
            															else {
HXLINE( 107)																m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            															}
HXDLIN( 107)															Float m2;
HXDLIN( 107)															int this3 = ((maskPixel >> 8) & 255);
HXDLIN( 107)															if ((this3 == 0)) {
HXLINE( 107)																m2 = ((Float)0.);
            															}
            															else {
HXLINE( 107)																m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            															}
HXDLIN( 107)															Float m3;
HXDLIN( 107)															int this4 = (maskPixel & 255);
HXDLIN( 107)															if ((this4 == 0)) {
HXLINE( 107)																m3 = ((Float)0.);
            															}
            															else {
HXLINE( 107)																m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            															}
HXDLIN( 107)															int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN( 107)															int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN( 107)															int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN( 107)															int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN( 107)															col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            														}
            													}
HXDLIN( 107)													if ((col != 0)) {
HXLINE( 107)														int x = (dx - rectLeft);
HXDLIN( 107)														int y = (dy - rectTop);
HXDLIN( 107)														int this1 = col;
HXDLIN( 107)														int c = this1;
HXDLIN( 107)														bool _hx_tmp;
HXDLIN( 107)														if ((((c >> 24) & 255) < 254)) {
HXLINE( 107)															_hx_tmp = undoImage1->transparent;
            														}
            														else {
HXLINE( 107)															_hx_tmp = false;
            														}
HXDLIN( 107)														if (_hx_tmp) {
HXLINE( 107)															int location;
HXDLIN( 107)															if (undoImage1->useVirtualPos) {
HXLINE( 107)																location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            															}
            															else {
HXLINE( 107)																location = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            															}
HXDLIN( 107)															::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN( 107)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 107)															int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 107)															int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 107)															int this3 = this2;
HXDLIN( 107)															int this4;
HXDLIN( 107)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 107)																this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            															}
            															else {
HXLINE( 107)																this4 = this3;
            															}
HXDLIN( 107)															Float a1;
HXDLIN( 107)															int this5 = ((this4 >> 24) & 255);
HXDLIN( 107)															if ((this5 == 0)) {
HXLINE( 107)																a1 = ((Float)0.);
            															}
            															else {
HXLINE( 107)																a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            															}
HXDLIN( 107)															Float r1;
HXDLIN( 107)															int this6 = ((this4 >> 16) & 255);
HXDLIN( 107)															if ((this6 == 0)) {
HXLINE( 107)																r1 = ((Float)0.);
            															}
            															else {
HXLINE( 107)																r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            															}
HXDLIN( 107)															Float g1;
HXDLIN( 107)															int this7 = ((this4 >> 8) & 255);
HXDLIN( 107)															if ((this7 == 0)) {
HXLINE( 107)																g1 = ((Float)0.);
            															}
            															else {
HXLINE( 107)																g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            															}
HXDLIN( 107)															Float b1;
HXDLIN( 107)															int this8 = (this4 & 255);
HXDLIN( 107)															if ((this8 == 0)) {
HXLINE( 107)																b1 = ((Float)0.);
            															}
            															else {
HXLINE( 107)																b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            															}
HXDLIN( 107)															Float a2;
HXDLIN( 107)															int this9 = ((col >> 24) & 255);
HXDLIN( 107)															if ((this9 == 0)) {
HXLINE( 107)																a2 = ((Float)0.);
            															}
            															else {
HXLINE( 107)																a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            															}
HXDLIN( 107)															Float r2;
HXDLIN( 107)															int this10 = ((col >> 16) & 255);
HXDLIN( 107)															if ((this10 == 0)) {
HXLINE( 107)																r2 = ((Float)0.);
            															}
            															else {
HXLINE( 107)																r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            															}
HXDLIN( 107)															Float g2;
HXDLIN( 107)															int this11 = ((col >> 8) & 255);
HXDLIN( 107)															if ((this11 == 0)) {
HXLINE( 107)																g2 = ((Float)0.);
            															}
            															else {
HXLINE( 107)																g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            															}
HXDLIN( 107)															Float b2;
HXDLIN( 107)															int this12 = (col & 255);
HXDLIN( 107)															if ((this12 == 0)) {
HXLINE( 107)																b2 = ((Float)0.);
            															}
            															else {
HXLINE( 107)																b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            															}
HXDLIN( 107)															Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 107)															int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 107)															int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 107)															int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 107)															int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 107)															int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 107)															{
HXLINE( 107)																::haxe::io::ArrayBufferViewImpl this13 = undoImage1->image;
HXDLIN( 107)																int value;
HXDLIN( 107)																if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 107)																	value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																}
            																else {
HXLINE( 107)																	value = blended;
            																}
HXDLIN( 107)																bool _hx_tmp;
HXDLIN( 107)																if ((location >= 0)) {
HXLINE( 107)																	_hx_tmp = (location < (this13->byteLength >> 2));
            																}
            																else {
HXLINE( 107)																	_hx_tmp = false;
            																}
HXDLIN( 107)																if (_hx_tmp) {
HXLINE( 107)																	::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 107)																	int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 107)																	_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 107)																	_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 107)																	_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 107)																	_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																}
            															}
            														}
            														else {
HXLINE( 107)															::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN( 107)															int index;
HXDLIN( 107)															if (undoImage1->useVirtualPos) {
HXLINE( 107)																index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            															}
            															else {
HXLINE( 107)																index = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            															}
HXDLIN( 107)															int value;
HXDLIN( 107)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 107)																value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            															}
            															else {
HXLINE( 107)																value = c;
            															}
HXDLIN( 107)															bool _hx_tmp;
HXDLIN( 107)															if ((index >= 0)) {
HXLINE( 107)																_hx_tmp = (index < (this1->byteLength >> 2));
            															}
            															else {
HXLINE( 107)																_hx_tmp = false;
            															}
HXDLIN( 107)															if (_hx_tmp) {
HXLINE( 107)																::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 107)																int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 107)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 107)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 107)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 107)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
            													else {
HXLINE( 107)														if (forceClear) {
HXLINE( 107)															::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN( 107)															int x = (dx - rectLeft);
HXDLIN( 107)															int y = (dy - rectTop);
HXDLIN( 107)															int index;
HXDLIN( 107)															if (undoImage1->useVirtualPos) {
HXLINE( 107)																index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            															}
            															else {
HXLINE( 107)																index = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            															}
HXDLIN( 107)															bool _hx_tmp;
HXDLIN( 107)															if ((index >= 0)) {
HXLINE( 107)																_hx_tmp = (index < (this1->byteLength >> 2));
            															}
            															else {
HXLINE( 107)																_hx_tmp = false;
            															}
HXDLIN( 107)															if (_hx_tmp) {
HXLINE( 107)																::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 107)																int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 107)																_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 107)																_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 107)																_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 107)																_this->b[(pos + 3)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 107)							bool found1 = false;
HXDLIN( 107)							Float s1 = ((Float)0.);
HXDLIN( 107)							Float t1 = ((Float)0.);
HXDLIN( 107)							Float sxx1 = ((Float)0.);
HXDLIN( 107)							Float txx1 = ((Float)0.);
HXDLIN( 107)							{
HXLINE( 107)								int _g_min1 = xIter31->start;
HXDLIN( 107)								int _g_max1 = xIter31->max;
HXDLIN( 107)								while((_g_min1 < _g_max1)){
HXLINE( 107)									_g_min1 = (_g_min1 + 1);
HXDLIN( 107)									int x = (_g_min1 - 1);
HXLINE(  61)									sxx1 = (sx1 * ( (Float)(x) ));
HXLINE(  62)									txx1 = (tx1 * ( (Float)(x) ));
HXLINE(  63)									found1 = false;
HXLINE( 107)									{
HXLINE( 107)										int _g_min = yIter31->start;
HXDLIN( 107)										int _g_max = yIter31->max;
HXDLIN( 107)										while((_g_min < _g_max)){
HXLINE( 107)											_g_min = (_g_min + 1);
HXDLIN( 107)											int y = (_g_min - 1);
HXLINE(  65)											s1 = ((s01 + sxx1) + (sy1 * ( (Float)(y) )));
HXLINE(  66)											t1 = ((t01 + txx1) + (ty1 * ( (Float)(y) )));
HXLINE( 107)											bool _hx_tmp;
HXDLIN( 107)											if (!((s1 <= 0))) {
HXLINE( 107)												_hx_tmp = (t1 <= 0);
            											}
            											else {
HXLINE( 107)												_hx_tmp = true;
            											}
HXDLIN( 107)											if (_hx_tmp) {
HXLINE( 107)												if (found1) {
HXLINE( 107)													goto _hx_goto_23;
            												}
            											}
            											else {
HXLINE( 107)												if (((s1 + t1) < A1)) {
HXLINE( 107)													{
HXLINE( 107)														int this1 = color1;
HXDLIN( 107)														int c = this1;
HXDLIN( 107)														bool _hx_tmp;
HXDLIN( 107)														if ((((c >> 24) & 255) < 254)) {
HXLINE( 107)															_hx_tmp = temp->transparent;
            														}
            														else {
HXLINE( 107)															_hx_tmp = false;
            														}
HXDLIN( 107)														if (_hx_tmp) {
HXLINE( 107)															int location;
HXDLIN( 107)															if (temp->useVirtualPos) {
HXLINE( 107)																location = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            															}
            															else {
HXLINE( 107)																location = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            															}
HXDLIN( 107)															::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 107)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 107)															int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 107)															int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 107)															int this3 = this2;
HXDLIN( 107)															int this4;
HXDLIN( 107)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 107)																this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            															}
            															else {
HXLINE( 107)																this4 = this3;
            															}
HXDLIN( 107)															Float a1;
HXDLIN( 107)															int this5 = ((this4 >> 24) & 255);
HXDLIN( 107)															if ((this5 == 0)) {
HXLINE( 107)																a1 = ((Float)0.);
            															}
            															else {
HXLINE( 107)																a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            															}
HXDLIN( 107)															Float r1;
HXDLIN( 107)															int this6 = ((this4 >> 16) & 255);
HXDLIN( 107)															if ((this6 == 0)) {
HXLINE( 107)																r1 = ((Float)0.);
            															}
            															else {
HXLINE( 107)																r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            															}
HXDLIN( 107)															Float g1;
HXDLIN( 107)															int this7 = ((this4 >> 8) & 255);
HXDLIN( 107)															if ((this7 == 0)) {
HXLINE( 107)																g1 = ((Float)0.);
            															}
            															else {
HXLINE( 107)																g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            															}
HXDLIN( 107)															Float b1;
HXDLIN( 107)															int this8 = (this4 & 255);
HXDLIN( 107)															if ((this8 == 0)) {
HXLINE( 107)																b1 = ((Float)0.);
            															}
            															else {
HXLINE( 107)																b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            															}
HXDLIN( 107)															Float a2;
HXDLIN( 107)															int this9 = ((color1 >> 24) & 255);
HXDLIN( 107)															if ((this9 == 0)) {
HXLINE( 107)																a2 = ((Float)0.);
            															}
            															else {
HXLINE( 107)																a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            															}
HXDLIN( 107)															Float r2;
HXDLIN( 107)															int this10 = ((color1 >> 16) & 255);
HXDLIN( 107)															if ((this10 == 0)) {
HXLINE( 107)																r2 = ((Float)0.);
            															}
            															else {
HXLINE( 107)																r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            															}
HXDLIN( 107)															Float g2;
HXDLIN( 107)															int this11 = ((color1 >> 8) & 255);
HXDLIN( 107)															if ((this11 == 0)) {
HXLINE( 107)																g2 = ((Float)0.);
            															}
            															else {
HXLINE( 107)																g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            															}
HXDLIN( 107)															Float b2;
HXDLIN( 107)															int this12 = (color1 & 255);
HXDLIN( 107)															if ((this12 == 0)) {
HXLINE( 107)																b2 = ((Float)0.);
            															}
            															else {
HXLINE( 107)																b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            															}
HXDLIN( 107)															Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 107)															int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 107)															int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 107)															int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 107)															int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 107)															int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 107)															{
HXLINE( 107)																::haxe::io::ArrayBufferViewImpl this13 = temp->image;
HXDLIN( 107)																int value;
HXDLIN( 107)																if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 107)																	value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																}
            																else {
HXLINE( 107)																	value = blended;
            																}
HXDLIN( 107)																bool _hx_tmp;
HXDLIN( 107)																if ((location >= 0)) {
HXLINE( 107)																	_hx_tmp = (location < (this13->byteLength >> 2));
            																}
            																else {
HXLINE( 107)																	_hx_tmp = false;
            																}
HXDLIN( 107)																if (_hx_tmp) {
HXLINE( 107)																	::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 107)																	int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 107)																	_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 107)																	_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 107)																	_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 107)																	_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																}
            															}
            														}
            														else {
HXLINE( 107)															::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 107)															int index;
HXDLIN( 107)															if (temp->useVirtualPos) {
HXLINE( 107)																index = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            															}
            															else {
HXLINE( 107)																index = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            															}
HXDLIN( 107)															int value;
HXDLIN( 107)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 107)																value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            															}
            															else {
HXLINE( 107)																value = c;
            															}
HXDLIN( 107)															bool _hx_tmp;
HXDLIN( 107)															if ((index >= 0)) {
HXLINE( 107)																_hx_tmp = (index < (this1->byteLength >> 2));
            															}
            															else {
HXLINE( 107)																_hx_tmp = false;
            															}
HXDLIN( 107)															if (_hx_tmp) {
HXLINE( 107)																::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 107)																int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 107)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 107)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 107)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 107)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
HXLINE(  74)													found1 = true;
            												}
            												else {
HXLINE( 107)													if (found1) {
HXLINE( 107)														goto _hx_goto_23;
            													}
            												}
            											}
            										}
            										_hx_goto_23:;
            									}
            								}
            							}
HXDLIN( 107)							if ((hasHit1 == true)) {
HXLINE( 107)								::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,ax1,ay1,bx4,by4,cx4,cy4,true);
HXDLIN( 107)								if (hasUndo1) {
HXLINE( 107)									v->undoImage = undoImage1;
HXDLIN( 107)									v->undoX = xIter31->start;
HXDLIN( 107)									v->undoY = yIter31->start;
            								}
            							}
            						}
            					}
            				}
            			}
HXLINE( 108)			{
HXLINE( 108)				int color2 = this->strokeColor;
HXDLIN( 108)				bool hasHit2 = true;
HXDLIN( 108)				Float o = (by - cy);
HXDLIN( 108)				Float a = (bx - cx);
HXDLIN( 108)				Float h = ::Math_obj::pow(((o * o) + (a * a)),((Float)0.5));
HXDLIN( 108)				Float theta = ::Math_obj::atan2(o,a);
HXDLIN( 108)				{
HXLINE( 108)					 ::Dynamic debugCorners = false;
HXDLIN( 108)					if (::hx::IsNull( debugCorners )) {
HXLINE( 878)						debugCorners = false;
            					}
HXLINE( 108)					Float sin = ::Math_obj::sin(theta);
HXDLIN( 108)					Float cos = ::Math_obj::cos(theta);
HXDLIN( 108)					Float radius = (this->strokeWidth / ( (Float)(2) ));
HXDLIN( 108)					Float dx = ((Float)0.1);
HXDLIN( 108)					Float dy = radius;
HXDLIN( 108)					Float cx5 = h;
HXDLIN( 108)					Float cy5 = radius;
HXDLIN( 108)					Float bx5 = h;
HXDLIN( 108)					Float by5 = -(radius);
HXDLIN( 108)					Float ax2 = ((Float)0.1);
HXDLIN( 108)					Float ay2 = -(radius);
HXDLIN( 108)					Float temp1 = ((Float)0.);
HXLINE(  28)					temp1 = (cx + ((ax2 * cos) - (ay2 * sin)));
HXLINE(  29)					ay2 = (cy + ((ay2 * cos) + (ax2 * sin)));
HXLINE(  30)					ax2 = temp1;
HXLINE(  32)					temp1 = (cx + ((bx5 * cos) - (by5 * sin)));
HXLINE(  33)					by5 = (cy + ((by5 * cos) + (bx5 * sin)));
HXLINE(  34)					bx5 = temp1;
HXLINE(  36)					temp1 = (cx + ((cx5 * cos) - (cy5 * sin)));
HXLINE(  37)					cy5 = (cy + ((cy5 * cos) + (cx5 * sin)));
HXLINE(  38)					cx5 = temp1;
HXLINE(  40)					temp1 = (cx + ((dx * cos) - (dy * sin)));
HXLINE(  41)					dy = (cy + ((dy * cos) + (dx * sin)));
HXLINE(  42)					dx = temp1;
HXLINE( 108)					if (( (bool)(debugCorners) )) {
HXLINE( 108)						{
HXLINE( 108)							Float x = (ax2 - ((Float)6.));
HXDLIN( 108)							Float y = (ay2 - ((Float)6.));
HXDLIN( 108)							int p = ::Std_obj::_hx_int(x);
HXDLIN( 108)							int xx = p;
HXDLIN( 108)							int q = ::Std_obj::_hx_int(y);
HXDLIN( 108)							int maxX = ::Std_obj::_hx_int((x + 12));
HXDLIN( 108)							int maxY = ::Std_obj::_hx_int((y + 12));
HXDLIN( 108)							while(true){
HXLINE( 108)								{
HXLINE( 108)									p = (p + 1);
HXDLIN( 108)									int x = (p - 1);
HXDLIN( 108)									int this1 = -65536;
HXDLIN( 108)									int c = this1;
HXDLIN( 108)									bool _hx_tmp;
HXDLIN( 108)									if ((((c >> 24) & 255) < 254)) {
HXLINE( 108)										_hx_tmp = temp->transparent;
            									}
            									else {
HXLINE( 108)										_hx_tmp = false;
            									}
HXDLIN( 108)									if (_hx_tmp) {
HXLINE( 108)										int location;
HXDLIN( 108)										if (temp->useVirtualPos) {
HXLINE( 108)											location = ::Std_obj::_hx_int(((((( (Float)(q) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            										}
            										else {
HXLINE( 108)											location = ::Std_obj::_hx_int(( (Float)(((q * temp->width) + x)) ));
            										}
HXDLIN( 108)										::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 108)										::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 108)										int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 108)										int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 108)										int this3 = this2;
HXDLIN( 108)										int this4;
HXDLIN( 108)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 108)											this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            										}
            										else {
HXLINE( 108)											this4 = this3;
            										}
HXDLIN( 108)										Float a1;
HXDLIN( 108)										int this5 = ((this4 >> 24) & 255);
HXDLIN( 108)										if ((this5 == 0)) {
HXLINE( 108)											a1 = ((Float)0.);
            										}
            										else {
HXLINE( 108)											a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            										}
HXDLIN( 108)										Float r1;
HXDLIN( 108)										int this6 = ((this4 >> 16) & 255);
HXDLIN( 108)										if ((this6 == 0)) {
HXLINE( 108)											r1 = ((Float)0.);
            										}
            										else {
HXLINE( 108)											r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            										}
HXDLIN( 108)										Float g1;
HXDLIN( 108)										int this7 = ((this4 >> 8) & 255);
HXDLIN( 108)										if ((this7 == 0)) {
HXLINE( 108)											g1 = ((Float)0.);
            										}
            										else {
HXLINE( 108)											g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            										}
HXDLIN( 108)										Float b1;
HXDLIN( 108)										int this8 = (this4 & 255);
HXDLIN( 108)										if ((this8 == 0)) {
HXLINE( 108)											b1 = ((Float)0.);
            										}
            										else {
HXLINE( 108)											b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            										}
HXDLIN( 108)										Float a2;
HXDLIN( 108)										int this9 = ((-65536 >> 24) & 255);
HXDLIN( 108)										if ((this9 == 0)) {
HXLINE( 108)											a2 = ((Float)0.);
            										}
            										else {
HXLINE( 108)											a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            										}
HXDLIN( 108)										Float r2;
HXDLIN( 108)										int this10 = ((-65536 >> 16) & 255);
HXDLIN( 108)										if ((this10 == 0)) {
HXLINE( 108)											r2 = ((Float)0.);
            										}
            										else {
HXLINE( 108)											r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            										}
HXDLIN( 108)										Float g2;
HXDLIN( 108)										int this11 = ((-65536 >> 8) & 255);
HXDLIN( 108)										if ((this11 == 0)) {
HXLINE( 108)											g2 = ((Float)0.);
            										}
            										else {
HXLINE( 108)											g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            										}
HXDLIN( 108)										Float b2;
HXDLIN( 108)										int this12 = (-65536 & 255);
HXDLIN( 108)										if ((this12 == 0)) {
HXLINE( 108)											b2 = ((Float)0.);
            										}
            										else {
HXLINE( 108)											b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            										}
HXDLIN( 108)										Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 108)										int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 108)										int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 108)										int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 108)										int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 108)										int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 108)										{
HXLINE( 108)											::haxe::io::ArrayBufferViewImpl this13 = temp->image;
HXDLIN( 108)											int value;
HXDLIN( 108)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 108)												value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            											}
            											else {
HXLINE( 108)												value = blended;
            											}
HXDLIN( 108)											bool _hx_tmp;
HXDLIN( 108)											if ((location >= 0)) {
HXLINE( 108)												_hx_tmp = (location < (this13->byteLength >> 2));
            											}
            											else {
HXLINE( 108)												_hx_tmp = false;
            											}
HXDLIN( 108)											if (_hx_tmp) {
HXLINE( 108)												::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 108)												int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 108)												_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 108)												_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 108)												_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 108)												_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            											}
            										}
            									}
            									else {
HXLINE( 108)										::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 108)										int index;
HXDLIN( 108)										if (temp->useVirtualPos) {
HXLINE( 108)											index = ::Std_obj::_hx_int(((((( (Float)(q) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            										}
            										else {
HXLINE( 108)											index = ::Std_obj::_hx_int(( (Float)(((q * temp->width) + x)) ));
            										}
HXDLIN( 108)										int value;
HXDLIN( 108)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 108)											value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            										}
            										else {
HXLINE( 108)											value = c;
            										}
HXDLIN( 108)										bool _hx_tmp;
HXDLIN( 108)										if ((index >= 0)) {
HXLINE( 108)											_hx_tmp = (index < (this1->byteLength >> 2));
            										}
            										else {
HXLINE( 108)											_hx_tmp = false;
            										}
HXDLIN( 108)										if (_hx_tmp) {
HXLINE( 108)											::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 108)											int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 108)											_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 108)											_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 108)											_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 108)											_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            										}
            									}
            								}
HXDLIN( 108)								if ((p > maxX)) {
HXLINE( 247)									p = xx;
HXLINE( 108)									q = (q + 1);
            								}
HXDLIN( 108)								if ((q > maxY)) {
HXLINE( 108)									goto _hx_goto_24;
            								}
            							}
            							_hx_goto_24:;
            						}
HXDLIN( 108)						{
HXLINE( 108)							Float x1 = (bx5 - ((Float)6.));
HXDLIN( 108)							Float y1 = (by5 - ((Float)6.));
HXDLIN( 108)							int p1 = ::Std_obj::_hx_int(x1);
HXDLIN( 108)							int xx1 = p1;
HXDLIN( 108)							int q1 = ::Std_obj::_hx_int(y1);
HXDLIN( 108)							int maxX1 = ::Std_obj::_hx_int((x1 + 12));
HXDLIN( 108)							int maxY1 = ::Std_obj::_hx_int((y1 + 12));
HXDLIN( 108)							while(true){
HXLINE( 108)								{
HXLINE( 108)									p1 = (p1 + 1);
HXDLIN( 108)									int x = (p1 - 1);
HXDLIN( 108)									int this1 = -16711936;
HXDLIN( 108)									int c = this1;
HXDLIN( 108)									bool _hx_tmp;
HXDLIN( 108)									if ((((c >> 24) & 255) < 254)) {
HXLINE( 108)										_hx_tmp = temp->transparent;
            									}
            									else {
HXLINE( 108)										_hx_tmp = false;
            									}
HXDLIN( 108)									if (_hx_tmp) {
HXLINE( 108)										int location;
HXDLIN( 108)										if (temp->useVirtualPos) {
HXLINE( 108)											location = ::Std_obj::_hx_int(((((( (Float)(q1) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            										}
            										else {
HXLINE( 108)											location = ::Std_obj::_hx_int(( (Float)(((q1 * temp->width) + x)) ));
            										}
HXDLIN( 108)										::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 108)										::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 108)										int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 108)										int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 108)										int this3 = this2;
HXDLIN( 108)										int this4;
HXDLIN( 108)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 108)											this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            										}
            										else {
HXLINE( 108)											this4 = this3;
            										}
HXDLIN( 108)										Float a1;
HXDLIN( 108)										int this5 = ((this4 >> 24) & 255);
HXDLIN( 108)										if ((this5 == 0)) {
HXLINE( 108)											a1 = ((Float)0.);
            										}
            										else {
HXLINE( 108)											a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            										}
HXDLIN( 108)										Float r1;
HXDLIN( 108)										int this6 = ((this4 >> 16) & 255);
HXDLIN( 108)										if ((this6 == 0)) {
HXLINE( 108)											r1 = ((Float)0.);
            										}
            										else {
HXLINE( 108)											r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            										}
HXDLIN( 108)										Float g1;
HXDLIN( 108)										int this7 = ((this4 >> 8) & 255);
HXDLIN( 108)										if ((this7 == 0)) {
HXLINE( 108)											g1 = ((Float)0.);
            										}
            										else {
HXLINE( 108)											g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            										}
HXDLIN( 108)										Float b1;
HXDLIN( 108)										int this8 = (this4 & 255);
HXDLIN( 108)										if ((this8 == 0)) {
HXLINE( 108)											b1 = ((Float)0.);
            										}
            										else {
HXLINE( 108)											b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            										}
HXDLIN( 108)										Float a2;
HXDLIN( 108)										int this9 = ((-16711936 >> 24) & 255);
HXDLIN( 108)										if ((this9 == 0)) {
HXLINE( 108)											a2 = ((Float)0.);
            										}
            										else {
HXLINE( 108)											a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            										}
HXDLIN( 108)										Float r2;
HXDLIN( 108)										int this10 = ((-16711936 >> 16) & 255);
HXDLIN( 108)										if ((this10 == 0)) {
HXLINE( 108)											r2 = ((Float)0.);
            										}
            										else {
HXLINE( 108)											r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            										}
HXDLIN( 108)										Float g2;
HXDLIN( 108)										int this11 = ((-16711936 >> 8) & 255);
HXDLIN( 108)										if ((this11 == 0)) {
HXLINE( 108)											g2 = ((Float)0.);
            										}
            										else {
HXLINE( 108)											g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            										}
HXDLIN( 108)										Float b2;
HXDLIN( 108)										int this12 = (-16711936 & 255);
HXDLIN( 108)										if ((this12 == 0)) {
HXLINE( 108)											b2 = ((Float)0.);
            										}
            										else {
HXLINE( 108)											b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            										}
HXDLIN( 108)										Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 108)										int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 108)										int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 108)										int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 108)										int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 108)										int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 108)										{
HXLINE( 108)											::haxe::io::ArrayBufferViewImpl this13 = temp->image;
HXDLIN( 108)											int value;
HXDLIN( 108)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 108)												value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            											}
            											else {
HXLINE( 108)												value = blended;
            											}
HXDLIN( 108)											bool _hx_tmp;
HXDLIN( 108)											if ((location >= 0)) {
HXLINE( 108)												_hx_tmp = (location < (this13->byteLength >> 2));
            											}
            											else {
HXLINE( 108)												_hx_tmp = false;
            											}
HXDLIN( 108)											if (_hx_tmp) {
HXLINE( 108)												::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 108)												int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 108)												_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 108)												_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 108)												_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 108)												_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            											}
            										}
            									}
            									else {
HXLINE( 108)										::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 108)										int index;
HXDLIN( 108)										if (temp->useVirtualPos) {
HXLINE( 108)											index = ::Std_obj::_hx_int(((((( (Float)(q1) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            										}
            										else {
HXLINE( 108)											index = ::Std_obj::_hx_int(( (Float)(((q1 * temp->width) + x)) ));
            										}
HXDLIN( 108)										int value;
HXDLIN( 108)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 108)											value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            										}
            										else {
HXLINE( 108)											value = c;
            										}
HXDLIN( 108)										bool _hx_tmp;
HXDLIN( 108)										if ((index >= 0)) {
HXLINE( 108)											_hx_tmp = (index < (this1->byteLength >> 2));
            										}
            										else {
HXLINE( 108)											_hx_tmp = false;
            										}
HXDLIN( 108)										if (_hx_tmp) {
HXLINE( 108)											::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 108)											int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 108)											_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 108)											_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 108)											_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 108)											_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            										}
            									}
            								}
HXDLIN( 108)								if ((p1 > maxX1)) {
HXLINE( 247)									p1 = xx1;
HXLINE( 108)									q1 = (q1 + 1);
            								}
HXDLIN( 108)								if ((q1 > maxY1)) {
HXLINE( 108)									goto _hx_goto_25;
            								}
            							}
            							_hx_goto_25:;
            						}
HXDLIN( 108)						{
HXLINE( 108)							Float x2 = (cx5 - ((Float)6.));
HXDLIN( 108)							Float y2 = (cy5 - ((Float)6.));
HXDLIN( 108)							int p2 = ::Std_obj::_hx_int(x2);
HXDLIN( 108)							int xx2 = p2;
HXDLIN( 108)							int q2 = ::Std_obj::_hx_int(y2);
HXDLIN( 108)							int maxX2 = ::Std_obj::_hx_int((x2 + 12));
HXDLIN( 108)							int maxY2 = ::Std_obj::_hx_int((y2 + 12));
HXDLIN( 108)							while(true){
HXLINE( 108)								{
HXLINE( 108)									p2 = (p2 + 1);
HXDLIN( 108)									int x = (p2 - 1);
HXDLIN( 108)									int this1 = -16776961;
HXDLIN( 108)									int c = this1;
HXDLIN( 108)									bool _hx_tmp;
HXDLIN( 108)									if ((((c >> 24) & 255) < 254)) {
HXLINE( 108)										_hx_tmp = temp->transparent;
            									}
            									else {
HXLINE( 108)										_hx_tmp = false;
            									}
HXDLIN( 108)									if (_hx_tmp) {
HXLINE( 108)										int location;
HXDLIN( 108)										if (temp->useVirtualPos) {
HXLINE( 108)											location = ::Std_obj::_hx_int(((((( (Float)(q2) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            										}
            										else {
HXLINE( 108)											location = ::Std_obj::_hx_int(( (Float)(((q2 * temp->width) + x)) ));
            										}
HXDLIN( 108)										::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 108)										::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 108)										int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 108)										int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 108)										int this3 = this2;
HXDLIN( 108)										int this4;
HXDLIN( 108)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 108)											this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            										}
            										else {
HXLINE( 108)											this4 = this3;
            										}
HXDLIN( 108)										Float a1;
HXDLIN( 108)										int this5 = ((this4 >> 24) & 255);
HXDLIN( 108)										if ((this5 == 0)) {
HXLINE( 108)											a1 = ((Float)0.);
            										}
            										else {
HXLINE( 108)											a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            										}
HXDLIN( 108)										Float r1;
HXDLIN( 108)										int this6 = ((this4 >> 16) & 255);
HXDLIN( 108)										if ((this6 == 0)) {
HXLINE( 108)											r1 = ((Float)0.);
            										}
            										else {
HXLINE( 108)											r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            										}
HXDLIN( 108)										Float g1;
HXDLIN( 108)										int this7 = ((this4 >> 8) & 255);
HXDLIN( 108)										if ((this7 == 0)) {
HXLINE( 108)											g1 = ((Float)0.);
            										}
            										else {
HXLINE( 108)											g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            										}
HXDLIN( 108)										Float b1;
HXDLIN( 108)										int this8 = (this4 & 255);
HXDLIN( 108)										if ((this8 == 0)) {
HXLINE( 108)											b1 = ((Float)0.);
            										}
            										else {
HXLINE( 108)											b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            										}
HXDLIN( 108)										Float a2;
HXDLIN( 108)										int this9 = ((-16776961 >> 24) & 255);
HXDLIN( 108)										if ((this9 == 0)) {
HXLINE( 108)											a2 = ((Float)0.);
            										}
            										else {
HXLINE( 108)											a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            										}
HXDLIN( 108)										Float r2;
HXDLIN( 108)										int this10 = ((-16776961 >> 16) & 255);
HXDLIN( 108)										if ((this10 == 0)) {
HXLINE( 108)											r2 = ((Float)0.);
            										}
            										else {
HXLINE( 108)											r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            										}
HXDLIN( 108)										Float g2;
HXDLIN( 108)										int this11 = ((-16776961 >> 8) & 255);
HXDLIN( 108)										if ((this11 == 0)) {
HXLINE( 108)											g2 = ((Float)0.);
            										}
            										else {
HXLINE( 108)											g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            										}
HXDLIN( 108)										Float b2;
HXDLIN( 108)										int this12 = (-16776961 & 255);
HXDLIN( 108)										if ((this12 == 0)) {
HXLINE( 108)											b2 = ((Float)0.);
            										}
            										else {
HXLINE( 108)											b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            										}
HXDLIN( 108)										Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 108)										int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 108)										int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 108)										int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 108)										int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 108)										int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 108)										{
HXLINE( 108)											::haxe::io::ArrayBufferViewImpl this13 = temp->image;
HXDLIN( 108)											int value;
HXDLIN( 108)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 108)												value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            											}
            											else {
HXLINE( 108)												value = blended;
            											}
HXDLIN( 108)											bool _hx_tmp;
HXDLIN( 108)											if ((location >= 0)) {
HXLINE( 108)												_hx_tmp = (location < (this13->byteLength >> 2));
            											}
            											else {
HXLINE( 108)												_hx_tmp = false;
            											}
HXDLIN( 108)											if (_hx_tmp) {
HXLINE( 108)												::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 108)												int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 108)												_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 108)												_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 108)												_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 108)												_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            											}
            										}
            									}
            									else {
HXLINE( 108)										::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 108)										int index;
HXDLIN( 108)										if (temp->useVirtualPos) {
HXLINE( 108)											index = ::Std_obj::_hx_int(((((( (Float)(q2) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            										}
            										else {
HXLINE( 108)											index = ::Std_obj::_hx_int(( (Float)(((q2 * temp->width) + x)) ));
            										}
HXDLIN( 108)										int value;
HXDLIN( 108)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 108)											value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            										}
            										else {
HXLINE( 108)											value = c;
            										}
HXDLIN( 108)										bool _hx_tmp;
HXDLIN( 108)										if ((index >= 0)) {
HXLINE( 108)											_hx_tmp = (index < (this1->byteLength >> 2));
            										}
            										else {
HXLINE( 108)											_hx_tmp = false;
            										}
HXDLIN( 108)										if (_hx_tmp) {
HXLINE( 108)											::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 108)											int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 108)											_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 108)											_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 108)											_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 108)											_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            										}
            									}
            								}
HXDLIN( 108)								if ((p2 > maxX2)) {
HXLINE( 247)									p2 = xx2;
HXLINE( 108)									q2 = (q2 + 1);
            								}
HXDLIN( 108)								if ((q2 > maxY2)) {
HXLINE( 108)									goto _hx_goto_26;
            								}
            							}
            							_hx_goto_26:;
            						}
HXDLIN( 108)						{
HXLINE( 108)							Float x3 = (dx - ((Float)6.));
HXDLIN( 108)							Float y3 = (dy - ((Float)6.));
HXDLIN( 108)							int p3 = ::Std_obj::_hx_int(x3);
HXDLIN( 108)							int xx3 = p3;
HXDLIN( 108)							int q3 = ::Std_obj::_hx_int(y3);
HXDLIN( 108)							int maxX3 = ::Std_obj::_hx_int((x3 + 12));
HXDLIN( 108)							int maxY3 = ::Std_obj::_hx_int((y3 + 12));
HXDLIN( 108)							while(true){
HXLINE( 108)								{
HXLINE( 108)									p3 = (p3 + 1);
HXDLIN( 108)									int x = (p3 - 1);
HXDLIN( 108)									int this1 = -1048336;
HXDLIN( 108)									int c = this1;
HXDLIN( 108)									bool _hx_tmp;
HXDLIN( 108)									if ((((c >> 24) & 255) < 254)) {
HXLINE( 108)										_hx_tmp = temp->transparent;
            									}
            									else {
HXLINE( 108)										_hx_tmp = false;
            									}
HXDLIN( 108)									if (_hx_tmp) {
HXLINE( 108)										int location;
HXDLIN( 108)										if (temp->useVirtualPos) {
HXLINE( 108)											location = ::Std_obj::_hx_int(((((( (Float)(q3) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            										}
            										else {
HXLINE( 108)											location = ::Std_obj::_hx_int(( (Float)(((q3 * temp->width) + x)) ));
            										}
HXDLIN( 108)										::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 108)										::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 108)										int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 108)										int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 108)										int this3 = this2;
HXDLIN( 108)										int this4;
HXDLIN( 108)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 108)											this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            										}
            										else {
HXLINE( 108)											this4 = this3;
            										}
HXDLIN( 108)										Float a1;
HXDLIN( 108)										int this5 = ((this4 >> 24) & 255);
HXDLIN( 108)										if ((this5 == 0)) {
HXLINE( 108)											a1 = ((Float)0.);
            										}
            										else {
HXLINE( 108)											a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            										}
HXDLIN( 108)										Float r1;
HXDLIN( 108)										int this6 = ((this4 >> 16) & 255);
HXDLIN( 108)										if ((this6 == 0)) {
HXLINE( 108)											r1 = ((Float)0.);
            										}
            										else {
HXLINE( 108)											r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            										}
HXDLIN( 108)										Float g1;
HXDLIN( 108)										int this7 = ((this4 >> 8) & 255);
HXDLIN( 108)										if ((this7 == 0)) {
HXLINE( 108)											g1 = ((Float)0.);
            										}
            										else {
HXLINE( 108)											g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            										}
HXDLIN( 108)										Float b1;
HXDLIN( 108)										int this8 = (this4 & 255);
HXDLIN( 108)										if ((this8 == 0)) {
HXLINE( 108)											b1 = ((Float)0.);
            										}
            										else {
HXLINE( 108)											b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            										}
HXDLIN( 108)										Float a2;
HXDLIN( 108)										int this9 = ((-1048336 >> 24) & 255);
HXDLIN( 108)										if ((this9 == 0)) {
HXLINE( 108)											a2 = ((Float)0.);
            										}
            										else {
HXLINE( 108)											a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            										}
HXDLIN( 108)										Float r2;
HXDLIN( 108)										int this10 = ((-1048336 >> 16) & 255);
HXDLIN( 108)										if ((this10 == 0)) {
HXLINE( 108)											r2 = ((Float)0.);
            										}
            										else {
HXLINE( 108)											r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            										}
HXDLIN( 108)										Float g2;
HXDLIN( 108)										int this11 = ((-1048336 >> 8) & 255);
HXDLIN( 108)										if ((this11 == 0)) {
HXLINE( 108)											g2 = ((Float)0.);
            										}
            										else {
HXLINE( 108)											g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            										}
HXDLIN( 108)										Float b2;
HXDLIN( 108)										int this12 = (-1048336 & 255);
HXDLIN( 108)										if ((this12 == 0)) {
HXLINE( 108)											b2 = ((Float)0.);
            										}
            										else {
HXLINE( 108)											b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            										}
HXDLIN( 108)										Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 108)										int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 108)										int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 108)										int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 108)										int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 108)										int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 108)										{
HXLINE( 108)											::haxe::io::ArrayBufferViewImpl this13 = temp->image;
HXDLIN( 108)											int value;
HXDLIN( 108)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 108)												value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            											}
            											else {
HXLINE( 108)												value = blended;
            											}
HXDLIN( 108)											bool _hx_tmp;
HXDLIN( 108)											if ((location >= 0)) {
HXLINE( 108)												_hx_tmp = (location < (this13->byteLength >> 2));
            											}
            											else {
HXLINE( 108)												_hx_tmp = false;
            											}
HXDLIN( 108)											if (_hx_tmp) {
HXLINE( 108)												::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 108)												int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 108)												_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 108)												_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 108)												_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 108)												_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            											}
            										}
            									}
            									else {
HXLINE( 108)										::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 108)										int index;
HXDLIN( 108)										if (temp->useVirtualPos) {
HXLINE( 108)											index = ::Std_obj::_hx_int(((((( (Float)(q3) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            										}
            										else {
HXLINE( 108)											index = ::Std_obj::_hx_int(( (Float)(((q3 * temp->width) + x)) ));
            										}
HXDLIN( 108)										int value;
HXDLIN( 108)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 108)											value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            										}
            										else {
HXLINE( 108)											value = c;
            										}
HXDLIN( 108)										bool _hx_tmp;
HXDLIN( 108)										if ((index >= 0)) {
HXLINE( 108)											_hx_tmp = (index < (this1->byteLength >> 2));
            										}
            										else {
HXLINE( 108)											_hx_tmp = false;
            										}
HXDLIN( 108)										if (_hx_tmp) {
HXLINE( 108)											::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 108)											int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 108)											_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 108)											_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 108)											_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 108)											_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            										}
            									}
            								}
HXDLIN( 108)								if ((p3 > maxX3)) {
HXLINE( 247)									p3 = xx3;
HXLINE( 108)									q3 = (q3 + 1);
            								}
HXDLIN( 108)								if ((q3 > maxY3)) {
HXLINE( 108)									goto _hx_goto_27;
            								}
            							}
            							_hx_goto_27:;
            						}
            					}
HXDLIN( 108)					{
HXLINE( 108)						{
HXLINE( 108)							Float bx6 = bx5;
HXDLIN( 108)							Float by6 = by5;
HXDLIN( 108)							Float cx6 = dx;
HXDLIN( 108)							Float cy6 = dy;
HXDLIN( 108)							bool hasUndo2 = false;
HXDLIN( 108)							bool adjustWinding2 = (((((ax2 * by6) - (bx6 * ay2)) + ((bx6 * cy6) - (cx6 * by6))) + ((cx6 * ay2) - (ax2 * cy6))) > 0);
HXDLIN( 108)							if (!(adjustWinding2)) {
HXLINE( 108)								Float bx_ = bx6;
HXDLIN( 108)								Float by_ = by6;
HXLINE(  26)								bx6 = cx6;
HXLINE(  27)								by6 = cy6;
HXLINE(  28)								cx6 = bx_;
HXLINE(  29)								cy6 = by_;
            							}
HXLINE( 108)							{
HXLINE( 108)								Float s02 = ((ay2 * cx6) - (ax2 * cy6));
HXDLIN( 108)								Float sx2 = (cy6 - ay2);
HXDLIN( 108)								Float sy2 = (ax2 - cx6);
HXDLIN( 108)								Float t02 = ((ax2 * by6) - (ay2 * bx6));
HXDLIN( 108)								Float tx2 = (ay2 - by6);
HXDLIN( 108)								Float ty2 = (bx6 - ax2);
HXDLIN( 108)								Float A2 = ((((-(by6) * cx6) + (ay2 * (-(bx6) + cx6))) + (ax2 * (by6 - cy6))) + (bx6 * cy6));
HXDLIN( 108)								::pixelimage::iter::IntIterStart xIter32;
HXDLIN( 108)								if ((ax2 > bx6)) {
HXLINE( 108)									if ((ax2 > cx6)) {
HXLINE( 108)										int min;
HXDLIN( 108)										if ((bx6 > cx6)) {
HXLINE( 108)											min = ::Math_obj::floor(cx6);
            										}
            										else {
HXLINE( 108)											min = ::Math_obj::floor(bx6);
            										}
HXDLIN( 108)										int ii_min = min;
HXDLIN( 108)										int ii_max = ::Math_obj::ceil(ax2);
HXDLIN( 108)										::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 108)										xIter32 = this1;
            									}
            									else {
HXLINE( 108)										int ii_min = ::Math_obj::floor(bx6);
HXDLIN( 108)										int ii_max = ::Math_obj::ceil(cx6);
HXDLIN( 108)										::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 108)										xIter32 = this1;
            									}
            								}
            								else {
HXLINE( 108)									if ((bx6 > cx6)) {
HXLINE( 108)										int min;
HXDLIN( 108)										if ((ax2 > cx6)) {
HXLINE( 108)											min = ::Math_obj::floor(cx6);
            										}
            										else {
HXLINE( 108)											min = ::Math_obj::ceil(ax2);
            										}
HXDLIN( 108)										int ii_min = min;
HXDLIN( 108)										int ii_max = ::Math_obj::ceil(bx6);
HXDLIN( 108)										::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 108)										xIter32 = this1;
            									}
            									else {
HXLINE( 108)										int ii_min = ::Math_obj::floor(ax2);
HXDLIN( 108)										int ii_max = ::Math_obj::ceil(cx6);
HXDLIN( 108)										::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 108)										xIter32 = this1;
            									}
            								}
HXDLIN( 108)								::pixelimage::iter::IntIterStart yIter32;
HXDLIN( 108)								if ((ay2 > by6)) {
HXLINE( 108)									if ((ay2 > cy6)) {
HXLINE( 108)										int min;
HXDLIN( 108)										if ((by6 > cy6)) {
HXLINE( 108)											min = ::Math_obj::floor(cy6);
            										}
            										else {
HXLINE( 108)											min = ::Math_obj::floor(by6);
            										}
HXDLIN( 108)										int ii_min = min;
HXDLIN( 108)										int ii_max = ::Math_obj::ceil(ay2);
HXDLIN( 108)										::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 108)										yIter32 = this1;
            									}
            									else {
HXLINE( 108)										int ii_min = ::Math_obj::floor(by6);
HXDLIN( 108)										int ii_max = ::Math_obj::ceil(cy6);
HXDLIN( 108)										::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 108)										yIter32 = this1;
            									}
            								}
            								else {
HXLINE( 108)									if ((by6 > cy6)) {
HXLINE( 108)										int min;
HXDLIN( 108)										if ((ay2 > cy6)) {
HXLINE( 108)											min = ::Math_obj::floor(cy6);
            										}
            										else {
HXLINE( 108)											min = ::Math_obj::ceil(ay2);
            										}
HXDLIN( 108)										int ii_min = min;
HXDLIN( 108)										int ii_max = ::Math_obj::ceil(by6);
HXDLIN( 108)										::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 108)										yIter32 = this1;
            									}
            									else {
HXLINE( 108)										int ii_min = ::Math_obj::floor(ay2);
HXDLIN( 108)										int ii_max = ::Math_obj::ceil(cy6);
HXDLIN( 108)										::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 108)										yIter32 = this1;
            									}
            								}
HXDLIN( 108)								::pixelimage::ImageStruct undoImage2 = null();
HXDLIN( 108)								if (hasUndo2) {
HXLINE( 108)									int w = ((xIter32->max - xIter32->start) + 1);
HXDLIN( 108)									int h = ((yIter32->max - yIter32->start) + 1);
HXDLIN( 108)									int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN( 108)									::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 108)									::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN( 108)									::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN( 108)									undoImage2 = this3;
HXDLIN( 108)									{
HXLINE( 108)										int rectLeft = xIter32->start;
HXDLIN( 108)										int rectTop = yIter32->start;
HXDLIN( 108)										int rectRight = xIter32->max;
HXDLIN( 108)										bool forceClear = false;
HXDLIN( 108)										{
HXLINE( 108)											int _g = rectTop;
HXDLIN( 108)											int _g1 = yIter32->max;
HXDLIN( 108)											while((_g < _g1)){
HXLINE( 108)												_g = (_g + 1);
HXDLIN( 108)												int dy = (_g - 1);
HXDLIN( 108)												{
HXLINE( 108)													int _g1 = rectLeft;
HXDLIN( 108)													int _g2 = rectRight;
HXDLIN( 108)													while((_g1 < _g2)){
HXLINE( 108)														_g1 = (_g1 + 1);
HXDLIN( 108)														int dx = (_g1 - 1);
HXDLIN( 108)														::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 108)														int index;
HXDLIN( 108)														if (temp->useVirtualPos) {
HXLINE( 108)															index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - temp->virtualY) * ( (Float)(temp->width) )) + dx) - temp->virtualX));
            														}
            														else {
HXLINE( 108)															index = ::Std_obj::_hx_int(( (Float)(((dy * temp->width) + dx)) ));
            														}
HXDLIN( 108)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 108)														int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 108)														int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 108)														int col;
HXDLIN( 108)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 108)															col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            														}
            														else {
HXLINE( 108)															col = c;
            														}
HXDLIN( 108)														bool _hx_tmp;
HXDLIN( 108)														if (temp->useMask) {
HXLINE( 108)															_hx_tmp = ::hx::IsNotNull( temp->mask );
            														}
            														else {
HXLINE( 108)															_hx_tmp = false;
            														}
HXDLIN( 108)														if (_hx_tmp) {
HXLINE( 108)															::pixelimage::ImageStruct this1 = temp->mask;
HXDLIN( 108)															::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 108)															int index;
HXDLIN( 108)															if (this1->useVirtualPos) {
HXLINE( 108)																index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            															}
            															else {
HXLINE( 108)																index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            															}
HXDLIN( 108)															::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 108)															int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 108)															int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 108)															int v;
HXDLIN( 108)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 108)																v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            															}
            															else {
HXLINE( 108)																v = c;
            															}
HXDLIN( 108)															int this3 = v;
HXDLIN( 108)															int maskPixel = this3;
HXDLIN( 108)															int this4 = col;
HXDLIN( 108)															int this5 = this4;
HXDLIN( 108)															if ((maskPixel == 0)) {
HXLINE( 108)																int this1 = this5;
HXDLIN( 108)																col = this1;
            															}
            															else {
HXLINE( 108)																Float m0;
HXDLIN( 108)																int this1 = ((maskPixel >> 24) & 255);
HXDLIN( 108)																if ((this1 == 0)) {
HXLINE( 108)																	m0 = ((Float)0.);
            																}
            																else {
HXLINE( 108)																	m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            																}
HXDLIN( 108)																Float m1;
HXDLIN( 108)																int this2 = ((maskPixel >> 16) & 255);
HXDLIN( 108)																if ((this2 == 0)) {
HXLINE( 108)																	m1 = ((Float)0.);
            																}
            																else {
HXLINE( 108)																	m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            																}
HXDLIN( 108)																Float m2;
HXDLIN( 108)																int this3 = ((maskPixel >> 8) & 255);
HXDLIN( 108)																if ((this3 == 0)) {
HXLINE( 108)																	m2 = ((Float)0.);
            																}
            																else {
HXLINE( 108)																	m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            																}
HXDLIN( 108)																Float m3;
HXDLIN( 108)																int this4 = (maskPixel & 255);
HXDLIN( 108)																if ((this4 == 0)) {
HXLINE( 108)																	m3 = ((Float)0.);
            																}
            																else {
HXLINE( 108)																	m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            																}
HXDLIN( 108)																int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN( 108)																int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN( 108)																int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN( 108)																int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN( 108)																col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            															}
            														}
HXDLIN( 108)														if ((col != 0)) {
HXLINE( 108)															int x = (dx - rectLeft);
HXDLIN( 108)															int y = (dy - rectTop);
HXDLIN( 108)															int this1 = col;
HXDLIN( 108)															int c = this1;
HXDLIN( 108)															bool _hx_tmp;
HXDLIN( 108)															if ((((c >> 24) & 255) < 254)) {
HXLINE( 108)																_hx_tmp = undoImage2->transparent;
            															}
            															else {
HXLINE( 108)																_hx_tmp = false;
            															}
HXDLIN( 108)															if (_hx_tmp) {
HXLINE( 108)																int location;
HXDLIN( 108)																if (undoImage2->useVirtualPos) {
HXLINE( 108)																	location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage2->virtualY) * ( (Float)(undoImage2->width) )) + x) - undoImage2->virtualX));
            																}
            																else {
HXLINE( 108)																	location = ::Std_obj::_hx_int(( (Float)(((y * undoImage2->width) + x)) ));
            																}
HXDLIN( 108)																::haxe::io::ArrayBufferViewImpl this1 = undoImage2->image;
HXDLIN( 108)																::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 108)																int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 108)																int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 108)																int this3 = this2;
HXDLIN( 108)																int this4;
HXDLIN( 108)																if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 108)																	this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            																}
            																else {
HXLINE( 108)																	this4 = this3;
            																}
HXDLIN( 108)																Float a1;
HXDLIN( 108)																int this5 = ((this4 >> 24) & 255);
HXDLIN( 108)																if ((this5 == 0)) {
HXLINE( 108)																	a1 = ((Float)0.);
            																}
            																else {
HXLINE( 108)																	a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            																}
HXDLIN( 108)																Float r1;
HXDLIN( 108)																int this6 = ((this4 >> 16) & 255);
HXDLIN( 108)																if ((this6 == 0)) {
HXLINE( 108)																	r1 = ((Float)0.);
            																}
            																else {
HXLINE( 108)																	r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            																}
HXDLIN( 108)																Float g1;
HXDLIN( 108)																int this7 = ((this4 >> 8) & 255);
HXDLIN( 108)																if ((this7 == 0)) {
HXLINE( 108)																	g1 = ((Float)0.);
            																}
            																else {
HXLINE( 108)																	g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            																}
HXDLIN( 108)																Float b1;
HXDLIN( 108)																int this8 = (this4 & 255);
HXDLIN( 108)																if ((this8 == 0)) {
HXLINE( 108)																	b1 = ((Float)0.);
            																}
            																else {
HXLINE( 108)																	b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            																}
HXDLIN( 108)																Float a2;
HXDLIN( 108)																int this9 = ((col >> 24) & 255);
HXDLIN( 108)																if ((this9 == 0)) {
HXLINE( 108)																	a2 = ((Float)0.);
            																}
            																else {
HXLINE( 108)																	a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            																}
HXDLIN( 108)																Float r2;
HXDLIN( 108)																int this10 = ((col >> 16) & 255);
HXDLIN( 108)																if ((this10 == 0)) {
HXLINE( 108)																	r2 = ((Float)0.);
            																}
            																else {
HXLINE( 108)																	r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            																}
HXDLIN( 108)																Float g2;
HXDLIN( 108)																int this11 = ((col >> 8) & 255);
HXDLIN( 108)																if ((this11 == 0)) {
HXLINE( 108)																	g2 = ((Float)0.);
            																}
            																else {
HXLINE( 108)																	g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            																}
HXDLIN( 108)																Float b2;
HXDLIN( 108)																int this12 = (col & 255);
HXDLIN( 108)																if ((this12 == 0)) {
HXLINE( 108)																	b2 = ((Float)0.);
            																}
            																else {
HXLINE( 108)																	b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            																}
HXDLIN( 108)																Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 108)																int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 108)																int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 108)																int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 108)																int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 108)																int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 108)																{
HXLINE( 108)																	::haxe::io::ArrayBufferViewImpl this13 = undoImage2->image;
HXDLIN( 108)																	int value;
HXDLIN( 108)																	if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 108)																		value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																	}
            																	else {
HXLINE( 108)																		value = blended;
            																	}
HXDLIN( 108)																	bool _hx_tmp;
HXDLIN( 108)																	if ((location >= 0)) {
HXLINE( 108)																		_hx_tmp = (location < (this13->byteLength >> 2));
            																	}
            																	else {
HXLINE( 108)																		_hx_tmp = false;
            																	}
HXDLIN( 108)																	if (_hx_tmp) {
HXLINE( 108)																		::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 108)																		int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 108)																		_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 108)																		_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 108)																		_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 108)																		_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																	}
            																}
            															}
            															else {
HXLINE( 108)																::haxe::io::ArrayBufferViewImpl this1 = undoImage2->image;
HXDLIN( 108)																int index;
HXDLIN( 108)																if (undoImage2->useVirtualPos) {
HXLINE( 108)																	index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage2->virtualY) * ( (Float)(undoImage2->width) )) + x) - undoImage2->virtualX));
            																}
            																else {
HXLINE( 108)																	index = ::Std_obj::_hx_int(( (Float)(((y * undoImage2->width) + x)) ));
            																}
HXDLIN( 108)																int value;
HXDLIN( 108)																if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 108)																	value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            																}
            																else {
HXLINE( 108)																	value = c;
            																}
HXDLIN( 108)																bool _hx_tmp;
HXDLIN( 108)																if ((index >= 0)) {
HXLINE( 108)																	_hx_tmp = (index < (this1->byteLength >> 2));
            																}
            																else {
HXLINE( 108)																	_hx_tmp = false;
            																}
HXDLIN( 108)																if (_hx_tmp) {
HXLINE( 108)																	::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 108)																	int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 108)																	_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 108)																	_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 108)																	_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 108)																	_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																}
            															}
            														}
            														else {
HXLINE( 108)															if (forceClear) {
HXLINE( 108)																::haxe::io::ArrayBufferViewImpl this1 = undoImage2->image;
HXDLIN( 108)																int x = (dx - rectLeft);
HXDLIN( 108)																int y = (dy - rectTop);
HXDLIN( 108)																int index;
HXDLIN( 108)																if (undoImage2->useVirtualPos) {
HXLINE( 108)																	index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage2->virtualY) * ( (Float)(undoImage2->width) )) + x) - undoImage2->virtualX));
            																}
            																else {
HXLINE( 108)																	index = ::Std_obj::_hx_int(( (Float)(((y * undoImage2->width) + x)) ));
            																}
HXDLIN( 108)																bool _hx_tmp;
HXDLIN( 108)																if ((index >= 0)) {
HXLINE( 108)																	_hx_tmp = (index < (this1->byteLength >> 2));
            																}
            																else {
HXLINE( 108)																	_hx_tmp = false;
            																}
HXDLIN( 108)																if (_hx_tmp) {
HXLINE( 108)																	::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 108)																	int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 108)																	_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 108)																	_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 108)																	_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 108)																	_this->b[(pos + 3)] = ( (unsigned char)(0) );
            																}
            															}
            														}
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 108)								bool found2 = false;
HXDLIN( 108)								Float s2 = ((Float)0.);
HXDLIN( 108)								Float t2 = ((Float)0.);
HXDLIN( 108)								Float sxx2 = ((Float)0.);
HXDLIN( 108)								Float txx2 = ((Float)0.);
HXDLIN( 108)								{
HXLINE( 108)									int _g_min2 = xIter32->start;
HXDLIN( 108)									int _g_max2 = xIter32->max;
HXDLIN( 108)									while((_g_min2 < _g_max2)){
HXLINE( 108)										_g_min2 = (_g_min2 + 1);
HXDLIN( 108)										int x = (_g_min2 - 1);
HXLINE(  61)										sxx2 = (sx2 * ( (Float)(x) ));
HXLINE(  62)										txx2 = (tx2 * ( (Float)(x) ));
HXLINE(  63)										found2 = false;
HXLINE( 108)										{
HXLINE( 108)											int _g_min = yIter32->start;
HXDLIN( 108)											int _g_max = yIter32->max;
HXDLIN( 108)											while((_g_min < _g_max)){
HXLINE( 108)												_g_min = (_g_min + 1);
HXDLIN( 108)												int y = (_g_min - 1);
HXLINE(  65)												s2 = ((s02 + sxx2) + (sy2 * ( (Float)(y) )));
HXLINE(  66)												t2 = ((t02 + txx2) + (ty2 * ( (Float)(y) )));
HXLINE( 108)												bool _hx_tmp;
HXDLIN( 108)												if (!((s2 <= 0))) {
HXLINE( 108)													_hx_tmp = (t2 <= 0);
            												}
            												else {
HXLINE( 108)													_hx_tmp = true;
            												}
HXDLIN( 108)												if (_hx_tmp) {
HXLINE( 108)													if (found2) {
HXLINE( 108)														goto _hx_goto_31;
            													}
            												}
            												else {
HXLINE( 108)													if (((s2 + t2) < A2)) {
HXLINE( 108)														{
HXLINE( 108)															int this1 = color2;
HXDLIN( 108)															int c = this1;
HXDLIN( 108)															bool _hx_tmp;
HXDLIN( 108)															if ((((c >> 24) & 255) < 254)) {
HXLINE( 108)																_hx_tmp = temp->transparent;
            															}
            															else {
HXLINE( 108)																_hx_tmp = false;
            															}
HXDLIN( 108)															if (_hx_tmp) {
HXLINE( 108)																int location;
HXDLIN( 108)																if (temp->useVirtualPos) {
HXLINE( 108)																	location = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            																}
            																else {
HXLINE( 108)																	location = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            																}
HXDLIN( 108)																::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 108)																::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 108)																int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 108)																int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 108)																int this3 = this2;
HXDLIN( 108)																int this4;
HXDLIN( 108)																if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 108)																	this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            																}
            																else {
HXLINE( 108)																	this4 = this3;
            																}
HXDLIN( 108)																Float a1;
HXDLIN( 108)																int this5 = ((this4 >> 24) & 255);
HXDLIN( 108)																if ((this5 == 0)) {
HXLINE( 108)																	a1 = ((Float)0.);
            																}
            																else {
HXLINE( 108)																	a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            																}
HXDLIN( 108)																Float r1;
HXDLIN( 108)																int this6 = ((this4 >> 16) & 255);
HXDLIN( 108)																if ((this6 == 0)) {
HXLINE( 108)																	r1 = ((Float)0.);
            																}
            																else {
HXLINE( 108)																	r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            																}
HXDLIN( 108)																Float g1;
HXDLIN( 108)																int this7 = ((this4 >> 8) & 255);
HXDLIN( 108)																if ((this7 == 0)) {
HXLINE( 108)																	g1 = ((Float)0.);
            																}
            																else {
HXLINE( 108)																	g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            																}
HXDLIN( 108)																Float b1;
HXDLIN( 108)																int this8 = (this4 & 255);
HXDLIN( 108)																if ((this8 == 0)) {
HXLINE( 108)																	b1 = ((Float)0.);
            																}
            																else {
HXLINE( 108)																	b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            																}
HXDLIN( 108)																Float a2;
HXDLIN( 108)																int this9 = ((color2 >> 24) & 255);
HXDLIN( 108)																if ((this9 == 0)) {
HXLINE( 108)																	a2 = ((Float)0.);
            																}
            																else {
HXLINE( 108)																	a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            																}
HXDLIN( 108)																Float r2;
HXDLIN( 108)																int this10 = ((color2 >> 16) & 255);
HXDLIN( 108)																if ((this10 == 0)) {
HXLINE( 108)																	r2 = ((Float)0.);
            																}
            																else {
HXLINE( 108)																	r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            																}
HXDLIN( 108)																Float g2;
HXDLIN( 108)																int this11 = ((color2 >> 8) & 255);
HXDLIN( 108)																if ((this11 == 0)) {
HXLINE( 108)																	g2 = ((Float)0.);
            																}
            																else {
HXLINE( 108)																	g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            																}
HXDLIN( 108)																Float b2;
HXDLIN( 108)																int this12 = (color2 & 255);
HXDLIN( 108)																if ((this12 == 0)) {
HXLINE( 108)																	b2 = ((Float)0.);
            																}
            																else {
HXLINE( 108)																	b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            																}
HXDLIN( 108)																Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 108)																int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 108)																int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 108)																int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 108)																int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 108)																int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 108)																{
HXLINE( 108)																	::haxe::io::ArrayBufferViewImpl this13 = temp->image;
HXDLIN( 108)																	int value;
HXDLIN( 108)																	if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 108)																		value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																	}
            																	else {
HXLINE( 108)																		value = blended;
            																	}
HXDLIN( 108)																	bool _hx_tmp;
HXDLIN( 108)																	if ((location >= 0)) {
HXLINE( 108)																		_hx_tmp = (location < (this13->byteLength >> 2));
            																	}
            																	else {
HXLINE( 108)																		_hx_tmp = false;
            																	}
HXDLIN( 108)																	if (_hx_tmp) {
HXLINE( 108)																		::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 108)																		int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 108)																		_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 108)																		_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 108)																		_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 108)																		_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																	}
            																}
            															}
            															else {
HXLINE( 108)																::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 108)																int index;
HXDLIN( 108)																if (temp->useVirtualPos) {
HXLINE( 108)																	index = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            																}
            																else {
HXLINE( 108)																	index = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            																}
HXDLIN( 108)																int value;
HXDLIN( 108)																if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 108)																	value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            																}
            																else {
HXLINE( 108)																	value = c;
            																}
HXDLIN( 108)																bool _hx_tmp;
HXDLIN( 108)																if ((index >= 0)) {
HXLINE( 108)																	_hx_tmp = (index < (this1->byteLength >> 2));
            																}
            																else {
HXLINE( 108)																	_hx_tmp = false;
            																}
HXDLIN( 108)																if (_hx_tmp) {
HXLINE( 108)																	::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 108)																	int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 108)																	_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 108)																	_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 108)																	_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 108)																	_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																}
            															}
            														}
HXLINE(  74)														found2 = true;
            													}
            													else {
HXLINE( 108)														if (found2) {
HXLINE( 108)															goto _hx_goto_31;
            														}
            													}
            												}
            											}
            											_hx_goto_31:;
            										}
            									}
            								}
HXDLIN( 108)								if ((hasHit2 == true)) {
HXLINE( 108)									::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,ax2,ay2,bx6,by6,cx6,cy6,true);
HXDLIN( 108)									if (hasUndo2) {
HXLINE( 108)										v->undoImage = undoImage2;
HXDLIN( 108)										v->undoX = xIter32->start;
HXDLIN( 108)										v->undoY = yIter32->start;
            									}
            								}
            							}
            						}
HXDLIN( 108)						{
HXLINE( 108)							Float bx7 = cx5;
HXDLIN( 108)							Float by7 = cy5;
HXDLIN( 108)							Float cx7 = dx;
HXDLIN( 108)							Float cy7 = dy;
HXDLIN( 108)							bool hasUndo3 = false;
HXDLIN( 108)							bool adjustWinding3 = (((((bx5 * by7) - (bx7 * by5)) + ((bx7 * cy7) - (cx7 * by7))) + ((cx7 * by5) - (bx5 * cy7))) > 0);
HXDLIN( 108)							if (!(adjustWinding3)) {
HXLINE( 108)								Float bx_ = bx7;
HXDLIN( 108)								Float by_ = by7;
HXLINE(  26)								bx7 = cx7;
HXLINE(  27)								by7 = cy7;
HXLINE(  28)								cx7 = bx_;
HXLINE(  29)								cy7 = by_;
            							}
HXLINE( 108)							{
HXLINE( 108)								Float s03 = ((by5 * cx7) - (bx5 * cy7));
HXDLIN( 108)								Float sx3 = (cy7 - by5);
HXDLIN( 108)								Float sy3 = (bx5 - cx7);
HXDLIN( 108)								Float t03 = ((bx5 * by7) - (by5 * bx7));
HXDLIN( 108)								Float tx3 = (by5 - by7);
HXDLIN( 108)								Float ty3 = (bx7 - bx5);
HXDLIN( 108)								Float A3 = ((((-(by7) * cx7) + (by5 * (-(bx7) + cx7))) + (bx5 * (by7 - cy7))) + (bx7 * cy7));
HXDLIN( 108)								::pixelimage::iter::IntIterStart xIter33;
HXDLIN( 108)								if ((bx5 > bx7)) {
HXLINE( 108)									if ((bx5 > cx7)) {
HXLINE( 108)										int min;
HXDLIN( 108)										if ((bx7 > cx7)) {
HXLINE( 108)											min = ::Math_obj::floor(cx7);
            										}
            										else {
HXLINE( 108)											min = ::Math_obj::floor(bx7);
            										}
HXDLIN( 108)										int ii_min = min;
HXDLIN( 108)										int ii_max = ::Math_obj::ceil(bx5);
HXDLIN( 108)										::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 108)										xIter33 = this1;
            									}
            									else {
HXLINE( 108)										int ii_min = ::Math_obj::floor(bx7);
HXDLIN( 108)										int ii_max = ::Math_obj::ceil(cx7);
HXDLIN( 108)										::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 108)										xIter33 = this1;
            									}
            								}
            								else {
HXLINE( 108)									if ((bx7 > cx7)) {
HXLINE( 108)										int min;
HXDLIN( 108)										if ((bx5 > cx7)) {
HXLINE( 108)											min = ::Math_obj::floor(cx7);
            										}
            										else {
HXLINE( 108)											min = ::Math_obj::ceil(bx5);
            										}
HXDLIN( 108)										int ii_min = min;
HXDLIN( 108)										int ii_max = ::Math_obj::ceil(bx7);
HXDLIN( 108)										::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 108)										xIter33 = this1;
            									}
            									else {
HXLINE( 108)										int ii_min = ::Math_obj::floor(bx5);
HXDLIN( 108)										int ii_max = ::Math_obj::ceil(cx7);
HXDLIN( 108)										::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 108)										xIter33 = this1;
            									}
            								}
HXDLIN( 108)								::pixelimage::iter::IntIterStart yIter33;
HXDLIN( 108)								if ((by5 > by7)) {
HXLINE( 108)									if ((by5 > cy7)) {
HXLINE( 108)										int min;
HXDLIN( 108)										if ((by7 > cy7)) {
HXLINE( 108)											min = ::Math_obj::floor(cy7);
            										}
            										else {
HXLINE( 108)											min = ::Math_obj::floor(by7);
            										}
HXDLIN( 108)										int ii_min = min;
HXDLIN( 108)										int ii_max = ::Math_obj::ceil(by5);
HXDLIN( 108)										::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 108)										yIter33 = this1;
            									}
            									else {
HXLINE( 108)										int ii_min = ::Math_obj::floor(by7);
HXDLIN( 108)										int ii_max = ::Math_obj::ceil(cy7);
HXDLIN( 108)										::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 108)										yIter33 = this1;
            									}
            								}
            								else {
HXLINE( 108)									if ((by7 > cy7)) {
HXLINE( 108)										int min;
HXDLIN( 108)										if ((by5 > cy7)) {
HXLINE( 108)											min = ::Math_obj::floor(cy7);
            										}
            										else {
HXLINE( 108)											min = ::Math_obj::ceil(by5);
            										}
HXDLIN( 108)										int ii_min = min;
HXDLIN( 108)										int ii_max = ::Math_obj::ceil(by7);
HXDLIN( 108)										::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 108)										yIter33 = this1;
            									}
            									else {
HXLINE( 108)										int ii_min = ::Math_obj::floor(by5);
HXDLIN( 108)										int ii_max = ::Math_obj::ceil(cy7);
HXDLIN( 108)										::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 108)										yIter33 = this1;
            									}
            								}
HXDLIN( 108)								::pixelimage::ImageStruct undoImage3 = null();
HXDLIN( 108)								if (hasUndo3) {
HXLINE( 108)									int w = ((xIter33->max - xIter33->start) + 1);
HXDLIN( 108)									int h = ((yIter33->max - yIter33->start) + 1);
HXDLIN( 108)									int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN( 108)									::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 108)									::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN( 108)									::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN( 108)									undoImage3 = this3;
HXDLIN( 108)									{
HXLINE( 108)										int rectLeft = xIter33->start;
HXDLIN( 108)										int rectTop = yIter33->start;
HXDLIN( 108)										int rectRight = xIter33->max;
HXDLIN( 108)										bool forceClear = false;
HXDLIN( 108)										{
HXLINE( 108)											int _g = rectTop;
HXDLIN( 108)											int _g1 = yIter33->max;
HXDLIN( 108)											while((_g < _g1)){
HXLINE( 108)												_g = (_g + 1);
HXDLIN( 108)												int dy = (_g - 1);
HXDLIN( 108)												{
HXLINE( 108)													int _g1 = rectLeft;
HXDLIN( 108)													int _g2 = rectRight;
HXDLIN( 108)													while((_g1 < _g2)){
HXLINE( 108)														_g1 = (_g1 + 1);
HXDLIN( 108)														int dx = (_g1 - 1);
HXDLIN( 108)														::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 108)														int index;
HXDLIN( 108)														if (temp->useVirtualPos) {
HXLINE( 108)															index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - temp->virtualY) * ( (Float)(temp->width) )) + dx) - temp->virtualX));
            														}
            														else {
HXLINE( 108)															index = ::Std_obj::_hx_int(( (Float)(((dy * temp->width) + dx)) ));
            														}
HXDLIN( 108)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 108)														int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 108)														int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 108)														int col;
HXDLIN( 108)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 108)															col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            														}
            														else {
HXLINE( 108)															col = c;
            														}
HXDLIN( 108)														bool _hx_tmp;
HXDLIN( 108)														if (temp->useMask) {
HXLINE( 108)															_hx_tmp = ::hx::IsNotNull( temp->mask );
            														}
            														else {
HXLINE( 108)															_hx_tmp = false;
            														}
HXDLIN( 108)														if (_hx_tmp) {
HXLINE( 108)															::pixelimage::ImageStruct this1 = temp->mask;
HXDLIN( 108)															::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 108)															int index;
HXDLIN( 108)															if (this1->useVirtualPos) {
HXLINE( 108)																index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            															}
            															else {
HXLINE( 108)																index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            															}
HXDLIN( 108)															::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 108)															int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 108)															int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 108)															int v;
HXDLIN( 108)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 108)																v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            															}
            															else {
HXLINE( 108)																v = c;
            															}
HXDLIN( 108)															int this3 = v;
HXDLIN( 108)															int maskPixel = this3;
HXDLIN( 108)															int this4 = col;
HXDLIN( 108)															int this5 = this4;
HXDLIN( 108)															if ((maskPixel == 0)) {
HXLINE( 108)																int this1 = this5;
HXDLIN( 108)																col = this1;
            															}
            															else {
HXLINE( 108)																Float m0;
HXDLIN( 108)																int this1 = ((maskPixel >> 24) & 255);
HXDLIN( 108)																if ((this1 == 0)) {
HXLINE( 108)																	m0 = ((Float)0.);
            																}
            																else {
HXLINE( 108)																	m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            																}
HXDLIN( 108)																Float m1;
HXDLIN( 108)																int this2 = ((maskPixel >> 16) & 255);
HXDLIN( 108)																if ((this2 == 0)) {
HXLINE( 108)																	m1 = ((Float)0.);
            																}
            																else {
HXLINE( 108)																	m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            																}
HXDLIN( 108)																Float m2;
HXDLIN( 108)																int this3 = ((maskPixel >> 8) & 255);
HXDLIN( 108)																if ((this3 == 0)) {
HXLINE( 108)																	m2 = ((Float)0.);
            																}
            																else {
HXLINE( 108)																	m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            																}
HXDLIN( 108)																Float m3;
HXDLIN( 108)																int this4 = (maskPixel & 255);
HXDLIN( 108)																if ((this4 == 0)) {
HXLINE( 108)																	m3 = ((Float)0.);
            																}
            																else {
HXLINE( 108)																	m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            																}
HXDLIN( 108)																int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN( 108)																int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN( 108)																int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN( 108)																int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN( 108)																col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            															}
            														}
HXDLIN( 108)														if ((col != 0)) {
HXLINE( 108)															int x = (dx - rectLeft);
HXDLIN( 108)															int y = (dy - rectTop);
HXDLIN( 108)															int this1 = col;
HXDLIN( 108)															int c = this1;
HXDLIN( 108)															bool _hx_tmp;
HXDLIN( 108)															if ((((c >> 24) & 255) < 254)) {
HXLINE( 108)																_hx_tmp = undoImage3->transparent;
            															}
            															else {
HXLINE( 108)																_hx_tmp = false;
            															}
HXDLIN( 108)															if (_hx_tmp) {
HXLINE( 108)																int location;
HXDLIN( 108)																if (undoImage3->useVirtualPos) {
HXLINE( 108)																	location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x) - undoImage3->virtualX));
            																}
            																else {
HXLINE( 108)																	location = ::Std_obj::_hx_int(( (Float)(((y * undoImage3->width) + x)) ));
            																}
HXDLIN( 108)																::haxe::io::ArrayBufferViewImpl this1 = undoImage3->image;
HXDLIN( 108)																::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 108)																int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 108)																int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 108)																int this3 = this2;
HXDLIN( 108)																int this4;
HXDLIN( 108)																if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 108)																	this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            																}
            																else {
HXLINE( 108)																	this4 = this3;
            																}
HXDLIN( 108)																Float a1;
HXDLIN( 108)																int this5 = ((this4 >> 24) & 255);
HXDLIN( 108)																if ((this5 == 0)) {
HXLINE( 108)																	a1 = ((Float)0.);
            																}
            																else {
HXLINE( 108)																	a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            																}
HXDLIN( 108)																Float r1;
HXDLIN( 108)																int this6 = ((this4 >> 16) & 255);
HXDLIN( 108)																if ((this6 == 0)) {
HXLINE( 108)																	r1 = ((Float)0.);
            																}
            																else {
HXLINE( 108)																	r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            																}
HXDLIN( 108)																Float g1;
HXDLIN( 108)																int this7 = ((this4 >> 8) & 255);
HXDLIN( 108)																if ((this7 == 0)) {
HXLINE( 108)																	g1 = ((Float)0.);
            																}
            																else {
HXLINE( 108)																	g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            																}
HXDLIN( 108)																Float b1;
HXDLIN( 108)																int this8 = (this4 & 255);
HXDLIN( 108)																if ((this8 == 0)) {
HXLINE( 108)																	b1 = ((Float)0.);
            																}
            																else {
HXLINE( 108)																	b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            																}
HXDLIN( 108)																Float a2;
HXDLIN( 108)																int this9 = ((col >> 24) & 255);
HXDLIN( 108)																if ((this9 == 0)) {
HXLINE( 108)																	a2 = ((Float)0.);
            																}
            																else {
HXLINE( 108)																	a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            																}
HXDLIN( 108)																Float r2;
HXDLIN( 108)																int this10 = ((col >> 16) & 255);
HXDLIN( 108)																if ((this10 == 0)) {
HXLINE( 108)																	r2 = ((Float)0.);
            																}
            																else {
HXLINE( 108)																	r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            																}
HXDLIN( 108)																Float g2;
HXDLIN( 108)																int this11 = ((col >> 8) & 255);
HXDLIN( 108)																if ((this11 == 0)) {
HXLINE( 108)																	g2 = ((Float)0.);
            																}
            																else {
HXLINE( 108)																	g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            																}
HXDLIN( 108)																Float b2;
HXDLIN( 108)																int this12 = (col & 255);
HXDLIN( 108)																if ((this12 == 0)) {
HXLINE( 108)																	b2 = ((Float)0.);
            																}
            																else {
HXLINE( 108)																	b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            																}
HXDLIN( 108)																Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 108)																int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 108)																int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 108)																int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 108)																int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 108)																int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 108)																{
HXLINE( 108)																	::haxe::io::ArrayBufferViewImpl this13 = undoImage3->image;
HXDLIN( 108)																	int value;
HXDLIN( 108)																	if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 108)																		value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																	}
            																	else {
HXLINE( 108)																		value = blended;
            																	}
HXDLIN( 108)																	bool _hx_tmp;
HXDLIN( 108)																	if ((location >= 0)) {
HXLINE( 108)																		_hx_tmp = (location < (this13->byteLength >> 2));
            																	}
            																	else {
HXLINE( 108)																		_hx_tmp = false;
            																	}
HXDLIN( 108)																	if (_hx_tmp) {
HXLINE( 108)																		::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 108)																		int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 108)																		_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 108)																		_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 108)																		_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 108)																		_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																	}
            																}
            															}
            															else {
HXLINE( 108)																::haxe::io::ArrayBufferViewImpl this1 = undoImage3->image;
HXDLIN( 108)																int index;
HXDLIN( 108)																if (undoImage3->useVirtualPos) {
HXLINE( 108)																	index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x) - undoImage3->virtualX));
            																}
            																else {
HXLINE( 108)																	index = ::Std_obj::_hx_int(( (Float)(((y * undoImage3->width) + x)) ));
            																}
HXDLIN( 108)																int value;
HXDLIN( 108)																if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 108)																	value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            																}
            																else {
HXLINE( 108)																	value = c;
            																}
HXDLIN( 108)																bool _hx_tmp;
HXDLIN( 108)																if ((index >= 0)) {
HXLINE( 108)																	_hx_tmp = (index < (this1->byteLength >> 2));
            																}
            																else {
HXLINE( 108)																	_hx_tmp = false;
            																}
HXDLIN( 108)																if (_hx_tmp) {
HXLINE( 108)																	::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 108)																	int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 108)																	_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 108)																	_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 108)																	_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 108)																	_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																}
            															}
            														}
            														else {
HXLINE( 108)															if (forceClear) {
HXLINE( 108)																::haxe::io::ArrayBufferViewImpl this1 = undoImage3->image;
HXDLIN( 108)																int x = (dx - rectLeft);
HXDLIN( 108)																int y = (dy - rectTop);
HXDLIN( 108)																int index;
HXDLIN( 108)																if (undoImage3->useVirtualPos) {
HXLINE( 108)																	index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x) - undoImage3->virtualX));
            																}
            																else {
HXLINE( 108)																	index = ::Std_obj::_hx_int(( (Float)(((y * undoImage3->width) + x)) ));
            																}
HXDLIN( 108)																bool _hx_tmp;
HXDLIN( 108)																if ((index >= 0)) {
HXLINE( 108)																	_hx_tmp = (index < (this1->byteLength >> 2));
            																}
            																else {
HXLINE( 108)																	_hx_tmp = false;
            																}
HXDLIN( 108)																if (_hx_tmp) {
HXLINE( 108)																	::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 108)																	int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 108)																	_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 108)																	_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 108)																	_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 108)																	_this->b[(pos + 3)] = ( (unsigned char)(0) );
            																}
            															}
            														}
            													}
            												}
            											}
            										}
            									}
            								}
HXDLIN( 108)								bool found3 = false;
HXDLIN( 108)								Float s3 = ((Float)0.);
HXDLIN( 108)								Float t3 = ((Float)0.);
HXDLIN( 108)								Float sxx3 = ((Float)0.);
HXDLIN( 108)								Float txx3 = ((Float)0.);
HXDLIN( 108)								{
HXLINE( 108)									int _g_min3 = xIter33->start;
HXDLIN( 108)									int _g_max3 = xIter33->max;
HXDLIN( 108)									while((_g_min3 < _g_max3)){
HXLINE( 108)										_g_min3 = (_g_min3 + 1);
HXDLIN( 108)										int x = (_g_min3 - 1);
HXLINE(  61)										sxx3 = (sx3 * ( (Float)(x) ));
HXLINE(  62)										txx3 = (tx3 * ( (Float)(x) ));
HXLINE(  63)										found3 = false;
HXLINE( 108)										{
HXLINE( 108)											int _g_min = yIter33->start;
HXDLIN( 108)											int _g_max = yIter33->max;
HXDLIN( 108)											while((_g_min < _g_max)){
HXLINE( 108)												_g_min = (_g_min + 1);
HXDLIN( 108)												int y = (_g_min - 1);
HXLINE(  65)												s3 = ((s03 + sxx3) + (sy3 * ( (Float)(y) )));
HXLINE(  66)												t3 = ((t03 + txx3) + (ty3 * ( (Float)(y) )));
HXLINE( 108)												bool _hx_tmp;
HXDLIN( 108)												if (!((s3 <= 0))) {
HXLINE( 108)													_hx_tmp = (t3 <= 0);
            												}
            												else {
HXLINE( 108)													_hx_tmp = true;
            												}
HXDLIN( 108)												if (_hx_tmp) {
HXLINE( 108)													if (found3) {
HXLINE( 108)														goto _hx_goto_35;
            													}
            												}
            												else {
HXLINE( 108)													if (((s3 + t3) < A3)) {
HXLINE( 108)														{
HXLINE( 108)															int this1 = color2;
HXDLIN( 108)															int c = this1;
HXDLIN( 108)															bool _hx_tmp;
HXDLIN( 108)															if ((((c >> 24) & 255) < 254)) {
HXLINE( 108)																_hx_tmp = temp->transparent;
            															}
            															else {
HXLINE( 108)																_hx_tmp = false;
            															}
HXDLIN( 108)															if (_hx_tmp) {
HXLINE( 108)																int location;
HXDLIN( 108)																if (temp->useVirtualPos) {
HXLINE( 108)																	location = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            																}
            																else {
HXLINE( 108)																	location = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            																}
HXDLIN( 108)																::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 108)																::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 108)																int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 108)																int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 108)																int this3 = this2;
HXDLIN( 108)																int this4;
HXDLIN( 108)																if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 108)																	this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            																}
            																else {
HXLINE( 108)																	this4 = this3;
            																}
HXDLIN( 108)																Float a1;
HXDLIN( 108)																int this5 = ((this4 >> 24) & 255);
HXDLIN( 108)																if ((this5 == 0)) {
HXLINE( 108)																	a1 = ((Float)0.);
            																}
            																else {
HXLINE( 108)																	a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            																}
HXDLIN( 108)																Float r1;
HXDLIN( 108)																int this6 = ((this4 >> 16) & 255);
HXDLIN( 108)																if ((this6 == 0)) {
HXLINE( 108)																	r1 = ((Float)0.);
            																}
            																else {
HXLINE( 108)																	r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            																}
HXDLIN( 108)																Float g1;
HXDLIN( 108)																int this7 = ((this4 >> 8) & 255);
HXDLIN( 108)																if ((this7 == 0)) {
HXLINE( 108)																	g1 = ((Float)0.);
            																}
            																else {
HXLINE( 108)																	g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            																}
HXDLIN( 108)																Float b1;
HXDLIN( 108)																int this8 = (this4 & 255);
HXDLIN( 108)																if ((this8 == 0)) {
HXLINE( 108)																	b1 = ((Float)0.);
            																}
            																else {
HXLINE( 108)																	b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            																}
HXDLIN( 108)																Float a2;
HXDLIN( 108)																int this9 = ((color2 >> 24) & 255);
HXDLIN( 108)																if ((this9 == 0)) {
HXLINE( 108)																	a2 = ((Float)0.);
            																}
            																else {
HXLINE( 108)																	a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            																}
HXDLIN( 108)																Float r2;
HXDLIN( 108)																int this10 = ((color2 >> 16) & 255);
HXDLIN( 108)																if ((this10 == 0)) {
HXLINE( 108)																	r2 = ((Float)0.);
            																}
            																else {
HXLINE( 108)																	r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            																}
HXDLIN( 108)																Float g2;
HXDLIN( 108)																int this11 = ((color2 >> 8) & 255);
HXDLIN( 108)																if ((this11 == 0)) {
HXLINE( 108)																	g2 = ((Float)0.);
            																}
            																else {
HXLINE( 108)																	g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            																}
HXDLIN( 108)																Float b2;
HXDLIN( 108)																int this12 = (color2 & 255);
HXDLIN( 108)																if ((this12 == 0)) {
HXLINE( 108)																	b2 = ((Float)0.);
            																}
            																else {
HXLINE( 108)																	b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            																}
HXDLIN( 108)																Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 108)																int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 108)																int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 108)																int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 108)																int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 108)																int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 108)																{
HXLINE( 108)																	::haxe::io::ArrayBufferViewImpl this13 = temp->image;
HXDLIN( 108)																	int value;
HXDLIN( 108)																	if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 108)																		value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																	}
            																	else {
HXLINE( 108)																		value = blended;
            																	}
HXDLIN( 108)																	bool _hx_tmp;
HXDLIN( 108)																	if ((location >= 0)) {
HXLINE( 108)																		_hx_tmp = (location < (this13->byteLength >> 2));
            																	}
            																	else {
HXLINE( 108)																		_hx_tmp = false;
            																	}
HXDLIN( 108)																	if (_hx_tmp) {
HXLINE( 108)																		::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 108)																		int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 108)																		_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 108)																		_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 108)																		_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 108)																		_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																	}
            																}
            															}
            															else {
HXLINE( 108)																::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 108)																int index;
HXDLIN( 108)																if (temp->useVirtualPos) {
HXLINE( 108)																	index = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            																}
            																else {
HXLINE( 108)																	index = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            																}
HXDLIN( 108)																int value;
HXDLIN( 108)																if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 108)																	value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            																}
            																else {
HXLINE( 108)																	value = c;
            																}
HXDLIN( 108)																bool _hx_tmp;
HXDLIN( 108)																if ((index >= 0)) {
HXLINE( 108)																	_hx_tmp = (index < (this1->byteLength >> 2));
            																}
            																else {
HXLINE( 108)																	_hx_tmp = false;
            																}
HXDLIN( 108)																if (_hx_tmp) {
HXLINE( 108)																	::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 108)																	int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 108)																	_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 108)																	_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 108)																	_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 108)																	_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																}
            															}
            														}
HXLINE(  74)														found3 = true;
            													}
            													else {
HXLINE( 108)														if (found3) {
HXLINE( 108)															goto _hx_goto_35;
            														}
            													}
            												}
            											}
            											_hx_goto_35:;
            										}
            									}
            								}
HXDLIN( 108)								if ((hasHit2 == true)) {
HXLINE( 108)									::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,bx5,by5,bx7,by7,cx7,cy7,true);
HXDLIN( 108)									if (hasUndo3) {
HXLINE( 108)										v->undoImage = undoImage3;
HXDLIN( 108)										v->undoX = xIter33->start;
HXDLIN( 108)										v->undoY = yIter33->start;
            									}
            								}
            							}
            						}
HXDLIN( 108)						if ((hasHit2 == true)) {
HXLINE( 108)							::pixelimage::algo::HitQuad v = ::pixelimage::algo::HitQuad_obj::__alloc( HX_CTX ,ax2,ay2,bx5,by5,cx5,cy5,dx,dy,true);
            						}
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ArcShape_obj,chord,(void))

void ArcShape_obj::ellipse(::pixelimage::ImageStruct temp){
            	HX_GC_STACKFRAME(&_hx_pos_903fa8f91efddc1c_111_ellipse)
HXLINE( 112)		{
HXLINE( 112)			Float ax = this->rx;
HXDLIN( 112)			Float ay = this->ry;
HXDLIN( 112)			Float rx = this->rx;
HXDLIN( 112)			Float ry = this->ry;
HXDLIN( 112)			Float startRadian = this->startAngle;
HXDLIN( 112)			Float sweepRadian = this->sweepAngle;
HXDLIN( 112)			int color = this->strokeColor;
HXDLIN( 112)			bool hasHit = false;
HXDLIN( 112)			Float rSmall;
HXDLIN( 112)			if ((rx > ry)) {
HXLINE( 112)				rSmall = ry;
            			}
            			else {
HXLINE( 112)				rSmall = rx;
            			}
HXDLIN( 112)			 ::Dynamic targetE = ((Float)1.05);
HXDLIN( 112)			if (::hx::IsNull( targetE )) {
HXLINE( 416)				targetE = ((Float)1.05);
            			}
HXLINE( 112)			int result = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE) ) / rSmall)))));
HXDLIN( 112)			int noSides;
HXDLIN( 112)			if ((result < 12)) {
HXLINE( 112)				noSides = 12;
            			}
            			else {
HXLINE( 112)				if ((result > 500)) {
HXLINE( 112)					noSides = 500;
            				}
            				else {
HXLINE( 112)					noSides = result;
            				}
            			}
HXDLIN( 112)			Float theta = ((((Float)1.41213) * ::Math_obj::PI) / ( (Float)(noSides) ));
HXDLIN( 112)			Float currAngle = startRadian;
HXDLIN( 112)			int tot = ::Math_obj::floor((sweepRadian / theta));
HXDLIN( 112)			theta = (theta + (((sweepRadian / theta) - ( (Float)(tot) )) / ( (Float)(noSides) )));
HXLINE( 421)			tot = ::Math_obj::floor((sweepRadian / theta));
HXLINE( 112)			Float bx = ((rx * ::Math_obj::cos(currAngle)) + ax);
HXDLIN( 112)			Float by = ((ry * ::Math_obj::sin(currAngle)) + ay);
HXDLIN( 112)			Float cx = ((Float)0.);
HXDLIN( 112)			Float cy = ((Float)0.);
HXDLIN( 112)			::Array< ::Dynamic> arrTri = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 112)			{
HXLINE( 112)				int _g = 1;
HXDLIN( 112)				int _g1 = (tot + 1);
HXDLIN( 112)				while((_g < _g1)){
HXLINE( 112)					_g = (_g + 1);
HXDLIN( 112)					int i = (_g - 1);
HXLINE( 428)					currAngle = (startRadian + (( (Float)(i) ) * theta));
HXLINE( 429)					cx = ((rx * ::Math_obj::cos(currAngle)) + ax);
HXLINE( 430)					cy = ((ry * ::Math_obj::sin(currAngle)) + ay);
HXLINE( 112)					bool hasUndo = false;
HXDLIN( 112)					Float bx1 = bx;
HXDLIN( 112)					Float by1 = by;
HXDLIN( 112)					Float cx1 = cx;
HXDLIN( 112)					Float cy1 = cy;
HXDLIN( 112)					bool adjustWinding = (((((ax * by1) - (bx1 * ay)) + ((bx1 * cy1) - (cx1 * by1))) + ((cx1 * ay) - (ax * cy1))) > 0);
HXDLIN( 112)					if (!(adjustWinding)) {
HXLINE( 112)						Float bx_ = bx1;
HXDLIN( 112)						Float by_ = by1;
HXLINE(  26)						bx1 = cx1;
HXLINE(  27)						by1 = cy1;
HXLINE(  28)						cx1 = bx_;
HXLINE(  29)						cy1 = by_;
            					}
HXLINE( 112)					Float s0 = ((ay * cx1) - (ax * cy1));
HXDLIN( 112)					Float sx = (cy1 - ay);
HXDLIN( 112)					Float sy = (ax - cx1);
HXDLIN( 112)					Float t0 = ((ax * by1) - (ay * bx1));
HXDLIN( 112)					Float tx = (ay - by1);
HXDLIN( 112)					Float ty = (bx1 - ax);
HXDLIN( 112)					Float A = ((((-(by1) * cx1) + (ay * (-(bx1) + cx1))) + (ax * (by1 - cy1))) + (bx1 * cy1));
HXDLIN( 112)					::pixelimage::iter::IntIterStart xIter3;
HXDLIN( 112)					if ((ax > bx1)) {
HXLINE( 112)						if ((ax > cx1)) {
HXLINE( 112)							int min;
HXDLIN( 112)							if ((bx1 > cx1)) {
HXLINE( 112)								min = ::Math_obj::floor(cx1);
            							}
            							else {
HXLINE( 112)								min = ::Math_obj::floor(bx1);
            							}
HXDLIN( 112)							int ii_min = min;
HXDLIN( 112)							int ii_max = ::Math_obj::ceil(ax);
HXDLIN( 112)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 112)							xIter3 = this1;
            						}
            						else {
HXLINE( 112)							int ii_min = ::Math_obj::floor(bx1);
HXDLIN( 112)							int ii_max = ::Math_obj::ceil(cx1);
HXDLIN( 112)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 112)							xIter3 = this1;
            						}
            					}
            					else {
HXLINE( 112)						if ((bx1 > cx1)) {
HXLINE( 112)							int min;
HXDLIN( 112)							if ((ax > cx1)) {
HXLINE( 112)								min = ::Math_obj::floor(cx1);
            							}
            							else {
HXLINE( 112)								min = ::Math_obj::ceil(ax);
            							}
HXDLIN( 112)							int ii_min = min;
HXDLIN( 112)							int ii_max = ::Math_obj::ceil(bx1);
HXDLIN( 112)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 112)							xIter3 = this1;
            						}
            						else {
HXLINE( 112)							int ii_min = ::Math_obj::floor(ax);
HXDLIN( 112)							int ii_max = ::Math_obj::ceil(cx1);
HXDLIN( 112)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 112)							xIter3 = this1;
            						}
            					}
HXDLIN( 112)					::pixelimage::iter::IntIterStart yIter3;
HXDLIN( 112)					if ((ay > by1)) {
HXLINE( 112)						if ((ay > cy1)) {
HXLINE( 112)							int min;
HXDLIN( 112)							if ((by1 > cy1)) {
HXLINE( 112)								min = ::Math_obj::floor(cy1);
            							}
            							else {
HXLINE( 112)								min = ::Math_obj::floor(by1);
            							}
HXDLIN( 112)							int ii_min = min;
HXDLIN( 112)							int ii_max = ::Math_obj::ceil(ay);
HXDLIN( 112)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 112)							yIter3 = this1;
            						}
            						else {
HXLINE( 112)							int ii_min = ::Math_obj::floor(by1);
HXDLIN( 112)							int ii_max = ::Math_obj::ceil(cy1);
HXDLIN( 112)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 112)							yIter3 = this1;
            						}
            					}
            					else {
HXLINE( 112)						if ((by1 > cy1)) {
HXLINE( 112)							int min;
HXDLIN( 112)							if ((ay > cy1)) {
HXLINE( 112)								min = ::Math_obj::floor(cy1);
            							}
            							else {
HXLINE( 112)								min = ::Math_obj::ceil(ay);
            							}
HXDLIN( 112)							int ii_min = min;
HXDLIN( 112)							int ii_max = ::Math_obj::ceil(by1);
HXDLIN( 112)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 112)							yIter3 = this1;
            						}
            						else {
HXLINE( 112)							int ii_min = ::Math_obj::floor(ay);
HXDLIN( 112)							int ii_max = ::Math_obj::ceil(cy1);
HXDLIN( 112)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 112)							yIter3 = this1;
            						}
            					}
HXDLIN( 112)					::pixelimage::ImageStruct undoImage = null();
HXDLIN( 112)					if (hasUndo) {
HXLINE( 112)						int w = ((xIter3->max - xIter3->start) + 1);
HXDLIN( 112)						int h = ((yIter3->max - yIter3->start) + 1);
HXDLIN( 112)						int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN( 112)						::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 112)						::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN( 112)						::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN( 112)						undoImage = this3;
HXDLIN( 112)						{
HXLINE( 112)							int rectLeft = xIter3->start;
HXDLIN( 112)							int rectTop = yIter3->start;
HXDLIN( 112)							int rectRight = xIter3->max;
HXDLIN( 112)							bool forceClear = false;
HXDLIN( 112)							{
HXLINE( 112)								int _g = rectTop;
HXDLIN( 112)								int _g1 = yIter3->max;
HXDLIN( 112)								while((_g < _g1)){
HXLINE( 112)									_g = (_g + 1);
HXDLIN( 112)									int dy = (_g - 1);
HXDLIN( 112)									{
HXLINE( 112)										int _g1 = rectLeft;
HXDLIN( 112)										int _g2 = rectRight;
HXDLIN( 112)										while((_g1 < _g2)){
HXLINE( 112)											_g1 = (_g1 + 1);
HXDLIN( 112)											int dx = (_g1 - 1);
HXDLIN( 112)											::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 112)											int index;
HXDLIN( 112)											if (temp->useVirtualPos) {
HXLINE( 112)												index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - temp->virtualY) * ( (Float)(temp->width) )) + dx) - temp->virtualX));
            											}
            											else {
HXLINE( 112)												index = ::Std_obj::_hx_int(( (Float)(((dy * temp->width) + dx)) ));
            											}
HXDLIN( 112)											::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 112)											int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 112)											int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 112)											int col;
HXDLIN( 112)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 112)												col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            											}
            											else {
HXLINE( 112)												col = c;
            											}
HXDLIN( 112)											bool _hx_tmp;
HXDLIN( 112)											if (temp->useMask) {
HXLINE( 112)												_hx_tmp = ::hx::IsNotNull( temp->mask );
            											}
            											else {
HXLINE( 112)												_hx_tmp = false;
            											}
HXDLIN( 112)											if (_hx_tmp) {
HXLINE( 112)												::pixelimage::ImageStruct this1 = temp->mask;
HXDLIN( 112)												::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 112)												int index;
HXDLIN( 112)												if (this1->useVirtualPos) {
HXLINE( 112)													index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            												}
            												else {
HXLINE( 112)													index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            												}
HXDLIN( 112)												::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 112)												int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 112)												int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 112)												int v;
HXDLIN( 112)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 112)													v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE( 112)													v = c;
            												}
HXDLIN( 112)												int this3 = v;
HXDLIN( 112)												int maskPixel = this3;
HXDLIN( 112)												int this4 = col;
HXDLIN( 112)												int this5 = this4;
HXDLIN( 112)												if ((maskPixel == 0)) {
HXLINE( 112)													int this1 = this5;
HXDLIN( 112)													col = this1;
            												}
            												else {
HXLINE( 112)													Float m0;
HXDLIN( 112)													int this1 = ((maskPixel >> 24) & 255);
HXDLIN( 112)													if ((this1 == 0)) {
HXLINE( 112)														m0 = ((Float)0.);
            													}
            													else {
HXLINE( 112)														m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            													}
HXDLIN( 112)													Float m1;
HXDLIN( 112)													int this2 = ((maskPixel >> 16) & 255);
HXDLIN( 112)													if ((this2 == 0)) {
HXLINE( 112)														m1 = ((Float)0.);
            													}
            													else {
HXLINE( 112)														m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            													}
HXDLIN( 112)													Float m2;
HXDLIN( 112)													int this3 = ((maskPixel >> 8) & 255);
HXDLIN( 112)													if ((this3 == 0)) {
HXLINE( 112)														m2 = ((Float)0.);
            													}
            													else {
HXLINE( 112)														m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            													}
HXDLIN( 112)													Float m3;
HXDLIN( 112)													int this4 = (maskPixel & 255);
HXDLIN( 112)													if ((this4 == 0)) {
HXLINE( 112)														m3 = ((Float)0.);
            													}
            													else {
HXLINE( 112)														m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            													}
HXDLIN( 112)													int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN( 112)													int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN( 112)													int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN( 112)													int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN( 112)													col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            												}
            											}
HXDLIN( 112)											if ((col != 0)) {
HXLINE( 112)												int x = (dx - rectLeft);
HXDLIN( 112)												int y = (dy - rectTop);
HXDLIN( 112)												int this1 = col;
HXDLIN( 112)												int c = this1;
HXDLIN( 112)												bool _hx_tmp;
HXDLIN( 112)												if ((((c >> 24) & 255) < 254)) {
HXLINE( 112)													_hx_tmp = undoImage->transparent;
            												}
            												else {
HXLINE( 112)													_hx_tmp = false;
            												}
HXDLIN( 112)												if (_hx_tmp) {
HXLINE( 112)													int location;
HXDLIN( 112)													if (undoImage->useVirtualPos) {
HXLINE( 112)														location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            													}
            													else {
HXLINE( 112)														location = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            													}
HXDLIN( 112)													::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN( 112)													::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 112)													int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 112)													int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 112)													int this3 = this2;
HXDLIN( 112)													int this4;
HXDLIN( 112)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 112)														this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            													}
            													else {
HXLINE( 112)														this4 = this3;
            													}
HXDLIN( 112)													Float a1;
HXDLIN( 112)													int this5 = ((this4 >> 24) & 255);
HXDLIN( 112)													if ((this5 == 0)) {
HXLINE( 112)														a1 = ((Float)0.);
            													}
            													else {
HXLINE( 112)														a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            													}
HXDLIN( 112)													Float r1;
HXDLIN( 112)													int this6 = ((this4 >> 16) & 255);
HXDLIN( 112)													if ((this6 == 0)) {
HXLINE( 112)														r1 = ((Float)0.);
            													}
            													else {
HXLINE( 112)														r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            													}
HXDLIN( 112)													Float g1;
HXDLIN( 112)													int this7 = ((this4 >> 8) & 255);
HXDLIN( 112)													if ((this7 == 0)) {
HXLINE( 112)														g1 = ((Float)0.);
            													}
            													else {
HXLINE( 112)														g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            													}
HXDLIN( 112)													Float b1;
HXDLIN( 112)													int this8 = (this4 & 255);
HXDLIN( 112)													if ((this8 == 0)) {
HXLINE( 112)														b1 = ((Float)0.);
            													}
            													else {
HXLINE( 112)														b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            													}
HXDLIN( 112)													Float a2;
HXDLIN( 112)													int this9 = ((col >> 24) & 255);
HXDLIN( 112)													if ((this9 == 0)) {
HXLINE( 112)														a2 = ((Float)0.);
            													}
            													else {
HXLINE( 112)														a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            													}
HXDLIN( 112)													Float r2;
HXDLIN( 112)													int this10 = ((col >> 16) & 255);
HXDLIN( 112)													if ((this10 == 0)) {
HXLINE( 112)														r2 = ((Float)0.);
            													}
            													else {
HXLINE( 112)														r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            													}
HXDLIN( 112)													Float g2;
HXDLIN( 112)													int this11 = ((col >> 8) & 255);
HXDLIN( 112)													if ((this11 == 0)) {
HXLINE( 112)														g2 = ((Float)0.);
            													}
            													else {
HXLINE( 112)														g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            													}
HXDLIN( 112)													Float b2;
HXDLIN( 112)													int this12 = (col & 255);
HXDLIN( 112)													if ((this12 == 0)) {
HXLINE( 112)														b2 = ((Float)0.);
            													}
            													else {
HXLINE( 112)														b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            													}
HXDLIN( 112)													Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 112)													int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 112)													int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 112)													int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 112)													int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 112)													int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 112)													{
HXLINE( 112)														::haxe::io::ArrayBufferViewImpl this13 = undoImage->image;
HXDLIN( 112)														int value;
HXDLIN( 112)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 112)															value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            														}
            														else {
HXLINE( 112)															value = blended;
            														}
HXDLIN( 112)														bool _hx_tmp;
HXDLIN( 112)														if ((location >= 0)) {
HXLINE( 112)															_hx_tmp = (location < (this13->byteLength >> 2));
            														}
            														else {
HXLINE( 112)															_hx_tmp = false;
            														}
HXDLIN( 112)														if (_hx_tmp) {
HXLINE( 112)															::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 112)															int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 112)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 112)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 112)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 112)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
            												else {
HXLINE( 112)													::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN( 112)													int index;
HXDLIN( 112)													if (undoImage->useVirtualPos) {
HXLINE( 112)														index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            													}
            													else {
HXLINE( 112)														index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            													}
HXDLIN( 112)													int value;
HXDLIN( 112)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 112)														value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE( 112)														value = c;
            													}
HXDLIN( 112)													bool _hx_tmp;
HXDLIN( 112)													if ((index >= 0)) {
HXLINE( 112)														_hx_tmp = (index < (this1->byteLength >> 2));
            													}
            													else {
HXLINE( 112)														_hx_tmp = false;
            													}
HXDLIN( 112)													if (_hx_tmp) {
HXLINE( 112)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 112)														int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 112)														_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 112)														_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 112)														_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 112)														_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            													}
            												}
            											}
            											else {
HXLINE( 112)												if (forceClear) {
HXLINE( 112)													::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN( 112)													int x = (dx - rectLeft);
HXDLIN( 112)													int y = (dy - rectTop);
HXDLIN( 112)													int index;
HXDLIN( 112)													if (undoImage->useVirtualPos) {
HXLINE( 112)														index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            													}
            													else {
HXLINE( 112)														index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            													}
HXDLIN( 112)													bool _hx_tmp;
HXDLIN( 112)													if ((index >= 0)) {
HXLINE( 112)														_hx_tmp = (index < (this1->byteLength >> 2));
            													}
            													else {
HXLINE( 112)														_hx_tmp = false;
            													}
HXDLIN( 112)													if (_hx_tmp) {
HXLINE( 112)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 112)														int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 112)														_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 112)														_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 112)														_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 112)														_this->b[(pos + 3)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 112)					bool found = false;
HXDLIN( 112)					Float s = ((Float)0.);
HXDLIN( 112)					Float t = ((Float)0.);
HXDLIN( 112)					Float sxx = ((Float)0.);
HXDLIN( 112)					Float txx = ((Float)0.);
HXDLIN( 112)					{
HXLINE( 112)						int _g_min = xIter3->start;
HXDLIN( 112)						int _g_max = xIter3->max;
HXDLIN( 112)						while((_g_min < _g_max)){
HXLINE( 112)							_g_min = (_g_min + 1);
HXDLIN( 112)							int x = (_g_min - 1);
HXLINE(  61)							sxx = (sx * ( (Float)(x) ));
HXLINE(  62)							txx = (tx * ( (Float)(x) ));
HXLINE(  63)							found = false;
HXLINE( 112)							{
HXLINE( 112)								int _g_min1 = yIter3->start;
HXDLIN( 112)								int _g_max = yIter3->max;
HXDLIN( 112)								while((_g_min1 < _g_max)){
HXLINE( 112)									_g_min1 = (_g_min1 + 1);
HXDLIN( 112)									int y = (_g_min1 - 1);
HXLINE(  65)									s = ((s0 + sxx) + (sy * ( (Float)(y) )));
HXLINE(  66)									t = ((t0 + txx) + (ty * ( (Float)(y) )));
HXLINE( 112)									bool _hx_tmp;
HXDLIN( 112)									if (!((s <= 0))) {
HXLINE( 112)										_hx_tmp = (t <= 0);
            									}
            									else {
HXLINE( 112)										_hx_tmp = true;
            									}
HXDLIN( 112)									if (_hx_tmp) {
HXLINE( 112)										if (found) {
HXLINE( 112)											goto _hx_goto_41;
            										}
            									}
            									else {
HXLINE( 112)										if (((s + t) < A)) {
HXLINE( 112)											{
HXLINE( 112)												int this1 = color;
HXDLIN( 112)												int c = this1;
HXDLIN( 112)												bool _hx_tmp;
HXDLIN( 112)												if ((((c >> 24) & 255) < 254)) {
HXLINE( 112)													_hx_tmp = temp->transparent;
            												}
            												else {
HXLINE( 112)													_hx_tmp = false;
            												}
HXDLIN( 112)												if (_hx_tmp) {
HXLINE( 112)													int location;
HXDLIN( 112)													if (temp->useVirtualPos) {
HXLINE( 112)														location = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            													}
            													else {
HXLINE( 112)														location = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            													}
HXDLIN( 112)													::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 112)													::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 112)													int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 112)													int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 112)													int this3 = this2;
HXDLIN( 112)													int this4;
HXDLIN( 112)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 112)														this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            													}
            													else {
HXLINE( 112)														this4 = this3;
            													}
HXDLIN( 112)													Float a1;
HXDLIN( 112)													int this5 = ((this4 >> 24) & 255);
HXDLIN( 112)													if ((this5 == 0)) {
HXLINE( 112)														a1 = ((Float)0.);
            													}
            													else {
HXLINE( 112)														a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            													}
HXDLIN( 112)													Float r1;
HXDLIN( 112)													int this6 = ((this4 >> 16) & 255);
HXDLIN( 112)													if ((this6 == 0)) {
HXLINE( 112)														r1 = ((Float)0.);
            													}
            													else {
HXLINE( 112)														r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            													}
HXDLIN( 112)													Float g1;
HXDLIN( 112)													int this7 = ((this4 >> 8) & 255);
HXDLIN( 112)													if ((this7 == 0)) {
HXLINE( 112)														g1 = ((Float)0.);
            													}
            													else {
HXLINE( 112)														g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            													}
HXDLIN( 112)													Float b1;
HXDLIN( 112)													int this8 = (this4 & 255);
HXDLIN( 112)													if ((this8 == 0)) {
HXLINE( 112)														b1 = ((Float)0.);
            													}
            													else {
HXLINE( 112)														b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            													}
HXDLIN( 112)													Float a2;
HXDLIN( 112)													int this9 = ((color >> 24) & 255);
HXDLIN( 112)													if ((this9 == 0)) {
HXLINE( 112)														a2 = ((Float)0.);
            													}
            													else {
HXLINE( 112)														a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            													}
HXDLIN( 112)													Float r2;
HXDLIN( 112)													int this10 = ((color >> 16) & 255);
HXDLIN( 112)													if ((this10 == 0)) {
HXLINE( 112)														r2 = ((Float)0.);
            													}
            													else {
HXLINE( 112)														r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            													}
HXDLIN( 112)													Float g2;
HXDLIN( 112)													int this11 = ((color >> 8) & 255);
HXDLIN( 112)													if ((this11 == 0)) {
HXLINE( 112)														g2 = ((Float)0.);
            													}
            													else {
HXLINE( 112)														g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            													}
HXDLIN( 112)													Float b2;
HXDLIN( 112)													int this12 = (color & 255);
HXDLIN( 112)													if ((this12 == 0)) {
HXLINE( 112)														b2 = ((Float)0.);
            													}
            													else {
HXLINE( 112)														b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            													}
HXDLIN( 112)													Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 112)													int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 112)													int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 112)													int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 112)													int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 112)													int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 112)													{
HXLINE( 112)														::haxe::io::ArrayBufferViewImpl this13 = temp->image;
HXDLIN( 112)														int value;
HXDLIN( 112)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 112)															value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            														}
            														else {
HXLINE( 112)															value = blended;
            														}
HXDLIN( 112)														bool _hx_tmp;
HXDLIN( 112)														if ((location >= 0)) {
HXLINE( 112)															_hx_tmp = (location < (this13->byteLength >> 2));
            														}
            														else {
HXLINE( 112)															_hx_tmp = false;
            														}
HXDLIN( 112)														if (_hx_tmp) {
HXLINE( 112)															::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 112)															int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 112)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 112)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 112)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 112)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
            												else {
HXLINE( 112)													::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 112)													int index;
HXDLIN( 112)													if (temp->useVirtualPos) {
HXLINE( 112)														index = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            													}
            													else {
HXLINE( 112)														index = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            													}
HXDLIN( 112)													int value;
HXDLIN( 112)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 112)														value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE( 112)														value = c;
            													}
HXDLIN( 112)													bool _hx_tmp;
HXDLIN( 112)													if ((index >= 0)) {
HXLINE( 112)														_hx_tmp = (index < (this1->byteLength >> 2));
            													}
            													else {
HXLINE( 112)														_hx_tmp = false;
            													}
HXDLIN( 112)													if (_hx_tmp) {
HXLINE( 112)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 112)														int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 112)														_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 112)														_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 112)														_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 112)														_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            													}
            												}
            											}
HXLINE(  74)											found = true;
            										}
            										else {
HXLINE( 112)											if (found) {
HXLINE( 112)												goto _hx_goto_41;
            											}
            										}
            									}
            								}
            								_hx_goto_41:;
            							}
            						}
            					}
HXDLIN( 112)					::pixelimage::algo::HitTri triHit;
HXDLIN( 112)					if ((hasHit == true)) {
HXLINE( 112)						::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,ax,ay,bx1,by1,cx1,cy1,true);
HXDLIN( 112)						if (hasUndo) {
HXLINE( 112)							v->undoImage = undoImage;
HXDLIN( 112)							v->undoX = xIter3->start;
HXDLIN( 112)							v->undoY = yIter3->start;
            						}
HXDLIN( 112)						triHit = v;
            					}
            					else {
HXLINE( 112)						triHit = null();
            					}
HXDLIN( 112)					if (hasHit) {
HXLINE( 112)						arrTri[arrTri->length] = triHit;
            					}
HXLINE( 433)					bx = cx;
HXLINE( 434)					by = cy;
            				}
            			}
HXLINE( 437)			currAngle = (startRadian + sweepRadian);
HXLINE( 438)			cx = ((rx * ::Math_obj::cos(currAngle)) + ax);
HXLINE( 439)			cy = ((ry * ::Math_obj::sin(currAngle)) + ay);
HXLINE( 112)			bool hasUndo = false;
HXDLIN( 112)			Float bx1 = bx;
HXDLIN( 112)			Float by1 = by;
HXDLIN( 112)			Float cx1 = cx;
HXDLIN( 112)			Float cy1 = cy;
HXDLIN( 112)			bool adjustWinding = (((((ax * by1) - (bx1 * ay)) + ((bx1 * cy1) - (cx1 * by1))) + ((cx1 * ay) - (ax * cy1))) > 0);
HXDLIN( 112)			if (!(adjustWinding)) {
HXLINE( 112)				Float bx_ = bx1;
HXDLIN( 112)				Float by_ = by1;
HXLINE(  26)				bx1 = cx1;
HXLINE(  27)				by1 = cy1;
HXLINE(  28)				cx1 = bx_;
HXLINE(  29)				cy1 = by_;
            			}
HXLINE( 112)			Float s0 = ((ay * cx1) - (ax * cy1));
HXDLIN( 112)			Float sx = (cy1 - ay);
HXDLIN( 112)			Float sy = (ax - cx1);
HXDLIN( 112)			Float t0 = ((ax * by1) - (ay * bx1));
HXDLIN( 112)			Float tx = (ay - by1);
HXDLIN( 112)			Float ty = (bx1 - ax);
HXDLIN( 112)			Float A = ((((-(by1) * cx1) + (ay * (-(bx1) + cx1))) + (ax * (by1 - cy1))) + (bx1 * cy1));
HXDLIN( 112)			::pixelimage::iter::IntIterStart xIter3;
HXDLIN( 112)			if ((ax > bx1)) {
HXLINE( 112)				if ((ax > cx1)) {
HXLINE( 112)					int min;
HXDLIN( 112)					if ((bx1 > cx1)) {
HXLINE( 112)						min = ::Math_obj::floor(cx1);
            					}
            					else {
HXLINE( 112)						min = ::Math_obj::floor(bx1);
            					}
HXDLIN( 112)					int ii_min = min;
HXDLIN( 112)					int ii_max = ::Math_obj::ceil(ax);
HXDLIN( 112)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 112)					xIter3 = this1;
            				}
            				else {
HXLINE( 112)					int ii_min = ::Math_obj::floor(bx1);
HXDLIN( 112)					int ii_max = ::Math_obj::ceil(cx1);
HXDLIN( 112)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 112)					xIter3 = this1;
            				}
            			}
            			else {
HXLINE( 112)				if ((bx1 > cx1)) {
HXLINE( 112)					int min;
HXDLIN( 112)					if ((ax > cx1)) {
HXLINE( 112)						min = ::Math_obj::floor(cx1);
            					}
            					else {
HXLINE( 112)						min = ::Math_obj::ceil(ax);
            					}
HXDLIN( 112)					int ii_min = min;
HXDLIN( 112)					int ii_max = ::Math_obj::ceil(bx1);
HXDLIN( 112)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 112)					xIter3 = this1;
            				}
            				else {
HXLINE( 112)					int ii_min = ::Math_obj::floor(ax);
HXDLIN( 112)					int ii_max = ::Math_obj::ceil(cx1);
HXDLIN( 112)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 112)					xIter3 = this1;
            				}
            			}
HXDLIN( 112)			::pixelimage::iter::IntIterStart yIter3;
HXDLIN( 112)			if ((ay > by1)) {
HXLINE( 112)				if ((ay > cy1)) {
HXLINE( 112)					int min;
HXDLIN( 112)					if ((by1 > cy1)) {
HXLINE( 112)						min = ::Math_obj::floor(cy1);
            					}
            					else {
HXLINE( 112)						min = ::Math_obj::floor(by1);
            					}
HXDLIN( 112)					int ii_min = min;
HXDLIN( 112)					int ii_max = ::Math_obj::ceil(ay);
HXDLIN( 112)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 112)					yIter3 = this1;
            				}
            				else {
HXLINE( 112)					int ii_min = ::Math_obj::floor(by1);
HXDLIN( 112)					int ii_max = ::Math_obj::ceil(cy1);
HXDLIN( 112)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 112)					yIter3 = this1;
            				}
            			}
            			else {
HXLINE( 112)				if ((by1 > cy1)) {
HXLINE( 112)					int min;
HXDLIN( 112)					if ((ay > cy1)) {
HXLINE( 112)						min = ::Math_obj::floor(cy1);
            					}
            					else {
HXLINE( 112)						min = ::Math_obj::ceil(ay);
            					}
HXDLIN( 112)					int ii_min = min;
HXDLIN( 112)					int ii_max = ::Math_obj::ceil(by1);
HXDLIN( 112)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 112)					yIter3 = this1;
            				}
            				else {
HXLINE( 112)					int ii_min = ::Math_obj::floor(ay);
HXDLIN( 112)					int ii_max = ::Math_obj::ceil(cy1);
HXDLIN( 112)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 112)					yIter3 = this1;
            				}
            			}
HXDLIN( 112)			::pixelimage::ImageStruct undoImage = null();
HXDLIN( 112)			if (hasUndo) {
HXLINE( 112)				int w = ((xIter3->max - xIter3->start) + 1);
HXDLIN( 112)				int h = ((yIter3->max - yIter3->start) + 1);
HXDLIN( 112)				int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN( 112)				::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 112)				::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN( 112)				::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN( 112)				undoImage = this3;
HXDLIN( 112)				{
HXLINE( 112)					int rectLeft = xIter3->start;
HXDLIN( 112)					int rectTop = yIter3->start;
HXDLIN( 112)					int rectRight = xIter3->max;
HXDLIN( 112)					bool forceClear = false;
HXDLIN( 112)					{
HXLINE( 112)						int _g = rectTop;
HXDLIN( 112)						int _g1 = yIter3->max;
HXDLIN( 112)						while((_g < _g1)){
HXLINE( 112)							_g = (_g + 1);
HXDLIN( 112)							int dy = (_g - 1);
HXDLIN( 112)							{
HXLINE( 112)								int _g1 = rectLeft;
HXDLIN( 112)								int _g2 = rectRight;
HXDLIN( 112)								while((_g1 < _g2)){
HXLINE( 112)									_g1 = (_g1 + 1);
HXDLIN( 112)									int dx = (_g1 - 1);
HXDLIN( 112)									::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 112)									int index;
HXDLIN( 112)									if (temp->useVirtualPos) {
HXLINE( 112)										index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - temp->virtualY) * ( (Float)(temp->width) )) + dx) - temp->virtualX));
            									}
            									else {
HXLINE( 112)										index = ::Std_obj::_hx_int(( (Float)(((dy * temp->width) + dx)) ));
            									}
HXDLIN( 112)									::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 112)									int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 112)									int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 112)									int col;
HXDLIN( 112)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 112)										col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXLINE( 112)										col = c;
            									}
HXDLIN( 112)									bool _hx_tmp;
HXDLIN( 112)									if (temp->useMask) {
HXLINE( 112)										_hx_tmp = ::hx::IsNotNull( temp->mask );
            									}
            									else {
HXLINE( 112)										_hx_tmp = false;
            									}
HXDLIN( 112)									if (_hx_tmp) {
HXLINE( 112)										::pixelimage::ImageStruct this1 = temp->mask;
HXDLIN( 112)										::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 112)										int index;
HXDLIN( 112)										if (this1->useVirtualPos) {
HXLINE( 112)											index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            										}
            										else {
HXLINE( 112)											index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            										}
HXDLIN( 112)										::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 112)										int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 112)										int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 112)										int v;
HXDLIN( 112)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 112)											v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            										}
            										else {
HXLINE( 112)											v = c;
            										}
HXDLIN( 112)										int this3 = v;
HXDLIN( 112)										int maskPixel = this3;
HXDLIN( 112)										int this4 = col;
HXDLIN( 112)										int this5 = this4;
HXDLIN( 112)										if ((maskPixel == 0)) {
HXLINE( 112)											int this1 = this5;
HXDLIN( 112)											col = this1;
            										}
            										else {
HXLINE( 112)											Float m0;
HXDLIN( 112)											int this1 = ((maskPixel >> 24) & 255);
HXDLIN( 112)											if ((this1 == 0)) {
HXLINE( 112)												m0 = ((Float)0.);
            											}
            											else {
HXLINE( 112)												m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float m1;
HXDLIN( 112)											int this2 = ((maskPixel >> 16) & 255);
HXDLIN( 112)											if ((this2 == 0)) {
HXLINE( 112)												m1 = ((Float)0.);
            											}
            											else {
HXLINE( 112)												m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float m2;
HXDLIN( 112)											int this3 = ((maskPixel >> 8) & 255);
HXDLIN( 112)											if ((this3 == 0)) {
HXLINE( 112)												m2 = ((Float)0.);
            											}
            											else {
HXLINE( 112)												m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float m3;
HXDLIN( 112)											int this4 = (maskPixel & 255);
HXDLIN( 112)											if ((this4 == 0)) {
HXLINE( 112)												m3 = ((Float)0.);
            											}
            											else {
HXLINE( 112)												m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN( 112)											int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN( 112)											int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN( 112)											int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN( 112)											col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN( 112)									if ((col != 0)) {
HXLINE( 112)										int x = (dx - rectLeft);
HXDLIN( 112)										int y = (dy - rectTop);
HXDLIN( 112)										int this1 = col;
HXDLIN( 112)										int c = this1;
HXDLIN( 112)										bool _hx_tmp;
HXDLIN( 112)										if ((((c >> 24) & 255) < 254)) {
HXLINE( 112)											_hx_tmp = undoImage->transparent;
            										}
            										else {
HXLINE( 112)											_hx_tmp = false;
            										}
HXDLIN( 112)										if (_hx_tmp) {
HXLINE( 112)											int location;
HXDLIN( 112)											if (undoImage->useVirtualPos) {
HXLINE( 112)												location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            											}
            											else {
HXLINE( 112)												location = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            											}
HXDLIN( 112)											::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN( 112)											::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 112)											int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 112)											int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 112)											int this3 = this2;
HXDLIN( 112)											int this4;
HXDLIN( 112)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 112)												this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            											}
            											else {
HXLINE( 112)												this4 = this3;
            											}
HXDLIN( 112)											Float a1;
HXDLIN( 112)											int this5 = ((this4 >> 24) & 255);
HXDLIN( 112)											if ((this5 == 0)) {
HXLINE( 112)												a1 = ((Float)0.);
            											}
            											else {
HXLINE( 112)												a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float r1;
HXDLIN( 112)											int this6 = ((this4 >> 16) & 255);
HXDLIN( 112)											if ((this6 == 0)) {
HXLINE( 112)												r1 = ((Float)0.);
            											}
            											else {
HXLINE( 112)												r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float g1;
HXDLIN( 112)											int this7 = ((this4 >> 8) & 255);
HXDLIN( 112)											if ((this7 == 0)) {
HXLINE( 112)												g1 = ((Float)0.);
            											}
            											else {
HXLINE( 112)												g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float b1;
HXDLIN( 112)											int this8 = (this4 & 255);
HXDLIN( 112)											if ((this8 == 0)) {
HXLINE( 112)												b1 = ((Float)0.);
            											}
            											else {
HXLINE( 112)												b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float a2;
HXDLIN( 112)											int this9 = ((col >> 24) & 255);
HXDLIN( 112)											if ((this9 == 0)) {
HXLINE( 112)												a2 = ((Float)0.);
            											}
            											else {
HXLINE( 112)												a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float r2;
HXDLIN( 112)											int this10 = ((col >> 16) & 255);
HXDLIN( 112)											if ((this10 == 0)) {
HXLINE( 112)												r2 = ((Float)0.);
            											}
            											else {
HXLINE( 112)												r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float g2;
HXDLIN( 112)											int this11 = ((col >> 8) & 255);
HXDLIN( 112)											if ((this11 == 0)) {
HXLINE( 112)												g2 = ((Float)0.);
            											}
            											else {
HXLINE( 112)												g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float b2;
HXDLIN( 112)											int this12 = (col & 255);
HXDLIN( 112)											if ((this12 == 0)) {
HXLINE( 112)												b2 = ((Float)0.);
            											}
            											else {
HXLINE( 112)												b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 112)											int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 112)											int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 112)											int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 112)											int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 112)											int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 112)											{
HXLINE( 112)												::haxe::io::ArrayBufferViewImpl this13 = undoImage->image;
HXDLIN( 112)												int value;
HXDLIN( 112)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 112)													value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            												}
            												else {
HXLINE( 112)													value = blended;
            												}
HXDLIN( 112)												bool _hx_tmp;
HXDLIN( 112)												if ((location >= 0)) {
HXLINE( 112)													_hx_tmp = (location < (this13->byteLength >> 2));
            												}
            												else {
HXLINE( 112)													_hx_tmp = false;
            												}
HXDLIN( 112)												if (_hx_tmp) {
HXLINE( 112)													::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 112)													int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 112)													_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 112)													_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 112)													_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 112)													_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            												}
            											}
            										}
            										else {
HXLINE( 112)											::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN( 112)											int index;
HXDLIN( 112)											if (undoImage->useVirtualPos) {
HXLINE( 112)												index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            											}
            											else {
HXLINE( 112)												index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            											}
HXDLIN( 112)											int value;
HXDLIN( 112)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 112)												value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            											}
            											else {
HXLINE( 112)												value = c;
            											}
HXDLIN( 112)											bool _hx_tmp;
HXDLIN( 112)											if ((index >= 0)) {
HXLINE( 112)												_hx_tmp = (index < (this1->byteLength >> 2));
            											}
            											else {
HXLINE( 112)												_hx_tmp = false;
            											}
HXDLIN( 112)											if (_hx_tmp) {
HXLINE( 112)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 112)												int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 112)												_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 112)												_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 112)												_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 112)												_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            											}
            										}
            									}
            									else {
HXLINE( 112)										if (forceClear) {
HXLINE( 112)											::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN( 112)											int x = (dx - rectLeft);
HXDLIN( 112)											int y = (dy - rectTop);
HXDLIN( 112)											int index;
HXDLIN( 112)											if (undoImage->useVirtualPos) {
HXLINE( 112)												index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            											}
            											else {
HXLINE( 112)												index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            											}
HXDLIN( 112)											bool _hx_tmp;
HXDLIN( 112)											if ((index >= 0)) {
HXLINE( 112)												_hx_tmp = (index < (this1->byteLength >> 2));
            											}
            											else {
HXLINE( 112)												_hx_tmp = false;
            											}
HXDLIN( 112)											if (_hx_tmp) {
HXLINE( 112)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 112)												int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 112)												_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 112)												_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 112)												_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 112)												_this->b[(pos + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN( 112)			bool found = false;
HXDLIN( 112)			Float s = ((Float)0.);
HXDLIN( 112)			Float t = ((Float)0.);
HXDLIN( 112)			Float sxx = ((Float)0.);
HXDLIN( 112)			Float txx = ((Float)0.);
HXDLIN( 112)			{
HXLINE( 112)				int _g_min = xIter3->start;
HXDLIN( 112)				int _g_max = xIter3->max;
HXDLIN( 112)				while((_g_min < _g_max)){
HXLINE( 112)					_g_min = (_g_min + 1);
HXDLIN( 112)					int x = (_g_min - 1);
HXLINE(  61)					sxx = (sx * ( (Float)(x) ));
HXLINE(  62)					txx = (tx * ( (Float)(x) ));
HXLINE(  63)					found = false;
HXLINE( 112)					{
HXLINE( 112)						int _g_min1 = yIter3->start;
HXDLIN( 112)						int _g_max = yIter3->max;
HXDLIN( 112)						while((_g_min1 < _g_max)){
HXLINE( 112)							_g_min1 = (_g_min1 + 1);
HXDLIN( 112)							int y = (_g_min1 - 1);
HXLINE(  65)							s = ((s0 + sxx) + (sy * ( (Float)(y) )));
HXLINE(  66)							t = ((t0 + txx) + (ty * ( (Float)(y) )));
HXLINE( 112)							bool _hx_tmp;
HXDLIN( 112)							if (!((s <= 0))) {
HXLINE( 112)								_hx_tmp = (t <= 0);
            							}
            							else {
HXLINE( 112)								_hx_tmp = true;
            							}
HXDLIN( 112)							if (_hx_tmp) {
HXLINE( 112)								if (found) {
HXLINE( 112)									goto _hx_goto_45;
            								}
            							}
            							else {
HXLINE( 112)								if (((s + t) < A)) {
HXLINE( 112)									{
HXLINE( 112)										int this1 = color;
HXDLIN( 112)										int c = this1;
HXDLIN( 112)										bool _hx_tmp;
HXDLIN( 112)										if ((((c >> 24) & 255) < 254)) {
HXLINE( 112)											_hx_tmp = temp->transparent;
            										}
            										else {
HXLINE( 112)											_hx_tmp = false;
            										}
HXDLIN( 112)										if (_hx_tmp) {
HXLINE( 112)											int location;
HXDLIN( 112)											if (temp->useVirtualPos) {
HXLINE( 112)												location = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            											}
            											else {
HXLINE( 112)												location = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            											}
HXDLIN( 112)											::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 112)											::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 112)											int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 112)											int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 112)											int this3 = this2;
HXDLIN( 112)											int this4;
HXDLIN( 112)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 112)												this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            											}
            											else {
HXLINE( 112)												this4 = this3;
            											}
HXDLIN( 112)											Float a1;
HXDLIN( 112)											int this5 = ((this4 >> 24) & 255);
HXDLIN( 112)											if ((this5 == 0)) {
HXLINE( 112)												a1 = ((Float)0.);
            											}
            											else {
HXLINE( 112)												a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float r1;
HXDLIN( 112)											int this6 = ((this4 >> 16) & 255);
HXDLIN( 112)											if ((this6 == 0)) {
HXLINE( 112)												r1 = ((Float)0.);
            											}
            											else {
HXLINE( 112)												r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float g1;
HXDLIN( 112)											int this7 = ((this4 >> 8) & 255);
HXDLIN( 112)											if ((this7 == 0)) {
HXLINE( 112)												g1 = ((Float)0.);
            											}
            											else {
HXLINE( 112)												g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float b1;
HXDLIN( 112)											int this8 = (this4 & 255);
HXDLIN( 112)											if ((this8 == 0)) {
HXLINE( 112)												b1 = ((Float)0.);
            											}
            											else {
HXLINE( 112)												b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float a2;
HXDLIN( 112)											int this9 = ((color >> 24) & 255);
HXDLIN( 112)											if ((this9 == 0)) {
HXLINE( 112)												a2 = ((Float)0.);
            											}
            											else {
HXLINE( 112)												a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float r2;
HXDLIN( 112)											int this10 = ((color >> 16) & 255);
HXDLIN( 112)											if ((this10 == 0)) {
HXLINE( 112)												r2 = ((Float)0.);
            											}
            											else {
HXLINE( 112)												r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float g2;
HXDLIN( 112)											int this11 = ((color >> 8) & 255);
HXDLIN( 112)											if ((this11 == 0)) {
HXLINE( 112)												g2 = ((Float)0.);
            											}
            											else {
HXLINE( 112)												g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float b2;
HXDLIN( 112)											int this12 = (color & 255);
HXDLIN( 112)											if ((this12 == 0)) {
HXLINE( 112)												b2 = ((Float)0.);
            											}
            											else {
HXLINE( 112)												b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            											}
HXDLIN( 112)											Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 112)											int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 112)											int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 112)											int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 112)											int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 112)											int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 112)											{
HXLINE( 112)												::haxe::io::ArrayBufferViewImpl this13 = temp->image;
HXDLIN( 112)												int value;
HXDLIN( 112)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 112)													value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            												}
            												else {
HXLINE( 112)													value = blended;
            												}
HXDLIN( 112)												bool _hx_tmp;
HXDLIN( 112)												if ((location >= 0)) {
HXLINE( 112)													_hx_tmp = (location < (this13->byteLength >> 2));
            												}
            												else {
HXLINE( 112)													_hx_tmp = false;
            												}
HXDLIN( 112)												if (_hx_tmp) {
HXLINE( 112)													::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 112)													int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 112)													_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 112)													_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 112)													_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 112)													_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            												}
            											}
            										}
            										else {
HXLINE( 112)											::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 112)											int index;
HXDLIN( 112)											if (temp->useVirtualPos) {
HXLINE( 112)												index = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            											}
            											else {
HXLINE( 112)												index = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            											}
HXDLIN( 112)											int value;
HXDLIN( 112)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 112)												value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            											}
            											else {
HXLINE( 112)												value = c;
            											}
HXDLIN( 112)											bool _hx_tmp;
HXDLIN( 112)											if ((index >= 0)) {
HXLINE( 112)												_hx_tmp = (index < (this1->byteLength >> 2));
            											}
            											else {
HXLINE( 112)												_hx_tmp = false;
            											}
HXDLIN( 112)											if (_hx_tmp) {
HXLINE( 112)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 112)												int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 112)												_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 112)												_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 112)												_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 112)												_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            											}
            										}
            									}
HXLINE(  74)									found = true;
            								}
            								else {
HXLINE( 112)									if (found) {
HXLINE( 112)										goto _hx_goto_45;
            									}
            								}
            							}
            						}
            						_hx_goto_45:;
            					}
            				}
            			}
HXDLIN( 112)			::pixelimage::algo::HitTri triHit;
HXDLIN( 112)			if ((hasHit == true)) {
HXLINE( 112)				::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,ax,ay,bx1,by1,cx1,cy1,true);
HXDLIN( 112)				if (hasUndo) {
HXLINE( 112)					v->undoImage = undoImage;
HXDLIN( 112)					v->undoX = xIter3->start;
HXDLIN( 112)					v->undoY = yIter3->start;
            				}
HXDLIN( 112)				triHit = v;
            			}
            			else {
HXLINE( 112)				triHit = null();
            			}
HXDLIN( 112)			if (hasHit) {
HXLINE( 112)				arrTri[arrTri->length] = triHit;
            			}
HXDLIN( 112)			if (hasHit) {
HXLINE( 112)				::pixelimage::algo::HitTriArray_obj::__alloc( HX_CTX ,arrTri);
            			}
            			else {
HXLINE( 445)				arrTri = null();
            			}
            		}
HXLINE( 113)		{
HXLINE( 113)			Float ax1 = this->rx;
HXDLIN( 113)			Float ay1 = this->ry;
HXDLIN( 113)			Float rx1 = (this->rx - this->strokeWidth);
HXDLIN( 113)			Float ry1 = (this->ry - this->strokeWidth);
HXDLIN( 113)			Float startRadian1 = this->startAngle;
HXDLIN( 113)			Float sweepRadian1 = this->sweepAngle;
HXDLIN( 113)			int color1 = this->fill;
HXDLIN( 113)			bool hasHit1 = false;
HXDLIN( 113)			Float rSmall1;
HXDLIN( 113)			if ((rx1 > ry1)) {
HXLINE( 113)				rSmall1 = ry1;
            			}
            			else {
HXLINE( 113)				rSmall1 = rx1;
            			}
HXDLIN( 113)			 ::Dynamic targetE1 = ((Float)1.05);
HXDLIN( 113)			if (::hx::IsNull( targetE1 )) {
HXLINE( 416)				targetE1 = ((Float)1.05);
            			}
HXLINE( 113)			int result1 = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE1) ) / rSmall1)))));
HXDLIN( 113)			int noSides1;
HXDLIN( 113)			if ((result1 < 12)) {
HXLINE( 113)				noSides1 = 12;
            			}
            			else {
HXLINE( 113)				if ((result1 > 500)) {
HXLINE( 113)					noSides1 = 500;
            				}
            				else {
HXLINE( 113)					noSides1 = result1;
            				}
            			}
HXDLIN( 113)			Float theta1 = ((((Float)1.41213) * ::Math_obj::PI) / ( (Float)(noSides1) ));
HXDLIN( 113)			Float currAngle1 = startRadian1;
HXDLIN( 113)			int tot1 = ::Math_obj::floor((sweepRadian1 / theta1));
HXDLIN( 113)			theta1 = (theta1 + (((sweepRadian1 / theta1) - ( (Float)(tot1) )) / ( (Float)(noSides1) )));
HXLINE( 421)			tot1 = ::Math_obj::floor((sweepRadian1 / theta1));
HXLINE( 113)			Float bx2 = ((rx1 * ::Math_obj::cos(currAngle1)) + ax1);
HXDLIN( 113)			Float by2 = ((ry1 * ::Math_obj::sin(currAngle1)) + ay1);
HXDLIN( 113)			Float cx2 = ((Float)0.);
HXDLIN( 113)			Float cy2 = ((Float)0.);
HXDLIN( 113)			::Array< ::Dynamic> arrTri1 = ::Array_obj< ::Dynamic>::__new(0);
HXDLIN( 113)			{
HXLINE( 113)				int _g2 = 1;
HXDLIN( 113)				int _g3 = (tot1 + 1);
HXDLIN( 113)				while((_g2 < _g3)){
HXLINE( 113)					_g2 = (_g2 + 1);
HXDLIN( 113)					int i = (_g2 - 1);
HXLINE( 428)					currAngle1 = (startRadian1 + (( (Float)(i) ) * theta1));
HXLINE( 429)					cx2 = ((rx1 * ::Math_obj::cos(currAngle1)) + ax1);
HXLINE( 430)					cy2 = ((ry1 * ::Math_obj::sin(currAngle1)) + ay1);
HXLINE( 113)					bool hasUndo = false;
HXDLIN( 113)					Float bx = bx2;
HXDLIN( 113)					Float by = by2;
HXDLIN( 113)					Float cx = cx2;
HXDLIN( 113)					Float cy = cy2;
HXDLIN( 113)					bool adjustWinding = (((((ax1 * by) - (bx * ay1)) + ((bx * cy) - (cx * by))) + ((cx * ay1) - (ax1 * cy))) > 0);
HXDLIN( 113)					if (!(adjustWinding)) {
HXLINE( 113)						Float bx_ = bx;
HXDLIN( 113)						Float by_ = by;
HXLINE(  26)						bx = cx;
HXLINE(  27)						by = cy;
HXLINE(  28)						cx = bx_;
HXLINE(  29)						cy = by_;
            					}
HXLINE( 113)					Float s0 = ((ay1 * cx) - (ax1 * cy));
HXDLIN( 113)					Float sx = (cy - ay1);
HXDLIN( 113)					Float sy = (ax1 - cx);
HXDLIN( 113)					Float t0 = ((ax1 * by) - (ay1 * bx));
HXDLIN( 113)					Float tx = (ay1 - by);
HXDLIN( 113)					Float ty = (bx - ax1);
HXDLIN( 113)					Float A = ((((-(by) * cx) + (ay1 * (-(bx) + cx))) + (ax1 * (by - cy))) + (bx * cy));
HXDLIN( 113)					::pixelimage::iter::IntIterStart xIter3;
HXDLIN( 113)					if ((ax1 > bx)) {
HXLINE( 113)						if ((ax1 > cx)) {
HXLINE( 113)							int min;
HXDLIN( 113)							if ((bx > cx)) {
HXLINE( 113)								min = ::Math_obj::floor(cx);
            							}
            							else {
HXLINE( 113)								min = ::Math_obj::floor(bx);
            							}
HXDLIN( 113)							int ii_min = min;
HXDLIN( 113)							int ii_max = ::Math_obj::ceil(ax1);
HXDLIN( 113)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 113)							xIter3 = this1;
            						}
            						else {
HXLINE( 113)							int ii_min = ::Math_obj::floor(bx);
HXDLIN( 113)							int ii_max = ::Math_obj::ceil(cx);
HXDLIN( 113)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 113)							xIter3 = this1;
            						}
            					}
            					else {
HXLINE( 113)						if ((bx > cx)) {
HXLINE( 113)							int min;
HXDLIN( 113)							if ((ax1 > cx)) {
HXLINE( 113)								min = ::Math_obj::floor(cx);
            							}
            							else {
HXLINE( 113)								min = ::Math_obj::ceil(ax1);
            							}
HXDLIN( 113)							int ii_min = min;
HXDLIN( 113)							int ii_max = ::Math_obj::ceil(bx);
HXDLIN( 113)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 113)							xIter3 = this1;
            						}
            						else {
HXLINE( 113)							int ii_min = ::Math_obj::floor(ax1);
HXDLIN( 113)							int ii_max = ::Math_obj::ceil(cx);
HXDLIN( 113)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 113)							xIter3 = this1;
            						}
            					}
HXDLIN( 113)					::pixelimage::iter::IntIterStart yIter3;
HXDLIN( 113)					if ((ay1 > by)) {
HXLINE( 113)						if ((ay1 > cy)) {
HXLINE( 113)							int min;
HXDLIN( 113)							if ((by > cy)) {
HXLINE( 113)								min = ::Math_obj::floor(cy);
            							}
            							else {
HXLINE( 113)								min = ::Math_obj::floor(by);
            							}
HXDLIN( 113)							int ii_min = min;
HXDLIN( 113)							int ii_max = ::Math_obj::ceil(ay1);
HXDLIN( 113)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 113)							yIter3 = this1;
            						}
            						else {
HXLINE( 113)							int ii_min = ::Math_obj::floor(by);
HXDLIN( 113)							int ii_max = ::Math_obj::ceil(cy);
HXDLIN( 113)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 113)							yIter3 = this1;
            						}
            					}
            					else {
HXLINE( 113)						if ((by > cy)) {
HXLINE( 113)							int min;
HXDLIN( 113)							if ((ay1 > cy)) {
HXLINE( 113)								min = ::Math_obj::floor(cy);
            							}
            							else {
HXLINE( 113)								min = ::Math_obj::ceil(ay1);
            							}
HXDLIN( 113)							int ii_min = min;
HXDLIN( 113)							int ii_max = ::Math_obj::ceil(by);
HXDLIN( 113)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 113)							yIter3 = this1;
            						}
            						else {
HXLINE( 113)							int ii_min = ::Math_obj::floor(ay1);
HXDLIN( 113)							int ii_max = ::Math_obj::ceil(cy);
HXDLIN( 113)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 113)							yIter3 = this1;
            						}
            					}
HXDLIN( 113)					::pixelimage::ImageStruct undoImage = null();
HXDLIN( 113)					if (hasUndo) {
HXLINE( 113)						int w = ((xIter3->max - xIter3->start) + 1);
HXDLIN( 113)						int h = ((yIter3->max - yIter3->start) + 1);
HXDLIN( 113)						int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN( 113)						::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 113)						::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN( 113)						::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN( 113)						undoImage = this3;
HXDLIN( 113)						{
HXLINE( 113)							int rectLeft = xIter3->start;
HXDLIN( 113)							int rectTop = yIter3->start;
HXDLIN( 113)							int rectRight = xIter3->max;
HXDLIN( 113)							bool forceClear = false;
HXDLIN( 113)							{
HXLINE( 113)								int _g = rectTop;
HXDLIN( 113)								int _g1 = yIter3->max;
HXDLIN( 113)								while((_g < _g1)){
HXLINE( 113)									_g = (_g + 1);
HXDLIN( 113)									int dy = (_g - 1);
HXDLIN( 113)									{
HXLINE( 113)										int _g1 = rectLeft;
HXDLIN( 113)										int _g2 = rectRight;
HXDLIN( 113)										while((_g1 < _g2)){
HXLINE( 113)											_g1 = (_g1 + 1);
HXDLIN( 113)											int dx = (_g1 - 1);
HXDLIN( 113)											::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 113)											int index;
HXDLIN( 113)											if (temp->useVirtualPos) {
HXLINE( 113)												index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - temp->virtualY) * ( (Float)(temp->width) )) + dx) - temp->virtualX));
            											}
            											else {
HXLINE( 113)												index = ::Std_obj::_hx_int(( (Float)(((dy * temp->width) + dx)) ));
            											}
HXDLIN( 113)											::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 113)											int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 113)											int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 113)											int col;
HXDLIN( 113)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 113)												col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            											}
            											else {
HXLINE( 113)												col = c;
            											}
HXDLIN( 113)											bool _hx_tmp;
HXDLIN( 113)											if (temp->useMask) {
HXLINE( 113)												_hx_tmp = ::hx::IsNotNull( temp->mask );
            											}
            											else {
HXLINE( 113)												_hx_tmp = false;
            											}
HXDLIN( 113)											if (_hx_tmp) {
HXLINE( 113)												::pixelimage::ImageStruct this1 = temp->mask;
HXDLIN( 113)												::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 113)												int index;
HXDLIN( 113)												if (this1->useVirtualPos) {
HXLINE( 113)													index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            												}
            												else {
HXLINE( 113)													index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            												}
HXDLIN( 113)												::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 113)												int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 113)												int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 113)												int v;
HXDLIN( 113)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 113)													v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE( 113)													v = c;
            												}
HXDLIN( 113)												int this3 = v;
HXDLIN( 113)												int maskPixel = this3;
HXDLIN( 113)												int this4 = col;
HXDLIN( 113)												int this5 = this4;
HXDLIN( 113)												if ((maskPixel == 0)) {
HXLINE( 113)													int this1 = this5;
HXDLIN( 113)													col = this1;
            												}
            												else {
HXLINE( 113)													Float m0;
HXDLIN( 113)													int this1 = ((maskPixel >> 24) & 255);
HXDLIN( 113)													if ((this1 == 0)) {
HXLINE( 113)														m0 = ((Float)0.);
            													}
            													else {
HXLINE( 113)														m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            													}
HXDLIN( 113)													Float m1;
HXDLIN( 113)													int this2 = ((maskPixel >> 16) & 255);
HXDLIN( 113)													if ((this2 == 0)) {
HXLINE( 113)														m1 = ((Float)0.);
            													}
            													else {
HXLINE( 113)														m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            													}
HXDLIN( 113)													Float m2;
HXDLIN( 113)													int this3 = ((maskPixel >> 8) & 255);
HXDLIN( 113)													if ((this3 == 0)) {
HXLINE( 113)														m2 = ((Float)0.);
            													}
            													else {
HXLINE( 113)														m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            													}
HXDLIN( 113)													Float m3;
HXDLIN( 113)													int this4 = (maskPixel & 255);
HXDLIN( 113)													if ((this4 == 0)) {
HXLINE( 113)														m3 = ((Float)0.);
            													}
            													else {
HXLINE( 113)														m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            													}
HXDLIN( 113)													int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN( 113)													int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN( 113)													int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN( 113)													int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN( 113)													col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            												}
            											}
HXDLIN( 113)											if ((col != 0)) {
HXLINE( 113)												int x = (dx - rectLeft);
HXDLIN( 113)												int y = (dy - rectTop);
HXDLIN( 113)												int this1 = col;
HXDLIN( 113)												int c = this1;
HXDLIN( 113)												bool _hx_tmp;
HXDLIN( 113)												if ((((c >> 24) & 255) < 254)) {
HXLINE( 113)													_hx_tmp = undoImage->transparent;
            												}
            												else {
HXLINE( 113)													_hx_tmp = false;
            												}
HXDLIN( 113)												if (_hx_tmp) {
HXLINE( 113)													int location;
HXDLIN( 113)													if (undoImage->useVirtualPos) {
HXLINE( 113)														location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            													}
            													else {
HXLINE( 113)														location = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            													}
HXDLIN( 113)													::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN( 113)													::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 113)													int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 113)													int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 113)													int this3 = this2;
HXDLIN( 113)													int this4;
HXDLIN( 113)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 113)														this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            													}
            													else {
HXLINE( 113)														this4 = this3;
            													}
HXDLIN( 113)													Float a1;
HXDLIN( 113)													int this5 = ((this4 >> 24) & 255);
HXDLIN( 113)													if ((this5 == 0)) {
HXLINE( 113)														a1 = ((Float)0.);
            													}
            													else {
HXLINE( 113)														a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            													}
HXDLIN( 113)													Float r1;
HXDLIN( 113)													int this6 = ((this4 >> 16) & 255);
HXDLIN( 113)													if ((this6 == 0)) {
HXLINE( 113)														r1 = ((Float)0.);
            													}
            													else {
HXLINE( 113)														r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            													}
HXDLIN( 113)													Float g1;
HXDLIN( 113)													int this7 = ((this4 >> 8) & 255);
HXDLIN( 113)													if ((this7 == 0)) {
HXLINE( 113)														g1 = ((Float)0.);
            													}
            													else {
HXLINE( 113)														g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            													}
HXDLIN( 113)													Float b1;
HXDLIN( 113)													int this8 = (this4 & 255);
HXDLIN( 113)													if ((this8 == 0)) {
HXLINE( 113)														b1 = ((Float)0.);
            													}
            													else {
HXLINE( 113)														b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            													}
HXDLIN( 113)													Float a2;
HXDLIN( 113)													int this9 = ((col >> 24) & 255);
HXDLIN( 113)													if ((this9 == 0)) {
HXLINE( 113)														a2 = ((Float)0.);
            													}
            													else {
HXLINE( 113)														a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            													}
HXDLIN( 113)													Float r2;
HXDLIN( 113)													int this10 = ((col >> 16) & 255);
HXDLIN( 113)													if ((this10 == 0)) {
HXLINE( 113)														r2 = ((Float)0.);
            													}
            													else {
HXLINE( 113)														r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            													}
HXDLIN( 113)													Float g2;
HXDLIN( 113)													int this11 = ((col >> 8) & 255);
HXDLIN( 113)													if ((this11 == 0)) {
HXLINE( 113)														g2 = ((Float)0.);
            													}
            													else {
HXLINE( 113)														g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            													}
HXDLIN( 113)													Float b2;
HXDLIN( 113)													int this12 = (col & 255);
HXDLIN( 113)													if ((this12 == 0)) {
HXLINE( 113)														b2 = ((Float)0.);
            													}
            													else {
HXLINE( 113)														b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            													}
HXDLIN( 113)													Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 113)													int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 113)													int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 113)													int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 113)													int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 113)													int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 113)													{
HXLINE( 113)														::haxe::io::ArrayBufferViewImpl this13 = undoImage->image;
HXDLIN( 113)														int value;
HXDLIN( 113)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 113)															value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            														}
            														else {
HXLINE( 113)															value = blended;
            														}
HXDLIN( 113)														bool _hx_tmp;
HXDLIN( 113)														if ((location >= 0)) {
HXLINE( 113)															_hx_tmp = (location < (this13->byteLength >> 2));
            														}
            														else {
HXLINE( 113)															_hx_tmp = false;
            														}
HXDLIN( 113)														if (_hx_tmp) {
HXLINE( 113)															::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 113)															int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 113)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 113)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 113)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 113)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
            												else {
HXLINE( 113)													::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN( 113)													int index;
HXDLIN( 113)													if (undoImage->useVirtualPos) {
HXLINE( 113)														index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            													}
            													else {
HXLINE( 113)														index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            													}
HXDLIN( 113)													int value;
HXDLIN( 113)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 113)														value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE( 113)														value = c;
            													}
HXDLIN( 113)													bool _hx_tmp;
HXDLIN( 113)													if ((index >= 0)) {
HXLINE( 113)														_hx_tmp = (index < (this1->byteLength >> 2));
            													}
            													else {
HXLINE( 113)														_hx_tmp = false;
            													}
HXDLIN( 113)													if (_hx_tmp) {
HXLINE( 113)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 113)														int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 113)														_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 113)														_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 113)														_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 113)														_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            													}
            												}
            											}
            											else {
HXLINE( 113)												if (forceClear) {
HXLINE( 113)													::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN( 113)													int x = (dx - rectLeft);
HXDLIN( 113)													int y = (dy - rectTop);
HXDLIN( 113)													int index;
HXDLIN( 113)													if (undoImage->useVirtualPos) {
HXLINE( 113)														index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            													}
            													else {
HXLINE( 113)														index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            													}
HXDLIN( 113)													bool _hx_tmp;
HXDLIN( 113)													if ((index >= 0)) {
HXLINE( 113)														_hx_tmp = (index < (this1->byteLength >> 2));
            													}
            													else {
HXLINE( 113)														_hx_tmp = false;
            													}
HXDLIN( 113)													if (_hx_tmp) {
HXLINE( 113)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 113)														int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 113)														_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 113)														_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 113)														_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 113)														_this->b[(pos + 3)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 113)					bool found = false;
HXDLIN( 113)					Float s = ((Float)0.);
HXDLIN( 113)					Float t = ((Float)0.);
HXDLIN( 113)					Float sxx = ((Float)0.);
HXDLIN( 113)					Float txx = ((Float)0.);
HXDLIN( 113)					{
HXLINE( 113)						int _g_min = xIter3->start;
HXDLIN( 113)						int _g_max = xIter3->max;
HXDLIN( 113)						while((_g_min < _g_max)){
HXLINE( 113)							_g_min = (_g_min + 1);
HXDLIN( 113)							int x = (_g_min - 1);
HXLINE(  61)							sxx = (sx * ( (Float)(x) ));
HXLINE(  62)							txx = (tx * ( (Float)(x) ));
HXLINE(  63)							found = false;
HXLINE( 113)							{
HXLINE( 113)								int _g_min1 = yIter3->start;
HXDLIN( 113)								int _g_max = yIter3->max;
HXDLIN( 113)								while((_g_min1 < _g_max)){
HXLINE( 113)									_g_min1 = (_g_min1 + 1);
HXDLIN( 113)									int y = (_g_min1 - 1);
HXLINE(  65)									s = ((s0 + sxx) + (sy * ( (Float)(y) )));
HXLINE(  66)									t = ((t0 + txx) + (ty * ( (Float)(y) )));
HXLINE( 113)									bool _hx_tmp;
HXDLIN( 113)									if (!((s <= 0))) {
HXLINE( 113)										_hx_tmp = (t <= 0);
            									}
            									else {
HXLINE( 113)										_hx_tmp = true;
            									}
HXDLIN( 113)									if (_hx_tmp) {
HXLINE( 113)										if (found) {
HXLINE( 113)											goto _hx_goto_50;
            										}
            									}
            									else {
HXLINE( 113)										if (((s + t) < A)) {
HXLINE( 113)											{
HXLINE( 113)												int this1 = color1;
HXDLIN( 113)												int c = this1;
HXDLIN( 113)												bool _hx_tmp;
HXDLIN( 113)												if ((((c >> 24) & 255) < 254)) {
HXLINE( 113)													_hx_tmp = temp->transparent;
            												}
            												else {
HXLINE( 113)													_hx_tmp = false;
            												}
HXDLIN( 113)												if (_hx_tmp) {
HXLINE( 113)													int location;
HXDLIN( 113)													if (temp->useVirtualPos) {
HXLINE( 113)														location = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            													}
            													else {
HXLINE( 113)														location = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            													}
HXDLIN( 113)													::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 113)													::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 113)													int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 113)													int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 113)													int this3 = this2;
HXDLIN( 113)													int this4;
HXDLIN( 113)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 113)														this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            													}
            													else {
HXLINE( 113)														this4 = this3;
            													}
HXDLIN( 113)													Float a1;
HXDLIN( 113)													int this5 = ((this4 >> 24) & 255);
HXDLIN( 113)													if ((this5 == 0)) {
HXLINE( 113)														a1 = ((Float)0.);
            													}
            													else {
HXLINE( 113)														a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            													}
HXDLIN( 113)													Float r1;
HXDLIN( 113)													int this6 = ((this4 >> 16) & 255);
HXDLIN( 113)													if ((this6 == 0)) {
HXLINE( 113)														r1 = ((Float)0.);
            													}
            													else {
HXLINE( 113)														r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            													}
HXDLIN( 113)													Float g1;
HXDLIN( 113)													int this7 = ((this4 >> 8) & 255);
HXDLIN( 113)													if ((this7 == 0)) {
HXLINE( 113)														g1 = ((Float)0.);
            													}
            													else {
HXLINE( 113)														g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            													}
HXDLIN( 113)													Float b1;
HXDLIN( 113)													int this8 = (this4 & 255);
HXDLIN( 113)													if ((this8 == 0)) {
HXLINE( 113)														b1 = ((Float)0.);
            													}
            													else {
HXLINE( 113)														b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            													}
HXDLIN( 113)													Float a2;
HXDLIN( 113)													int this9 = ((color1 >> 24) & 255);
HXDLIN( 113)													if ((this9 == 0)) {
HXLINE( 113)														a2 = ((Float)0.);
            													}
            													else {
HXLINE( 113)														a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            													}
HXDLIN( 113)													Float r2;
HXDLIN( 113)													int this10 = ((color1 >> 16) & 255);
HXDLIN( 113)													if ((this10 == 0)) {
HXLINE( 113)														r2 = ((Float)0.);
            													}
            													else {
HXLINE( 113)														r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            													}
HXDLIN( 113)													Float g2;
HXDLIN( 113)													int this11 = ((color1 >> 8) & 255);
HXDLIN( 113)													if ((this11 == 0)) {
HXLINE( 113)														g2 = ((Float)0.);
            													}
            													else {
HXLINE( 113)														g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            													}
HXDLIN( 113)													Float b2;
HXDLIN( 113)													int this12 = (color1 & 255);
HXDLIN( 113)													if ((this12 == 0)) {
HXLINE( 113)														b2 = ((Float)0.);
            													}
            													else {
HXLINE( 113)														b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            													}
HXDLIN( 113)													Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 113)													int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 113)													int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 113)													int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 113)													int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 113)													int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 113)													{
HXLINE( 113)														::haxe::io::ArrayBufferViewImpl this13 = temp->image;
HXDLIN( 113)														int value;
HXDLIN( 113)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 113)															value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            														}
            														else {
HXLINE( 113)															value = blended;
            														}
HXDLIN( 113)														bool _hx_tmp;
HXDLIN( 113)														if ((location >= 0)) {
HXLINE( 113)															_hx_tmp = (location < (this13->byteLength >> 2));
            														}
            														else {
HXLINE( 113)															_hx_tmp = false;
            														}
HXDLIN( 113)														if (_hx_tmp) {
HXLINE( 113)															::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 113)															int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 113)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 113)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 113)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 113)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
            												else {
HXLINE( 113)													::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 113)													int index;
HXDLIN( 113)													if (temp->useVirtualPos) {
HXLINE( 113)														index = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            													}
            													else {
HXLINE( 113)														index = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            													}
HXDLIN( 113)													int value;
HXDLIN( 113)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 113)														value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE( 113)														value = c;
            													}
HXDLIN( 113)													bool _hx_tmp;
HXDLIN( 113)													if ((index >= 0)) {
HXLINE( 113)														_hx_tmp = (index < (this1->byteLength >> 2));
            													}
            													else {
HXLINE( 113)														_hx_tmp = false;
            													}
HXDLIN( 113)													if (_hx_tmp) {
HXLINE( 113)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 113)														int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 113)														_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 113)														_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 113)														_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 113)														_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            													}
            												}
            											}
HXLINE(  74)											found = true;
            										}
            										else {
HXLINE( 113)											if (found) {
HXLINE( 113)												goto _hx_goto_50;
            											}
            										}
            									}
            								}
            								_hx_goto_50:;
            							}
            						}
            					}
HXDLIN( 113)					::pixelimage::algo::HitTri triHit;
HXDLIN( 113)					if ((hasHit1 == true)) {
HXLINE( 113)						::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,ax1,ay1,bx,by,cx,cy,true);
HXDLIN( 113)						if (hasUndo) {
HXLINE( 113)							v->undoImage = undoImage;
HXDLIN( 113)							v->undoX = xIter3->start;
HXDLIN( 113)							v->undoY = yIter3->start;
            						}
HXDLIN( 113)						triHit = v;
            					}
            					else {
HXLINE( 113)						triHit = null();
            					}
HXDLIN( 113)					if (hasHit1) {
HXLINE( 113)						arrTri1[arrTri1->length] = triHit;
            					}
HXLINE( 433)					bx2 = cx2;
HXLINE( 434)					by2 = cy2;
            				}
            			}
HXLINE( 437)			currAngle1 = (startRadian1 + sweepRadian1);
HXLINE( 438)			cx2 = ((rx1 * ::Math_obj::cos(currAngle1)) + ax1);
HXLINE( 439)			cy2 = ((ry1 * ::Math_obj::sin(currAngle1)) + ay1);
HXLINE( 113)			bool hasUndo1 = false;
HXDLIN( 113)			Float bx3 = bx2;
HXDLIN( 113)			Float by3 = by2;
HXDLIN( 113)			Float cx3 = cx2;
HXDLIN( 113)			Float cy3 = cy2;
HXDLIN( 113)			bool adjustWinding1 = (((((ax1 * by3) - (bx3 * ay1)) + ((bx3 * cy3) - (cx3 * by3))) + ((cx3 * ay1) - (ax1 * cy3))) > 0);
HXDLIN( 113)			if (!(adjustWinding1)) {
HXLINE( 113)				Float bx_ = bx3;
HXDLIN( 113)				Float by_ = by3;
HXLINE(  26)				bx3 = cx3;
HXLINE(  27)				by3 = cy3;
HXLINE(  28)				cx3 = bx_;
HXLINE(  29)				cy3 = by_;
            			}
HXLINE( 113)			Float s01 = ((ay1 * cx3) - (ax1 * cy3));
HXDLIN( 113)			Float sx1 = (cy3 - ay1);
HXDLIN( 113)			Float sy1 = (ax1 - cx3);
HXDLIN( 113)			Float t01 = ((ax1 * by3) - (ay1 * bx3));
HXDLIN( 113)			Float tx1 = (ay1 - by3);
HXDLIN( 113)			Float ty1 = (bx3 - ax1);
HXDLIN( 113)			Float A1 = ((((-(by3) * cx3) + (ay1 * (-(bx3) + cx3))) + (ax1 * (by3 - cy3))) + (bx3 * cy3));
HXDLIN( 113)			::pixelimage::iter::IntIterStart xIter31;
HXDLIN( 113)			if ((ax1 > bx3)) {
HXLINE( 113)				if ((ax1 > cx3)) {
HXLINE( 113)					int min;
HXDLIN( 113)					if ((bx3 > cx3)) {
HXLINE( 113)						min = ::Math_obj::floor(cx3);
            					}
            					else {
HXLINE( 113)						min = ::Math_obj::floor(bx3);
            					}
HXDLIN( 113)					int ii_min = min;
HXDLIN( 113)					int ii_max = ::Math_obj::ceil(ax1);
HXDLIN( 113)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 113)					xIter31 = this1;
            				}
            				else {
HXLINE( 113)					int ii_min = ::Math_obj::floor(bx3);
HXDLIN( 113)					int ii_max = ::Math_obj::ceil(cx3);
HXDLIN( 113)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 113)					xIter31 = this1;
            				}
            			}
            			else {
HXLINE( 113)				if ((bx3 > cx3)) {
HXLINE( 113)					int min;
HXDLIN( 113)					if ((ax1 > cx3)) {
HXLINE( 113)						min = ::Math_obj::floor(cx3);
            					}
            					else {
HXLINE( 113)						min = ::Math_obj::ceil(ax1);
            					}
HXDLIN( 113)					int ii_min = min;
HXDLIN( 113)					int ii_max = ::Math_obj::ceil(bx3);
HXDLIN( 113)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 113)					xIter31 = this1;
            				}
            				else {
HXLINE( 113)					int ii_min = ::Math_obj::floor(ax1);
HXDLIN( 113)					int ii_max = ::Math_obj::ceil(cx3);
HXDLIN( 113)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 113)					xIter31 = this1;
            				}
            			}
HXDLIN( 113)			::pixelimage::iter::IntIterStart yIter31;
HXDLIN( 113)			if ((ay1 > by3)) {
HXLINE( 113)				if ((ay1 > cy3)) {
HXLINE( 113)					int min;
HXDLIN( 113)					if ((by3 > cy3)) {
HXLINE( 113)						min = ::Math_obj::floor(cy3);
            					}
            					else {
HXLINE( 113)						min = ::Math_obj::floor(by3);
            					}
HXDLIN( 113)					int ii_min = min;
HXDLIN( 113)					int ii_max = ::Math_obj::ceil(ay1);
HXDLIN( 113)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 113)					yIter31 = this1;
            				}
            				else {
HXLINE( 113)					int ii_min = ::Math_obj::floor(by3);
HXDLIN( 113)					int ii_max = ::Math_obj::ceil(cy3);
HXDLIN( 113)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 113)					yIter31 = this1;
            				}
            			}
            			else {
HXLINE( 113)				if ((by3 > cy3)) {
HXLINE( 113)					int min;
HXDLIN( 113)					if ((ay1 > cy3)) {
HXLINE( 113)						min = ::Math_obj::floor(cy3);
            					}
            					else {
HXLINE( 113)						min = ::Math_obj::ceil(ay1);
            					}
HXDLIN( 113)					int ii_min = min;
HXDLIN( 113)					int ii_max = ::Math_obj::ceil(by3);
HXDLIN( 113)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 113)					yIter31 = this1;
            				}
            				else {
HXLINE( 113)					int ii_min = ::Math_obj::floor(ay1);
HXDLIN( 113)					int ii_max = ::Math_obj::ceil(cy3);
HXDLIN( 113)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 113)					yIter31 = this1;
            				}
            			}
HXDLIN( 113)			::pixelimage::ImageStruct undoImage1 = null();
HXDLIN( 113)			if (hasUndo1) {
HXLINE( 113)				int w = ((xIter31->max - xIter31->start) + 1);
HXDLIN( 113)				int h = ((yIter31->max - yIter31->start) + 1);
HXDLIN( 113)				int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN( 113)				::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 113)				::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN( 113)				::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN( 113)				undoImage1 = this3;
HXDLIN( 113)				{
HXLINE( 113)					int rectLeft = xIter31->start;
HXDLIN( 113)					int rectTop = yIter31->start;
HXDLIN( 113)					int rectRight = xIter31->max;
HXDLIN( 113)					bool forceClear = false;
HXDLIN( 113)					{
HXLINE( 113)						int _g = rectTop;
HXDLIN( 113)						int _g1 = yIter31->max;
HXDLIN( 113)						while((_g < _g1)){
HXLINE( 113)							_g = (_g + 1);
HXDLIN( 113)							int dy = (_g - 1);
HXDLIN( 113)							{
HXLINE( 113)								int _g1 = rectLeft;
HXDLIN( 113)								int _g2 = rectRight;
HXDLIN( 113)								while((_g1 < _g2)){
HXLINE( 113)									_g1 = (_g1 + 1);
HXDLIN( 113)									int dx = (_g1 - 1);
HXDLIN( 113)									::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 113)									int index;
HXDLIN( 113)									if (temp->useVirtualPos) {
HXLINE( 113)										index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - temp->virtualY) * ( (Float)(temp->width) )) + dx) - temp->virtualX));
            									}
            									else {
HXLINE( 113)										index = ::Std_obj::_hx_int(( (Float)(((dy * temp->width) + dx)) ));
            									}
HXDLIN( 113)									::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 113)									int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 113)									int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 113)									int col;
HXDLIN( 113)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 113)										col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXLINE( 113)										col = c;
            									}
HXDLIN( 113)									bool _hx_tmp;
HXDLIN( 113)									if (temp->useMask) {
HXLINE( 113)										_hx_tmp = ::hx::IsNotNull( temp->mask );
            									}
            									else {
HXLINE( 113)										_hx_tmp = false;
            									}
HXDLIN( 113)									if (_hx_tmp) {
HXLINE( 113)										::pixelimage::ImageStruct this1 = temp->mask;
HXDLIN( 113)										::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 113)										int index;
HXDLIN( 113)										if (this1->useVirtualPos) {
HXLINE( 113)											index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            										}
            										else {
HXLINE( 113)											index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            										}
HXDLIN( 113)										::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 113)										int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 113)										int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 113)										int v;
HXDLIN( 113)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 113)											v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            										}
            										else {
HXLINE( 113)											v = c;
            										}
HXDLIN( 113)										int this3 = v;
HXDLIN( 113)										int maskPixel = this3;
HXDLIN( 113)										int this4 = col;
HXDLIN( 113)										int this5 = this4;
HXDLIN( 113)										if ((maskPixel == 0)) {
HXLINE( 113)											int this1 = this5;
HXDLIN( 113)											col = this1;
            										}
            										else {
HXLINE( 113)											Float m0;
HXDLIN( 113)											int this1 = ((maskPixel >> 24) & 255);
HXDLIN( 113)											if ((this1 == 0)) {
HXLINE( 113)												m0 = ((Float)0.);
            											}
            											else {
HXLINE( 113)												m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            											}
HXDLIN( 113)											Float m1;
HXDLIN( 113)											int this2 = ((maskPixel >> 16) & 255);
HXDLIN( 113)											if ((this2 == 0)) {
HXLINE( 113)												m1 = ((Float)0.);
            											}
            											else {
HXLINE( 113)												m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            											}
HXDLIN( 113)											Float m2;
HXDLIN( 113)											int this3 = ((maskPixel >> 8) & 255);
HXDLIN( 113)											if ((this3 == 0)) {
HXLINE( 113)												m2 = ((Float)0.);
            											}
            											else {
HXLINE( 113)												m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            											}
HXDLIN( 113)											Float m3;
HXDLIN( 113)											int this4 = (maskPixel & 255);
HXDLIN( 113)											if ((this4 == 0)) {
HXLINE( 113)												m3 = ((Float)0.);
            											}
            											else {
HXLINE( 113)												m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            											}
HXDLIN( 113)											int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN( 113)											int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN( 113)											int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN( 113)											int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN( 113)											col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN( 113)									if ((col != 0)) {
HXLINE( 113)										int x = (dx - rectLeft);
HXDLIN( 113)										int y = (dy - rectTop);
HXDLIN( 113)										int this1 = col;
HXDLIN( 113)										int c = this1;
HXDLIN( 113)										bool _hx_tmp;
HXDLIN( 113)										if ((((c >> 24) & 255) < 254)) {
HXLINE( 113)											_hx_tmp = undoImage1->transparent;
            										}
            										else {
HXLINE( 113)											_hx_tmp = false;
            										}
HXDLIN( 113)										if (_hx_tmp) {
HXLINE( 113)											int location;
HXDLIN( 113)											if (undoImage1->useVirtualPos) {
HXLINE( 113)												location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            											}
            											else {
HXLINE( 113)												location = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            											}
HXDLIN( 113)											::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN( 113)											::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 113)											int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 113)											int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 113)											int this3 = this2;
HXDLIN( 113)											int this4;
HXDLIN( 113)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 113)												this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            											}
            											else {
HXLINE( 113)												this4 = this3;
            											}
HXDLIN( 113)											Float a1;
HXDLIN( 113)											int this5 = ((this4 >> 24) & 255);
HXDLIN( 113)											if ((this5 == 0)) {
HXLINE( 113)												a1 = ((Float)0.);
            											}
            											else {
HXLINE( 113)												a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            											}
HXDLIN( 113)											Float r1;
HXDLIN( 113)											int this6 = ((this4 >> 16) & 255);
HXDLIN( 113)											if ((this6 == 0)) {
HXLINE( 113)												r1 = ((Float)0.);
            											}
            											else {
HXLINE( 113)												r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            											}
HXDLIN( 113)											Float g1;
HXDLIN( 113)											int this7 = ((this4 >> 8) & 255);
HXDLIN( 113)											if ((this7 == 0)) {
HXLINE( 113)												g1 = ((Float)0.);
            											}
            											else {
HXLINE( 113)												g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            											}
HXDLIN( 113)											Float b1;
HXDLIN( 113)											int this8 = (this4 & 255);
HXDLIN( 113)											if ((this8 == 0)) {
HXLINE( 113)												b1 = ((Float)0.);
            											}
            											else {
HXLINE( 113)												b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            											}
HXDLIN( 113)											Float a2;
HXDLIN( 113)											int this9 = ((col >> 24) & 255);
HXDLIN( 113)											if ((this9 == 0)) {
HXLINE( 113)												a2 = ((Float)0.);
            											}
            											else {
HXLINE( 113)												a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            											}
HXDLIN( 113)											Float r2;
HXDLIN( 113)											int this10 = ((col >> 16) & 255);
HXDLIN( 113)											if ((this10 == 0)) {
HXLINE( 113)												r2 = ((Float)0.);
            											}
            											else {
HXLINE( 113)												r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            											}
HXDLIN( 113)											Float g2;
HXDLIN( 113)											int this11 = ((col >> 8) & 255);
HXDLIN( 113)											if ((this11 == 0)) {
HXLINE( 113)												g2 = ((Float)0.);
            											}
            											else {
HXLINE( 113)												g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            											}
HXDLIN( 113)											Float b2;
HXDLIN( 113)											int this12 = (col & 255);
HXDLIN( 113)											if ((this12 == 0)) {
HXLINE( 113)												b2 = ((Float)0.);
            											}
            											else {
HXLINE( 113)												b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            											}
HXDLIN( 113)											Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 113)											int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 113)											int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 113)											int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 113)											int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 113)											int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 113)											{
HXLINE( 113)												::haxe::io::ArrayBufferViewImpl this13 = undoImage1->image;
HXDLIN( 113)												int value;
HXDLIN( 113)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 113)													value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            												}
            												else {
HXLINE( 113)													value = blended;
            												}
HXDLIN( 113)												bool _hx_tmp;
HXDLIN( 113)												if ((location >= 0)) {
HXLINE( 113)													_hx_tmp = (location < (this13->byteLength >> 2));
            												}
            												else {
HXLINE( 113)													_hx_tmp = false;
            												}
HXDLIN( 113)												if (_hx_tmp) {
HXLINE( 113)													::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 113)													int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 113)													_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 113)													_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 113)													_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 113)													_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            												}
            											}
            										}
            										else {
HXLINE( 113)											::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN( 113)											int index;
HXDLIN( 113)											if (undoImage1->useVirtualPos) {
HXLINE( 113)												index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            											}
            											else {
HXLINE( 113)												index = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            											}
HXDLIN( 113)											int value;
HXDLIN( 113)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 113)												value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            											}
            											else {
HXLINE( 113)												value = c;
            											}
HXDLIN( 113)											bool _hx_tmp;
HXDLIN( 113)											if ((index >= 0)) {
HXLINE( 113)												_hx_tmp = (index < (this1->byteLength >> 2));
            											}
            											else {
HXLINE( 113)												_hx_tmp = false;
            											}
HXDLIN( 113)											if (_hx_tmp) {
HXLINE( 113)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 113)												int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 113)												_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 113)												_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 113)												_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 113)												_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            											}
            										}
            									}
            									else {
HXLINE( 113)										if (forceClear) {
HXLINE( 113)											::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN( 113)											int x = (dx - rectLeft);
HXDLIN( 113)											int y = (dy - rectTop);
HXDLIN( 113)											int index;
HXDLIN( 113)											if (undoImage1->useVirtualPos) {
HXLINE( 113)												index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            											}
            											else {
HXLINE( 113)												index = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            											}
HXDLIN( 113)											bool _hx_tmp;
HXDLIN( 113)											if ((index >= 0)) {
HXLINE( 113)												_hx_tmp = (index < (this1->byteLength >> 2));
            											}
            											else {
HXLINE( 113)												_hx_tmp = false;
            											}
HXDLIN( 113)											if (_hx_tmp) {
HXLINE( 113)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 113)												int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 113)												_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 113)												_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 113)												_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 113)												_this->b[(pos + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN( 113)			bool found1 = false;
HXDLIN( 113)			Float s1 = ((Float)0.);
HXDLIN( 113)			Float t1 = ((Float)0.);
HXDLIN( 113)			Float sxx1 = ((Float)0.);
HXDLIN( 113)			Float txx1 = ((Float)0.);
HXDLIN( 113)			{
HXLINE( 113)				int _g_min1 = xIter31->start;
HXDLIN( 113)				int _g_max1 = xIter31->max;
HXDLIN( 113)				while((_g_min1 < _g_max1)){
HXLINE( 113)					_g_min1 = (_g_min1 + 1);
HXDLIN( 113)					int x = (_g_min1 - 1);
HXLINE(  61)					sxx1 = (sx1 * ( (Float)(x) ));
HXLINE(  62)					txx1 = (tx1 * ( (Float)(x) ));
HXLINE(  63)					found1 = false;
HXLINE( 113)					{
HXLINE( 113)						int _g_min = yIter31->start;
HXDLIN( 113)						int _g_max = yIter31->max;
HXDLIN( 113)						while((_g_min < _g_max)){
HXLINE( 113)							_g_min = (_g_min + 1);
HXDLIN( 113)							int y = (_g_min - 1);
HXLINE(  65)							s1 = ((s01 + sxx1) + (sy1 * ( (Float)(y) )));
HXLINE(  66)							t1 = ((t01 + txx1) + (ty1 * ( (Float)(y) )));
HXLINE( 113)							bool _hx_tmp;
HXDLIN( 113)							if (!((s1 <= 0))) {
HXLINE( 113)								_hx_tmp = (t1 <= 0);
            							}
            							else {
HXLINE( 113)								_hx_tmp = true;
            							}
HXDLIN( 113)							if (_hx_tmp) {
HXLINE( 113)								if (found1) {
HXLINE( 113)									goto _hx_goto_54;
            								}
            							}
            							else {
HXLINE( 113)								if (((s1 + t1) < A1)) {
HXLINE( 113)									{
HXLINE( 113)										int this1 = color1;
HXDLIN( 113)										int c = this1;
HXDLIN( 113)										bool _hx_tmp;
HXDLIN( 113)										if ((((c >> 24) & 255) < 254)) {
HXLINE( 113)											_hx_tmp = temp->transparent;
            										}
            										else {
HXLINE( 113)											_hx_tmp = false;
            										}
HXDLIN( 113)										if (_hx_tmp) {
HXLINE( 113)											int location;
HXDLIN( 113)											if (temp->useVirtualPos) {
HXLINE( 113)												location = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            											}
            											else {
HXLINE( 113)												location = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            											}
HXDLIN( 113)											::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 113)											::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 113)											int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 113)											int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 113)											int this3 = this2;
HXDLIN( 113)											int this4;
HXDLIN( 113)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 113)												this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            											}
            											else {
HXLINE( 113)												this4 = this3;
            											}
HXDLIN( 113)											Float a1;
HXDLIN( 113)											int this5 = ((this4 >> 24) & 255);
HXDLIN( 113)											if ((this5 == 0)) {
HXLINE( 113)												a1 = ((Float)0.);
            											}
            											else {
HXLINE( 113)												a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            											}
HXDLIN( 113)											Float r1;
HXDLIN( 113)											int this6 = ((this4 >> 16) & 255);
HXDLIN( 113)											if ((this6 == 0)) {
HXLINE( 113)												r1 = ((Float)0.);
            											}
            											else {
HXLINE( 113)												r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            											}
HXDLIN( 113)											Float g1;
HXDLIN( 113)											int this7 = ((this4 >> 8) & 255);
HXDLIN( 113)											if ((this7 == 0)) {
HXLINE( 113)												g1 = ((Float)0.);
            											}
            											else {
HXLINE( 113)												g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            											}
HXDLIN( 113)											Float b1;
HXDLIN( 113)											int this8 = (this4 & 255);
HXDLIN( 113)											if ((this8 == 0)) {
HXLINE( 113)												b1 = ((Float)0.);
            											}
            											else {
HXLINE( 113)												b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            											}
HXDLIN( 113)											Float a2;
HXDLIN( 113)											int this9 = ((color1 >> 24) & 255);
HXDLIN( 113)											if ((this9 == 0)) {
HXLINE( 113)												a2 = ((Float)0.);
            											}
            											else {
HXLINE( 113)												a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            											}
HXDLIN( 113)											Float r2;
HXDLIN( 113)											int this10 = ((color1 >> 16) & 255);
HXDLIN( 113)											if ((this10 == 0)) {
HXLINE( 113)												r2 = ((Float)0.);
            											}
            											else {
HXLINE( 113)												r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            											}
HXDLIN( 113)											Float g2;
HXDLIN( 113)											int this11 = ((color1 >> 8) & 255);
HXDLIN( 113)											if ((this11 == 0)) {
HXLINE( 113)												g2 = ((Float)0.);
            											}
            											else {
HXLINE( 113)												g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            											}
HXDLIN( 113)											Float b2;
HXDLIN( 113)											int this12 = (color1 & 255);
HXDLIN( 113)											if ((this12 == 0)) {
HXLINE( 113)												b2 = ((Float)0.);
            											}
            											else {
HXLINE( 113)												b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            											}
HXDLIN( 113)											Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 113)											int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 113)											int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 113)											int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 113)											int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 113)											int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 113)											{
HXLINE( 113)												::haxe::io::ArrayBufferViewImpl this13 = temp->image;
HXDLIN( 113)												int value;
HXDLIN( 113)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 113)													value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            												}
            												else {
HXLINE( 113)													value = blended;
            												}
HXDLIN( 113)												bool _hx_tmp;
HXDLIN( 113)												if ((location >= 0)) {
HXLINE( 113)													_hx_tmp = (location < (this13->byteLength >> 2));
            												}
            												else {
HXLINE( 113)													_hx_tmp = false;
            												}
HXDLIN( 113)												if (_hx_tmp) {
HXLINE( 113)													::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 113)													int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 113)													_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 113)													_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 113)													_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 113)													_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            												}
            											}
            										}
            										else {
HXLINE( 113)											::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 113)											int index;
HXDLIN( 113)											if (temp->useVirtualPos) {
HXLINE( 113)												index = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            											}
            											else {
HXLINE( 113)												index = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            											}
HXDLIN( 113)											int value;
HXDLIN( 113)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 113)												value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            											}
            											else {
HXLINE( 113)												value = c;
            											}
HXDLIN( 113)											bool _hx_tmp;
HXDLIN( 113)											if ((index >= 0)) {
HXLINE( 113)												_hx_tmp = (index < (this1->byteLength >> 2));
            											}
            											else {
HXLINE( 113)												_hx_tmp = false;
            											}
HXDLIN( 113)											if (_hx_tmp) {
HXLINE( 113)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 113)												int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 113)												_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 113)												_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 113)												_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 113)												_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            											}
            										}
            									}
HXLINE(  74)									found1 = true;
            								}
            								else {
HXLINE( 113)									if (found1) {
HXLINE( 113)										goto _hx_goto_54;
            									}
            								}
            							}
            						}
            						_hx_goto_54:;
            					}
            				}
            			}
HXDLIN( 113)			::pixelimage::algo::HitTri triHit1;
HXDLIN( 113)			if ((hasHit1 == true)) {
HXLINE( 113)				::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,ax1,ay1,bx3,by3,cx3,cy3,true);
HXDLIN( 113)				if (hasUndo1) {
HXLINE( 113)					v->undoImage = undoImage1;
HXDLIN( 113)					v->undoX = xIter31->start;
HXDLIN( 113)					v->undoY = yIter31->start;
            				}
HXDLIN( 113)				triHit1 = v;
            			}
            			else {
HXLINE( 113)				triHit1 = null();
            			}
HXDLIN( 113)			if (hasHit1) {
HXLINE( 113)				arrTri1[arrTri1->length] = triHit1;
            			}
HXDLIN( 113)			if (hasHit1) {
HXLINE( 113)				::pixelimage::algo::HitTriArray_obj::__alloc( HX_CTX ,arrTri1);
            			}
            			else {
HXLINE( 445)				arrTri1 = null();
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ArcShape_obj,ellipse,(void))

void ArcShape_obj::pie(::pixelimage::ImageStruct temp){
            	HX_GC_STACKFRAME(&_hx_pos_903fa8f91efddc1c_115_pie)
HXLINE( 116)		this->ellipse(temp);
HXLINE( 117)		Float bx = ((this->rx * ::Math_obj::cos(this->startAngle)) + this->rx);
HXLINE( 118)		Float by = ((this->ry * ::Math_obj::sin(this->startAngle)) + this->ry);
HXLINE( 119)		Float currAngle = (this->startAngle + (this->sweepAngle / ( (Float)(2) )));
HXLINE( 120)		Float ax = ((this->strokeWidth * ::Math_obj::cos(currAngle)) + this->rx);
HXLINE( 121)		Float ay = ((this->strokeWidth * ::Math_obj::sin(currAngle)) + this->ry);
HXLINE( 122)		currAngle = (this->startAngle + this->sweepAngle);
HXLINE( 123)		Float cx = ((this->rx * ::Math_obj::cos(currAngle)) + this->rx);
HXLINE( 124)		Float cy = ((this->ry * ::Math_obj::sin(currAngle)) + this->ry);
HXLINE( 125)		{
HXLINE( 125)			Float px = this->rx;
HXDLIN( 125)			Float py = this->ry;
HXDLIN( 125)			int color = this->strokeColor;
HXDLIN( 125)			bool hasHit = true;
HXDLIN( 125)			Float o = (by - py);
HXDLIN( 125)			Float a = (bx - px);
HXDLIN( 125)			Float h = ::Math_obj::pow(((o * o) + (a * a)),((Float)0.5));
HXDLIN( 125)			Float theta = ::Math_obj::atan2(o,a);
HXDLIN( 125)			{
HXLINE( 125)				 ::Dynamic debugCorners = false;
HXDLIN( 125)				if (::hx::IsNull( debugCorners )) {
HXLINE( 878)					debugCorners = false;
            				}
HXLINE( 125)				Float sin = ::Math_obj::sin(theta);
HXDLIN( 125)				Float cos = ::Math_obj::cos(theta);
HXDLIN( 125)				Float radius = (this->strokeWidth / ( (Float)(2) ));
HXDLIN( 125)				Float dx = ((Float)0.1);
HXDLIN( 125)				Float dy = radius;
HXDLIN( 125)				Float cx1 = h;
HXDLIN( 125)				Float cy1 = radius;
HXDLIN( 125)				Float bx1 = h;
HXDLIN( 125)				Float by1 = -(radius);
HXDLIN( 125)				Float ax1 = ((Float)0.1);
HXDLIN( 125)				Float ay1 = -(radius);
HXDLIN( 125)				Float temp1 = ((Float)0.);
HXLINE(  28)				temp1 = (px + ((ax1 * cos) - (ay1 * sin)));
HXLINE(  29)				ay1 = (py + ((ay1 * cos) + (ax1 * sin)));
HXLINE(  30)				ax1 = temp1;
HXLINE(  32)				temp1 = (px + ((bx1 * cos) - (by1 * sin)));
HXLINE(  33)				by1 = (py + ((by1 * cos) + (bx1 * sin)));
HXLINE(  34)				bx1 = temp1;
HXLINE(  36)				temp1 = (px + ((cx1 * cos) - (cy1 * sin)));
HXLINE(  37)				cy1 = (py + ((cy1 * cos) + (cx1 * sin)));
HXLINE(  38)				cx1 = temp1;
HXLINE(  40)				temp1 = (px + ((dx * cos) - (dy * sin)));
HXLINE(  41)				dy = (py + ((dy * cos) + (dx * sin)));
HXLINE(  42)				dx = temp1;
HXLINE( 125)				if (( (bool)(debugCorners) )) {
HXLINE( 125)					{
HXLINE( 125)						Float x = (ax1 - ((Float)6.));
HXDLIN( 125)						Float y = (ay1 - ((Float)6.));
HXDLIN( 125)						int p = ::Std_obj::_hx_int(x);
HXDLIN( 125)						int xx = p;
HXDLIN( 125)						int q = ::Std_obj::_hx_int(y);
HXDLIN( 125)						int maxX = ::Std_obj::_hx_int((x + 12));
HXDLIN( 125)						int maxY = ::Std_obj::_hx_int((y + 12));
HXDLIN( 125)						while(true){
HXLINE( 125)							{
HXLINE( 125)								p = (p + 1);
HXDLIN( 125)								int x = (p - 1);
HXDLIN( 125)								int this1 = -65536;
HXDLIN( 125)								int c = this1;
HXDLIN( 125)								bool _hx_tmp;
HXDLIN( 125)								if ((((c >> 24) & 255) < 254)) {
HXLINE( 125)									_hx_tmp = temp->transparent;
            								}
            								else {
HXLINE( 125)									_hx_tmp = false;
            								}
HXDLIN( 125)								if (_hx_tmp) {
HXLINE( 125)									int location;
HXDLIN( 125)									if (temp->useVirtualPos) {
HXLINE( 125)										location = ::Std_obj::_hx_int(((((( (Float)(q) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            									}
            									else {
HXLINE( 125)										location = ::Std_obj::_hx_int(( (Float)(((q * temp->width) + x)) ));
            									}
HXDLIN( 125)									::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 125)									::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 125)									int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 125)									int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 125)									int this3 = this2;
HXDLIN( 125)									int this4;
HXDLIN( 125)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)										this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            									}
            									else {
HXLINE( 125)										this4 = this3;
            									}
HXDLIN( 125)									Float a1;
HXDLIN( 125)									int this5 = ((this4 >> 24) & 255);
HXDLIN( 125)									if ((this5 == 0)) {
HXLINE( 125)										a1 = ((Float)0.);
            									}
            									else {
HXLINE( 125)										a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            									}
HXDLIN( 125)									Float r1;
HXDLIN( 125)									int this6 = ((this4 >> 16) & 255);
HXDLIN( 125)									if ((this6 == 0)) {
HXLINE( 125)										r1 = ((Float)0.);
            									}
            									else {
HXLINE( 125)										r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            									}
HXDLIN( 125)									Float g1;
HXDLIN( 125)									int this7 = ((this4 >> 8) & 255);
HXDLIN( 125)									if ((this7 == 0)) {
HXLINE( 125)										g1 = ((Float)0.);
            									}
            									else {
HXLINE( 125)										g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            									}
HXDLIN( 125)									Float b1;
HXDLIN( 125)									int this8 = (this4 & 255);
HXDLIN( 125)									if ((this8 == 0)) {
HXLINE( 125)										b1 = ((Float)0.);
            									}
            									else {
HXLINE( 125)										b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            									}
HXDLIN( 125)									Float a2;
HXDLIN( 125)									int this9 = ((-65536 >> 24) & 255);
HXDLIN( 125)									if ((this9 == 0)) {
HXLINE( 125)										a2 = ((Float)0.);
            									}
            									else {
HXLINE( 125)										a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            									}
HXDLIN( 125)									Float r2;
HXDLIN( 125)									int this10 = ((-65536 >> 16) & 255);
HXDLIN( 125)									if ((this10 == 0)) {
HXLINE( 125)										r2 = ((Float)0.);
            									}
            									else {
HXLINE( 125)										r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            									}
HXDLIN( 125)									Float g2;
HXDLIN( 125)									int this11 = ((-65536 >> 8) & 255);
HXDLIN( 125)									if ((this11 == 0)) {
HXLINE( 125)										g2 = ((Float)0.);
            									}
            									else {
HXLINE( 125)										g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            									}
HXDLIN( 125)									Float b2;
HXDLIN( 125)									int this12 = (-65536 & 255);
HXDLIN( 125)									if ((this12 == 0)) {
HXLINE( 125)										b2 = ((Float)0.);
            									}
            									else {
HXLINE( 125)										b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            									}
HXDLIN( 125)									Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 125)									int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 125)									int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 125)									int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 125)									int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 125)									int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 125)									{
HXLINE( 125)										::haxe::io::ArrayBufferViewImpl this13 = temp->image;
HXDLIN( 125)										int value;
HXDLIN( 125)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)											value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            										}
            										else {
HXLINE( 125)											value = blended;
            										}
HXDLIN( 125)										bool _hx_tmp;
HXDLIN( 125)										if ((location >= 0)) {
HXLINE( 125)											_hx_tmp = (location < (this13->byteLength >> 2));
            										}
            										else {
HXLINE( 125)											_hx_tmp = false;
            										}
HXDLIN( 125)										if (_hx_tmp) {
HXLINE( 125)											::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 125)											int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 125)											_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 125)											_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 125)											_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 125)											_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            										}
            									}
            								}
            								else {
HXLINE( 125)									::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 125)									int index;
HXDLIN( 125)									if (temp->useVirtualPos) {
HXLINE( 125)										index = ::Std_obj::_hx_int(((((( (Float)(q) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            									}
            									else {
HXLINE( 125)										index = ::Std_obj::_hx_int(( (Float)(((q * temp->width) + x)) ));
            									}
HXDLIN( 125)									int value;
HXDLIN( 125)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)										value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXLINE( 125)										value = c;
            									}
HXDLIN( 125)									bool _hx_tmp;
HXDLIN( 125)									if ((index >= 0)) {
HXLINE( 125)										_hx_tmp = (index < (this1->byteLength >> 2));
            									}
            									else {
HXLINE( 125)										_hx_tmp = false;
            									}
HXDLIN( 125)									if (_hx_tmp) {
HXLINE( 125)										::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 125)										int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 125)										_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 125)										_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 125)										_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 125)										_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            									}
            								}
            							}
HXDLIN( 125)							if ((p > maxX)) {
HXLINE( 247)								p = xx;
HXLINE( 125)								q = (q + 1);
            							}
HXDLIN( 125)							if ((q > maxY)) {
HXLINE( 125)								goto _hx_goto_56;
            							}
            						}
            						_hx_goto_56:;
            					}
HXDLIN( 125)					{
HXLINE( 125)						Float x1 = (bx1 - ((Float)6.));
HXDLIN( 125)						Float y1 = (by1 - ((Float)6.));
HXDLIN( 125)						int p1 = ::Std_obj::_hx_int(x1);
HXDLIN( 125)						int xx1 = p1;
HXDLIN( 125)						int q1 = ::Std_obj::_hx_int(y1);
HXDLIN( 125)						int maxX1 = ::Std_obj::_hx_int((x1 + 12));
HXDLIN( 125)						int maxY1 = ::Std_obj::_hx_int((y1 + 12));
HXDLIN( 125)						while(true){
HXLINE( 125)							{
HXLINE( 125)								p1 = (p1 + 1);
HXDLIN( 125)								int x = (p1 - 1);
HXDLIN( 125)								int this1 = -16711936;
HXDLIN( 125)								int c = this1;
HXDLIN( 125)								bool _hx_tmp;
HXDLIN( 125)								if ((((c >> 24) & 255) < 254)) {
HXLINE( 125)									_hx_tmp = temp->transparent;
            								}
            								else {
HXLINE( 125)									_hx_tmp = false;
            								}
HXDLIN( 125)								if (_hx_tmp) {
HXLINE( 125)									int location;
HXDLIN( 125)									if (temp->useVirtualPos) {
HXLINE( 125)										location = ::Std_obj::_hx_int(((((( (Float)(q1) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            									}
            									else {
HXLINE( 125)										location = ::Std_obj::_hx_int(( (Float)(((q1 * temp->width) + x)) ));
            									}
HXDLIN( 125)									::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 125)									::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 125)									int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 125)									int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 125)									int this3 = this2;
HXDLIN( 125)									int this4;
HXDLIN( 125)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)										this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            									}
            									else {
HXLINE( 125)										this4 = this3;
            									}
HXDLIN( 125)									Float a1;
HXDLIN( 125)									int this5 = ((this4 >> 24) & 255);
HXDLIN( 125)									if ((this5 == 0)) {
HXLINE( 125)										a1 = ((Float)0.);
            									}
            									else {
HXLINE( 125)										a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            									}
HXDLIN( 125)									Float r1;
HXDLIN( 125)									int this6 = ((this4 >> 16) & 255);
HXDLIN( 125)									if ((this6 == 0)) {
HXLINE( 125)										r1 = ((Float)0.);
            									}
            									else {
HXLINE( 125)										r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            									}
HXDLIN( 125)									Float g1;
HXDLIN( 125)									int this7 = ((this4 >> 8) & 255);
HXDLIN( 125)									if ((this7 == 0)) {
HXLINE( 125)										g1 = ((Float)0.);
            									}
            									else {
HXLINE( 125)										g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            									}
HXDLIN( 125)									Float b1;
HXDLIN( 125)									int this8 = (this4 & 255);
HXDLIN( 125)									if ((this8 == 0)) {
HXLINE( 125)										b1 = ((Float)0.);
            									}
            									else {
HXLINE( 125)										b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            									}
HXDLIN( 125)									Float a2;
HXDLIN( 125)									int this9 = ((-16711936 >> 24) & 255);
HXDLIN( 125)									if ((this9 == 0)) {
HXLINE( 125)										a2 = ((Float)0.);
            									}
            									else {
HXLINE( 125)										a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            									}
HXDLIN( 125)									Float r2;
HXDLIN( 125)									int this10 = ((-16711936 >> 16) & 255);
HXDLIN( 125)									if ((this10 == 0)) {
HXLINE( 125)										r2 = ((Float)0.);
            									}
            									else {
HXLINE( 125)										r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            									}
HXDLIN( 125)									Float g2;
HXDLIN( 125)									int this11 = ((-16711936 >> 8) & 255);
HXDLIN( 125)									if ((this11 == 0)) {
HXLINE( 125)										g2 = ((Float)0.);
            									}
            									else {
HXLINE( 125)										g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            									}
HXDLIN( 125)									Float b2;
HXDLIN( 125)									int this12 = (-16711936 & 255);
HXDLIN( 125)									if ((this12 == 0)) {
HXLINE( 125)										b2 = ((Float)0.);
            									}
            									else {
HXLINE( 125)										b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            									}
HXDLIN( 125)									Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 125)									int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 125)									int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 125)									int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 125)									int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 125)									int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 125)									{
HXLINE( 125)										::haxe::io::ArrayBufferViewImpl this13 = temp->image;
HXDLIN( 125)										int value;
HXDLIN( 125)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)											value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            										}
            										else {
HXLINE( 125)											value = blended;
            										}
HXDLIN( 125)										bool _hx_tmp;
HXDLIN( 125)										if ((location >= 0)) {
HXLINE( 125)											_hx_tmp = (location < (this13->byteLength >> 2));
            										}
            										else {
HXLINE( 125)											_hx_tmp = false;
            										}
HXDLIN( 125)										if (_hx_tmp) {
HXLINE( 125)											::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 125)											int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 125)											_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 125)											_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 125)											_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 125)											_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            										}
            									}
            								}
            								else {
HXLINE( 125)									::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 125)									int index;
HXDLIN( 125)									if (temp->useVirtualPos) {
HXLINE( 125)										index = ::Std_obj::_hx_int(((((( (Float)(q1) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            									}
            									else {
HXLINE( 125)										index = ::Std_obj::_hx_int(( (Float)(((q1 * temp->width) + x)) ));
            									}
HXDLIN( 125)									int value;
HXDLIN( 125)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)										value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXLINE( 125)										value = c;
            									}
HXDLIN( 125)									bool _hx_tmp;
HXDLIN( 125)									if ((index >= 0)) {
HXLINE( 125)										_hx_tmp = (index < (this1->byteLength >> 2));
            									}
            									else {
HXLINE( 125)										_hx_tmp = false;
            									}
HXDLIN( 125)									if (_hx_tmp) {
HXLINE( 125)										::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 125)										int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 125)										_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 125)										_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 125)										_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 125)										_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            									}
            								}
            							}
HXDLIN( 125)							if ((p1 > maxX1)) {
HXLINE( 247)								p1 = xx1;
HXLINE( 125)								q1 = (q1 + 1);
            							}
HXDLIN( 125)							if ((q1 > maxY1)) {
HXLINE( 125)								goto _hx_goto_57;
            							}
            						}
            						_hx_goto_57:;
            					}
HXDLIN( 125)					{
HXLINE( 125)						Float x2 = (cx1 - ((Float)6.));
HXDLIN( 125)						Float y2 = (cy1 - ((Float)6.));
HXDLIN( 125)						int p2 = ::Std_obj::_hx_int(x2);
HXDLIN( 125)						int xx2 = p2;
HXDLIN( 125)						int q2 = ::Std_obj::_hx_int(y2);
HXDLIN( 125)						int maxX2 = ::Std_obj::_hx_int((x2 + 12));
HXDLIN( 125)						int maxY2 = ::Std_obj::_hx_int((y2 + 12));
HXDLIN( 125)						while(true){
HXLINE( 125)							{
HXLINE( 125)								p2 = (p2 + 1);
HXDLIN( 125)								int x = (p2 - 1);
HXDLIN( 125)								int this1 = -16776961;
HXDLIN( 125)								int c = this1;
HXDLIN( 125)								bool _hx_tmp;
HXDLIN( 125)								if ((((c >> 24) & 255) < 254)) {
HXLINE( 125)									_hx_tmp = temp->transparent;
            								}
            								else {
HXLINE( 125)									_hx_tmp = false;
            								}
HXDLIN( 125)								if (_hx_tmp) {
HXLINE( 125)									int location;
HXDLIN( 125)									if (temp->useVirtualPos) {
HXLINE( 125)										location = ::Std_obj::_hx_int(((((( (Float)(q2) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            									}
            									else {
HXLINE( 125)										location = ::Std_obj::_hx_int(( (Float)(((q2 * temp->width) + x)) ));
            									}
HXDLIN( 125)									::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 125)									::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 125)									int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 125)									int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 125)									int this3 = this2;
HXDLIN( 125)									int this4;
HXDLIN( 125)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)										this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            									}
            									else {
HXLINE( 125)										this4 = this3;
            									}
HXDLIN( 125)									Float a1;
HXDLIN( 125)									int this5 = ((this4 >> 24) & 255);
HXDLIN( 125)									if ((this5 == 0)) {
HXLINE( 125)										a1 = ((Float)0.);
            									}
            									else {
HXLINE( 125)										a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            									}
HXDLIN( 125)									Float r1;
HXDLIN( 125)									int this6 = ((this4 >> 16) & 255);
HXDLIN( 125)									if ((this6 == 0)) {
HXLINE( 125)										r1 = ((Float)0.);
            									}
            									else {
HXLINE( 125)										r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            									}
HXDLIN( 125)									Float g1;
HXDLIN( 125)									int this7 = ((this4 >> 8) & 255);
HXDLIN( 125)									if ((this7 == 0)) {
HXLINE( 125)										g1 = ((Float)0.);
            									}
            									else {
HXLINE( 125)										g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            									}
HXDLIN( 125)									Float b1;
HXDLIN( 125)									int this8 = (this4 & 255);
HXDLIN( 125)									if ((this8 == 0)) {
HXLINE( 125)										b1 = ((Float)0.);
            									}
            									else {
HXLINE( 125)										b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            									}
HXDLIN( 125)									Float a2;
HXDLIN( 125)									int this9 = ((-16776961 >> 24) & 255);
HXDLIN( 125)									if ((this9 == 0)) {
HXLINE( 125)										a2 = ((Float)0.);
            									}
            									else {
HXLINE( 125)										a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            									}
HXDLIN( 125)									Float r2;
HXDLIN( 125)									int this10 = ((-16776961 >> 16) & 255);
HXDLIN( 125)									if ((this10 == 0)) {
HXLINE( 125)										r2 = ((Float)0.);
            									}
            									else {
HXLINE( 125)										r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            									}
HXDLIN( 125)									Float g2;
HXDLIN( 125)									int this11 = ((-16776961 >> 8) & 255);
HXDLIN( 125)									if ((this11 == 0)) {
HXLINE( 125)										g2 = ((Float)0.);
            									}
            									else {
HXLINE( 125)										g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            									}
HXDLIN( 125)									Float b2;
HXDLIN( 125)									int this12 = (-16776961 & 255);
HXDLIN( 125)									if ((this12 == 0)) {
HXLINE( 125)										b2 = ((Float)0.);
            									}
            									else {
HXLINE( 125)										b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            									}
HXDLIN( 125)									Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 125)									int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 125)									int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 125)									int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 125)									int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 125)									int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 125)									{
HXLINE( 125)										::haxe::io::ArrayBufferViewImpl this13 = temp->image;
HXDLIN( 125)										int value;
HXDLIN( 125)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)											value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            										}
            										else {
HXLINE( 125)											value = blended;
            										}
HXDLIN( 125)										bool _hx_tmp;
HXDLIN( 125)										if ((location >= 0)) {
HXLINE( 125)											_hx_tmp = (location < (this13->byteLength >> 2));
            										}
            										else {
HXLINE( 125)											_hx_tmp = false;
            										}
HXDLIN( 125)										if (_hx_tmp) {
HXLINE( 125)											::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 125)											int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 125)											_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 125)											_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 125)											_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 125)											_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            										}
            									}
            								}
            								else {
HXLINE( 125)									::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 125)									int index;
HXDLIN( 125)									if (temp->useVirtualPos) {
HXLINE( 125)										index = ::Std_obj::_hx_int(((((( (Float)(q2) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            									}
            									else {
HXLINE( 125)										index = ::Std_obj::_hx_int(( (Float)(((q2 * temp->width) + x)) ));
            									}
HXDLIN( 125)									int value;
HXDLIN( 125)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)										value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXLINE( 125)										value = c;
            									}
HXDLIN( 125)									bool _hx_tmp;
HXDLIN( 125)									if ((index >= 0)) {
HXLINE( 125)										_hx_tmp = (index < (this1->byteLength >> 2));
            									}
            									else {
HXLINE( 125)										_hx_tmp = false;
            									}
HXDLIN( 125)									if (_hx_tmp) {
HXLINE( 125)										::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 125)										int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 125)										_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 125)										_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 125)										_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 125)										_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            									}
            								}
            							}
HXDLIN( 125)							if ((p2 > maxX2)) {
HXLINE( 247)								p2 = xx2;
HXLINE( 125)								q2 = (q2 + 1);
            							}
HXDLIN( 125)							if ((q2 > maxY2)) {
HXLINE( 125)								goto _hx_goto_58;
            							}
            						}
            						_hx_goto_58:;
            					}
HXDLIN( 125)					{
HXLINE( 125)						Float x3 = (dx - ((Float)6.));
HXDLIN( 125)						Float y3 = (dy - ((Float)6.));
HXDLIN( 125)						int p3 = ::Std_obj::_hx_int(x3);
HXDLIN( 125)						int xx3 = p3;
HXDLIN( 125)						int q3 = ::Std_obj::_hx_int(y3);
HXDLIN( 125)						int maxX3 = ::Std_obj::_hx_int((x3 + 12));
HXDLIN( 125)						int maxY3 = ::Std_obj::_hx_int((y3 + 12));
HXDLIN( 125)						while(true){
HXLINE( 125)							{
HXLINE( 125)								p3 = (p3 + 1);
HXDLIN( 125)								int x = (p3 - 1);
HXDLIN( 125)								int this1 = -1048336;
HXDLIN( 125)								int c = this1;
HXDLIN( 125)								bool _hx_tmp;
HXDLIN( 125)								if ((((c >> 24) & 255) < 254)) {
HXLINE( 125)									_hx_tmp = temp->transparent;
            								}
            								else {
HXLINE( 125)									_hx_tmp = false;
            								}
HXDLIN( 125)								if (_hx_tmp) {
HXLINE( 125)									int location;
HXDLIN( 125)									if (temp->useVirtualPos) {
HXLINE( 125)										location = ::Std_obj::_hx_int(((((( (Float)(q3) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            									}
            									else {
HXLINE( 125)										location = ::Std_obj::_hx_int(( (Float)(((q3 * temp->width) + x)) ));
            									}
HXDLIN( 125)									::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 125)									::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 125)									int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 125)									int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 125)									int this3 = this2;
HXDLIN( 125)									int this4;
HXDLIN( 125)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)										this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            									}
            									else {
HXLINE( 125)										this4 = this3;
            									}
HXDLIN( 125)									Float a1;
HXDLIN( 125)									int this5 = ((this4 >> 24) & 255);
HXDLIN( 125)									if ((this5 == 0)) {
HXLINE( 125)										a1 = ((Float)0.);
            									}
            									else {
HXLINE( 125)										a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            									}
HXDLIN( 125)									Float r1;
HXDLIN( 125)									int this6 = ((this4 >> 16) & 255);
HXDLIN( 125)									if ((this6 == 0)) {
HXLINE( 125)										r1 = ((Float)0.);
            									}
            									else {
HXLINE( 125)										r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            									}
HXDLIN( 125)									Float g1;
HXDLIN( 125)									int this7 = ((this4 >> 8) & 255);
HXDLIN( 125)									if ((this7 == 0)) {
HXLINE( 125)										g1 = ((Float)0.);
            									}
            									else {
HXLINE( 125)										g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            									}
HXDLIN( 125)									Float b1;
HXDLIN( 125)									int this8 = (this4 & 255);
HXDLIN( 125)									if ((this8 == 0)) {
HXLINE( 125)										b1 = ((Float)0.);
            									}
            									else {
HXLINE( 125)										b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            									}
HXDLIN( 125)									Float a2;
HXDLIN( 125)									int this9 = ((-1048336 >> 24) & 255);
HXDLIN( 125)									if ((this9 == 0)) {
HXLINE( 125)										a2 = ((Float)0.);
            									}
            									else {
HXLINE( 125)										a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            									}
HXDLIN( 125)									Float r2;
HXDLIN( 125)									int this10 = ((-1048336 >> 16) & 255);
HXDLIN( 125)									if ((this10 == 0)) {
HXLINE( 125)										r2 = ((Float)0.);
            									}
            									else {
HXLINE( 125)										r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            									}
HXDLIN( 125)									Float g2;
HXDLIN( 125)									int this11 = ((-1048336 >> 8) & 255);
HXDLIN( 125)									if ((this11 == 0)) {
HXLINE( 125)										g2 = ((Float)0.);
            									}
            									else {
HXLINE( 125)										g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            									}
HXDLIN( 125)									Float b2;
HXDLIN( 125)									int this12 = (-1048336 & 255);
HXDLIN( 125)									if ((this12 == 0)) {
HXLINE( 125)										b2 = ((Float)0.);
            									}
            									else {
HXLINE( 125)										b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            									}
HXDLIN( 125)									Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 125)									int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 125)									int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 125)									int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 125)									int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 125)									int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 125)									{
HXLINE( 125)										::haxe::io::ArrayBufferViewImpl this13 = temp->image;
HXDLIN( 125)										int value;
HXDLIN( 125)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)											value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            										}
            										else {
HXLINE( 125)											value = blended;
            										}
HXDLIN( 125)										bool _hx_tmp;
HXDLIN( 125)										if ((location >= 0)) {
HXLINE( 125)											_hx_tmp = (location < (this13->byteLength >> 2));
            										}
            										else {
HXLINE( 125)											_hx_tmp = false;
            										}
HXDLIN( 125)										if (_hx_tmp) {
HXLINE( 125)											::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 125)											int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 125)											_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 125)											_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 125)											_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 125)											_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            										}
            									}
            								}
            								else {
HXLINE( 125)									::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 125)									int index;
HXDLIN( 125)									if (temp->useVirtualPos) {
HXLINE( 125)										index = ::Std_obj::_hx_int(((((( (Float)(q3) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            									}
            									else {
HXLINE( 125)										index = ::Std_obj::_hx_int(( (Float)(((q3 * temp->width) + x)) ));
            									}
HXDLIN( 125)									int value;
HXDLIN( 125)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)										value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXLINE( 125)										value = c;
            									}
HXDLIN( 125)									bool _hx_tmp;
HXDLIN( 125)									if ((index >= 0)) {
HXLINE( 125)										_hx_tmp = (index < (this1->byteLength >> 2));
            									}
            									else {
HXLINE( 125)										_hx_tmp = false;
            									}
HXDLIN( 125)									if (_hx_tmp) {
HXLINE( 125)										::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 125)										int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 125)										_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 125)										_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 125)										_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 125)										_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            									}
            								}
            							}
HXDLIN( 125)							if ((p3 > maxX3)) {
HXLINE( 247)								p3 = xx3;
HXLINE( 125)								q3 = (q3 + 1);
            							}
HXDLIN( 125)							if ((q3 > maxY3)) {
HXLINE( 125)								goto _hx_goto_59;
            							}
            						}
            						_hx_goto_59:;
            					}
            				}
HXDLIN( 125)				{
HXLINE( 125)					{
HXLINE( 125)						Float bx2 = bx1;
HXDLIN( 125)						Float by2 = by1;
HXDLIN( 125)						Float cx2 = dx;
HXDLIN( 125)						Float cy2 = dy;
HXDLIN( 125)						bool hasUndo = false;
HXDLIN( 125)						bool adjustWinding = (((((ax1 * by2) - (bx2 * ay1)) + ((bx2 * cy2) - (cx2 * by2))) + ((cx2 * ay1) - (ax1 * cy2))) > 0);
HXDLIN( 125)						if (!(adjustWinding)) {
HXLINE( 125)							Float bx_ = bx2;
HXDLIN( 125)							Float by_ = by2;
HXLINE(  26)							bx2 = cx2;
HXLINE(  27)							by2 = cy2;
HXLINE(  28)							cx2 = bx_;
HXLINE(  29)							cy2 = by_;
            						}
HXLINE( 125)						{
HXLINE( 125)							Float s0 = ((ay1 * cx2) - (ax1 * cy2));
HXDLIN( 125)							Float sx = (cy2 - ay1);
HXDLIN( 125)							Float sy = (ax1 - cx2);
HXDLIN( 125)							Float t0 = ((ax1 * by2) - (ay1 * bx2));
HXDLIN( 125)							Float tx = (ay1 - by2);
HXDLIN( 125)							Float ty = (bx2 - ax1);
HXDLIN( 125)							Float A = ((((-(by2) * cx2) + (ay1 * (-(bx2) + cx2))) + (ax1 * (by2 - cy2))) + (bx2 * cy2));
HXDLIN( 125)							::pixelimage::iter::IntIterStart xIter3;
HXDLIN( 125)							if ((ax1 > bx2)) {
HXLINE( 125)								if ((ax1 > cx2)) {
HXLINE( 125)									int min;
HXDLIN( 125)									if ((bx2 > cx2)) {
HXLINE( 125)										min = ::Math_obj::floor(cx2);
            									}
            									else {
HXLINE( 125)										min = ::Math_obj::floor(bx2);
            									}
HXDLIN( 125)									int ii_min = min;
HXDLIN( 125)									int ii_max = ::Math_obj::ceil(ax1);
HXDLIN( 125)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 125)									xIter3 = this1;
            								}
            								else {
HXLINE( 125)									int ii_min = ::Math_obj::floor(bx2);
HXDLIN( 125)									int ii_max = ::Math_obj::ceil(cx2);
HXDLIN( 125)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 125)									xIter3 = this1;
            								}
            							}
            							else {
HXLINE( 125)								if ((bx2 > cx2)) {
HXLINE( 125)									int min;
HXDLIN( 125)									if ((ax1 > cx2)) {
HXLINE( 125)										min = ::Math_obj::floor(cx2);
            									}
            									else {
HXLINE( 125)										min = ::Math_obj::ceil(ax1);
            									}
HXDLIN( 125)									int ii_min = min;
HXDLIN( 125)									int ii_max = ::Math_obj::ceil(bx2);
HXDLIN( 125)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 125)									xIter3 = this1;
            								}
            								else {
HXLINE( 125)									int ii_min = ::Math_obj::floor(ax1);
HXDLIN( 125)									int ii_max = ::Math_obj::ceil(cx2);
HXDLIN( 125)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 125)									xIter3 = this1;
            								}
            							}
HXDLIN( 125)							::pixelimage::iter::IntIterStart yIter3;
HXDLIN( 125)							if ((ay1 > by2)) {
HXLINE( 125)								if ((ay1 > cy2)) {
HXLINE( 125)									int min;
HXDLIN( 125)									if ((by2 > cy2)) {
HXLINE( 125)										min = ::Math_obj::floor(cy2);
            									}
            									else {
HXLINE( 125)										min = ::Math_obj::floor(by2);
            									}
HXDLIN( 125)									int ii_min = min;
HXDLIN( 125)									int ii_max = ::Math_obj::ceil(ay1);
HXDLIN( 125)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 125)									yIter3 = this1;
            								}
            								else {
HXLINE( 125)									int ii_min = ::Math_obj::floor(by2);
HXDLIN( 125)									int ii_max = ::Math_obj::ceil(cy2);
HXDLIN( 125)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 125)									yIter3 = this1;
            								}
            							}
            							else {
HXLINE( 125)								if ((by2 > cy2)) {
HXLINE( 125)									int min;
HXDLIN( 125)									if ((ay1 > cy2)) {
HXLINE( 125)										min = ::Math_obj::floor(cy2);
            									}
            									else {
HXLINE( 125)										min = ::Math_obj::ceil(ay1);
            									}
HXDLIN( 125)									int ii_min = min;
HXDLIN( 125)									int ii_max = ::Math_obj::ceil(by2);
HXDLIN( 125)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 125)									yIter3 = this1;
            								}
            								else {
HXLINE( 125)									int ii_min = ::Math_obj::floor(ay1);
HXDLIN( 125)									int ii_max = ::Math_obj::ceil(cy2);
HXDLIN( 125)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 125)									yIter3 = this1;
            								}
            							}
HXDLIN( 125)							::pixelimage::ImageStruct undoImage = null();
HXDLIN( 125)							if (hasUndo) {
HXLINE( 125)								int w = ((xIter3->max - xIter3->start) + 1);
HXDLIN( 125)								int h = ((yIter3->max - yIter3->start) + 1);
HXDLIN( 125)								int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN( 125)								::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 125)								::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN( 125)								::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN( 125)								undoImage = this3;
HXDLIN( 125)								{
HXLINE( 125)									int rectLeft = xIter3->start;
HXDLIN( 125)									int rectTop = yIter3->start;
HXDLIN( 125)									int rectRight = xIter3->max;
HXDLIN( 125)									bool forceClear = false;
HXDLIN( 125)									{
HXLINE( 125)										int _g = rectTop;
HXDLIN( 125)										int _g1 = yIter3->max;
HXDLIN( 125)										while((_g < _g1)){
HXLINE( 125)											_g = (_g + 1);
HXDLIN( 125)											int dy = (_g - 1);
HXDLIN( 125)											{
HXLINE( 125)												int _g1 = rectLeft;
HXDLIN( 125)												int _g2 = rectRight;
HXDLIN( 125)												while((_g1 < _g2)){
HXLINE( 125)													_g1 = (_g1 + 1);
HXDLIN( 125)													int dx = (_g1 - 1);
HXDLIN( 125)													::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 125)													int index;
HXDLIN( 125)													if (temp->useVirtualPos) {
HXLINE( 125)														index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - temp->virtualY) * ( (Float)(temp->width) )) + dx) - temp->virtualX));
            													}
            													else {
HXLINE( 125)														index = ::Std_obj::_hx_int(( (Float)(((dy * temp->width) + dx)) ));
            													}
HXDLIN( 125)													::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 125)													int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 125)													int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 125)													int col;
HXDLIN( 125)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)														col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE( 125)														col = c;
            													}
HXDLIN( 125)													bool _hx_tmp;
HXDLIN( 125)													if (temp->useMask) {
HXLINE( 125)														_hx_tmp = ::hx::IsNotNull( temp->mask );
            													}
            													else {
HXLINE( 125)														_hx_tmp = false;
            													}
HXDLIN( 125)													if (_hx_tmp) {
HXLINE( 125)														::pixelimage::ImageStruct this1 = temp->mask;
HXDLIN( 125)														::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 125)														int index;
HXDLIN( 125)														if (this1->useVirtualPos) {
HXLINE( 125)															index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            														}
            														else {
HXLINE( 125)															index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            														}
HXDLIN( 125)														::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 125)														int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 125)														int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 125)														int v;
HXDLIN( 125)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)															v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            														}
            														else {
HXLINE( 125)															v = c;
            														}
HXDLIN( 125)														int this3 = v;
HXDLIN( 125)														int maskPixel = this3;
HXDLIN( 125)														int this4 = col;
HXDLIN( 125)														int this5 = this4;
HXDLIN( 125)														if ((maskPixel == 0)) {
HXLINE( 125)															int this1 = this5;
HXDLIN( 125)															col = this1;
            														}
            														else {
HXLINE( 125)															Float m0;
HXDLIN( 125)															int this1 = ((maskPixel >> 24) & 255);
HXDLIN( 125)															if ((this1 == 0)) {
HXLINE( 125)																m0 = ((Float)0.);
            															}
            															else {
HXLINE( 125)																m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            															}
HXDLIN( 125)															Float m1;
HXDLIN( 125)															int this2 = ((maskPixel >> 16) & 255);
HXDLIN( 125)															if ((this2 == 0)) {
HXLINE( 125)																m1 = ((Float)0.);
            															}
            															else {
HXLINE( 125)																m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            															}
HXDLIN( 125)															Float m2;
HXDLIN( 125)															int this3 = ((maskPixel >> 8) & 255);
HXDLIN( 125)															if ((this3 == 0)) {
HXLINE( 125)																m2 = ((Float)0.);
            															}
            															else {
HXLINE( 125)																m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            															}
HXDLIN( 125)															Float m3;
HXDLIN( 125)															int this4 = (maskPixel & 255);
HXDLIN( 125)															if ((this4 == 0)) {
HXLINE( 125)																m3 = ((Float)0.);
            															}
            															else {
HXLINE( 125)																m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            															}
HXDLIN( 125)															int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN( 125)															int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN( 125)															int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN( 125)															int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN( 125)															col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            														}
            													}
HXDLIN( 125)													if ((col != 0)) {
HXLINE( 125)														int x = (dx - rectLeft);
HXDLIN( 125)														int y = (dy - rectTop);
HXDLIN( 125)														int this1 = col;
HXDLIN( 125)														int c = this1;
HXDLIN( 125)														bool _hx_tmp;
HXDLIN( 125)														if ((((c >> 24) & 255) < 254)) {
HXLINE( 125)															_hx_tmp = undoImage->transparent;
            														}
            														else {
HXLINE( 125)															_hx_tmp = false;
            														}
HXDLIN( 125)														if (_hx_tmp) {
HXLINE( 125)															int location;
HXDLIN( 125)															if (undoImage->useVirtualPos) {
HXLINE( 125)																location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            															}
            															else {
HXLINE( 125)																location = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            															}
HXDLIN( 125)															::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN( 125)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 125)															int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 125)															int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 125)															int this3 = this2;
HXDLIN( 125)															int this4;
HXDLIN( 125)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)																this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            															}
            															else {
HXLINE( 125)																this4 = this3;
            															}
HXDLIN( 125)															Float a1;
HXDLIN( 125)															int this5 = ((this4 >> 24) & 255);
HXDLIN( 125)															if ((this5 == 0)) {
HXLINE( 125)																a1 = ((Float)0.);
            															}
            															else {
HXLINE( 125)																a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            															}
HXDLIN( 125)															Float r1;
HXDLIN( 125)															int this6 = ((this4 >> 16) & 255);
HXDLIN( 125)															if ((this6 == 0)) {
HXLINE( 125)																r1 = ((Float)0.);
            															}
            															else {
HXLINE( 125)																r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            															}
HXDLIN( 125)															Float g1;
HXDLIN( 125)															int this7 = ((this4 >> 8) & 255);
HXDLIN( 125)															if ((this7 == 0)) {
HXLINE( 125)																g1 = ((Float)0.);
            															}
            															else {
HXLINE( 125)																g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            															}
HXDLIN( 125)															Float b1;
HXDLIN( 125)															int this8 = (this4 & 255);
HXDLIN( 125)															if ((this8 == 0)) {
HXLINE( 125)																b1 = ((Float)0.);
            															}
            															else {
HXLINE( 125)																b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            															}
HXDLIN( 125)															Float a2;
HXDLIN( 125)															int this9 = ((col >> 24) & 255);
HXDLIN( 125)															if ((this9 == 0)) {
HXLINE( 125)																a2 = ((Float)0.);
            															}
            															else {
HXLINE( 125)																a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            															}
HXDLIN( 125)															Float r2;
HXDLIN( 125)															int this10 = ((col >> 16) & 255);
HXDLIN( 125)															if ((this10 == 0)) {
HXLINE( 125)																r2 = ((Float)0.);
            															}
            															else {
HXLINE( 125)																r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            															}
HXDLIN( 125)															Float g2;
HXDLIN( 125)															int this11 = ((col >> 8) & 255);
HXDLIN( 125)															if ((this11 == 0)) {
HXLINE( 125)																g2 = ((Float)0.);
            															}
            															else {
HXLINE( 125)																g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            															}
HXDLIN( 125)															Float b2;
HXDLIN( 125)															int this12 = (col & 255);
HXDLIN( 125)															if ((this12 == 0)) {
HXLINE( 125)																b2 = ((Float)0.);
            															}
            															else {
HXLINE( 125)																b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            															}
HXDLIN( 125)															Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 125)															int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 125)															int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 125)															int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 125)															int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 125)															int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 125)															{
HXLINE( 125)																::haxe::io::ArrayBufferViewImpl this13 = undoImage->image;
HXDLIN( 125)																int value;
HXDLIN( 125)																if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)																	value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																}
            																else {
HXLINE( 125)																	value = blended;
            																}
HXDLIN( 125)																bool _hx_tmp;
HXDLIN( 125)																if ((location >= 0)) {
HXLINE( 125)																	_hx_tmp = (location < (this13->byteLength >> 2));
            																}
            																else {
HXLINE( 125)																	_hx_tmp = false;
            																}
HXDLIN( 125)																if (_hx_tmp) {
HXLINE( 125)																	::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 125)																	int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 125)																	_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 125)																	_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 125)																	_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 125)																	_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																}
            															}
            														}
            														else {
HXLINE( 125)															::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN( 125)															int index;
HXDLIN( 125)															if (undoImage->useVirtualPos) {
HXLINE( 125)																index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            															}
            															else {
HXLINE( 125)																index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            															}
HXDLIN( 125)															int value;
HXDLIN( 125)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)																value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            															}
            															else {
HXLINE( 125)																value = c;
            															}
HXDLIN( 125)															bool _hx_tmp;
HXDLIN( 125)															if ((index >= 0)) {
HXLINE( 125)																_hx_tmp = (index < (this1->byteLength >> 2));
            															}
            															else {
HXLINE( 125)																_hx_tmp = false;
            															}
HXDLIN( 125)															if (_hx_tmp) {
HXLINE( 125)																::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 125)																int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 125)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 125)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 125)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 125)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
            													else {
HXLINE( 125)														if (forceClear) {
HXLINE( 125)															::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN( 125)															int x = (dx - rectLeft);
HXDLIN( 125)															int y = (dy - rectTop);
HXDLIN( 125)															int index;
HXDLIN( 125)															if (undoImage->useVirtualPos) {
HXLINE( 125)																index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            															}
            															else {
HXLINE( 125)																index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            															}
HXDLIN( 125)															bool _hx_tmp;
HXDLIN( 125)															if ((index >= 0)) {
HXLINE( 125)																_hx_tmp = (index < (this1->byteLength >> 2));
            															}
            															else {
HXLINE( 125)																_hx_tmp = false;
            															}
HXDLIN( 125)															if (_hx_tmp) {
HXLINE( 125)																::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 125)																int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 125)																_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 125)																_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 125)																_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 125)																_this->b[(pos + 3)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 125)							bool found = false;
HXDLIN( 125)							Float s = ((Float)0.);
HXDLIN( 125)							Float t = ((Float)0.);
HXDLIN( 125)							Float sxx = ((Float)0.);
HXDLIN( 125)							Float txx = ((Float)0.);
HXDLIN( 125)							{
HXLINE( 125)								int _g_min = xIter3->start;
HXDLIN( 125)								int _g_max = xIter3->max;
HXDLIN( 125)								while((_g_min < _g_max)){
HXLINE( 125)									_g_min = (_g_min + 1);
HXDLIN( 125)									int x = (_g_min - 1);
HXLINE(  61)									sxx = (sx * ( (Float)(x) ));
HXLINE(  62)									txx = (tx * ( (Float)(x) ));
HXLINE(  63)									found = false;
HXLINE( 125)									{
HXLINE( 125)										int _g_min1 = yIter3->start;
HXDLIN( 125)										int _g_max = yIter3->max;
HXDLIN( 125)										while((_g_min1 < _g_max)){
HXLINE( 125)											_g_min1 = (_g_min1 + 1);
HXDLIN( 125)											int y = (_g_min1 - 1);
HXLINE(  65)											s = ((s0 + sxx) + (sy * ( (Float)(y) )));
HXLINE(  66)											t = ((t0 + txx) + (ty * ( (Float)(y) )));
HXLINE( 125)											bool _hx_tmp;
HXDLIN( 125)											if (!((s <= 0))) {
HXLINE( 125)												_hx_tmp = (t <= 0);
            											}
            											else {
HXLINE( 125)												_hx_tmp = true;
            											}
HXDLIN( 125)											if (_hx_tmp) {
HXLINE( 125)												if (found) {
HXLINE( 125)													goto _hx_goto_63;
            												}
            											}
            											else {
HXLINE( 125)												if (((s + t) < A)) {
HXLINE( 125)													{
HXLINE( 125)														int this1 = color;
HXDLIN( 125)														int c = this1;
HXDLIN( 125)														bool _hx_tmp;
HXDLIN( 125)														if ((((c >> 24) & 255) < 254)) {
HXLINE( 125)															_hx_tmp = temp->transparent;
            														}
            														else {
HXLINE( 125)															_hx_tmp = false;
            														}
HXDLIN( 125)														if (_hx_tmp) {
HXLINE( 125)															int location;
HXDLIN( 125)															if (temp->useVirtualPos) {
HXLINE( 125)																location = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            															}
            															else {
HXLINE( 125)																location = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            															}
HXDLIN( 125)															::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 125)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 125)															int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 125)															int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 125)															int this3 = this2;
HXDLIN( 125)															int this4;
HXDLIN( 125)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)																this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            															}
            															else {
HXLINE( 125)																this4 = this3;
            															}
HXDLIN( 125)															Float a1;
HXDLIN( 125)															int this5 = ((this4 >> 24) & 255);
HXDLIN( 125)															if ((this5 == 0)) {
HXLINE( 125)																a1 = ((Float)0.);
            															}
            															else {
HXLINE( 125)																a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            															}
HXDLIN( 125)															Float r1;
HXDLIN( 125)															int this6 = ((this4 >> 16) & 255);
HXDLIN( 125)															if ((this6 == 0)) {
HXLINE( 125)																r1 = ((Float)0.);
            															}
            															else {
HXLINE( 125)																r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            															}
HXDLIN( 125)															Float g1;
HXDLIN( 125)															int this7 = ((this4 >> 8) & 255);
HXDLIN( 125)															if ((this7 == 0)) {
HXLINE( 125)																g1 = ((Float)0.);
            															}
            															else {
HXLINE( 125)																g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            															}
HXDLIN( 125)															Float b1;
HXDLIN( 125)															int this8 = (this4 & 255);
HXDLIN( 125)															if ((this8 == 0)) {
HXLINE( 125)																b1 = ((Float)0.);
            															}
            															else {
HXLINE( 125)																b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            															}
HXDLIN( 125)															Float a2;
HXDLIN( 125)															int this9 = ((color >> 24) & 255);
HXDLIN( 125)															if ((this9 == 0)) {
HXLINE( 125)																a2 = ((Float)0.);
            															}
            															else {
HXLINE( 125)																a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            															}
HXDLIN( 125)															Float r2;
HXDLIN( 125)															int this10 = ((color >> 16) & 255);
HXDLIN( 125)															if ((this10 == 0)) {
HXLINE( 125)																r2 = ((Float)0.);
            															}
            															else {
HXLINE( 125)																r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            															}
HXDLIN( 125)															Float g2;
HXDLIN( 125)															int this11 = ((color >> 8) & 255);
HXDLIN( 125)															if ((this11 == 0)) {
HXLINE( 125)																g2 = ((Float)0.);
            															}
            															else {
HXLINE( 125)																g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            															}
HXDLIN( 125)															Float b2;
HXDLIN( 125)															int this12 = (color & 255);
HXDLIN( 125)															if ((this12 == 0)) {
HXLINE( 125)																b2 = ((Float)0.);
            															}
            															else {
HXLINE( 125)																b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            															}
HXDLIN( 125)															Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 125)															int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 125)															int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 125)															int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 125)															int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 125)															int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 125)															{
HXLINE( 125)																::haxe::io::ArrayBufferViewImpl this13 = temp->image;
HXDLIN( 125)																int value;
HXDLIN( 125)																if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)																	value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																}
            																else {
HXLINE( 125)																	value = blended;
            																}
HXDLIN( 125)																bool _hx_tmp;
HXDLIN( 125)																if ((location >= 0)) {
HXLINE( 125)																	_hx_tmp = (location < (this13->byteLength >> 2));
            																}
            																else {
HXLINE( 125)																	_hx_tmp = false;
            																}
HXDLIN( 125)																if (_hx_tmp) {
HXLINE( 125)																	::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 125)																	int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 125)																	_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 125)																	_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 125)																	_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 125)																	_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																}
            															}
            														}
            														else {
HXLINE( 125)															::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 125)															int index;
HXDLIN( 125)															if (temp->useVirtualPos) {
HXLINE( 125)																index = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            															}
            															else {
HXLINE( 125)																index = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            															}
HXDLIN( 125)															int value;
HXDLIN( 125)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)																value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            															}
            															else {
HXLINE( 125)																value = c;
            															}
HXDLIN( 125)															bool _hx_tmp;
HXDLIN( 125)															if ((index >= 0)) {
HXLINE( 125)																_hx_tmp = (index < (this1->byteLength >> 2));
            															}
            															else {
HXLINE( 125)																_hx_tmp = false;
            															}
HXDLIN( 125)															if (_hx_tmp) {
HXLINE( 125)																::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 125)																int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 125)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 125)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 125)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 125)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
HXLINE(  74)													found = true;
            												}
            												else {
HXLINE( 125)													if (found) {
HXLINE( 125)														goto _hx_goto_63;
            													}
            												}
            											}
            										}
            										_hx_goto_63:;
            									}
            								}
            							}
HXDLIN( 125)							if ((hasHit == true)) {
HXLINE( 125)								::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,ax1,ay1,bx2,by2,cx2,cy2,true);
HXDLIN( 125)								if (hasUndo) {
HXLINE( 125)									v->undoImage = undoImage;
HXDLIN( 125)									v->undoX = xIter3->start;
HXDLIN( 125)									v->undoY = yIter3->start;
            								}
            							}
            						}
            					}
HXDLIN( 125)					{
HXLINE( 125)						Float bx3 = cx1;
HXDLIN( 125)						Float by3 = cy1;
HXDLIN( 125)						Float cx3 = dx;
HXDLIN( 125)						Float cy3 = dy;
HXDLIN( 125)						bool hasUndo1 = false;
HXDLIN( 125)						bool adjustWinding1 = (((((bx1 * by3) - (bx3 * by1)) + ((bx3 * cy3) - (cx3 * by3))) + ((cx3 * by1) - (bx1 * cy3))) > 0);
HXDLIN( 125)						if (!(adjustWinding1)) {
HXLINE( 125)							Float bx_ = bx3;
HXDLIN( 125)							Float by_ = by3;
HXLINE(  26)							bx3 = cx3;
HXLINE(  27)							by3 = cy3;
HXLINE(  28)							cx3 = bx_;
HXLINE(  29)							cy3 = by_;
            						}
HXLINE( 125)						{
HXLINE( 125)							Float s01 = ((by1 * cx3) - (bx1 * cy3));
HXDLIN( 125)							Float sx1 = (cy3 - by1);
HXDLIN( 125)							Float sy1 = (bx1 - cx3);
HXDLIN( 125)							Float t01 = ((bx1 * by3) - (by1 * bx3));
HXDLIN( 125)							Float tx1 = (by1 - by3);
HXDLIN( 125)							Float ty1 = (bx3 - bx1);
HXDLIN( 125)							Float A1 = ((((-(by3) * cx3) + (by1 * (-(bx3) + cx3))) + (bx1 * (by3 - cy3))) + (bx3 * cy3));
HXDLIN( 125)							::pixelimage::iter::IntIterStart xIter31;
HXDLIN( 125)							if ((bx1 > bx3)) {
HXLINE( 125)								if ((bx1 > cx3)) {
HXLINE( 125)									int min;
HXDLIN( 125)									if ((bx3 > cx3)) {
HXLINE( 125)										min = ::Math_obj::floor(cx3);
            									}
            									else {
HXLINE( 125)										min = ::Math_obj::floor(bx3);
            									}
HXDLIN( 125)									int ii_min = min;
HXDLIN( 125)									int ii_max = ::Math_obj::ceil(bx1);
HXDLIN( 125)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 125)									xIter31 = this1;
            								}
            								else {
HXLINE( 125)									int ii_min = ::Math_obj::floor(bx3);
HXDLIN( 125)									int ii_max = ::Math_obj::ceil(cx3);
HXDLIN( 125)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 125)									xIter31 = this1;
            								}
            							}
            							else {
HXLINE( 125)								if ((bx3 > cx3)) {
HXLINE( 125)									int min;
HXDLIN( 125)									if ((bx1 > cx3)) {
HXLINE( 125)										min = ::Math_obj::floor(cx3);
            									}
            									else {
HXLINE( 125)										min = ::Math_obj::ceil(bx1);
            									}
HXDLIN( 125)									int ii_min = min;
HXDLIN( 125)									int ii_max = ::Math_obj::ceil(bx3);
HXDLIN( 125)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 125)									xIter31 = this1;
            								}
            								else {
HXLINE( 125)									int ii_min = ::Math_obj::floor(bx1);
HXDLIN( 125)									int ii_max = ::Math_obj::ceil(cx3);
HXDLIN( 125)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 125)									xIter31 = this1;
            								}
            							}
HXDLIN( 125)							::pixelimage::iter::IntIterStart yIter31;
HXDLIN( 125)							if ((by1 > by3)) {
HXLINE( 125)								if ((by1 > cy3)) {
HXLINE( 125)									int min;
HXDLIN( 125)									if ((by3 > cy3)) {
HXLINE( 125)										min = ::Math_obj::floor(cy3);
            									}
            									else {
HXLINE( 125)										min = ::Math_obj::floor(by3);
            									}
HXDLIN( 125)									int ii_min = min;
HXDLIN( 125)									int ii_max = ::Math_obj::ceil(by1);
HXDLIN( 125)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 125)									yIter31 = this1;
            								}
            								else {
HXLINE( 125)									int ii_min = ::Math_obj::floor(by3);
HXDLIN( 125)									int ii_max = ::Math_obj::ceil(cy3);
HXDLIN( 125)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 125)									yIter31 = this1;
            								}
            							}
            							else {
HXLINE( 125)								if ((by3 > cy3)) {
HXLINE( 125)									int min;
HXDLIN( 125)									if ((by1 > cy3)) {
HXLINE( 125)										min = ::Math_obj::floor(cy3);
            									}
            									else {
HXLINE( 125)										min = ::Math_obj::ceil(by1);
            									}
HXDLIN( 125)									int ii_min = min;
HXDLIN( 125)									int ii_max = ::Math_obj::ceil(by3);
HXDLIN( 125)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 125)									yIter31 = this1;
            								}
            								else {
HXLINE( 125)									int ii_min = ::Math_obj::floor(by1);
HXDLIN( 125)									int ii_max = ::Math_obj::ceil(cy3);
HXDLIN( 125)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 125)									yIter31 = this1;
            								}
            							}
HXDLIN( 125)							::pixelimage::ImageStruct undoImage1 = null();
HXDLIN( 125)							if (hasUndo1) {
HXLINE( 125)								int w = ((xIter31->max - xIter31->start) + 1);
HXDLIN( 125)								int h = ((yIter31->max - yIter31->start) + 1);
HXDLIN( 125)								int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN( 125)								::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 125)								::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN( 125)								::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN( 125)								undoImage1 = this3;
HXDLIN( 125)								{
HXLINE( 125)									int rectLeft = xIter31->start;
HXDLIN( 125)									int rectTop = yIter31->start;
HXDLIN( 125)									int rectRight = xIter31->max;
HXDLIN( 125)									bool forceClear = false;
HXDLIN( 125)									{
HXLINE( 125)										int _g = rectTop;
HXDLIN( 125)										int _g1 = yIter31->max;
HXDLIN( 125)										while((_g < _g1)){
HXLINE( 125)											_g = (_g + 1);
HXDLIN( 125)											int dy = (_g - 1);
HXDLIN( 125)											{
HXLINE( 125)												int _g1 = rectLeft;
HXDLIN( 125)												int _g2 = rectRight;
HXDLIN( 125)												while((_g1 < _g2)){
HXLINE( 125)													_g1 = (_g1 + 1);
HXDLIN( 125)													int dx = (_g1 - 1);
HXDLIN( 125)													::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 125)													int index;
HXDLIN( 125)													if (temp->useVirtualPos) {
HXLINE( 125)														index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - temp->virtualY) * ( (Float)(temp->width) )) + dx) - temp->virtualX));
            													}
            													else {
HXLINE( 125)														index = ::Std_obj::_hx_int(( (Float)(((dy * temp->width) + dx)) ));
            													}
HXDLIN( 125)													::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 125)													int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 125)													int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 125)													int col;
HXDLIN( 125)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)														col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE( 125)														col = c;
            													}
HXDLIN( 125)													bool _hx_tmp;
HXDLIN( 125)													if (temp->useMask) {
HXLINE( 125)														_hx_tmp = ::hx::IsNotNull( temp->mask );
            													}
            													else {
HXLINE( 125)														_hx_tmp = false;
            													}
HXDLIN( 125)													if (_hx_tmp) {
HXLINE( 125)														::pixelimage::ImageStruct this1 = temp->mask;
HXDLIN( 125)														::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 125)														int index;
HXDLIN( 125)														if (this1->useVirtualPos) {
HXLINE( 125)															index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            														}
            														else {
HXLINE( 125)															index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            														}
HXDLIN( 125)														::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 125)														int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 125)														int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 125)														int v;
HXDLIN( 125)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)															v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            														}
            														else {
HXLINE( 125)															v = c;
            														}
HXDLIN( 125)														int this3 = v;
HXDLIN( 125)														int maskPixel = this3;
HXDLIN( 125)														int this4 = col;
HXDLIN( 125)														int this5 = this4;
HXDLIN( 125)														if ((maskPixel == 0)) {
HXLINE( 125)															int this1 = this5;
HXDLIN( 125)															col = this1;
            														}
            														else {
HXLINE( 125)															Float m0;
HXDLIN( 125)															int this1 = ((maskPixel >> 24) & 255);
HXDLIN( 125)															if ((this1 == 0)) {
HXLINE( 125)																m0 = ((Float)0.);
            															}
            															else {
HXLINE( 125)																m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            															}
HXDLIN( 125)															Float m1;
HXDLIN( 125)															int this2 = ((maskPixel >> 16) & 255);
HXDLIN( 125)															if ((this2 == 0)) {
HXLINE( 125)																m1 = ((Float)0.);
            															}
            															else {
HXLINE( 125)																m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            															}
HXDLIN( 125)															Float m2;
HXDLIN( 125)															int this3 = ((maskPixel >> 8) & 255);
HXDLIN( 125)															if ((this3 == 0)) {
HXLINE( 125)																m2 = ((Float)0.);
            															}
            															else {
HXLINE( 125)																m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            															}
HXDLIN( 125)															Float m3;
HXDLIN( 125)															int this4 = (maskPixel & 255);
HXDLIN( 125)															if ((this4 == 0)) {
HXLINE( 125)																m3 = ((Float)0.);
            															}
            															else {
HXLINE( 125)																m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            															}
HXDLIN( 125)															int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN( 125)															int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN( 125)															int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN( 125)															int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN( 125)															col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            														}
            													}
HXDLIN( 125)													if ((col != 0)) {
HXLINE( 125)														int x = (dx - rectLeft);
HXDLIN( 125)														int y = (dy - rectTop);
HXDLIN( 125)														int this1 = col;
HXDLIN( 125)														int c = this1;
HXDLIN( 125)														bool _hx_tmp;
HXDLIN( 125)														if ((((c >> 24) & 255) < 254)) {
HXLINE( 125)															_hx_tmp = undoImage1->transparent;
            														}
            														else {
HXLINE( 125)															_hx_tmp = false;
            														}
HXDLIN( 125)														if (_hx_tmp) {
HXLINE( 125)															int location;
HXDLIN( 125)															if (undoImage1->useVirtualPos) {
HXLINE( 125)																location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            															}
            															else {
HXLINE( 125)																location = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            															}
HXDLIN( 125)															::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN( 125)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 125)															int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 125)															int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 125)															int this3 = this2;
HXDLIN( 125)															int this4;
HXDLIN( 125)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)																this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            															}
            															else {
HXLINE( 125)																this4 = this3;
            															}
HXDLIN( 125)															Float a1;
HXDLIN( 125)															int this5 = ((this4 >> 24) & 255);
HXDLIN( 125)															if ((this5 == 0)) {
HXLINE( 125)																a1 = ((Float)0.);
            															}
            															else {
HXLINE( 125)																a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            															}
HXDLIN( 125)															Float r1;
HXDLIN( 125)															int this6 = ((this4 >> 16) & 255);
HXDLIN( 125)															if ((this6 == 0)) {
HXLINE( 125)																r1 = ((Float)0.);
            															}
            															else {
HXLINE( 125)																r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            															}
HXDLIN( 125)															Float g1;
HXDLIN( 125)															int this7 = ((this4 >> 8) & 255);
HXDLIN( 125)															if ((this7 == 0)) {
HXLINE( 125)																g1 = ((Float)0.);
            															}
            															else {
HXLINE( 125)																g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            															}
HXDLIN( 125)															Float b1;
HXDLIN( 125)															int this8 = (this4 & 255);
HXDLIN( 125)															if ((this8 == 0)) {
HXLINE( 125)																b1 = ((Float)0.);
            															}
            															else {
HXLINE( 125)																b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            															}
HXDLIN( 125)															Float a2;
HXDLIN( 125)															int this9 = ((col >> 24) & 255);
HXDLIN( 125)															if ((this9 == 0)) {
HXLINE( 125)																a2 = ((Float)0.);
            															}
            															else {
HXLINE( 125)																a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            															}
HXDLIN( 125)															Float r2;
HXDLIN( 125)															int this10 = ((col >> 16) & 255);
HXDLIN( 125)															if ((this10 == 0)) {
HXLINE( 125)																r2 = ((Float)0.);
            															}
            															else {
HXLINE( 125)																r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            															}
HXDLIN( 125)															Float g2;
HXDLIN( 125)															int this11 = ((col >> 8) & 255);
HXDLIN( 125)															if ((this11 == 0)) {
HXLINE( 125)																g2 = ((Float)0.);
            															}
            															else {
HXLINE( 125)																g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            															}
HXDLIN( 125)															Float b2;
HXDLIN( 125)															int this12 = (col & 255);
HXDLIN( 125)															if ((this12 == 0)) {
HXLINE( 125)																b2 = ((Float)0.);
            															}
            															else {
HXLINE( 125)																b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            															}
HXDLIN( 125)															Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 125)															int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 125)															int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 125)															int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 125)															int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 125)															int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 125)															{
HXLINE( 125)																::haxe::io::ArrayBufferViewImpl this13 = undoImage1->image;
HXDLIN( 125)																int value;
HXDLIN( 125)																if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)																	value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																}
            																else {
HXLINE( 125)																	value = blended;
            																}
HXDLIN( 125)																bool _hx_tmp;
HXDLIN( 125)																if ((location >= 0)) {
HXLINE( 125)																	_hx_tmp = (location < (this13->byteLength >> 2));
            																}
            																else {
HXLINE( 125)																	_hx_tmp = false;
            																}
HXDLIN( 125)																if (_hx_tmp) {
HXLINE( 125)																	::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 125)																	int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 125)																	_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 125)																	_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 125)																	_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 125)																	_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																}
            															}
            														}
            														else {
HXLINE( 125)															::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN( 125)															int index;
HXDLIN( 125)															if (undoImage1->useVirtualPos) {
HXLINE( 125)																index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            															}
            															else {
HXLINE( 125)																index = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            															}
HXDLIN( 125)															int value;
HXDLIN( 125)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)																value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            															}
            															else {
HXLINE( 125)																value = c;
            															}
HXDLIN( 125)															bool _hx_tmp;
HXDLIN( 125)															if ((index >= 0)) {
HXLINE( 125)																_hx_tmp = (index < (this1->byteLength >> 2));
            															}
            															else {
HXLINE( 125)																_hx_tmp = false;
            															}
HXDLIN( 125)															if (_hx_tmp) {
HXLINE( 125)																::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 125)																int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 125)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 125)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 125)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 125)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
            													else {
HXLINE( 125)														if (forceClear) {
HXLINE( 125)															::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN( 125)															int x = (dx - rectLeft);
HXDLIN( 125)															int y = (dy - rectTop);
HXDLIN( 125)															int index;
HXDLIN( 125)															if (undoImage1->useVirtualPos) {
HXLINE( 125)																index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            															}
            															else {
HXLINE( 125)																index = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            															}
HXDLIN( 125)															bool _hx_tmp;
HXDLIN( 125)															if ((index >= 0)) {
HXLINE( 125)																_hx_tmp = (index < (this1->byteLength >> 2));
            															}
            															else {
HXLINE( 125)																_hx_tmp = false;
            															}
HXDLIN( 125)															if (_hx_tmp) {
HXLINE( 125)																::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 125)																int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 125)																_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 125)																_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 125)																_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 125)																_this->b[(pos + 3)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 125)							bool found1 = false;
HXDLIN( 125)							Float s1 = ((Float)0.);
HXDLIN( 125)							Float t1 = ((Float)0.);
HXDLIN( 125)							Float sxx1 = ((Float)0.);
HXDLIN( 125)							Float txx1 = ((Float)0.);
HXDLIN( 125)							{
HXLINE( 125)								int _g_min1 = xIter31->start;
HXDLIN( 125)								int _g_max1 = xIter31->max;
HXDLIN( 125)								while((_g_min1 < _g_max1)){
HXLINE( 125)									_g_min1 = (_g_min1 + 1);
HXDLIN( 125)									int x = (_g_min1 - 1);
HXLINE(  61)									sxx1 = (sx1 * ( (Float)(x) ));
HXLINE(  62)									txx1 = (tx1 * ( (Float)(x) ));
HXLINE(  63)									found1 = false;
HXLINE( 125)									{
HXLINE( 125)										int _g_min = yIter31->start;
HXDLIN( 125)										int _g_max = yIter31->max;
HXDLIN( 125)										while((_g_min < _g_max)){
HXLINE( 125)											_g_min = (_g_min + 1);
HXDLIN( 125)											int y = (_g_min - 1);
HXLINE(  65)											s1 = ((s01 + sxx1) + (sy1 * ( (Float)(y) )));
HXLINE(  66)											t1 = ((t01 + txx1) + (ty1 * ( (Float)(y) )));
HXLINE( 125)											bool _hx_tmp;
HXDLIN( 125)											if (!((s1 <= 0))) {
HXLINE( 125)												_hx_tmp = (t1 <= 0);
            											}
            											else {
HXLINE( 125)												_hx_tmp = true;
            											}
HXDLIN( 125)											if (_hx_tmp) {
HXLINE( 125)												if (found1) {
HXLINE( 125)													goto _hx_goto_67;
            												}
            											}
            											else {
HXLINE( 125)												if (((s1 + t1) < A1)) {
HXLINE( 125)													{
HXLINE( 125)														int this1 = color;
HXDLIN( 125)														int c = this1;
HXDLIN( 125)														bool _hx_tmp;
HXDLIN( 125)														if ((((c >> 24) & 255) < 254)) {
HXLINE( 125)															_hx_tmp = temp->transparent;
            														}
            														else {
HXLINE( 125)															_hx_tmp = false;
            														}
HXDLIN( 125)														if (_hx_tmp) {
HXLINE( 125)															int location;
HXDLIN( 125)															if (temp->useVirtualPos) {
HXLINE( 125)																location = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            															}
            															else {
HXLINE( 125)																location = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            															}
HXDLIN( 125)															::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 125)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 125)															int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 125)															int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 125)															int this3 = this2;
HXDLIN( 125)															int this4;
HXDLIN( 125)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)																this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            															}
            															else {
HXLINE( 125)																this4 = this3;
            															}
HXDLIN( 125)															Float a1;
HXDLIN( 125)															int this5 = ((this4 >> 24) & 255);
HXDLIN( 125)															if ((this5 == 0)) {
HXLINE( 125)																a1 = ((Float)0.);
            															}
            															else {
HXLINE( 125)																a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            															}
HXDLIN( 125)															Float r1;
HXDLIN( 125)															int this6 = ((this4 >> 16) & 255);
HXDLIN( 125)															if ((this6 == 0)) {
HXLINE( 125)																r1 = ((Float)0.);
            															}
            															else {
HXLINE( 125)																r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            															}
HXDLIN( 125)															Float g1;
HXDLIN( 125)															int this7 = ((this4 >> 8) & 255);
HXDLIN( 125)															if ((this7 == 0)) {
HXLINE( 125)																g1 = ((Float)0.);
            															}
            															else {
HXLINE( 125)																g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            															}
HXDLIN( 125)															Float b1;
HXDLIN( 125)															int this8 = (this4 & 255);
HXDLIN( 125)															if ((this8 == 0)) {
HXLINE( 125)																b1 = ((Float)0.);
            															}
            															else {
HXLINE( 125)																b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            															}
HXDLIN( 125)															Float a2;
HXDLIN( 125)															int this9 = ((color >> 24) & 255);
HXDLIN( 125)															if ((this9 == 0)) {
HXLINE( 125)																a2 = ((Float)0.);
            															}
            															else {
HXLINE( 125)																a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            															}
HXDLIN( 125)															Float r2;
HXDLIN( 125)															int this10 = ((color >> 16) & 255);
HXDLIN( 125)															if ((this10 == 0)) {
HXLINE( 125)																r2 = ((Float)0.);
            															}
            															else {
HXLINE( 125)																r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            															}
HXDLIN( 125)															Float g2;
HXDLIN( 125)															int this11 = ((color >> 8) & 255);
HXDLIN( 125)															if ((this11 == 0)) {
HXLINE( 125)																g2 = ((Float)0.);
            															}
            															else {
HXLINE( 125)																g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            															}
HXDLIN( 125)															Float b2;
HXDLIN( 125)															int this12 = (color & 255);
HXDLIN( 125)															if ((this12 == 0)) {
HXLINE( 125)																b2 = ((Float)0.);
            															}
            															else {
HXLINE( 125)																b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            															}
HXDLIN( 125)															Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 125)															int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 125)															int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 125)															int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 125)															int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 125)															int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 125)															{
HXLINE( 125)																::haxe::io::ArrayBufferViewImpl this13 = temp->image;
HXDLIN( 125)																int value;
HXDLIN( 125)																if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)																	value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																}
            																else {
HXLINE( 125)																	value = blended;
            																}
HXDLIN( 125)																bool _hx_tmp;
HXDLIN( 125)																if ((location >= 0)) {
HXLINE( 125)																	_hx_tmp = (location < (this13->byteLength >> 2));
            																}
            																else {
HXLINE( 125)																	_hx_tmp = false;
            																}
HXDLIN( 125)																if (_hx_tmp) {
HXLINE( 125)																	::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 125)																	int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 125)																	_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 125)																	_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 125)																	_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 125)																	_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																}
            															}
            														}
            														else {
HXLINE( 125)															::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 125)															int index;
HXDLIN( 125)															if (temp->useVirtualPos) {
HXLINE( 125)																index = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            															}
            															else {
HXLINE( 125)																index = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            															}
HXDLIN( 125)															int value;
HXDLIN( 125)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 125)																value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            															}
            															else {
HXLINE( 125)																value = c;
            															}
HXDLIN( 125)															bool _hx_tmp;
HXDLIN( 125)															if ((index >= 0)) {
HXLINE( 125)																_hx_tmp = (index < (this1->byteLength >> 2));
            															}
            															else {
HXLINE( 125)																_hx_tmp = false;
            															}
HXDLIN( 125)															if (_hx_tmp) {
HXLINE( 125)																::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 125)																int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 125)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 125)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 125)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 125)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
HXLINE(  74)													found1 = true;
            												}
            												else {
HXLINE( 125)													if (found1) {
HXLINE( 125)														goto _hx_goto_67;
            													}
            												}
            											}
            										}
            										_hx_goto_67:;
            									}
            								}
            							}
HXDLIN( 125)							if ((hasHit == true)) {
HXLINE( 125)								::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,bx1,by1,bx3,by3,cx3,cy3,true);
HXDLIN( 125)								if (hasUndo1) {
HXLINE( 125)									v->undoImage = undoImage1;
HXDLIN( 125)									v->undoX = xIter31->start;
HXDLIN( 125)									v->undoY = yIter31->start;
            								}
            							}
            						}
            					}
HXDLIN( 125)					if ((hasHit == true)) {
HXLINE( 125)						::pixelimage::algo::HitQuad v = ::pixelimage::algo::HitQuad_obj::__alloc( HX_CTX ,ax1,ay1,bx1,by1,cx1,cy1,dx,dy,true);
            					}
            				}
            			}
            		}
HXLINE( 126)		{
HXLINE( 126)			Float px1 = this->rx;
HXDLIN( 126)			Float py1 = this->ry;
HXDLIN( 126)			int color1 = this->strokeColor;
HXDLIN( 126)			bool hasHit1 = true;
HXDLIN( 126)			Float o1 = (cy - py1);
HXDLIN( 126)			Float a1 = (cx - px1);
HXDLIN( 126)			Float h1 = ::Math_obj::pow(((o1 * o1) + (a1 * a1)),((Float)0.5));
HXDLIN( 126)			Float theta1 = ::Math_obj::atan2(o1,a1);
HXDLIN( 126)			{
HXLINE( 126)				 ::Dynamic debugCorners1 = false;
HXDLIN( 126)				if (::hx::IsNull( debugCorners1 )) {
HXLINE( 878)					debugCorners1 = false;
            				}
HXLINE( 126)				Float sin1 = ::Math_obj::sin(theta1);
HXDLIN( 126)				Float cos1 = ::Math_obj::cos(theta1);
HXDLIN( 126)				Float radius1 = (this->strokeWidth / ( (Float)(2) ));
HXDLIN( 126)				Float dx1 = ((Float)0.1);
HXDLIN( 126)				Float dy1 = radius1;
HXDLIN( 126)				Float cx4 = h1;
HXDLIN( 126)				Float cy4 = radius1;
HXDLIN( 126)				Float bx4 = h1;
HXDLIN( 126)				Float by4 = -(radius1);
HXDLIN( 126)				Float ax2 = ((Float)0.1);
HXDLIN( 126)				Float ay2 = -(radius1);
HXDLIN( 126)				Float temp2 = ((Float)0.);
HXLINE(  28)				temp2 = (px1 + ((ax2 * cos1) - (ay2 * sin1)));
HXLINE(  29)				ay2 = (py1 + ((ay2 * cos1) + (ax2 * sin1)));
HXLINE(  30)				ax2 = temp2;
HXLINE(  32)				temp2 = (px1 + ((bx4 * cos1) - (by4 * sin1)));
HXLINE(  33)				by4 = (py1 + ((by4 * cos1) + (bx4 * sin1)));
HXLINE(  34)				bx4 = temp2;
HXLINE(  36)				temp2 = (px1 + ((cx4 * cos1) - (cy4 * sin1)));
HXLINE(  37)				cy4 = (py1 + ((cy4 * cos1) + (cx4 * sin1)));
HXLINE(  38)				cx4 = temp2;
HXLINE(  40)				temp2 = (px1 + ((dx1 * cos1) - (dy1 * sin1)));
HXLINE(  41)				dy1 = (py1 + ((dy1 * cos1) + (dx1 * sin1)));
HXLINE(  42)				dx1 = temp2;
HXLINE( 126)				if (( (bool)(debugCorners1) )) {
HXLINE( 126)					{
HXLINE( 126)						Float x = (ax2 - ((Float)6.));
HXDLIN( 126)						Float y = (ay2 - ((Float)6.));
HXDLIN( 126)						int p = ::Std_obj::_hx_int(x);
HXDLIN( 126)						int xx = p;
HXDLIN( 126)						int q = ::Std_obj::_hx_int(y);
HXDLIN( 126)						int maxX = ::Std_obj::_hx_int((x + 12));
HXDLIN( 126)						int maxY = ::Std_obj::_hx_int((y + 12));
HXDLIN( 126)						while(true){
HXLINE( 126)							{
HXLINE( 126)								p = (p + 1);
HXDLIN( 126)								int x = (p - 1);
HXDLIN( 126)								int this1 = -65536;
HXDLIN( 126)								int c = this1;
HXDLIN( 126)								bool _hx_tmp;
HXDLIN( 126)								if ((((c >> 24) & 255) < 254)) {
HXLINE( 126)									_hx_tmp = temp->transparent;
            								}
            								else {
HXLINE( 126)									_hx_tmp = false;
            								}
HXDLIN( 126)								if (_hx_tmp) {
HXLINE( 126)									int location;
HXDLIN( 126)									if (temp->useVirtualPos) {
HXLINE( 126)										location = ::Std_obj::_hx_int(((((( (Float)(q) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            									}
            									else {
HXLINE( 126)										location = ::Std_obj::_hx_int(( (Float)(((q * temp->width) + x)) ));
            									}
HXDLIN( 126)									::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 126)									::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 126)									int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 126)									int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 126)									int this3 = this2;
HXDLIN( 126)									int this4;
HXDLIN( 126)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 126)										this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            									}
            									else {
HXLINE( 126)										this4 = this3;
            									}
HXDLIN( 126)									Float a1;
HXDLIN( 126)									int this5 = ((this4 >> 24) & 255);
HXDLIN( 126)									if ((this5 == 0)) {
HXLINE( 126)										a1 = ((Float)0.);
            									}
            									else {
HXLINE( 126)										a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            									}
HXDLIN( 126)									Float r1;
HXDLIN( 126)									int this6 = ((this4 >> 16) & 255);
HXDLIN( 126)									if ((this6 == 0)) {
HXLINE( 126)										r1 = ((Float)0.);
            									}
            									else {
HXLINE( 126)										r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            									}
HXDLIN( 126)									Float g1;
HXDLIN( 126)									int this7 = ((this4 >> 8) & 255);
HXDLIN( 126)									if ((this7 == 0)) {
HXLINE( 126)										g1 = ((Float)0.);
            									}
            									else {
HXLINE( 126)										g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            									}
HXDLIN( 126)									Float b1;
HXDLIN( 126)									int this8 = (this4 & 255);
HXDLIN( 126)									if ((this8 == 0)) {
HXLINE( 126)										b1 = ((Float)0.);
            									}
            									else {
HXLINE( 126)										b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            									}
HXDLIN( 126)									Float a2;
HXDLIN( 126)									int this9 = ((-65536 >> 24) & 255);
HXDLIN( 126)									if ((this9 == 0)) {
HXLINE( 126)										a2 = ((Float)0.);
            									}
            									else {
HXLINE( 126)										a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            									}
HXDLIN( 126)									Float r2;
HXDLIN( 126)									int this10 = ((-65536 >> 16) & 255);
HXDLIN( 126)									if ((this10 == 0)) {
HXLINE( 126)										r2 = ((Float)0.);
            									}
            									else {
HXLINE( 126)										r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            									}
HXDLIN( 126)									Float g2;
HXDLIN( 126)									int this11 = ((-65536 >> 8) & 255);
HXDLIN( 126)									if ((this11 == 0)) {
HXLINE( 126)										g2 = ((Float)0.);
            									}
            									else {
HXLINE( 126)										g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            									}
HXDLIN( 126)									Float b2;
HXDLIN( 126)									int this12 = (-65536 & 255);
HXDLIN( 126)									if ((this12 == 0)) {
HXLINE( 126)										b2 = ((Float)0.);
            									}
            									else {
HXLINE( 126)										b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            									}
HXDLIN( 126)									Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 126)									int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 126)									int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 126)									int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 126)									int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 126)									int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 126)									{
HXLINE( 126)										::haxe::io::ArrayBufferViewImpl this13 = temp->image;
HXDLIN( 126)										int value;
HXDLIN( 126)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 126)											value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            										}
            										else {
HXLINE( 126)											value = blended;
            										}
HXDLIN( 126)										bool _hx_tmp;
HXDLIN( 126)										if ((location >= 0)) {
HXLINE( 126)											_hx_tmp = (location < (this13->byteLength >> 2));
            										}
            										else {
HXLINE( 126)											_hx_tmp = false;
            										}
HXDLIN( 126)										if (_hx_tmp) {
HXLINE( 126)											::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 126)											int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 126)											_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 126)											_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 126)											_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 126)											_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            										}
            									}
            								}
            								else {
HXLINE( 126)									::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 126)									int index;
HXDLIN( 126)									if (temp->useVirtualPos) {
HXLINE( 126)										index = ::Std_obj::_hx_int(((((( (Float)(q) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            									}
            									else {
HXLINE( 126)										index = ::Std_obj::_hx_int(( (Float)(((q * temp->width) + x)) ));
            									}
HXDLIN( 126)									int value;
HXDLIN( 126)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 126)										value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXLINE( 126)										value = c;
            									}
HXDLIN( 126)									bool _hx_tmp;
HXDLIN( 126)									if ((index >= 0)) {
HXLINE( 126)										_hx_tmp = (index < (this1->byteLength >> 2));
            									}
            									else {
HXLINE( 126)										_hx_tmp = false;
            									}
HXDLIN( 126)									if (_hx_tmp) {
HXLINE( 126)										::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 126)										int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 126)										_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 126)										_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 126)										_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 126)										_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            									}
            								}
            							}
HXDLIN( 126)							if ((p > maxX)) {
HXLINE( 247)								p = xx;
HXLINE( 126)								q = (q + 1);
            							}
HXDLIN( 126)							if ((q > maxY)) {
HXLINE( 126)								goto _hx_goto_68;
            							}
            						}
            						_hx_goto_68:;
            					}
HXDLIN( 126)					{
HXLINE( 126)						Float x1 = (bx4 - ((Float)6.));
HXDLIN( 126)						Float y1 = (by4 - ((Float)6.));
HXDLIN( 126)						int p1 = ::Std_obj::_hx_int(x1);
HXDLIN( 126)						int xx1 = p1;
HXDLIN( 126)						int q1 = ::Std_obj::_hx_int(y1);
HXDLIN( 126)						int maxX1 = ::Std_obj::_hx_int((x1 + 12));
HXDLIN( 126)						int maxY1 = ::Std_obj::_hx_int((y1 + 12));
HXDLIN( 126)						while(true){
HXLINE( 126)							{
HXLINE( 126)								p1 = (p1 + 1);
HXDLIN( 126)								int x = (p1 - 1);
HXDLIN( 126)								int this1 = -16711936;
HXDLIN( 126)								int c = this1;
HXDLIN( 126)								bool _hx_tmp;
HXDLIN( 126)								if ((((c >> 24) & 255) < 254)) {
HXLINE( 126)									_hx_tmp = temp->transparent;
            								}
            								else {
HXLINE( 126)									_hx_tmp = false;
            								}
HXDLIN( 126)								if (_hx_tmp) {
HXLINE( 126)									int location;
HXDLIN( 126)									if (temp->useVirtualPos) {
HXLINE( 126)										location = ::Std_obj::_hx_int(((((( (Float)(q1) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            									}
            									else {
HXLINE( 126)										location = ::Std_obj::_hx_int(( (Float)(((q1 * temp->width) + x)) ));
            									}
HXDLIN( 126)									::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 126)									::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 126)									int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 126)									int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 126)									int this3 = this2;
HXDLIN( 126)									int this4;
HXDLIN( 126)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 126)										this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            									}
            									else {
HXLINE( 126)										this4 = this3;
            									}
HXDLIN( 126)									Float a1;
HXDLIN( 126)									int this5 = ((this4 >> 24) & 255);
HXDLIN( 126)									if ((this5 == 0)) {
HXLINE( 126)										a1 = ((Float)0.);
            									}
            									else {
HXLINE( 126)										a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            									}
HXDLIN( 126)									Float r1;
HXDLIN( 126)									int this6 = ((this4 >> 16) & 255);
HXDLIN( 126)									if ((this6 == 0)) {
HXLINE( 126)										r1 = ((Float)0.);
            									}
            									else {
HXLINE( 126)										r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            									}
HXDLIN( 126)									Float g1;
HXDLIN( 126)									int this7 = ((this4 >> 8) & 255);
HXDLIN( 126)									if ((this7 == 0)) {
HXLINE( 126)										g1 = ((Float)0.);
            									}
            									else {
HXLINE( 126)										g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            									}
HXDLIN( 126)									Float b1;
HXDLIN( 126)									int this8 = (this4 & 255);
HXDLIN( 126)									if ((this8 == 0)) {
HXLINE( 126)										b1 = ((Float)0.);
            									}
            									else {
HXLINE( 126)										b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            									}
HXDLIN( 126)									Float a2;
HXDLIN( 126)									int this9 = ((-16711936 >> 24) & 255);
HXDLIN( 126)									if ((this9 == 0)) {
HXLINE( 126)										a2 = ((Float)0.);
            									}
            									else {
HXLINE( 126)										a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            									}
HXDLIN( 126)									Float r2;
HXDLIN( 126)									int this10 = ((-16711936 >> 16) & 255);
HXDLIN( 126)									if ((this10 == 0)) {
HXLINE( 126)										r2 = ((Float)0.);
            									}
            									else {
HXLINE( 126)										r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            									}
HXDLIN( 126)									Float g2;
HXDLIN( 126)									int this11 = ((-16711936 >> 8) & 255);
HXDLIN( 126)									if ((this11 == 0)) {
HXLINE( 126)										g2 = ((Float)0.);
            									}
            									else {
HXLINE( 126)										g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            									}
HXDLIN( 126)									Float b2;
HXDLIN( 126)									int this12 = (-16711936 & 255);
HXDLIN( 126)									if ((this12 == 0)) {
HXLINE( 126)										b2 = ((Float)0.);
            									}
            									else {
HXLINE( 126)										b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            									}
HXDLIN( 126)									Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 126)									int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 126)									int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 126)									int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 126)									int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 126)									int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 126)									{
HXLINE( 126)										::haxe::io::ArrayBufferViewImpl this13 = temp->image;
HXDLIN( 126)										int value;
HXDLIN( 126)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 126)											value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            										}
            										else {
HXLINE( 126)											value = blended;
            										}
HXDLIN( 126)										bool _hx_tmp;
HXDLIN( 126)										if ((location >= 0)) {
HXLINE( 126)											_hx_tmp = (location < (this13->byteLength >> 2));
            										}
            										else {
HXLINE( 126)											_hx_tmp = false;
            										}
HXDLIN( 126)										if (_hx_tmp) {
HXLINE( 126)											::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 126)											int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 126)											_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 126)											_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 126)											_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 126)											_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            										}
            									}
            								}
            								else {
HXLINE( 126)									::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 126)									int index;
HXDLIN( 126)									if (temp->useVirtualPos) {
HXLINE( 126)										index = ::Std_obj::_hx_int(((((( (Float)(q1) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            									}
            									else {
HXLINE( 126)										index = ::Std_obj::_hx_int(( (Float)(((q1 * temp->width) + x)) ));
            									}
HXDLIN( 126)									int value;
HXDLIN( 126)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 126)										value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXLINE( 126)										value = c;
            									}
HXDLIN( 126)									bool _hx_tmp;
HXDLIN( 126)									if ((index >= 0)) {
HXLINE( 126)										_hx_tmp = (index < (this1->byteLength >> 2));
            									}
            									else {
HXLINE( 126)										_hx_tmp = false;
            									}
HXDLIN( 126)									if (_hx_tmp) {
HXLINE( 126)										::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 126)										int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 126)										_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 126)										_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 126)										_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 126)										_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            									}
            								}
            							}
HXDLIN( 126)							if ((p1 > maxX1)) {
HXLINE( 247)								p1 = xx1;
HXLINE( 126)								q1 = (q1 + 1);
            							}
HXDLIN( 126)							if ((q1 > maxY1)) {
HXLINE( 126)								goto _hx_goto_69;
            							}
            						}
            						_hx_goto_69:;
            					}
HXDLIN( 126)					{
HXLINE( 126)						Float x2 = (cx4 - ((Float)6.));
HXDLIN( 126)						Float y2 = (cy4 - ((Float)6.));
HXDLIN( 126)						int p2 = ::Std_obj::_hx_int(x2);
HXDLIN( 126)						int xx2 = p2;
HXDLIN( 126)						int q2 = ::Std_obj::_hx_int(y2);
HXDLIN( 126)						int maxX2 = ::Std_obj::_hx_int((x2 + 12));
HXDLIN( 126)						int maxY2 = ::Std_obj::_hx_int((y2 + 12));
HXDLIN( 126)						while(true){
HXLINE( 126)							{
HXLINE( 126)								p2 = (p2 + 1);
HXDLIN( 126)								int x = (p2 - 1);
HXDLIN( 126)								int this1 = -16776961;
HXDLIN( 126)								int c = this1;
HXDLIN( 126)								bool _hx_tmp;
HXDLIN( 126)								if ((((c >> 24) & 255) < 254)) {
HXLINE( 126)									_hx_tmp = temp->transparent;
            								}
            								else {
HXLINE( 126)									_hx_tmp = false;
            								}
HXDLIN( 126)								if (_hx_tmp) {
HXLINE( 126)									int location;
HXDLIN( 126)									if (temp->useVirtualPos) {
HXLINE( 126)										location = ::Std_obj::_hx_int(((((( (Float)(q2) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            									}
            									else {
HXLINE( 126)										location = ::Std_obj::_hx_int(( (Float)(((q2 * temp->width) + x)) ));
            									}
HXDLIN( 126)									::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 126)									::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 126)									int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 126)									int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 126)									int this3 = this2;
HXDLIN( 126)									int this4;
HXDLIN( 126)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 126)										this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            									}
            									else {
HXLINE( 126)										this4 = this3;
            									}
HXDLIN( 126)									Float a1;
HXDLIN( 126)									int this5 = ((this4 >> 24) & 255);
HXDLIN( 126)									if ((this5 == 0)) {
HXLINE( 126)										a1 = ((Float)0.);
            									}
            									else {
HXLINE( 126)										a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            									}
HXDLIN( 126)									Float r1;
HXDLIN( 126)									int this6 = ((this4 >> 16) & 255);
HXDLIN( 126)									if ((this6 == 0)) {
HXLINE( 126)										r1 = ((Float)0.);
            									}
            									else {
HXLINE( 126)										r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            									}
HXDLIN( 126)									Float g1;
HXDLIN( 126)									int this7 = ((this4 >> 8) & 255);
HXDLIN( 126)									if ((this7 == 0)) {
HXLINE( 126)										g1 = ((Float)0.);
            									}
            									else {
HXLINE( 126)										g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            									}
HXDLIN( 126)									Float b1;
HXDLIN( 126)									int this8 = (this4 & 255);
HXDLIN( 126)									if ((this8 == 0)) {
HXLINE( 126)										b1 = ((Float)0.);
            									}
            									else {
HXLINE( 126)										b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            									}
HXDLIN( 126)									Float a2;
HXDLIN( 126)									int this9 = ((-16776961 >> 24) & 255);
HXDLIN( 126)									if ((this9 == 0)) {
HXLINE( 126)										a2 = ((Float)0.);
            									}
            									else {
HXLINE( 126)										a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            									}
HXDLIN( 126)									Float r2;
HXDLIN( 126)									int this10 = ((-16776961 >> 16) & 255);
HXDLIN( 126)									if ((this10 == 0)) {
HXLINE( 126)										r2 = ((Float)0.);
            									}
            									else {
HXLINE( 126)										r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            									}
HXDLIN( 126)									Float g2;
HXDLIN( 126)									int this11 = ((-16776961 >> 8) & 255);
HXDLIN( 126)									if ((this11 == 0)) {
HXLINE( 126)										g2 = ((Float)0.);
            									}
            									else {
HXLINE( 126)										g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            									}
HXDLIN( 126)									Float b2;
HXDLIN( 126)									int this12 = (-16776961 & 255);
HXDLIN( 126)									if ((this12 == 0)) {
HXLINE( 126)										b2 = ((Float)0.);
            									}
            									else {
HXLINE( 126)										b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            									}
HXDLIN( 126)									Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 126)									int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 126)									int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 126)									int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 126)									int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 126)									int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 126)									{
HXLINE( 126)										::haxe::io::ArrayBufferViewImpl this13 = temp->image;
HXDLIN( 126)										int value;
HXDLIN( 126)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 126)											value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            										}
            										else {
HXLINE( 126)											value = blended;
            										}
HXDLIN( 126)										bool _hx_tmp;
HXDLIN( 126)										if ((location >= 0)) {
HXLINE( 126)											_hx_tmp = (location < (this13->byteLength >> 2));
            										}
            										else {
HXLINE( 126)											_hx_tmp = false;
            										}
HXDLIN( 126)										if (_hx_tmp) {
HXLINE( 126)											::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 126)											int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 126)											_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 126)											_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 126)											_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 126)											_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            										}
            									}
            								}
            								else {
HXLINE( 126)									::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 126)									int index;
HXDLIN( 126)									if (temp->useVirtualPos) {
HXLINE( 126)										index = ::Std_obj::_hx_int(((((( (Float)(q2) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            									}
            									else {
HXLINE( 126)										index = ::Std_obj::_hx_int(( (Float)(((q2 * temp->width) + x)) ));
            									}
HXDLIN( 126)									int value;
HXDLIN( 126)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 126)										value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXLINE( 126)										value = c;
            									}
HXDLIN( 126)									bool _hx_tmp;
HXDLIN( 126)									if ((index >= 0)) {
HXLINE( 126)										_hx_tmp = (index < (this1->byteLength >> 2));
            									}
            									else {
HXLINE( 126)										_hx_tmp = false;
            									}
HXDLIN( 126)									if (_hx_tmp) {
HXLINE( 126)										::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 126)										int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 126)										_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 126)										_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 126)										_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 126)										_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            									}
            								}
            							}
HXDLIN( 126)							if ((p2 > maxX2)) {
HXLINE( 247)								p2 = xx2;
HXLINE( 126)								q2 = (q2 + 1);
            							}
HXDLIN( 126)							if ((q2 > maxY2)) {
HXLINE( 126)								goto _hx_goto_70;
            							}
            						}
            						_hx_goto_70:;
            					}
HXDLIN( 126)					{
HXLINE( 126)						Float x3 = (dx1 - ((Float)6.));
HXDLIN( 126)						Float y3 = (dy1 - ((Float)6.));
HXDLIN( 126)						int p3 = ::Std_obj::_hx_int(x3);
HXDLIN( 126)						int xx3 = p3;
HXDLIN( 126)						int q3 = ::Std_obj::_hx_int(y3);
HXDLIN( 126)						int maxX3 = ::Std_obj::_hx_int((x3 + 12));
HXDLIN( 126)						int maxY3 = ::Std_obj::_hx_int((y3 + 12));
HXDLIN( 126)						while(true){
HXLINE( 126)							{
HXLINE( 126)								p3 = (p3 + 1);
HXDLIN( 126)								int x = (p3 - 1);
HXDLIN( 126)								int this1 = -1048336;
HXDLIN( 126)								int c = this1;
HXDLIN( 126)								bool _hx_tmp;
HXDLIN( 126)								if ((((c >> 24) & 255) < 254)) {
HXLINE( 126)									_hx_tmp = temp->transparent;
            								}
            								else {
HXLINE( 126)									_hx_tmp = false;
            								}
HXDLIN( 126)								if (_hx_tmp) {
HXLINE( 126)									int location;
HXDLIN( 126)									if (temp->useVirtualPos) {
HXLINE( 126)										location = ::Std_obj::_hx_int(((((( (Float)(q3) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            									}
            									else {
HXLINE( 126)										location = ::Std_obj::_hx_int(( (Float)(((q3 * temp->width) + x)) ));
            									}
HXDLIN( 126)									::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 126)									::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 126)									int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 126)									int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 126)									int this3 = this2;
HXDLIN( 126)									int this4;
HXDLIN( 126)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 126)										this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            									}
            									else {
HXLINE( 126)										this4 = this3;
            									}
HXDLIN( 126)									Float a1;
HXDLIN( 126)									int this5 = ((this4 >> 24) & 255);
HXDLIN( 126)									if ((this5 == 0)) {
HXLINE( 126)										a1 = ((Float)0.);
            									}
            									else {
HXLINE( 126)										a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            									}
HXDLIN( 126)									Float r1;
HXDLIN( 126)									int this6 = ((this4 >> 16) & 255);
HXDLIN( 126)									if ((this6 == 0)) {
HXLINE( 126)										r1 = ((Float)0.);
            									}
            									else {
HXLINE( 126)										r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            									}
HXDLIN( 126)									Float g1;
HXDLIN( 126)									int this7 = ((this4 >> 8) & 255);
HXDLIN( 126)									if ((this7 == 0)) {
HXLINE( 126)										g1 = ((Float)0.);
            									}
            									else {
HXLINE( 126)										g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            									}
HXDLIN( 126)									Float b1;
HXDLIN( 126)									int this8 = (this4 & 255);
HXDLIN( 126)									if ((this8 == 0)) {
HXLINE( 126)										b1 = ((Float)0.);
            									}
            									else {
HXLINE( 126)										b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            									}
HXDLIN( 126)									Float a2;
HXDLIN( 126)									int this9 = ((-1048336 >> 24) & 255);
HXDLIN( 126)									if ((this9 == 0)) {
HXLINE( 126)										a2 = ((Float)0.);
            									}
            									else {
HXLINE( 126)										a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            									}
HXDLIN( 126)									Float r2;
HXDLIN( 126)									int this10 = ((-1048336 >> 16) & 255);
HXDLIN( 126)									if ((this10 == 0)) {
HXLINE( 126)										r2 = ((Float)0.);
            									}
            									else {
HXLINE( 126)										r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            									}
HXDLIN( 126)									Float g2;
HXDLIN( 126)									int this11 = ((-1048336 >> 8) & 255);
HXDLIN( 126)									if ((this11 == 0)) {
HXLINE( 126)										g2 = ((Float)0.);
            									}
            									else {
HXLINE( 126)										g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            									}
HXDLIN( 126)									Float b2;
HXDLIN( 126)									int this12 = (-1048336 & 255);
HXDLIN( 126)									if ((this12 == 0)) {
HXLINE( 126)										b2 = ((Float)0.);
            									}
            									else {
HXLINE( 126)										b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            									}
HXDLIN( 126)									Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 126)									int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 126)									int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 126)									int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 126)									int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 126)									int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 126)									{
HXLINE( 126)										::haxe::io::ArrayBufferViewImpl this13 = temp->image;
HXDLIN( 126)										int value;
HXDLIN( 126)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 126)											value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            										}
            										else {
HXLINE( 126)											value = blended;
            										}
HXDLIN( 126)										bool _hx_tmp;
HXDLIN( 126)										if ((location >= 0)) {
HXLINE( 126)											_hx_tmp = (location < (this13->byteLength >> 2));
            										}
            										else {
HXLINE( 126)											_hx_tmp = false;
            										}
HXDLIN( 126)										if (_hx_tmp) {
HXLINE( 126)											::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 126)											int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 126)											_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 126)											_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 126)											_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 126)											_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            										}
            									}
            								}
            								else {
HXLINE( 126)									::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 126)									int index;
HXDLIN( 126)									if (temp->useVirtualPos) {
HXLINE( 126)										index = ::Std_obj::_hx_int(((((( (Float)(q3) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            									}
            									else {
HXLINE( 126)										index = ::Std_obj::_hx_int(( (Float)(((q3 * temp->width) + x)) ));
            									}
HXDLIN( 126)									int value;
HXDLIN( 126)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 126)										value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXLINE( 126)										value = c;
            									}
HXDLIN( 126)									bool _hx_tmp;
HXDLIN( 126)									if ((index >= 0)) {
HXLINE( 126)										_hx_tmp = (index < (this1->byteLength >> 2));
            									}
            									else {
HXLINE( 126)										_hx_tmp = false;
            									}
HXDLIN( 126)									if (_hx_tmp) {
HXLINE( 126)										::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 126)										int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 126)										_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 126)										_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 126)										_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 126)										_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            									}
            								}
            							}
HXDLIN( 126)							if ((p3 > maxX3)) {
HXLINE( 247)								p3 = xx3;
HXLINE( 126)								q3 = (q3 + 1);
            							}
HXDLIN( 126)							if ((q3 > maxY3)) {
HXLINE( 126)								goto _hx_goto_71;
            							}
            						}
            						_hx_goto_71:;
            					}
            				}
HXDLIN( 126)				{
HXLINE( 126)					{
HXLINE( 126)						Float bx5 = bx4;
HXDLIN( 126)						Float by5 = by4;
HXDLIN( 126)						Float cx5 = dx1;
HXDLIN( 126)						Float cy5 = dy1;
HXDLIN( 126)						bool hasUndo2 = false;
HXDLIN( 126)						bool adjustWinding2 = (((((ax2 * by5) - (bx5 * ay2)) + ((bx5 * cy5) - (cx5 * by5))) + ((cx5 * ay2) - (ax2 * cy5))) > 0);
HXDLIN( 126)						if (!(adjustWinding2)) {
HXLINE( 126)							Float bx_ = bx5;
HXDLIN( 126)							Float by_ = by5;
HXLINE(  26)							bx5 = cx5;
HXLINE(  27)							by5 = cy5;
HXLINE(  28)							cx5 = bx_;
HXLINE(  29)							cy5 = by_;
            						}
HXLINE( 126)						{
HXLINE( 126)							Float s02 = ((ay2 * cx5) - (ax2 * cy5));
HXDLIN( 126)							Float sx2 = (cy5 - ay2);
HXDLIN( 126)							Float sy2 = (ax2 - cx5);
HXDLIN( 126)							Float t02 = ((ax2 * by5) - (ay2 * bx5));
HXDLIN( 126)							Float tx2 = (ay2 - by5);
HXDLIN( 126)							Float ty2 = (bx5 - ax2);
HXDLIN( 126)							Float A2 = ((((-(by5) * cx5) + (ay2 * (-(bx5) + cx5))) + (ax2 * (by5 - cy5))) + (bx5 * cy5));
HXDLIN( 126)							::pixelimage::iter::IntIterStart xIter32;
HXDLIN( 126)							if ((ax2 > bx5)) {
HXLINE( 126)								if ((ax2 > cx5)) {
HXLINE( 126)									int min;
HXDLIN( 126)									if ((bx5 > cx5)) {
HXLINE( 126)										min = ::Math_obj::floor(cx5);
            									}
            									else {
HXLINE( 126)										min = ::Math_obj::floor(bx5);
            									}
HXDLIN( 126)									int ii_min = min;
HXDLIN( 126)									int ii_max = ::Math_obj::ceil(ax2);
HXDLIN( 126)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 126)									xIter32 = this1;
            								}
            								else {
HXLINE( 126)									int ii_min = ::Math_obj::floor(bx5);
HXDLIN( 126)									int ii_max = ::Math_obj::ceil(cx5);
HXDLIN( 126)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 126)									xIter32 = this1;
            								}
            							}
            							else {
HXLINE( 126)								if ((bx5 > cx5)) {
HXLINE( 126)									int min;
HXDLIN( 126)									if ((ax2 > cx5)) {
HXLINE( 126)										min = ::Math_obj::floor(cx5);
            									}
            									else {
HXLINE( 126)										min = ::Math_obj::ceil(ax2);
            									}
HXDLIN( 126)									int ii_min = min;
HXDLIN( 126)									int ii_max = ::Math_obj::ceil(bx5);
HXDLIN( 126)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 126)									xIter32 = this1;
            								}
            								else {
HXLINE( 126)									int ii_min = ::Math_obj::floor(ax2);
HXDLIN( 126)									int ii_max = ::Math_obj::ceil(cx5);
HXDLIN( 126)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 126)									xIter32 = this1;
            								}
            							}
HXDLIN( 126)							::pixelimage::iter::IntIterStart yIter32;
HXDLIN( 126)							if ((ay2 > by5)) {
HXLINE( 126)								if ((ay2 > cy5)) {
HXLINE( 126)									int min;
HXDLIN( 126)									if ((by5 > cy5)) {
HXLINE( 126)										min = ::Math_obj::floor(cy5);
            									}
            									else {
HXLINE( 126)										min = ::Math_obj::floor(by5);
            									}
HXDLIN( 126)									int ii_min = min;
HXDLIN( 126)									int ii_max = ::Math_obj::ceil(ay2);
HXDLIN( 126)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 126)									yIter32 = this1;
            								}
            								else {
HXLINE( 126)									int ii_min = ::Math_obj::floor(by5);
HXDLIN( 126)									int ii_max = ::Math_obj::ceil(cy5);
HXDLIN( 126)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 126)									yIter32 = this1;
            								}
            							}
            							else {
HXLINE( 126)								if ((by5 > cy5)) {
HXLINE( 126)									int min;
HXDLIN( 126)									if ((ay2 > cy5)) {
HXLINE( 126)										min = ::Math_obj::floor(cy5);
            									}
            									else {
HXLINE( 126)										min = ::Math_obj::ceil(ay2);
            									}
HXDLIN( 126)									int ii_min = min;
HXDLIN( 126)									int ii_max = ::Math_obj::ceil(by5);
HXDLIN( 126)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 126)									yIter32 = this1;
            								}
            								else {
HXLINE( 126)									int ii_min = ::Math_obj::floor(ay2);
HXDLIN( 126)									int ii_max = ::Math_obj::ceil(cy5);
HXDLIN( 126)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 126)									yIter32 = this1;
            								}
            							}
HXDLIN( 126)							::pixelimage::ImageStruct undoImage2 = null();
HXDLIN( 126)							if (hasUndo2) {
HXLINE( 126)								int w = ((xIter32->max - xIter32->start) + 1);
HXDLIN( 126)								int h = ((yIter32->max - yIter32->start) + 1);
HXDLIN( 126)								int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN( 126)								::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 126)								::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN( 126)								::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN( 126)								undoImage2 = this3;
HXDLIN( 126)								{
HXLINE( 126)									int rectLeft = xIter32->start;
HXDLIN( 126)									int rectTop = yIter32->start;
HXDLIN( 126)									int rectRight = xIter32->max;
HXDLIN( 126)									bool forceClear = false;
HXDLIN( 126)									{
HXLINE( 126)										int _g = rectTop;
HXDLIN( 126)										int _g1 = yIter32->max;
HXDLIN( 126)										while((_g < _g1)){
HXLINE( 126)											_g = (_g + 1);
HXDLIN( 126)											int dy = (_g - 1);
HXDLIN( 126)											{
HXLINE( 126)												int _g1 = rectLeft;
HXDLIN( 126)												int _g2 = rectRight;
HXDLIN( 126)												while((_g1 < _g2)){
HXLINE( 126)													_g1 = (_g1 + 1);
HXDLIN( 126)													int dx = (_g1 - 1);
HXDLIN( 126)													::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 126)													int index;
HXDLIN( 126)													if (temp->useVirtualPos) {
HXLINE( 126)														index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - temp->virtualY) * ( (Float)(temp->width) )) + dx) - temp->virtualX));
            													}
            													else {
HXLINE( 126)														index = ::Std_obj::_hx_int(( (Float)(((dy * temp->width) + dx)) ));
            													}
HXDLIN( 126)													::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 126)													int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 126)													int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 126)													int col;
HXDLIN( 126)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 126)														col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE( 126)														col = c;
            													}
HXDLIN( 126)													bool _hx_tmp;
HXDLIN( 126)													if (temp->useMask) {
HXLINE( 126)														_hx_tmp = ::hx::IsNotNull( temp->mask );
            													}
            													else {
HXLINE( 126)														_hx_tmp = false;
            													}
HXDLIN( 126)													if (_hx_tmp) {
HXLINE( 126)														::pixelimage::ImageStruct this1 = temp->mask;
HXDLIN( 126)														::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 126)														int index;
HXDLIN( 126)														if (this1->useVirtualPos) {
HXLINE( 126)															index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            														}
            														else {
HXLINE( 126)															index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            														}
HXDLIN( 126)														::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 126)														int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 126)														int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 126)														int v;
HXDLIN( 126)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 126)															v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            														}
            														else {
HXLINE( 126)															v = c;
            														}
HXDLIN( 126)														int this3 = v;
HXDLIN( 126)														int maskPixel = this3;
HXDLIN( 126)														int this4 = col;
HXDLIN( 126)														int this5 = this4;
HXDLIN( 126)														if ((maskPixel == 0)) {
HXLINE( 126)															int this1 = this5;
HXDLIN( 126)															col = this1;
            														}
            														else {
HXLINE( 126)															Float m0;
HXDLIN( 126)															int this1 = ((maskPixel >> 24) & 255);
HXDLIN( 126)															if ((this1 == 0)) {
HXLINE( 126)																m0 = ((Float)0.);
            															}
            															else {
HXLINE( 126)																m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            															}
HXDLIN( 126)															Float m1;
HXDLIN( 126)															int this2 = ((maskPixel >> 16) & 255);
HXDLIN( 126)															if ((this2 == 0)) {
HXLINE( 126)																m1 = ((Float)0.);
            															}
            															else {
HXLINE( 126)																m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            															}
HXDLIN( 126)															Float m2;
HXDLIN( 126)															int this3 = ((maskPixel >> 8) & 255);
HXDLIN( 126)															if ((this3 == 0)) {
HXLINE( 126)																m2 = ((Float)0.);
            															}
            															else {
HXLINE( 126)																m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            															}
HXDLIN( 126)															Float m3;
HXDLIN( 126)															int this4 = (maskPixel & 255);
HXDLIN( 126)															if ((this4 == 0)) {
HXLINE( 126)																m3 = ((Float)0.);
            															}
            															else {
HXLINE( 126)																m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            															}
HXDLIN( 126)															int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN( 126)															int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN( 126)															int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN( 126)															int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN( 126)															col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            														}
            													}
HXDLIN( 126)													if ((col != 0)) {
HXLINE( 126)														int x = (dx - rectLeft);
HXDLIN( 126)														int y = (dy - rectTop);
HXDLIN( 126)														int this1 = col;
HXDLIN( 126)														int c = this1;
HXDLIN( 126)														bool _hx_tmp;
HXDLIN( 126)														if ((((c >> 24) & 255) < 254)) {
HXLINE( 126)															_hx_tmp = undoImage2->transparent;
            														}
            														else {
HXLINE( 126)															_hx_tmp = false;
            														}
HXDLIN( 126)														if (_hx_tmp) {
HXLINE( 126)															int location;
HXDLIN( 126)															if (undoImage2->useVirtualPos) {
HXLINE( 126)																location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage2->virtualY) * ( (Float)(undoImage2->width) )) + x) - undoImage2->virtualX));
            															}
            															else {
HXLINE( 126)																location = ::Std_obj::_hx_int(( (Float)(((y * undoImage2->width) + x)) ));
            															}
HXDLIN( 126)															::haxe::io::ArrayBufferViewImpl this1 = undoImage2->image;
HXDLIN( 126)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 126)															int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 126)															int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 126)															int this3 = this2;
HXDLIN( 126)															int this4;
HXDLIN( 126)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 126)																this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            															}
            															else {
HXLINE( 126)																this4 = this3;
            															}
HXDLIN( 126)															Float a1;
HXDLIN( 126)															int this5 = ((this4 >> 24) & 255);
HXDLIN( 126)															if ((this5 == 0)) {
HXLINE( 126)																a1 = ((Float)0.);
            															}
            															else {
HXLINE( 126)																a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            															}
HXDLIN( 126)															Float r1;
HXDLIN( 126)															int this6 = ((this4 >> 16) & 255);
HXDLIN( 126)															if ((this6 == 0)) {
HXLINE( 126)																r1 = ((Float)0.);
            															}
            															else {
HXLINE( 126)																r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            															}
HXDLIN( 126)															Float g1;
HXDLIN( 126)															int this7 = ((this4 >> 8) & 255);
HXDLIN( 126)															if ((this7 == 0)) {
HXLINE( 126)																g1 = ((Float)0.);
            															}
            															else {
HXLINE( 126)																g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            															}
HXDLIN( 126)															Float b1;
HXDLIN( 126)															int this8 = (this4 & 255);
HXDLIN( 126)															if ((this8 == 0)) {
HXLINE( 126)																b1 = ((Float)0.);
            															}
            															else {
HXLINE( 126)																b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            															}
HXDLIN( 126)															Float a2;
HXDLIN( 126)															int this9 = ((col >> 24) & 255);
HXDLIN( 126)															if ((this9 == 0)) {
HXLINE( 126)																a2 = ((Float)0.);
            															}
            															else {
HXLINE( 126)																a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            															}
HXDLIN( 126)															Float r2;
HXDLIN( 126)															int this10 = ((col >> 16) & 255);
HXDLIN( 126)															if ((this10 == 0)) {
HXLINE( 126)																r2 = ((Float)0.);
            															}
            															else {
HXLINE( 126)																r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            															}
HXDLIN( 126)															Float g2;
HXDLIN( 126)															int this11 = ((col >> 8) & 255);
HXDLIN( 126)															if ((this11 == 0)) {
HXLINE( 126)																g2 = ((Float)0.);
            															}
            															else {
HXLINE( 126)																g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            															}
HXDLIN( 126)															Float b2;
HXDLIN( 126)															int this12 = (col & 255);
HXDLIN( 126)															if ((this12 == 0)) {
HXLINE( 126)																b2 = ((Float)0.);
            															}
            															else {
HXLINE( 126)																b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            															}
HXDLIN( 126)															Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 126)															int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 126)															int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 126)															int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 126)															int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 126)															int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 126)															{
HXLINE( 126)																::haxe::io::ArrayBufferViewImpl this13 = undoImage2->image;
HXDLIN( 126)																int value;
HXDLIN( 126)																if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 126)																	value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																}
            																else {
HXLINE( 126)																	value = blended;
            																}
HXDLIN( 126)																bool _hx_tmp;
HXDLIN( 126)																if ((location >= 0)) {
HXLINE( 126)																	_hx_tmp = (location < (this13->byteLength >> 2));
            																}
            																else {
HXLINE( 126)																	_hx_tmp = false;
            																}
HXDLIN( 126)																if (_hx_tmp) {
HXLINE( 126)																	::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 126)																	int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 126)																	_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 126)																	_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 126)																	_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 126)																	_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																}
            															}
            														}
            														else {
HXLINE( 126)															::haxe::io::ArrayBufferViewImpl this1 = undoImage2->image;
HXDLIN( 126)															int index;
HXDLIN( 126)															if (undoImage2->useVirtualPos) {
HXLINE( 126)																index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage2->virtualY) * ( (Float)(undoImage2->width) )) + x) - undoImage2->virtualX));
            															}
            															else {
HXLINE( 126)																index = ::Std_obj::_hx_int(( (Float)(((y * undoImage2->width) + x)) ));
            															}
HXDLIN( 126)															int value;
HXDLIN( 126)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 126)																value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            															}
            															else {
HXLINE( 126)																value = c;
            															}
HXDLIN( 126)															bool _hx_tmp;
HXDLIN( 126)															if ((index >= 0)) {
HXLINE( 126)																_hx_tmp = (index < (this1->byteLength >> 2));
            															}
            															else {
HXLINE( 126)																_hx_tmp = false;
            															}
HXDLIN( 126)															if (_hx_tmp) {
HXLINE( 126)																::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 126)																int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 126)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 126)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 126)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 126)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
            													else {
HXLINE( 126)														if (forceClear) {
HXLINE( 126)															::haxe::io::ArrayBufferViewImpl this1 = undoImage2->image;
HXDLIN( 126)															int x = (dx - rectLeft);
HXDLIN( 126)															int y = (dy - rectTop);
HXDLIN( 126)															int index;
HXDLIN( 126)															if (undoImage2->useVirtualPos) {
HXLINE( 126)																index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage2->virtualY) * ( (Float)(undoImage2->width) )) + x) - undoImage2->virtualX));
            															}
            															else {
HXLINE( 126)																index = ::Std_obj::_hx_int(( (Float)(((y * undoImage2->width) + x)) ));
            															}
HXDLIN( 126)															bool _hx_tmp;
HXDLIN( 126)															if ((index >= 0)) {
HXLINE( 126)																_hx_tmp = (index < (this1->byteLength >> 2));
            															}
            															else {
HXLINE( 126)																_hx_tmp = false;
            															}
HXDLIN( 126)															if (_hx_tmp) {
HXLINE( 126)																::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 126)																int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 126)																_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 126)																_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 126)																_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 126)																_this->b[(pos + 3)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 126)							bool found2 = false;
HXDLIN( 126)							Float s2 = ((Float)0.);
HXDLIN( 126)							Float t2 = ((Float)0.);
HXDLIN( 126)							Float sxx2 = ((Float)0.);
HXDLIN( 126)							Float txx2 = ((Float)0.);
HXDLIN( 126)							{
HXLINE( 126)								int _g_min2 = xIter32->start;
HXDLIN( 126)								int _g_max2 = xIter32->max;
HXDLIN( 126)								while((_g_min2 < _g_max2)){
HXLINE( 126)									_g_min2 = (_g_min2 + 1);
HXDLIN( 126)									int x = (_g_min2 - 1);
HXLINE(  61)									sxx2 = (sx2 * ( (Float)(x) ));
HXLINE(  62)									txx2 = (tx2 * ( (Float)(x) ));
HXLINE(  63)									found2 = false;
HXLINE( 126)									{
HXLINE( 126)										int _g_min = yIter32->start;
HXDLIN( 126)										int _g_max = yIter32->max;
HXDLIN( 126)										while((_g_min < _g_max)){
HXLINE( 126)											_g_min = (_g_min + 1);
HXDLIN( 126)											int y = (_g_min - 1);
HXLINE(  65)											s2 = ((s02 + sxx2) + (sy2 * ( (Float)(y) )));
HXLINE(  66)											t2 = ((t02 + txx2) + (ty2 * ( (Float)(y) )));
HXLINE( 126)											bool _hx_tmp;
HXDLIN( 126)											if (!((s2 <= 0))) {
HXLINE( 126)												_hx_tmp = (t2 <= 0);
            											}
            											else {
HXLINE( 126)												_hx_tmp = true;
            											}
HXDLIN( 126)											if (_hx_tmp) {
HXLINE( 126)												if (found2) {
HXLINE( 126)													goto _hx_goto_75;
            												}
            											}
            											else {
HXLINE( 126)												if (((s2 + t2) < A2)) {
HXLINE( 126)													{
HXLINE( 126)														int this1 = color1;
HXDLIN( 126)														int c = this1;
HXDLIN( 126)														bool _hx_tmp;
HXDLIN( 126)														if ((((c >> 24) & 255) < 254)) {
HXLINE( 126)															_hx_tmp = temp->transparent;
            														}
            														else {
HXLINE( 126)															_hx_tmp = false;
            														}
HXDLIN( 126)														if (_hx_tmp) {
HXLINE( 126)															int location;
HXDLIN( 126)															if (temp->useVirtualPos) {
HXLINE( 126)																location = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            															}
            															else {
HXLINE( 126)																location = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            															}
HXDLIN( 126)															::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 126)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 126)															int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 126)															int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 126)															int this3 = this2;
HXDLIN( 126)															int this4;
HXDLIN( 126)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 126)																this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            															}
            															else {
HXLINE( 126)																this4 = this3;
            															}
HXDLIN( 126)															Float a1;
HXDLIN( 126)															int this5 = ((this4 >> 24) & 255);
HXDLIN( 126)															if ((this5 == 0)) {
HXLINE( 126)																a1 = ((Float)0.);
            															}
            															else {
HXLINE( 126)																a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            															}
HXDLIN( 126)															Float r1;
HXDLIN( 126)															int this6 = ((this4 >> 16) & 255);
HXDLIN( 126)															if ((this6 == 0)) {
HXLINE( 126)																r1 = ((Float)0.);
            															}
            															else {
HXLINE( 126)																r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            															}
HXDLIN( 126)															Float g1;
HXDLIN( 126)															int this7 = ((this4 >> 8) & 255);
HXDLIN( 126)															if ((this7 == 0)) {
HXLINE( 126)																g1 = ((Float)0.);
            															}
            															else {
HXLINE( 126)																g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            															}
HXDLIN( 126)															Float b1;
HXDLIN( 126)															int this8 = (this4 & 255);
HXDLIN( 126)															if ((this8 == 0)) {
HXLINE( 126)																b1 = ((Float)0.);
            															}
            															else {
HXLINE( 126)																b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            															}
HXDLIN( 126)															Float a2;
HXDLIN( 126)															int this9 = ((color1 >> 24) & 255);
HXDLIN( 126)															if ((this9 == 0)) {
HXLINE( 126)																a2 = ((Float)0.);
            															}
            															else {
HXLINE( 126)																a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            															}
HXDLIN( 126)															Float r2;
HXDLIN( 126)															int this10 = ((color1 >> 16) & 255);
HXDLIN( 126)															if ((this10 == 0)) {
HXLINE( 126)																r2 = ((Float)0.);
            															}
            															else {
HXLINE( 126)																r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            															}
HXDLIN( 126)															Float g2;
HXDLIN( 126)															int this11 = ((color1 >> 8) & 255);
HXDLIN( 126)															if ((this11 == 0)) {
HXLINE( 126)																g2 = ((Float)0.);
            															}
            															else {
HXLINE( 126)																g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            															}
HXDLIN( 126)															Float b2;
HXDLIN( 126)															int this12 = (color1 & 255);
HXDLIN( 126)															if ((this12 == 0)) {
HXLINE( 126)																b2 = ((Float)0.);
            															}
            															else {
HXLINE( 126)																b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            															}
HXDLIN( 126)															Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 126)															int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 126)															int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 126)															int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 126)															int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 126)															int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 126)															{
HXLINE( 126)																::haxe::io::ArrayBufferViewImpl this13 = temp->image;
HXDLIN( 126)																int value;
HXDLIN( 126)																if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 126)																	value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																}
            																else {
HXLINE( 126)																	value = blended;
            																}
HXDLIN( 126)																bool _hx_tmp;
HXDLIN( 126)																if ((location >= 0)) {
HXLINE( 126)																	_hx_tmp = (location < (this13->byteLength >> 2));
            																}
            																else {
HXLINE( 126)																	_hx_tmp = false;
            																}
HXDLIN( 126)																if (_hx_tmp) {
HXLINE( 126)																	::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 126)																	int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 126)																	_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 126)																	_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 126)																	_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 126)																	_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																}
            															}
            														}
            														else {
HXLINE( 126)															::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 126)															int index;
HXDLIN( 126)															if (temp->useVirtualPos) {
HXLINE( 126)																index = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            															}
            															else {
HXLINE( 126)																index = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            															}
HXDLIN( 126)															int value;
HXDLIN( 126)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 126)																value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            															}
            															else {
HXLINE( 126)																value = c;
            															}
HXDLIN( 126)															bool _hx_tmp;
HXDLIN( 126)															if ((index >= 0)) {
HXLINE( 126)																_hx_tmp = (index < (this1->byteLength >> 2));
            															}
            															else {
HXLINE( 126)																_hx_tmp = false;
            															}
HXDLIN( 126)															if (_hx_tmp) {
HXLINE( 126)																::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 126)																int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 126)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 126)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 126)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 126)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
HXLINE(  74)													found2 = true;
            												}
            												else {
HXLINE( 126)													if (found2) {
HXLINE( 126)														goto _hx_goto_75;
            													}
            												}
            											}
            										}
            										_hx_goto_75:;
            									}
            								}
            							}
HXDLIN( 126)							if ((hasHit1 == true)) {
HXLINE( 126)								::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,ax2,ay2,bx5,by5,cx5,cy5,true);
HXDLIN( 126)								if (hasUndo2) {
HXLINE( 126)									v->undoImage = undoImage2;
HXDLIN( 126)									v->undoX = xIter32->start;
HXDLIN( 126)									v->undoY = yIter32->start;
            								}
            							}
            						}
            					}
HXDLIN( 126)					{
HXLINE( 126)						Float bx6 = cx4;
HXDLIN( 126)						Float by6 = cy4;
HXDLIN( 126)						Float cx6 = dx1;
HXDLIN( 126)						Float cy6 = dy1;
HXDLIN( 126)						bool hasUndo3 = false;
HXDLIN( 126)						bool adjustWinding3 = (((((bx4 * by6) - (bx6 * by4)) + ((bx6 * cy6) - (cx6 * by6))) + ((cx6 * by4) - (bx4 * cy6))) > 0);
HXDLIN( 126)						if (!(adjustWinding3)) {
HXLINE( 126)							Float bx_ = bx6;
HXDLIN( 126)							Float by_ = by6;
HXLINE(  26)							bx6 = cx6;
HXLINE(  27)							by6 = cy6;
HXLINE(  28)							cx6 = bx_;
HXLINE(  29)							cy6 = by_;
            						}
HXLINE( 126)						{
HXLINE( 126)							Float s03 = ((by4 * cx6) - (bx4 * cy6));
HXDLIN( 126)							Float sx3 = (cy6 - by4);
HXDLIN( 126)							Float sy3 = (bx4 - cx6);
HXDLIN( 126)							Float t03 = ((bx4 * by6) - (by4 * bx6));
HXDLIN( 126)							Float tx3 = (by4 - by6);
HXDLIN( 126)							Float ty3 = (bx6 - bx4);
HXDLIN( 126)							Float A3 = ((((-(by6) * cx6) + (by4 * (-(bx6) + cx6))) + (bx4 * (by6 - cy6))) + (bx6 * cy6));
HXDLIN( 126)							::pixelimage::iter::IntIterStart xIter33;
HXDLIN( 126)							if ((bx4 > bx6)) {
HXLINE( 126)								if ((bx4 > cx6)) {
HXLINE( 126)									int min;
HXDLIN( 126)									if ((bx6 > cx6)) {
HXLINE( 126)										min = ::Math_obj::floor(cx6);
            									}
            									else {
HXLINE( 126)										min = ::Math_obj::floor(bx6);
            									}
HXDLIN( 126)									int ii_min = min;
HXDLIN( 126)									int ii_max = ::Math_obj::ceil(bx4);
HXDLIN( 126)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 126)									xIter33 = this1;
            								}
            								else {
HXLINE( 126)									int ii_min = ::Math_obj::floor(bx6);
HXDLIN( 126)									int ii_max = ::Math_obj::ceil(cx6);
HXDLIN( 126)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 126)									xIter33 = this1;
            								}
            							}
            							else {
HXLINE( 126)								if ((bx6 > cx6)) {
HXLINE( 126)									int min;
HXDLIN( 126)									if ((bx4 > cx6)) {
HXLINE( 126)										min = ::Math_obj::floor(cx6);
            									}
            									else {
HXLINE( 126)										min = ::Math_obj::ceil(bx4);
            									}
HXDLIN( 126)									int ii_min = min;
HXDLIN( 126)									int ii_max = ::Math_obj::ceil(bx6);
HXDLIN( 126)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 126)									xIter33 = this1;
            								}
            								else {
HXLINE( 126)									int ii_min = ::Math_obj::floor(bx4);
HXDLIN( 126)									int ii_max = ::Math_obj::ceil(cx6);
HXDLIN( 126)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 126)									xIter33 = this1;
            								}
            							}
HXDLIN( 126)							::pixelimage::iter::IntIterStart yIter33;
HXDLIN( 126)							if ((by4 > by6)) {
HXLINE( 126)								if ((by4 > cy6)) {
HXLINE( 126)									int min;
HXDLIN( 126)									if ((by6 > cy6)) {
HXLINE( 126)										min = ::Math_obj::floor(cy6);
            									}
            									else {
HXLINE( 126)										min = ::Math_obj::floor(by6);
            									}
HXDLIN( 126)									int ii_min = min;
HXDLIN( 126)									int ii_max = ::Math_obj::ceil(by4);
HXDLIN( 126)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 126)									yIter33 = this1;
            								}
            								else {
HXLINE( 126)									int ii_min = ::Math_obj::floor(by6);
HXDLIN( 126)									int ii_max = ::Math_obj::ceil(cy6);
HXDLIN( 126)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 126)									yIter33 = this1;
            								}
            							}
            							else {
HXLINE( 126)								if ((by6 > cy6)) {
HXLINE( 126)									int min;
HXDLIN( 126)									if ((by4 > cy6)) {
HXLINE( 126)										min = ::Math_obj::floor(cy6);
            									}
            									else {
HXLINE( 126)										min = ::Math_obj::ceil(by4);
            									}
HXDLIN( 126)									int ii_min = min;
HXDLIN( 126)									int ii_max = ::Math_obj::ceil(by6);
HXDLIN( 126)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 126)									yIter33 = this1;
            								}
            								else {
HXLINE( 126)									int ii_min = ::Math_obj::floor(by4);
HXDLIN( 126)									int ii_max = ::Math_obj::ceil(cy6);
HXDLIN( 126)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 126)									yIter33 = this1;
            								}
            							}
HXDLIN( 126)							::pixelimage::ImageStruct undoImage3 = null();
HXDLIN( 126)							if (hasUndo3) {
HXLINE( 126)								int w = ((xIter33->max - xIter33->start) + 1);
HXDLIN( 126)								int h = ((yIter33->max - yIter33->start) + 1);
HXDLIN( 126)								int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN( 126)								::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 126)								::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN( 126)								::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN( 126)								undoImage3 = this3;
HXDLIN( 126)								{
HXLINE( 126)									int rectLeft = xIter33->start;
HXDLIN( 126)									int rectTop = yIter33->start;
HXDLIN( 126)									int rectRight = xIter33->max;
HXDLIN( 126)									bool forceClear = false;
HXDLIN( 126)									{
HXLINE( 126)										int _g = rectTop;
HXDLIN( 126)										int _g1 = yIter33->max;
HXDLIN( 126)										while((_g < _g1)){
HXLINE( 126)											_g = (_g + 1);
HXDLIN( 126)											int dy = (_g - 1);
HXDLIN( 126)											{
HXLINE( 126)												int _g1 = rectLeft;
HXDLIN( 126)												int _g2 = rectRight;
HXDLIN( 126)												while((_g1 < _g2)){
HXLINE( 126)													_g1 = (_g1 + 1);
HXDLIN( 126)													int dx = (_g1 - 1);
HXDLIN( 126)													::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 126)													int index;
HXDLIN( 126)													if (temp->useVirtualPos) {
HXLINE( 126)														index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - temp->virtualY) * ( (Float)(temp->width) )) + dx) - temp->virtualX));
            													}
            													else {
HXLINE( 126)														index = ::Std_obj::_hx_int(( (Float)(((dy * temp->width) + dx)) ));
            													}
HXDLIN( 126)													::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 126)													int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 126)													int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 126)													int col;
HXDLIN( 126)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 126)														col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE( 126)														col = c;
            													}
HXDLIN( 126)													bool _hx_tmp;
HXDLIN( 126)													if (temp->useMask) {
HXLINE( 126)														_hx_tmp = ::hx::IsNotNull( temp->mask );
            													}
            													else {
HXLINE( 126)														_hx_tmp = false;
            													}
HXDLIN( 126)													if (_hx_tmp) {
HXLINE( 126)														::pixelimage::ImageStruct this1 = temp->mask;
HXDLIN( 126)														::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 126)														int index;
HXDLIN( 126)														if (this1->useVirtualPos) {
HXLINE( 126)															index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            														}
            														else {
HXLINE( 126)															index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            														}
HXDLIN( 126)														::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 126)														int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 126)														int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 126)														int v;
HXDLIN( 126)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 126)															v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            														}
            														else {
HXLINE( 126)															v = c;
            														}
HXDLIN( 126)														int this3 = v;
HXDLIN( 126)														int maskPixel = this3;
HXDLIN( 126)														int this4 = col;
HXDLIN( 126)														int this5 = this4;
HXDLIN( 126)														if ((maskPixel == 0)) {
HXLINE( 126)															int this1 = this5;
HXDLIN( 126)															col = this1;
            														}
            														else {
HXLINE( 126)															Float m0;
HXDLIN( 126)															int this1 = ((maskPixel >> 24) & 255);
HXDLIN( 126)															if ((this1 == 0)) {
HXLINE( 126)																m0 = ((Float)0.);
            															}
            															else {
HXLINE( 126)																m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            															}
HXDLIN( 126)															Float m1;
HXDLIN( 126)															int this2 = ((maskPixel >> 16) & 255);
HXDLIN( 126)															if ((this2 == 0)) {
HXLINE( 126)																m1 = ((Float)0.);
            															}
            															else {
HXLINE( 126)																m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            															}
HXDLIN( 126)															Float m2;
HXDLIN( 126)															int this3 = ((maskPixel >> 8) & 255);
HXDLIN( 126)															if ((this3 == 0)) {
HXLINE( 126)																m2 = ((Float)0.);
            															}
            															else {
HXLINE( 126)																m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            															}
HXDLIN( 126)															Float m3;
HXDLIN( 126)															int this4 = (maskPixel & 255);
HXDLIN( 126)															if ((this4 == 0)) {
HXLINE( 126)																m3 = ((Float)0.);
            															}
            															else {
HXLINE( 126)																m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            															}
HXDLIN( 126)															int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN( 126)															int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN( 126)															int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN( 126)															int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN( 126)															col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            														}
            													}
HXDLIN( 126)													if ((col != 0)) {
HXLINE( 126)														int x = (dx - rectLeft);
HXDLIN( 126)														int y = (dy - rectTop);
HXDLIN( 126)														int this1 = col;
HXDLIN( 126)														int c = this1;
HXDLIN( 126)														bool _hx_tmp;
HXDLIN( 126)														if ((((c >> 24) & 255) < 254)) {
HXLINE( 126)															_hx_tmp = undoImage3->transparent;
            														}
            														else {
HXLINE( 126)															_hx_tmp = false;
            														}
HXDLIN( 126)														if (_hx_tmp) {
HXLINE( 126)															int location;
HXDLIN( 126)															if (undoImage3->useVirtualPos) {
HXLINE( 126)																location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x) - undoImage3->virtualX));
            															}
            															else {
HXLINE( 126)																location = ::Std_obj::_hx_int(( (Float)(((y * undoImage3->width) + x)) ));
            															}
HXDLIN( 126)															::haxe::io::ArrayBufferViewImpl this1 = undoImage3->image;
HXDLIN( 126)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 126)															int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 126)															int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 126)															int this3 = this2;
HXDLIN( 126)															int this4;
HXDLIN( 126)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 126)																this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            															}
            															else {
HXLINE( 126)																this4 = this3;
            															}
HXDLIN( 126)															Float a1;
HXDLIN( 126)															int this5 = ((this4 >> 24) & 255);
HXDLIN( 126)															if ((this5 == 0)) {
HXLINE( 126)																a1 = ((Float)0.);
            															}
            															else {
HXLINE( 126)																a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            															}
HXDLIN( 126)															Float r1;
HXDLIN( 126)															int this6 = ((this4 >> 16) & 255);
HXDLIN( 126)															if ((this6 == 0)) {
HXLINE( 126)																r1 = ((Float)0.);
            															}
            															else {
HXLINE( 126)																r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            															}
HXDLIN( 126)															Float g1;
HXDLIN( 126)															int this7 = ((this4 >> 8) & 255);
HXDLIN( 126)															if ((this7 == 0)) {
HXLINE( 126)																g1 = ((Float)0.);
            															}
            															else {
HXLINE( 126)																g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            															}
HXDLIN( 126)															Float b1;
HXDLIN( 126)															int this8 = (this4 & 255);
HXDLIN( 126)															if ((this8 == 0)) {
HXLINE( 126)																b1 = ((Float)0.);
            															}
            															else {
HXLINE( 126)																b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            															}
HXDLIN( 126)															Float a2;
HXDLIN( 126)															int this9 = ((col >> 24) & 255);
HXDLIN( 126)															if ((this9 == 0)) {
HXLINE( 126)																a2 = ((Float)0.);
            															}
            															else {
HXLINE( 126)																a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            															}
HXDLIN( 126)															Float r2;
HXDLIN( 126)															int this10 = ((col >> 16) & 255);
HXDLIN( 126)															if ((this10 == 0)) {
HXLINE( 126)																r2 = ((Float)0.);
            															}
            															else {
HXLINE( 126)																r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            															}
HXDLIN( 126)															Float g2;
HXDLIN( 126)															int this11 = ((col >> 8) & 255);
HXDLIN( 126)															if ((this11 == 0)) {
HXLINE( 126)																g2 = ((Float)0.);
            															}
            															else {
HXLINE( 126)																g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            															}
HXDLIN( 126)															Float b2;
HXDLIN( 126)															int this12 = (col & 255);
HXDLIN( 126)															if ((this12 == 0)) {
HXLINE( 126)																b2 = ((Float)0.);
            															}
            															else {
HXLINE( 126)																b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            															}
HXDLIN( 126)															Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 126)															int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 126)															int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 126)															int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 126)															int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 126)															int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 126)															{
HXLINE( 126)																::haxe::io::ArrayBufferViewImpl this13 = undoImage3->image;
HXDLIN( 126)																int value;
HXDLIN( 126)																if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 126)																	value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																}
            																else {
HXLINE( 126)																	value = blended;
            																}
HXDLIN( 126)																bool _hx_tmp;
HXDLIN( 126)																if ((location >= 0)) {
HXLINE( 126)																	_hx_tmp = (location < (this13->byteLength >> 2));
            																}
            																else {
HXLINE( 126)																	_hx_tmp = false;
            																}
HXDLIN( 126)																if (_hx_tmp) {
HXLINE( 126)																	::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 126)																	int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 126)																	_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 126)																	_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 126)																	_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 126)																	_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																}
            															}
            														}
            														else {
HXLINE( 126)															::haxe::io::ArrayBufferViewImpl this1 = undoImage3->image;
HXDLIN( 126)															int index;
HXDLIN( 126)															if (undoImage3->useVirtualPos) {
HXLINE( 126)																index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x) - undoImage3->virtualX));
            															}
            															else {
HXLINE( 126)																index = ::Std_obj::_hx_int(( (Float)(((y * undoImage3->width) + x)) ));
            															}
HXDLIN( 126)															int value;
HXDLIN( 126)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 126)																value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            															}
            															else {
HXLINE( 126)																value = c;
            															}
HXDLIN( 126)															bool _hx_tmp;
HXDLIN( 126)															if ((index >= 0)) {
HXLINE( 126)																_hx_tmp = (index < (this1->byteLength >> 2));
            															}
            															else {
HXLINE( 126)																_hx_tmp = false;
            															}
HXDLIN( 126)															if (_hx_tmp) {
HXLINE( 126)																::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 126)																int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 126)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 126)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 126)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 126)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
            													else {
HXLINE( 126)														if (forceClear) {
HXLINE( 126)															::haxe::io::ArrayBufferViewImpl this1 = undoImage3->image;
HXDLIN( 126)															int x = (dx - rectLeft);
HXDLIN( 126)															int y = (dy - rectTop);
HXDLIN( 126)															int index;
HXDLIN( 126)															if (undoImage3->useVirtualPos) {
HXLINE( 126)																index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x) - undoImage3->virtualX));
            															}
            															else {
HXLINE( 126)																index = ::Std_obj::_hx_int(( (Float)(((y * undoImage3->width) + x)) ));
            															}
HXDLIN( 126)															bool _hx_tmp;
HXDLIN( 126)															if ((index >= 0)) {
HXLINE( 126)																_hx_tmp = (index < (this1->byteLength >> 2));
            															}
            															else {
HXLINE( 126)																_hx_tmp = false;
            															}
HXDLIN( 126)															if (_hx_tmp) {
HXLINE( 126)																::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 126)																int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 126)																_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 126)																_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 126)																_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 126)																_this->b[(pos + 3)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 126)							bool found3 = false;
HXDLIN( 126)							Float s3 = ((Float)0.);
HXDLIN( 126)							Float t3 = ((Float)0.);
HXDLIN( 126)							Float sxx3 = ((Float)0.);
HXDLIN( 126)							Float txx3 = ((Float)0.);
HXDLIN( 126)							{
HXLINE( 126)								int _g_min3 = xIter33->start;
HXDLIN( 126)								int _g_max3 = xIter33->max;
HXDLIN( 126)								while((_g_min3 < _g_max3)){
HXLINE( 126)									_g_min3 = (_g_min3 + 1);
HXDLIN( 126)									int x = (_g_min3 - 1);
HXLINE(  61)									sxx3 = (sx3 * ( (Float)(x) ));
HXLINE(  62)									txx3 = (tx3 * ( (Float)(x) ));
HXLINE(  63)									found3 = false;
HXLINE( 126)									{
HXLINE( 126)										int _g_min = yIter33->start;
HXDLIN( 126)										int _g_max = yIter33->max;
HXDLIN( 126)										while((_g_min < _g_max)){
HXLINE( 126)											_g_min = (_g_min + 1);
HXDLIN( 126)											int y = (_g_min - 1);
HXLINE(  65)											s3 = ((s03 + sxx3) + (sy3 * ( (Float)(y) )));
HXLINE(  66)											t3 = ((t03 + txx3) + (ty3 * ( (Float)(y) )));
HXLINE( 126)											bool _hx_tmp;
HXDLIN( 126)											if (!((s3 <= 0))) {
HXLINE( 126)												_hx_tmp = (t3 <= 0);
            											}
            											else {
HXLINE( 126)												_hx_tmp = true;
            											}
HXDLIN( 126)											if (_hx_tmp) {
HXLINE( 126)												if (found3) {
HXLINE( 126)													goto _hx_goto_79;
            												}
            											}
            											else {
HXLINE( 126)												if (((s3 + t3) < A3)) {
HXLINE( 126)													{
HXLINE( 126)														int this1 = color1;
HXDLIN( 126)														int c = this1;
HXDLIN( 126)														bool _hx_tmp;
HXDLIN( 126)														if ((((c >> 24) & 255) < 254)) {
HXLINE( 126)															_hx_tmp = temp->transparent;
            														}
            														else {
HXLINE( 126)															_hx_tmp = false;
            														}
HXDLIN( 126)														if (_hx_tmp) {
HXLINE( 126)															int location;
HXDLIN( 126)															if (temp->useVirtualPos) {
HXLINE( 126)																location = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            															}
            															else {
HXLINE( 126)																location = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            															}
HXDLIN( 126)															::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 126)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 126)															int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 126)															int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 126)															int this3 = this2;
HXDLIN( 126)															int this4;
HXDLIN( 126)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 126)																this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            															}
            															else {
HXLINE( 126)																this4 = this3;
            															}
HXDLIN( 126)															Float a1;
HXDLIN( 126)															int this5 = ((this4 >> 24) & 255);
HXDLIN( 126)															if ((this5 == 0)) {
HXLINE( 126)																a1 = ((Float)0.);
            															}
            															else {
HXLINE( 126)																a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            															}
HXDLIN( 126)															Float r1;
HXDLIN( 126)															int this6 = ((this4 >> 16) & 255);
HXDLIN( 126)															if ((this6 == 0)) {
HXLINE( 126)																r1 = ((Float)0.);
            															}
            															else {
HXLINE( 126)																r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            															}
HXDLIN( 126)															Float g1;
HXDLIN( 126)															int this7 = ((this4 >> 8) & 255);
HXDLIN( 126)															if ((this7 == 0)) {
HXLINE( 126)																g1 = ((Float)0.);
            															}
            															else {
HXLINE( 126)																g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            															}
HXDLIN( 126)															Float b1;
HXDLIN( 126)															int this8 = (this4 & 255);
HXDLIN( 126)															if ((this8 == 0)) {
HXLINE( 126)																b1 = ((Float)0.);
            															}
            															else {
HXLINE( 126)																b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            															}
HXDLIN( 126)															Float a2;
HXDLIN( 126)															int this9 = ((color1 >> 24) & 255);
HXDLIN( 126)															if ((this9 == 0)) {
HXLINE( 126)																a2 = ((Float)0.);
            															}
            															else {
HXLINE( 126)																a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            															}
HXDLIN( 126)															Float r2;
HXDLIN( 126)															int this10 = ((color1 >> 16) & 255);
HXDLIN( 126)															if ((this10 == 0)) {
HXLINE( 126)																r2 = ((Float)0.);
            															}
            															else {
HXLINE( 126)																r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            															}
HXDLIN( 126)															Float g2;
HXDLIN( 126)															int this11 = ((color1 >> 8) & 255);
HXDLIN( 126)															if ((this11 == 0)) {
HXLINE( 126)																g2 = ((Float)0.);
            															}
            															else {
HXLINE( 126)																g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            															}
HXDLIN( 126)															Float b2;
HXDLIN( 126)															int this12 = (color1 & 255);
HXDLIN( 126)															if ((this12 == 0)) {
HXLINE( 126)																b2 = ((Float)0.);
            															}
            															else {
HXLINE( 126)																b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            															}
HXDLIN( 126)															Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 126)															int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 126)															int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 126)															int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 126)															int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 126)															int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 126)															{
HXLINE( 126)																::haxe::io::ArrayBufferViewImpl this13 = temp->image;
HXDLIN( 126)																int value;
HXDLIN( 126)																if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 126)																	value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																}
            																else {
HXLINE( 126)																	value = blended;
            																}
HXDLIN( 126)																bool _hx_tmp;
HXDLIN( 126)																if ((location >= 0)) {
HXLINE( 126)																	_hx_tmp = (location < (this13->byteLength >> 2));
            																}
            																else {
HXLINE( 126)																	_hx_tmp = false;
            																}
HXDLIN( 126)																if (_hx_tmp) {
HXLINE( 126)																	::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 126)																	int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 126)																	_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 126)																	_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 126)																	_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 126)																	_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																}
            															}
            														}
            														else {
HXLINE( 126)															::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN( 126)															int index;
HXDLIN( 126)															if (temp->useVirtualPos) {
HXLINE( 126)																index = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            															}
            															else {
HXLINE( 126)																index = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            															}
HXDLIN( 126)															int value;
HXDLIN( 126)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 126)																value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            															}
            															else {
HXLINE( 126)																value = c;
            															}
HXDLIN( 126)															bool _hx_tmp;
HXDLIN( 126)															if ((index >= 0)) {
HXLINE( 126)																_hx_tmp = (index < (this1->byteLength >> 2));
            															}
            															else {
HXLINE( 126)																_hx_tmp = false;
            															}
HXDLIN( 126)															if (_hx_tmp) {
HXLINE( 126)																::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 126)																int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 126)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 126)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 126)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 126)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
HXLINE(  74)													found3 = true;
            												}
            												else {
HXLINE( 126)													if (found3) {
HXLINE( 126)														goto _hx_goto_79;
            													}
            												}
            											}
            										}
            										_hx_goto_79:;
            									}
            								}
            							}
HXDLIN( 126)							if ((hasHit1 == true)) {
HXLINE( 126)								::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,bx4,by4,bx6,by6,cx6,cy6,true);
HXDLIN( 126)								if (hasUndo3) {
HXLINE( 126)									v->undoImage = undoImage3;
HXDLIN( 126)									v->undoX = xIter33->start;
HXDLIN( 126)									v->undoY = yIter33->start;
            								}
            							}
            						}
            					}
HXDLIN( 126)					if ((hasHit1 == true)) {
HXLINE( 126)						::pixelimage::algo::HitQuad v = ::pixelimage::algo::HitQuad_obj::__alloc( HX_CTX ,ax2,ay2,bx4,by4,cx4,cy4,dx1,dy1,true);
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(ArcShape_obj,pie,(void))


::hx::ObjectPtr< ArcShape_obj > ArcShape_obj::__new(::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< int >  __o_strokeColor,::hx::Null< Float >  __o_strokeWidth,::Array< ::String > strokeDashGapArray,::hx::Null< int >  __o_fill,::hx::Null< Float >  __o_left,::hx::Null< Float >  __o_top,::hx::Null< Float >  __o_width,::hx::Null< Float >  __o_height,::hx::Null< Float >  __o_startAngle,::hx::Null< Float >  __o_sweepAngle,::String __o_arcType) {
	::hx::ObjectPtr< ArcShape_obj > __this = new ArcShape_obj();
	__this->__construct(__o_opacity,__o_visibility,__o_strokeColor,__o_strokeWidth,strokeDashGapArray,__o_fill,__o_left,__o_top,__o_width,__o_height,__o_startAngle,__o_sweepAngle,__o_arcType);
	return __this;
}

::hx::ObjectPtr< ArcShape_obj > ArcShape_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< int >  __o_strokeColor,::hx::Null< Float >  __o_strokeWidth,::Array< ::String > strokeDashGapArray,::hx::Null< int >  __o_fill,::hx::Null< Float >  __o_left,::hx::Null< Float >  __o_top,::hx::Null< Float >  __o_width,::hx::Null< Float >  __o_height,::hx::Null< Float >  __o_startAngle,::hx::Null< Float >  __o_sweepAngle,::String __o_arcType) {
	ArcShape_obj *__this = (ArcShape_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(ArcShape_obj), true, "pixelimage.triangleGML.shape.ArcShape"));
	*(void **)__this = ArcShape_obj::_hx_vtable;
	__this->__construct(__o_opacity,__o_visibility,__o_strokeColor,__o_strokeWidth,strokeDashGapArray,__o_fill,__o_left,__o_top,__o_width,__o_height,__o_startAngle,__o_sweepAngle,__o_arcType);
	return __this;
}

ArcShape_obj::ArcShape_obj()
{
}

void ArcShape_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(ArcShape);
	HX_MARK_MEMBER_NAME(left,"left");
	HX_MARK_MEMBER_NAME(top,"top");
	HX_MARK_MEMBER_NAME(width,"width");
	HX_MARK_MEMBER_NAME(height,"height");
	HX_MARK_MEMBER_NAME(startAngle,"startAngle");
	HX_MARK_MEMBER_NAME(sweepAngle,"sweepAngle");
	HX_MARK_MEMBER_NAME(arcType,"arcType");
	HX_MARK_MEMBER_NAME(rx,"rx");
	HX_MARK_MEMBER_NAME(ry,"ry");
	::pixelimage::triangleGML::coreShape::BasicShape_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void ArcShape_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(left,"left");
	HX_VISIT_MEMBER_NAME(top,"top");
	HX_VISIT_MEMBER_NAME(width,"width");
	HX_VISIT_MEMBER_NAME(height,"height");
	HX_VISIT_MEMBER_NAME(startAngle,"startAngle");
	HX_VISIT_MEMBER_NAME(sweepAngle,"sweepAngle");
	HX_VISIT_MEMBER_NAME(arcType,"arcType");
	HX_VISIT_MEMBER_NAME(rx,"rx");
	HX_VISIT_MEMBER_NAME(ry,"ry");
	::pixelimage::triangleGML::coreShape::BasicShape_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val ArcShape_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"rx") ) { return ::hx::Val( rx ); }
		if (HX_FIELD_EQ(inName,"ry") ) { return ::hx::Val( ry ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { return ::hx::Val( top ); }
		if (HX_FIELD_EQ(inName,"pie") ) { return ::hx::Val( pie_dyn() ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { return ::hx::Val( left ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { return ::hx::Val( width ); }
		if (HX_FIELD_EQ(inName,"chord") ) { return ::hx::Val( chord_dyn() ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { return ::hx::Val( height ); }
		if (HX_FIELD_EQ(inName,"render") ) { return ::hx::Val( render_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"arcType") ) { return ::hx::Val( arcType ); }
		if (HX_FIELD_EQ(inName,"ellipse") ) { return ::hx::Val( ellipse_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"startAngle") ) { return ::hx::Val( startAngle ); }
		if (HX_FIELD_EQ(inName,"sweepAngle") ) { return ::hx::Val( sweepAngle ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setParameter") ) { return ::hx::Val( setParameter_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val ArcShape_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"rx") ) { rx=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"ry") ) { ry=inValue.Cast< Float >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { top=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { left=inValue.Cast< Float >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"width") ) { width=inValue.Cast< Float >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"height") ) { height=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"arcType") ) { arcType=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"startAngle") ) { startAngle=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"sweepAngle") ) { sweepAngle=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void ArcShape_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("left",07,08,b0,47));
	outFields->push(HX_("top",95,66,58,00));
	outFields->push(HX_("width",06,b6,62,ca));
	outFields->push(HX_("height",e7,07,4c,02));
	outFields->push(HX_("startAngle",11,1c,f9,3e));
	outFields->push(HX_("sweepAngle",47,a6,92,e6));
	outFields->push(HX_("arcType",2c,ae,de,8e));
	outFields->push(HX_("rx",c6,63,00,00));
	outFields->push(HX_("ry",c7,63,00,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo ArcShape_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(ArcShape_obj,left),HX_("left",07,08,b0,47)},
	{::hx::fsFloat,(int)offsetof(ArcShape_obj,top),HX_("top",95,66,58,00)},
	{::hx::fsFloat,(int)offsetof(ArcShape_obj,width),HX_("width",06,b6,62,ca)},
	{::hx::fsFloat,(int)offsetof(ArcShape_obj,height),HX_("height",e7,07,4c,02)},
	{::hx::fsFloat,(int)offsetof(ArcShape_obj,startAngle),HX_("startAngle",11,1c,f9,3e)},
	{::hx::fsFloat,(int)offsetof(ArcShape_obj,sweepAngle),HX_("sweepAngle",47,a6,92,e6)},
	{::hx::fsString,(int)offsetof(ArcShape_obj,arcType),HX_("arcType",2c,ae,de,8e)},
	{::hx::fsFloat,(int)offsetof(ArcShape_obj,rx),HX_("rx",c6,63,00,00)},
	{::hx::fsFloat,(int)offsetof(ArcShape_obj,ry),HX_("ry",c7,63,00,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *ArcShape_obj_sStaticStorageInfo = 0;
#endif

static ::String ArcShape_obj_sMemberFields[] = {
	HX_("left",07,08,b0,47),
	HX_("top",95,66,58,00),
	HX_("width",06,b6,62,ca),
	HX_("height",e7,07,4c,02),
	HX_("startAngle",11,1c,f9,3e),
	HX_("sweepAngle",47,a6,92,e6),
	HX_("arcType",2c,ae,de,8e),
	HX_("rx",c6,63,00,00),
	HX_("ry",c7,63,00,00),
	HX_("setParameter",a7,f5,ff,6c),
	HX_("render",56,6b,29,05),
	HX_("chord",5c,3c,be,45),
	HX_("ellipse",de,40,86,0b),
	HX_("pie",4c,58,55,00),
	::String(null()) };

::hx::Class ArcShape_obj::__mClass;

void ArcShape_obj::__register()
{
	ArcShape_obj _hx_dummy;
	ArcShape_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pixelimage.triangleGML.shape.ArcShape",05,4e,3e,58);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(ArcShape_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< ArcShape_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = ArcShape_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = ArcShape_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pixelimage
} // end namespace triangleGML
} // end namespace shape
