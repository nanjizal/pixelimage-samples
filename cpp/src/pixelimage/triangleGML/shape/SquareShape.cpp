// Generated by Haxe 4.3.0-rc.1+
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringTools
#include <StringTools.h>
#endif
#ifndef INCLUDED_haxe_io_ArrayBufferViewImpl
#include <haxe/io/ArrayBufferViewImpl.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_pixelimage_ImageStruct
#include <pixelimage/ImageStruct.h>
#endif
#ifndef INCLUDED_pixelimage__Endian_Endian_Fields_
#include <pixelimage/_Endian/Endian_Fields_.h>
#endif
#ifndef INCLUDED_pixelimage_algo_HitTri
#include <pixelimage/algo/HitTri.h>
#endif
#ifndef INCLUDED_pixelimage_algo_IhitObj
#include <pixelimage/algo/IhitObj.h>
#endif
#ifndef INCLUDED_pixelimage_iter_IntIterStart
#include <pixelimage/iter/IntIterStart.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_BasicShape
#include <pixelimage/triangleGML/coreShape/BasicShape.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_FillShape
#include <pixelimage/triangleGML/coreShape/FillShape.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_GroupShape
#include <pixelimage/triangleGML/coreShape/GroupShape.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_ShapeInterface
#include <pixelimage/triangleGML/coreShape/ShapeInterface.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_shape_SquareShape
#include <pixelimage/triangleGML/shape/SquareShape.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_e307939c9f56466b_28_new,"pixelimage.triangleGML.shape.SquareShape","new",0x9f2f8860,"pixelimage.triangleGML.shape.SquareShape.new","pixelimage/triangleGML/shape/SquareShape.hx",28,0x08d64d53)
HX_LOCAL_STACK_FRAME(_hx_pos_e307939c9f56466b_36_setParameter,"pixelimage.triangleGML.shape.SquareShape","setParameter",0x20ed3da7,"pixelimage.triangleGML.shape.SquareShape.setParameter","pixelimage/triangleGML/shape/SquareShape.hx",36,0x08d64d53)
HX_LOCAL_STACK_FRAME(_hx_pos_e307939c9f56466b_49_render,"pixelimage.triangleGML.shape.SquareShape","render",0x8070b356,"pixelimage.triangleGML.shape.SquareShape.render","pixelimage/triangleGML/shape/SquareShape.hx",49,0x08d64d53)
HX_LOCAL_STACK_FRAME(_hx_pos_e307939c9f56466b_61_buildSquare,"pixelimage.triangleGML.shape.SquareShape","buildSquare",0x9eb69e6b,"pixelimage.triangleGML.shape.SquareShape.buildSquare","pixelimage/triangleGML/shape/SquareShape.hx",61,0x08d64d53)
HX_LOCAL_STACK_FRAME(_hx_pos_e307939c9f56466b_65_buildRounded,"pixelimage.triangleGML.shape.SquareShape","buildRounded",0x5354f69f,"pixelimage.triangleGML.shape.SquareShape.buildRounded","pixelimage/triangleGML/shape/SquareShape.hx",65,0x08d64d53)
namespace pixelimage{
namespace triangleGML{
namespace shape{

void SquareShape_obj::__construct(::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< int >  __o_strokeColor,::hx::Null< Float >  __o_strokeWidth,::Array< ::String > strokeDashGapArray,::hx::Null< int >  __o_fill,::hx::Null< Float >  __o_left,::hx::Null< Float >  __o_top,::hx::Null< Float >  __o_diameter,::hx::Null< bool >  __o_rounded){
            		Float opacity = __o_opacity.Default(((Float)1.));
            		bool visibility = __o_visibility.Default(true);
            		int strokeColor = __o_strokeColor.Default(0);
            		Float strokeWidth = __o_strokeWidth.Default(((Float)1.));
            		int fill = __o_fill.Default(0);
            		Float left = __o_left.Default(((Float)0.));
            		Float top = __o_top.Default(((Float)0.));
            		Float diameter = __o_diameter.Default(((Float)1.));
            		bool rounded = __o_rounded.Default(false);
            	HX_STACKFRAME(&_hx_pos_e307939c9f56466b_28_new)
HXLINE(  29)		super::__construct(opacity,visibility,strokeColor,strokeWidth,strokeDashGapArray,fill);
HXLINE(  30)		this->left = left;
HXLINE(  31)		this->top = top;
HXLINE(  32)		this->diameter = diameter;
HXLINE(  33)		this->rounded = rounded;
            	}

Dynamic SquareShape_obj::__CreateEmpty() { return new SquareShape_obj; }

void *SquareShape_obj::_hx_vtable = 0;

Dynamic SquareShape_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SquareShape_obj > _hx_result = new SquareShape_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9]);
	return _hx_result;
}

bool SquareShape_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x24e92cfb) {
		if (inClassId<=(int)0x2091632c) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2091632c;
		} else {
			return inClassId==(int)0x24e92cfb;
		}
	} else {
		return inClassId==(int)0x31bdbfcc || inClassId==(int)0x389f4e25;
	}
}

void SquareShape_obj::setParameter(::String name,::String value){
            	HX_STACKFRAME(&_hx_pos_e307939c9f56466b_36_setParameter)
HXDLIN(  36)		::String _hx_switch_0 = name;
            		if (  (_hx_switch_0==HX_("diameter",cd,6e,68,34)) ){
HXLINE(  42)			this->diameter = ::Std_obj::parseFloat(value);
HXDLIN(  42)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("left",07,08,b0,47)) ){
HXLINE(  38)			this->left = ::Std_obj::parseFloat(value);
HXDLIN(  38)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("rounded",2d,80,0f,8d)) ){
HXLINE(  44)			bool _hx_tmp;
HXDLIN(  44)			if ((::StringTools_obj::trim(value).toLowerCase() == HX_("true",4e,a7,03,4d))) {
HXLINE(  44)				_hx_tmp = true;
            			}
            			else {
HXLINE(  44)				_hx_tmp = false;
            			}
HXDLIN(  44)			this->rounded = _hx_tmp;
HXDLIN(  44)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("top",95,66,58,00)) ){
HXLINE(  40)			this->top = ::Std_obj::parseFloat(value);
HXDLIN(  40)			goto _hx_goto_1;
            		}
            		/* default */{
HXLINE(  46)			this->super::setParameter(name,value);
            		}
            		_hx_goto_1:;
            	}


::pixelimage::ImageStruct SquareShape_obj::render(::pixelimage::ImageStruct pixelShape){
            	HX_GC_STACKFRAME(&_hx_pos_e307939c9f56466b_49_render)
HXLINE(  50)		int w = ::Math_obj::ceil(this->diameter);
HXDLIN(  50)		int h = ::Math_obj::ceil(this->diameter);
HXDLIN(  50)		int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN(  50)		::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  50)		::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN(  50)		::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN(  50)		::pixelimage::ImageStruct this4 = this3;
HXDLIN(  50)		::pixelimage::ImageStruct temp = this4;
HXLINE(  51)		temp->transparent = false;
HXLINE(  52)		if ((this->rounded == true)) {
HXLINE(  53)			this->buildRounded(temp);
            		}
            		else {
HXLINE(  55)			this->buildSquare(temp);
            		}
HXLINE(  57)		{
HXLINE(  57)			int x = ::Std_obj::_hx_int((this->left + this->offX));
HXDLIN(  57)			int y = ::Std_obj::_hx_int((this->top + this->offY));
HXDLIN(  57)			bool forceClear = false;
HXDLIN(  57)			{
HXLINE(  57)				int _g = 0;
HXDLIN(  57)				int _g1 = temp->height;
HXDLIN(  57)				while((_g < _g1)){
HXLINE(  57)					_g = (_g + 1);
HXDLIN(  57)					int dy = (_g - 1);
HXDLIN(  57)					{
HXLINE(  57)						int _g1 = 0;
HXDLIN(  57)						int _g2 = temp->width;
HXDLIN(  57)						while((_g1 < _g2)){
HXLINE(  57)							_g1 = (_g1 + 1);
HXDLIN(  57)							int dx = (_g1 - 1);
HXDLIN(  57)							::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN(  57)							int index;
HXDLIN(  57)							if (temp->useVirtualPos) {
HXLINE(  57)								index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - temp->virtualY) * ( (Float)(temp->width) )) + dx) - temp->virtualX));
            							}
            							else {
HXLINE(  57)								index = ::Std_obj::_hx_int(( (Float)(((dy * temp->width) + dx)) ));
            							}
HXDLIN(  57)							::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  57)							int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  57)							int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  57)							int col;
HXDLIN(  57)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  57)								col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            							}
            							else {
HXLINE(  57)								col = c;
            							}
HXDLIN(  57)							bool _hx_tmp;
HXDLIN(  57)							if (temp->useMask) {
HXLINE(  57)								_hx_tmp = ::hx::IsNotNull( temp->mask );
            							}
            							else {
HXLINE(  57)								_hx_tmp = false;
            							}
HXDLIN(  57)							if (_hx_tmp) {
HXLINE(  57)								::pixelimage::ImageStruct this1 = temp->mask;
HXDLIN(  57)								::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  57)								int index;
HXDLIN(  57)								if (this1->useVirtualPos) {
HXLINE(  57)									index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            								}
            								else {
HXLINE(  57)									index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            								}
HXDLIN(  57)								::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  57)								int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  57)								int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  57)								int v;
HXDLIN(  57)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  57)									v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            								}
            								else {
HXLINE(  57)									v = c;
            								}
HXDLIN(  57)								int this3 = v;
HXDLIN(  57)								int maskPixel = this3;
HXDLIN(  57)								int this4 = col;
HXDLIN(  57)								int this5 = this4;
HXDLIN(  57)								if ((maskPixel == 0)) {
HXLINE(  57)									int this1 = this5;
HXDLIN(  57)									col = this1;
            								}
            								else {
HXLINE(  57)									Float m0;
HXDLIN(  57)									int this1 = ((maskPixel >> 24) & 255);
HXDLIN(  57)									if ((this1 == 0)) {
HXLINE(  57)										m0 = ((Float)0.);
            									}
            									else {
HXLINE(  57)										m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            									}
HXDLIN(  57)									Float m1;
HXDLIN(  57)									int this2 = ((maskPixel >> 16) & 255);
HXDLIN(  57)									if ((this2 == 0)) {
HXLINE(  57)										m1 = ((Float)0.);
            									}
            									else {
HXLINE(  57)										m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            									}
HXDLIN(  57)									Float m2;
HXDLIN(  57)									int this3 = ((maskPixel >> 8) & 255);
HXDLIN(  57)									if ((this3 == 0)) {
HXLINE(  57)										m2 = ((Float)0.);
            									}
            									else {
HXLINE(  57)										m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            									}
HXDLIN(  57)									Float m3;
HXDLIN(  57)									int this4 = (maskPixel & 255);
HXDLIN(  57)									if ((this4 == 0)) {
HXLINE(  57)										m3 = ((Float)0.);
            									}
            									else {
HXLINE(  57)										m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            									}
HXDLIN(  57)									int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN(  57)									int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN(  57)									int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN(  57)									int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN(  57)									col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            								}
            							}
HXDLIN(  57)							if ((col != 0)) {
HXLINE(  57)								int x1 = (x + dx);
HXDLIN(  57)								int y1 = (y + dy);
HXDLIN(  57)								int this1 = col;
HXDLIN(  57)								int c = this1;
HXDLIN(  57)								bool _hx_tmp;
HXDLIN(  57)								if ((((c >> 24) & 255) < 254)) {
HXLINE(  57)									_hx_tmp = pixelShape->transparent;
            								}
            								else {
HXLINE(  57)									_hx_tmp = false;
            								}
HXDLIN(  57)								if (_hx_tmp) {
HXLINE(  57)									int location;
HXDLIN(  57)									if (pixelShape->useVirtualPos) {
HXLINE(  57)										location = ::Std_obj::_hx_int(((((( (Float)(y1) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x1) - pixelShape->virtualX));
            									}
            									else {
HXLINE(  57)										location = ::Std_obj::_hx_int(( (Float)(((y1 * pixelShape->width) + x1)) ));
            									}
HXDLIN(  57)									::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  57)									::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  57)									int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  57)									int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  57)									int this3 = this2;
HXDLIN(  57)									int this4;
HXDLIN(  57)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  57)										this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            									}
            									else {
HXLINE(  57)										this4 = this3;
            									}
HXDLIN(  57)									Float a1;
HXDLIN(  57)									int this5 = ((this4 >> 24) & 255);
HXDLIN(  57)									if ((this5 == 0)) {
HXLINE(  57)										a1 = ((Float)0.);
            									}
            									else {
HXLINE(  57)										a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            									}
HXDLIN(  57)									Float r1;
HXDLIN(  57)									int this6 = ((this4 >> 16) & 255);
HXDLIN(  57)									if ((this6 == 0)) {
HXLINE(  57)										r1 = ((Float)0.);
            									}
            									else {
HXLINE(  57)										r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            									}
HXDLIN(  57)									Float g1;
HXDLIN(  57)									int this7 = ((this4 >> 8) & 255);
HXDLIN(  57)									if ((this7 == 0)) {
HXLINE(  57)										g1 = ((Float)0.);
            									}
            									else {
HXLINE(  57)										g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            									}
HXDLIN(  57)									Float b1;
HXDLIN(  57)									int this8 = (this4 & 255);
HXDLIN(  57)									if ((this8 == 0)) {
HXLINE(  57)										b1 = ((Float)0.);
            									}
            									else {
HXLINE(  57)										b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            									}
HXDLIN(  57)									Float a2;
HXDLIN(  57)									int this9 = ((col >> 24) & 255);
HXDLIN(  57)									if ((this9 == 0)) {
HXLINE(  57)										a2 = ((Float)0.);
            									}
            									else {
HXLINE(  57)										a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            									}
HXDLIN(  57)									Float r2;
HXDLIN(  57)									int this10 = ((col >> 16) & 255);
HXDLIN(  57)									if ((this10 == 0)) {
HXLINE(  57)										r2 = ((Float)0.);
            									}
            									else {
HXLINE(  57)										r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            									}
HXDLIN(  57)									Float g2;
HXDLIN(  57)									int this11 = ((col >> 8) & 255);
HXDLIN(  57)									if ((this11 == 0)) {
HXLINE(  57)										g2 = ((Float)0.);
            									}
            									else {
HXLINE(  57)										g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            									}
HXDLIN(  57)									Float b2;
HXDLIN(  57)									int this12 = (col & 255);
HXDLIN(  57)									if ((this12 == 0)) {
HXLINE(  57)										b2 = ((Float)0.);
            									}
            									else {
HXLINE(  57)										b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            									}
HXDLIN(  57)									Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  57)									int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  57)									int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  57)									int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  57)									int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  57)									int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  57)									{
HXLINE(  57)										::haxe::io::ArrayBufferViewImpl this13 = pixelShape->image;
HXDLIN(  57)										int value;
HXDLIN(  57)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  57)											value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            										}
            										else {
HXLINE(  57)											value = blended;
            										}
HXDLIN(  57)										bool _hx_tmp;
HXDLIN(  57)										if ((location >= 0)) {
HXLINE(  57)											_hx_tmp = (location < (this13->byteLength >> 2));
            										}
            										else {
HXLINE(  57)											_hx_tmp = false;
            										}
HXDLIN(  57)										if (_hx_tmp) {
HXLINE(  57)											::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  57)											int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  57)											_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  57)											_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  57)											_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  57)											_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            										}
            									}
            								}
            								else {
HXLINE(  57)									::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  57)									int index;
HXDLIN(  57)									if (pixelShape->useVirtualPos) {
HXLINE(  57)										index = ::Std_obj::_hx_int(((((( (Float)(y1) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x1) - pixelShape->virtualX));
            									}
            									else {
HXLINE(  57)										index = ::Std_obj::_hx_int(( (Float)(((y1 * pixelShape->width) + x1)) ));
            									}
HXDLIN(  57)									int value;
HXDLIN(  57)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  57)										value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXLINE(  57)										value = c;
            									}
HXDLIN(  57)									bool _hx_tmp;
HXDLIN(  57)									if ((index >= 0)) {
HXLINE(  57)										_hx_tmp = (index < (this1->byteLength >> 2));
            									}
            									else {
HXLINE(  57)										_hx_tmp = false;
            									}
HXDLIN(  57)									if (_hx_tmp) {
HXLINE(  57)										::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  57)										int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  57)										_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  57)										_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  57)										_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  57)										_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            									}
            								}
            							}
            							else {
HXLINE(  57)								if (forceClear) {
HXLINE(  57)									::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  57)									int x1 = (x + dx);
HXDLIN(  57)									int y1 = (y + dy);
HXDLIN(  57)									int index;
HXDLIN(  57)									if (pixelShape->useVirtualPos) {
HXLINE(  57)										index = ::Std_obj::_hx_int(((((( (Float)(y1) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x1) - pixelShape->virtualX));
            									}
            									else {
HXLINE(  57)										index = ::Std_obj::_hx_int(( (Float)(((y1 * pixelShape->width) + x1)) ));
            									}
HXDLIN(  57)									bool _hx_tmp;
HXDLIN(  57)									if ((index >= 0)) {
HXLINE(  57)										_hx_tmp = (index < (this1->byteLength >> 2));
            									}
            									else {
HXLINE(  57)										_hx_tmp = false;
            									}
HXDLIN(  57)									if (_hx_tmp) {
HXLINE(  57)										::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  57)										int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  57)										_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  57)										_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  57)										_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  57)										_this->b[(pos + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(  58)		temp = null();
HXLINE(  59)		return this->super::render(pixelShape);
            	}


void SquareShape_obj::buildSquare(::pixelimage::ImageStruct temp){
            	HX_STACKFRAME(&_hx_pos_e307939c9f56466b_61_buildSquare)
HXLINE(  62)		{
HXLINE(  62)			Float h = this->diameter;
HXDLIN(  62)			int color = this->strokeColor;
HXDLIN(  62)			int p = 0;
HXDLIN(  62)			int xx = p;
HXDLIN(  62)			int q = 0;
HXDLIN(  62)			int maxX = ::Std_obj::_hx_int(this->diameter);
HXDLIN(  62)			int maxY = ::Std_obj::_hx_int(h);
HXDLIN(  62)			while(true){
HXLINE(  62)				{
HXLINE(  62)					p = (p + 1);
HXDLIN(  62)					int x = (p - 1);
HXDLIN(  62)					int this1 = color;
HXDLIN(  62)					int c = this1;
HXDLIN(  62)					bool _hx_tmp;
HXDLIN(  62)					if ((((c >> 24) & 255) < 254)) {
HXLINE(  62)						_hx_tmp = temp->transparent;
            					}
            					else {
HXLINE(  62)						_hx_tmp = false;
            					}
HXDLIN(  62)					if (_hx_tmp) {
HXLINE(  62)						int location;
HXDLIN(  62)						if (temp->useVirtualPos) {
HXLINE(  62)							location = ::Std_obj::_hx_int(((((( (Float)(q) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            						}
            						else {
HXLINE(  62)							location = ::Std_obj::_hx_int(( (Float)(((q * temp->width) + x)) ));
            						}
HXDLIN(  62)						::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN(  62)						::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  62)						int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  62)						int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  62)						int this3 = this2;
HXDLIN(  62)						int this4;
HXDLIN(  62)						if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  62)							this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            						}
            						else {
HXLINE(  62)							this4 = this3;
            						}
HXDLIN(  62)						Float a1;
HXDLIN(  62)						int this5 = ((this4 >> 24) & 255);
HXDLIN(  62)						if ((this5 == 0)) {
HXLINE(  62)							a1 = ((Float)0.);
            						}
            						else {
HXLINE(  62)							a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            						}
HXDLIN(  62)						Float r1;
HXDLIN(  62)						int this6 = ((this4 >> 16) & 255);
HXDLIN(  62)						if ((this6 == 0)) {
HXLINE(  62)							r1 = ((Float)0.);
            						}
            						else {
HXLINE(  62)							r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            						}
HXDLIN(  62)						Float g1;
HXDLIN(  62)						int this7 = ((this4 >> 8) & 255);
HXDLIN(  62)						if ((this7 == 0)) {
HXLINE(  62)							g1 = ((Float)0.);
            						}
            						else {
HXLINE(  62)							g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            						}
HXDLIN(  62)						Float b1;
HXDLIN(  62)						int this8 = (this4 & 255);
HXDLIN(  62)						if ((this8 == 0)) {
HXLINE(  62)							b1 = ((Float)0.);
            						}
            						else {
HXLINE(  62)							b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            						}
HXDLIN(  62)						Float a2;
HXDLIN(  62)						int this9 = ((color >> 24) & 255);
HXDLIN(  62)						if ((this9 == 0)) {
HXLINE(  62)							a2 = ((Float)0.);
            						}
            						else {
HXLINE(  62)							a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            						}
HXDLIN(  62)						Float r2;
HXDLIN(  62)						int this10 = ((color >> 16) & 255);
HXDLIN(  62)						if ((this10 == 0)) {
HXLINE(  62)							r2 = ((Float)0.);
            						}
            						else {
HXLINE(  62)							r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            						}
HXDLIN(  62)						Float g2;
HXDLIN(  62)						int this11 = ((color >> 8) & 255);
HXDLIN(  62)						if ((this11 == 0)) {
HXLINE(  62)							g2 = ((Float)0.);
            						}
            						else {
HXLINE(  62)							g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            						}
HXDLIN(  62)						Float b2;
HXDLIN(  62)						int this12 = (color & 255);
HXDLIN(  62)						if ((this12 == 0)) {
HXLINE(  62)							b2 = ((Float)0.);
            						}
            						else {
HXLINE(  62)							b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            						}
HXDLIN(  62)						Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  62)						int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  62)						int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  62)						int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  62)						int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  62)						int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  62)						{
HXLINE(  62)							::haxe::io::ArrayBufferViewImpl this13 = temp->image;
HXDLIN(  62)							int value;
HXDLIN(  62)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  62)								value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            							}
            							else {
HXLINE(  62)								value = blended;
            							}
HXDLIN(  62)							bool _hx_tmp;
HXDLIN(  62)							if ((location >= 0)) {
HXLINE(  62)								_hx_tmp = (location < (this13->byteLength >> 2));
            							}
            							else {
HXLINE(  62)								_hx_tmp = false;
            							}
HXDLIN(  62)							if (_hx_tmp) {
HXLINE(  62)								::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  62)								int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  62)								_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  62)								_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  62)								_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  62)								_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            							}
            						}
            					}
            					else {
HXLINE(  62)						::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN(  62)						int index;
HXDLIN(  62)						if (temp->useVirtualPos) {
HXLINE(  62)							index = ::Std_obj::_hx_int(((((( (Float)(q) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            						}
            						else {
HXLINE(  62)							index = ::Std_obj::_hx_int(( (Float)(((q * temp->width) + x)) ));
            						}
HXDLIN(  62)						int value;
HXDLIN(  62)						if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  62)							value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            						}
            						else {
HXLINE(  62)							value = c;
            						}
HXDLIN(  62)						bool _hx_tmp;
HXDLIN(  62)						if ((index >= 0)) {
HXLINE(  62)							_hx_tmp = (index < (this1->byteLength >> 2));
            						}
            						else {
HXLINE(  62)							_hx_tmp = false;
            						}
HXDLIN(  62)						if (_hx_tmp) {
HXLINE(  62)							::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  62)							int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  62)							_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  62)							_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  62)							_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  62)							_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            						}
            					}
            				}
HXDLIN(  62)				if ((p > maxX)) {
HXLINE(  62)					p = xx;
HXDLIN(  62)					q = (q + 1);
            				}
HXDLIN(  62)				if ((q > maxY)) {
HXLINE(  62)					goto _hx_goto_6;
            				}
            			}
            			_hx_goto_6:;
            		}
HXLINE(  63)		{
HXLINE(  63)			Float x = this->strokeWidth;
HXDLIN(  63)			Float y = this->strokeWidth;
HXDLIN(  63)			Float w = ( (Float)(::Std_obj::_hx_int((this->diameter - (( (Float)(2) ) * this->strokeWidth)))) );
HXDLIN(  63)			Float h1 = ( (Float)(::Std_obj::_hx_int((this->diameter - (( (Float)(2) ) * this->strokeWidth)))) );
HXDLIN(  63)			int color1 = this->fill;
HXDLIN(  63)			int p1 = ::Std_obj::_hx_int(x);
HXDLIN(  63)			int xx1 = p1;
HXDLIN(  63)			int q1 = ::Std_obj::_hx_int(y);
HXDLIN(  63)			int maxX1 = ::Std_obj::_hx_int((x + w));
HXDLIN(  63)			int maxY1 = ::Std_obj::_hx_int((y + h1));
HXDLIN(  63)			while(true){
HXLINE(  63)				{
HXLINE(  63)					p1 = (p1 + 1);
HXDLIN(  63)					int x = (p1 - 1);
HXDLIN(  63)					int this1 = color1;
HXDLIN(  63)					int c = this1;
HXDLIN(  63)					bool _hx_tmp;
HXDLIN(  63)					if ((((c >> 24) & 255) < 254)) {
HXLINE(  63)						_hx_tmp = temp->transparent;
            					}
            					else {
HXLINE(  63)						_hx_tmp = false;
            					}
HXDLIN(  63)					if (_hx_tmp) {
HXLINE(  63)						int location;
HXDLIN(  63)						if (temp->useVirtualPos) {
HXLINE(  63)							location = ::Std_obj::_hx_int(((((( (Float)(q1) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            						}
            						else {
HXLINE(  63)							location = ::Std_obj::_hx_int(( (Float)(((q1 * temp->width) + x)) ));
            						}
HXDLIN(  63)						::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN(  63)						::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  63)						int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  63)						int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  63)						int this3 = this2;
HXDLIN(  63)						int this4;
HXDLIN(  63)						if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  63)							this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            						}
            						else {
HXLINE(  63)							this4 = this3;
            						}
HXDLIN(  63)						Float a1;
HXDLIN(  63)						int this5 = ((this4 >> 24) & 255);
HXDLIN(  63)						if ((this5 == 0)) {
HXLINE(  63)							a1 = ((Float)0.);
            						}
            						else {
HXLINE(  63)							a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            						}
HXDLIN(  63)						Float r1;
HXDLIN(  63)						int this6 = ((this4 >> 16) & 255);
HXDLIN(  63)						if ((this6 == 0)) {
HXLINE(  63)							r1 = ((Float)0.);
            						}
            						else {
HXLINE(  63)							r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            						}
HXDLIN(  63)						Float g1;
HXDLIN(  63)						int this7 = ((this4 >> 8) & 255);
HXDLIN(  63)						if ((this7 == 0)) {
HXLINE(  63)							g1 = ((Float)0.);
            						}
            						else {
HXLINE(  63)							g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            						}
HXDLIN(  63)						Float b1;
HXDLIN(  63)						int this8 = (this4 & 255);
HXDLIN(  63)						if ((this8 == 0)) {
HXLINE(  63)							b1 = ((Float)0.);
            						}
            						else {
HXLINE(  63)							b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            						}
HXDLIN(  63)						Float a2;
HXDLIN(  63)						int this9 = ((color1 >> 24) & 255);
HXDLIN(  63)						if ((this9 == 0)) {
HXLINE(  63)							a2 = ((Float)0.);
            						}
            						else {
HXLINE(  63)							a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            						}
HXDLIN(  63)						Float r2;
HXDLIN(  63)						int this10 = ((color1 >> 16) & 255);
HXDLIN(  63)						if ((this10 == 0)) {
HXLINE(  63)							r2 = ((Float)0.);
            						}
            						else {
HXLINE(  63)							r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            						}
HXDLIN(  63)						Float g2;
HXDLIN(  63)						int this11 = ((color1 >> 8) & 255);
HXDLIN(  63)						if ((this11 == 0)) {
HXLINE(  63)							g2 = ((Float)0.);
            						}
            						else {
HXLINE(  63)							g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            						}
HXDLIN(  63)						Float b2;
HXDLIN(  63)						int this12 = (color1 & 255);
HXDLIN(  63)						if ((this12 == 0)) {
HXLINE(  63)							b2 = ((Float)0.);
            						}
            						else {
HXLINE(  63)							b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            						}
HXDLIN(  63)						Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  63)						int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  63)						int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  63)						int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  63)						int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  63)						int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  63)						{
HXLINE(  63)							::haxe::io::ArrayBufferViewImpl this13 = temp->image;
HXDLIN(  63)							int value;
HXDLIN(  63)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  63)								value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            							}
            							else {
HXLINE(  63)								value = blended;
            							}
HXDLIN(  63)							bool _hx_tmp;
HXDLIN(  63)							if ((location >= 0)) {
HXLINE(  63)								_hx_tmp = (location < (this13->byteLength >> 2));
            							}
            							else {
HXLINE(  63)								_hx_tmp = false;
            							}
HXDLIN(  63)							if (_hx_tmp) {
HXLINE(  63)								::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  63)								int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  63)								_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  63)								_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  63)								_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  63)								_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            							}
            						}
            					}
            					else {
HXLINE(  63)						::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN(  63)						int index;
HXDLIN(  63)						if (temp->useVirtualPos) {
HXLINE(  63)							index = ::Std_obj::_hx_int(((((( (Float)(q1) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            						}
            						else {
HXLINE(  63)							index = ::Std_obj::_hx_int(( (Float)(((q1 * temp->width) + x)) ));
            						}
HXDLIN(  63)						int value;
HXDLIN(  63)						if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  63)							value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            						}
            						else {
HXLINE(  63)							value = c;
            						}
HXDLIN(  63)						bool _hx_tmp;
HXDLIN(  63)						if ((index >= 0)) {
HXLINE(  63)							_hx_tmp = (index < (this1->byteLength >> 2));
            						}
            						else {
HXLINE(  63)							_hx_tmp = false;
            						}
HXDLIN(  63)						if (_hx_tmp) {
HXLINE(  63)							::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  63)							int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  63)							_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  63)							_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  63)							_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  63)							_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            						}
            					}
            				}
HXDLIN(  63)				if ((p1 > maxX1)) {
HXLINE(  63)					p1 = xx1;
HXDLIN(  63)					q1 = (q1 + 1);
            				}
HXDLIN(  63)				if ((q1 > maxY1)) {
HXLINE(  63)					goto _hx_goto_7;
            				}
            			}
            			_hx_goto_7:;
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(SquareShape_obj,buildSquare,(void))

void SquareShape_obj::buildRounded(::pixelimage::ImageStruct temp){
            	HX_GC_STACKFRAME(&_hx_pos_e307939c9f56466b_65_buildRounded)
HXLINE(  66)		{
HXLINE(  66)			::pixelimage::ImageStruct pixelshape = temp;
HXDLIN(  66)			Float wid = this->diameter;
HXDLIN(  66)			Float hi = this->diameter;
HXDLIN(  66)			int color = this->strokeColor;
HXDLIN(  66)			 ::Dynamic dx = ((Float)-1.);
HXDLIN(  66)			 ::Dynamic dy = ((Float)-1.);
HXDLIN(  66)			 ::Dynamic fat = ((Float)-1.);
HXDLIN(  66)			 ::Dynamic tall = ((Float)-1.);
HXDLIN(  66)			if (::hx::IsLess( dx,((Float)0.) )) {
HXLINE(  66)				Float smallest;
HXDLIN(  66)				if ((hi < wid)) {
HXLINE(  66)					smallest = hi;
            				}
            				else {
HXLINE(  66)					smallest = wid;
            				}
HXDLIN(  66)				Float goldenRatio = ((Float)1.61803398875);
HXLINE(  27)				dx = (smallest / (goldenRatio + 2));
            			}
HXLINE(  66)			if (::hx::IsLess( dy,((Float)0.) )) {
HXLINE(  29)				dy = dx;
            			}
HXLINE(  66)			if (::hx::IsLess( fat,((Float)0.) )) {
HXLINE(  30)				fat = (wid - (( (Float)(2) ) * ( (Float)(dx) )));
            			}
HXLINE(  66)			if (::hx::IsLess( tall,((Float)0.) )) {
HXLINE(  31)				tall = (hi - (( (Float)(2) ) * ( (Float)(dy) )));
            			}
HXLINE(  66)			Float rightRadius = ((wid - ( (Float)(fat) )) - ( (Float)(dx) ));
HXDLIN(  66)			Float bottomRadius = ((hi - ( (Float)(tall) )) - ( (Float)(dy) ));
HXDLIN(  66)			Float farX = (dx + fat);
HXDLIN(  66)			Float lowerY = (dy + tall);
HXDLIN(  66)			{
HXLINE(  66)				Float cx = ( (Float)(dx) );
HXDLIN(  66)				Float cy = ( (Float)(dy) );
HXDLIN(  66)				Float rx = ( (Float)(dx) );
HXDLIN(  66)				Float ry = ( (Float)(dy) );
HXDLIN(  66)				{
HXLINE(  66)					 ::Dynamic targetError = ((Float)1.05);
HXDLIN(  66)					if (::hx::IsNull( targetError )) {
HXLINE( 840)						targetError = ((Float)1.05);
            					}
HXLINE(  66)					Float rSmall;
HXDLIN(  66)					if ((rx > ry)) {
HXLINE(  66)						rSmall = ry;
            					}
            					else {
HXLINE(  66)						rSmall = rx;
            					}
HXDLIN(  66)					 ::Dynamic targetE = ( (Float)(targetError) );
HXDLIN(  66)					if (::hx::IsNull( targetE )) {
HXLINE(  20)						targetE = ((Float)1.05);
            					}
HXLINE(  66)					int result = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE) ) / rSmall)))));
HXDLIN(  66)					int noSides;
HXDLIN(  66)					if ((result < 12)) {
HXLINE(  66)						noSides = 12;
            					}
            					else {
HXLINE(  66)						if ((result > 500)) {
HXLINE(  66)							noSides = 500;
            						}
            						else {
HXLINE(  66)							noSides = result;
            						}
            					}
HXDLIN(  66)					int sides = (::Math_obj::ceil((( (Float)(noSides) ) / ( (Float)(4) ))) * 4);
HXDLIN(  66)					Float theta = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides) ));
HXDLIN(  66)					Float omega = ::Math_obj::PI;
HXDLIN(  66)					int quarter = ::Std_obj::_hx_int((( (Float)(sides) ) / ( (Float)(4) )));
HXDLIN(  66)					Float lastX = ((Float)0.);
HXDLIN(  66)					Float lastY = ((Float)0.);
HXDLIN(  66)					{
HXLINE(  26)						lastX = (cx + (rx * ::Math_obj::cos(((( (Float)(sides) ) * theta) + omega))));
HXLINE(  27)						lastY = (cy + (ry * ::Math_obj::sin(((( (Float)(sides) ) * theta) + omega))));
            					}
HXLINE(  66)					{
HXLINE(  66)						int _g = 0;
HXDLIN(  66)						int _g1 = (quarter + 1);
HXDLIN(  66)						while((_g < _g1)){
HXLINE(  66)							_g = (_g + 1);
HXDLIN(  66)							int i = (_g - 1);
HXDLIN(  66)							Float nextX = (cx + (rx * ::Math_obj::cos((((( (Float)(i) ) * theta) + ((Float)0.0001)) + omega))));
HXDLIN(  66)							Float nextY = (cy + (ry * ::Math_obj::sin((((( (Float)(i) ) * theta) + ((Float)0.0001)) + omega))));
HXDLIN(  66)							{
HXLINE(  66)								bool hasHit = false;
HXDLIN(  66)								bool hasUndo = false;
HXDLIN(  66)								{
HXLINE(  66)									Float bx = lastX;
HXDLIN(  66)									Float by = lastY;
HXDLIN(  66)									Float cx1 = nextX;
HXDLIN(  66)									Float cy1 = nextY;
HXDLIN(  66)									bool adjustWinding = (((((cx * by) - (bx * cy)) + ((bx * cy1) - (cx1 * by))) + ((cx1 * cy) - (cx * cy1))) > 0);
HXDLIN(  66)									if (!(adjustWinding)) {
HXLINE(  66)										Float bx_ = bx;
HXDLIN(  66)										Float by_ = by;
HXLINE(  26)										bx = cx1;
HXLINE(  27)										by = cy1;
HXLINE(  28)										cx1 = bx_;
HXLINE(  29)										cy1 = by_;
            									}
HXLINE(  66)									{
HXLINE(  66)										Float s0 = ((cy * cx1) - (cx * cy1));
HXDLIN(  66)										Float sx = (cy1 - cy);
HXDLIN(  66)										Float sy = (cx - cx1);
HXDLIN(  66)										Float t0 = ((cx * by) - (cy * bx));
HXDLIN(  66)										Float tx = (cy - by);
HXDLIN(  66)										Float ty = (bx - cx);
HXDLIN(  66)										Float A = ((((-(by) * cx1) + (cy * (-(bx) + cx1))) + (cx * (by - cy1))) + (bx * cy1));
HXDLIN(  66)										::pixelimage::iter::IntIterStart xIter3;
HXDLIN(  66)										if ((cx > bx)) {
HXLINE(  66)											if ((cx > cx1)) {
HXLINE(  66)												int min;
HXDLIN(  66)												if ((bx > cx1)) {
HXLINE(  66)													min = ::Math_obj::floor(cx1);
            												}
            												else {
HXLINE(  66)													min = ::Math_obj::floor(bx);
            												}
HXDLIN(  66)												int ii_min = min;
HXDLIN(  66)												int ii_max = ::Math_obj::ceil(cx);
HXDLIN(  66)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)												xIter3 = this1;
            											}
            											else {
HXLINE(  66)												int ii_min = ::Math_obj::floor(bx);
HXDLIN(  66)												int ii_max = ::Math_obj::ceil(cx1);
HXDLIN(  66)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)												xIter3 = this1;
            											}
            										}
            										else {
HXLINE(  66)											if ((bx > cx1)) {
HXLINE(  66)												int min;
HXDLIN(  66)												if ((cx > cx1)) {
HXLINE(  66)													min = ::Math_obj::floor(cx1);
            												}
            												else {
HXLINE(  66)													min = ::Math_obj::ceil(cx);
            												}
HXDLIN(  66)												int ii_min = min;
HXDLIN(  66)												int ii_max = ::Math_obj::ceil(bx);
HXDLIN(  66)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)												xIter3 = this1;
            											}
            											else {
HXLINE(  66)												int ii_min = ::Math_obj::floor(cx);
HXDLIN(  66)												int ii_max = ::Math_obj::ceil(cx1);
HXDLIN(  66)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)												xIter3 = this1;
            											}
            										}
HXDLIN(  66)										::pixelimage::iter::IntIterStart yIter3;
HXDLIN(  66)										if ((cy > by)) {
HXLINE(  66)											if ((cy > cy1)) {
HXLINE(  66)												int min;
HXDLIN(  66)												if ((by > cy1)) {
HXLINE(  66)													min = ::Math_obj::floor(cy1);
            												}
            												else {
HXLINE(  66)													min = ::Math_obj::floor(by);
            												}
HXDLIN(  66)												int ii_min = min;
HXDLIN(  66)												int ii_max = ::Math_obj::ceil(cy);
HXDLIN(  66)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)												yIter3 = this1;
            											}
            											else {
HXLINE(  66)												int ii_min = ::Math_obj::floor(by);
HXDLIN(  66)												int ii_max = ::Math_obj::ceil(cy1);
HXDLIN(  66)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)												yIter3 = this1;
            											}
            										}
            										else {
HXLINE(  66)											if ((by > cy1)) {
HXLINE(  66)												int min;
HXDLIN(  66)												if ((cy > cy1)) {
HXLINE(  66)													min = ::Math_obj::floor(cy1);
            												}
            												else {
HXLINE(  66)													min = ::Math_obj::ceil(cy);
            												}
HXDLIN(  66)												int ii_min = min;
HXDLIN(  66)												int ii_max = ::Math_obj::ceil(by);
HXDLIN(  66)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)												yIter3 = this1;
            											}
            											else {
HXLINE(  66)												int ii_min = ::Math_obj::floor(cy);
HXDLIN(  66)												int ii_max = ::Math_obj::ceil(cy1);
HXDLIN(  66)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)												yIter3 = this1;
            											}
            										}
HXDLIN(  66)										::pixelimage::ImageStruct undoImage = null();
HXDLIN(  66)										if (hasUndo) {
HXLINE(  66)											int w = ((xIter3->max - xIter3->start) + 1);
HXDLIN(  66)											int h = ((yIter3->max - yIter3->start) + 1);
HXDLIN(  66)											int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN(  66)											::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  66)											::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN(  66)											::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN(  66)											undoImage = this3;
HXDLIN(  66)											{
HXLINE(  66)												int rectLeft = xIter3->start;
HXDLIN(  66)												int rectTop = yIter3->start;
HXDLIN(  66)												int rectRight = xIter3->max;
HXDLIN(  66)												bool forceClear = false;
HXDLIN(  66)												{
HXLINE(  66)													int _g = rectTop;
HXDLIN(  66)													int _g1 = yIter3->max;
HXDLIN(  66)													while((_g < _g1)){
HXLINE(  66)														_g = (_g + 1);
HXDLIN(  66)														int dy = (_g - 1);
HXDLIN(  66)														{
HXLINE(  66)															int _g1 = rectLeft;
HXDLIN(  66)															int _g2 = rectRight;
HXDLIN(  66)															while((_g1 < _g2)){
HXLINE(  66)																_g1 = (_g1 + 1);
HXDLIN(  66)																int dx = (_g1 - 1);
HXDLIN(  66)																::haxe::io::ArrayBufferViewImpl this1 = pixelshape->image;
HXDLIN(  66)																int index;
HXDLIN(  66)																if (pixelshape->useVirtualPos) {
HXLINE(  66)																	index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - pixelshape->virtualY) * ( (Float)(pixelshape->width) )) + dx) - pixelshape->virtualX));
            																}
            																else {
HXLINE(  66)																	index = ::Std_obj::_hx_int(( (Float)(((dy * pixelshape->width) + dx)) ));
            																}
HXDLIN(  66)																::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)																int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  66)																int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  66)																int col;
HXDLIN(  66)																if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)																	col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            																}
            																else {
HXLINE(  66)																	col = c;
            																}
HXDLIN(  66)																bool _hx_tmp;
HXDLIN(  66)																if (pixelshape->useMask) {
HXLINE(  66)																	_hx_tmp = ::hx::IsNotNull( pixelshape->mask );
            																}
            																else {
HXLINE(  66)																	_hx_tmp = false;
            																}
HXDLIN(  66)																if (_hx_tmp) {
HXLINE(  66)																	::pixelimage::ImageStruct this1 = pixelshape->mask;
HXDLIN(  66)																	::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  66)																	int index;
HXDLIN(  66)																	if (this1->useVirtualPos) {
HXLINE(  66)																		index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            																	}
            																	else {
HXLINE(  66)																		index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            																	}
HXDLIN(  66)																	::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  66)																	int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  66)																	int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  66)																	int v;
HXDLIN(  66)																	if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)																		v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            																	}
            																	else {
HXLINE(  66)																		v = c;
            																	}
HXDLIN(  66)																	int this3 = v;
HXDLIN(  66)																	int maskPixel = this3;
HXDLIN(  66)																	int this4 = col;
HXDLIN(  66)																	int this5 = this4;
HXDLIN(  66)																	if ((maskPixel == 0)) {
HXLINE(  66)																		int this1 = this5;
HXDLIN(  66)																		col = this1;
            																	}
            																	else {
HXLINE(  66)																		Float m0;
HXDLIN(  66)																		int this1 = ((maskPixel >> 24) & 255);
HXDLIN(  66)																		if ((this1 == 0)) {
HXLINE(  66)																			m0 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float m1;
HXDLIN(  66)																		int this2 = ((maskPixel >> 16) & 255);
HXDLIN(  66)																		if ((this2 == 0)) {
HXLINE(  66)																			m1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float m2;
HXDLIN(  66)																		int this3 = ((maskPixel >> 8) & 255);
HXDLIN(  66)																		if ((this3 == 0)) {
HXLINE(  66)																			m2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float m3;
HXDLIN(  66)																		int this4 = (maskPixel & 255);
HXDLIN(  66)																		if ((this4 == 0)) {
HXLINE(  66)																			m3 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN(  66)																		int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN(  66)																		int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN(  66)																		int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN(  66)																		col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            																	}
            																}
HXDLIN(  66)																if ((col != 0)) {
HXLINE(  66)																	int x = (dx - rectLeft);
HXDLIN(  66)																	int y = (dy - rectTop);
HXDLIN(  66)																	int this1 = col;
HXDLIN(  66)																	int c = this1;
HXDLIN(  66)																	bool _hx_tmp;
HXDLIN(  66)																	if ((((c >> 24) & 255) < 254)) {
HXLINE(  66)																		_hx_tmp = undoImage->transparent;
            																	}
            																	else {
HXLINE(  66)																		_hx_tmp = false;
            																	}
HXDLIN(  66)																	if (_hx_tmp) {
HXLINE(  66)																		int location;
HXDLIN(  66)																		if (undoImage->useVirtualPos) {
HXLINE(  66)																			location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            																		}
            																		else {
HXLINE(  66)																			location = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            																		}
HXDLIN(  66)																		::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  66)																		::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)																		int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  66)																		int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  66)																		int this3 = this2;
HXDLIN(  66)																		int this4;
HXDLIN(  66)																		if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)																			this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            																		}
            																		else {
HXLINE(  66)																			this4 = this3;
            																		}
HXDLIN(  66)																		Float a1;
HXDLIN(  66)																		int this5 = ((this4 >> 24) & 255);
HXDLIN(  66)																		if ((this5 == 0)) {
HXLINE(  66)																			a1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float r1;
HXDLIN(  66)																		int this6 = ((this4 >> 16) & 255);
HXDLIN(  66)																		if ((this6 == 0)) {
HXLINE(  66)																			r1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float g1;
HXDLIN(  66)																		int this7 = ((this4 >> 8) & 255);
HXDLIN(  66)																		if ((this7 == 0)) {
HXLINE(  66)																			g1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float b1;
HXDLIN(  66)																		int this8 = (this4 & 255);
HXDLIN(  66)																		if ((this8 == 0)) {
HXLINE(  66)																			b1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float a2;
HXDLIN(  66)																		int this9 = ((col >> 24) & 255);
HXDLIN(  66)																		if ((this9 == 0)) {
HXLINE(  66)																			a2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float r2;
HXDLIN(  66)																		int this10 = ((col >> 16) & 255);
HXDLIN(  66)																		if ((this10 == 0)) {
HXLINE(  66)																			r2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float g2;
HXDLIN(  66)																		int this11 = ((col >> 8) & 255);
HXDLIN(  66)																		if ((this11 == 0)) {
HXLINE(  66)																			g2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float b2;
HXDLIN(  66)																		int this12 = (col & 255);
HXDLIN(  66)																		if ((this12 == 0)) {
HXLINE(  66)																			b2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  66)																		int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  66)																		int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  66)																		int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  66)																		int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  66)																		int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  66)																		{
HXLINE(  66)																			::haxe::io::ArrayBufferViewImpl this13 = undoImage->image;
HXDLIN(  66)																			int value;
HXDLIN(  66)																			if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)																				value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																			}
            																			else {
HXLINE(  66)																				value = blended;
            																			}
HXDLIN(  66)																			bool _hx_tmp;
HXDLIN(  66)																			if ((location >= 0)) {
HXLINE(  66)																				_hx_tmp = (location < (this13->byteLength >> 2));
            																			}
            																			else {
HXLINE(  66)																				_hx_tmp = false;
            																			}
HXDLIN(  66)																			if (_hx_tmp) {
HXLINE(  66)																				::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  66)																				int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  66)																				_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  66)																				_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  66)																				_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  66)																				_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																			}
            																		}
            																	}
            																	else {
HXLINE(  66)																		::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  66)																		int index;
HXDLIN(  66)																		if (undoImage->useVirtualPos) {
HXLINE(  66)																			index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            																		}
            																		else {
HXLINE(  66)																			index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            																		}
HXDLIN(  66)																		int value;
HXDLIN(  66)																		if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)																			value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            																		}
            																		else {
HXLINE(  66)																			value = c;
            																		}
HXDLIN(  66)																		bool _hx_tmp;
HXDLIN(  66)																		if ((index >= 0)) {
HXLINE(  66)																			_hx_tmp = (index < (this1->byteLength >> 2));
            																		}
            																		else {
HXLINE(  66)																			_hx_tmp = false;
            																		}
HXDLIN(  66)																		if (_hx_tmp) {
HXLINE(  66)																			::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)																			int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  66)																			_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  66)																			_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  66)																			_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  66)																			_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																		}
            																	}
            																}
            																else {
HXLINE(  66)																	if (forceClear) {
HXLINE(  66)																		::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  66)																		int x = (dx - rectLeft);
HXDLIN(  66)																		int y = (dy - rectTop);
HXDLIN(  66)																		int index;
HXDLIN(  66)																		if (undoImage->useVirtualPos) {
HXLINE(  66)																			index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            																		}
            																		else {
HXLINE(  66)																			index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            																		}
HXDLIN(  66)																		bool _hx_tmp;
HXDLIN(  66)																		if ((index >= 0)) {
HXLINE(  66)																			_hx_tmp = (index < (this1->byteLength >> 2));
            																		}
            																		else {
HXLINE(  66)																			_hx_tmp = false;
            																		}
HXDLIN(  66)																		if (_hx_tmp) {
HXLINE(  66)																			::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)																			int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  66)																			_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  66)																			_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  66)																			_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  66)																			_this->b[(pos + 3)] = ( (unsigned char)(0) );
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
            										}
HXDLIN(  66)										bool found = false;
HXDLIN(  66)										Float s = ((Float)0.);
HXDLIN(  66)										Float t = ((Float)0.);
HXDLIN(  66)										Float sxx = ((Float)0.);
HXDLIN(  66)										Float txx = ((Float)0.);
HXDLIN(  66)										{
HXLINE(  66)											int _g_min = xIter3->start;
HXDLIN(  66)											int _g_max = xIter3->max;
HXDLIN(  66)											while((_g_min < _g_max)){
HXLINE(  66)												_g_min = (_g_min + 1);
HXDLIN(  66)												int x = (_g_min - 1);
HXLINE(  61)												sxx = (sx * ( (Float)(x) ));
HXLINE(  62)												txx = (tx * ( (Float)(x) ));
HXLINE(  63)												found = false;
HXLINE(  66)												{
HXLINE(  66)													int _g_min1 = yIter3->start;
HXDLIN(  66)													int _g_max = yIter3->max;
HXDLIN(  66)													while((_g_min1 < _g_max)){
HXLINE(  66)														_g_min1 = (_g_min1 + 1);
HXDLIN(  66)														int y = (_g_min1 - 1);
HXLINE(  65)														s = ((s0 + sxx) + (sy * ( (Float)(y) )));
HXLINE(  66)														t = ((t0 + txx) + (ty * ( (Float)(y) )));
HXDLIN(  66)														bool _hx_tmp;
HXDLIN(  66)														if (!((s <= 0))) {
HXLINE(  66)															_hx_tmp = (t <= 0);
            														}
            														else {
HXLINE(  66)															_hx_tmp = true;
            														}
HXDLIN(  66)														if (_hx_tmp) {
HXLINE(  66)															if (found) {
HXLINE(  66)																goto _hx_goto_13;
            															}
            														}
            														else {
HXLINE(  66)															if (((s + t) < A)) {
HXLINE(  66)																{
HXLINE(  66)																	int this1 = color;
HXDLIN(  66)																	int c = this1;
HXDLIN(  66)																	bool _hx_tmp;
HXDLIN(  66)																	if ((((c >> 24) & 255) < 254)) {
HXLINE(  66)																		_hx_tmp = pixelshape->transparent;
            																	}
            																	else {
HXLINE(  66)																		_hx_tmp = false;
            																	}
HXDLIN(  66)																	if (_hx_tmp) {
HXLINE(  66)																		int location;
HXDLIN(  66)																		if (pixelshape->useVirtualPos) {
HXLINE(  66)																			location = ::Std_obj::_hx_int(((((( (Float)(y) ) - pixelshape->virtualY) * ( (Float)(pixelshape->width) )) + x) - pixelshape->virtualX));
            																		}
            																		else {
HXLINE(  66)																			location = ::Std_obj::_hx_int(( (Float)(((y * pixelshape->width) + x)) ));
            																		}
HXDLIN(  66)																		::haxe::io::ArrayBufferViewImpl this1 = pixelshape->image;
HXDLIN(  66)																		::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)																		int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  66)																		int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  66)																		int this3 = this2;
HXDLIN(  66)																		int this4;
HXDLIN(  66)																		if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)																			this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            																		}
            																		else {
HXLINE(  66)																			this4 = this3;
            																		}
HXDLIN(  66)																		Float a1;
HXDLIN(  66)																		int this5 = ((this4 >> 24) & 255);
HXDLIN(  66)																		if ((this5 == 0)) {
HXLINE(  66)																			a1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float r1;
HXDLIN(  66)																		int this6 = ((this4 >> 16) & 255);
HXDLIN(  66)																		if ((this6 == 0)) {
HXLINE(  66)																			r1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float g1;
HXDLIN(  66)																		int this7 = ((this4 >> 8) & 255);
HXDLIN(  66)																		if ((this7 == 0)) {
HXLINE(  66)																			g1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float b1;
HXDLIN(  66)																		int this8 = (this4 & 255);
HXDLIN(  66)																		if ((this8 == 0)) {
HXLINE(  66)																			b1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float a2;
HXDLIN(  66)																		int this9 = ((color >> 24) & 255);
HXDLIN(  66)																		if ((this9 == 0)) {
HXLINE(  66)																			a2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float r2;
HXDLIN(  66)																		int this10 = ((color >> 16) & 255);
HXDLIN(  66)																		if ((this10 == 0)) {
HXLINE(  66)																			r2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float g2;
HXDLIN(  66)																		int this11 = ((color >> 8) & 255);
HXDLIN(  66)																		if ((this11 == 0)) {
HXLINE(  66)																			g2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float b2;
HXDLIN(  66)																		int this12 = (color & 255);
HXDLIN(  66)																		if ((this12 == 0)) {
HXLINE(  66)																			b2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  66)																		int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  66)																		int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  66)																		int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  66)																		int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  66)																		int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  66)																		{
HXLINE(  66)																			::haxe::io::ArrayBufferViewImpl this13 = pixelshape->image;
HXDLIN(  66)																			int value;
HXDLIN(  66)																			if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)																				value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																			}
            																			else {
HXLINE(  66)																				value = blended;
            																			}
HXDLIN(  66)																			bool _hx_tmp;
HXDLIN(  66)																			if ((location >= 0)) {
HXLINE(  66)																				_hx_tmp = (location < (this13->byteLength >> 2));
            																			}
            																			else {
HXLINE(  66)																				_hx_tmp = false;
            																			}
HXDLIN(  66)																			if (_hx_tmp) {
HXLINE(  66)																				::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  66)																				int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  66)																				_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  66)																				_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  66)																				_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  66)																				_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																			}
            																		}
            																	}
            																	else {
HXLINE(  66)																		::haxe::io::ArrayBufferViewImpl this1 = pixelshape->image;
HXDLIN(  66)																		int index;
HXDLIN(  66)																		if (pixelshape->useVirtualPos) {
HXLINE(  66)																			index = ::Std_obj::_hx_int(((((( (Float)(y) ) - pixelshape->virtualY) * ( (Float)(pixelshape->width) )) + x) - pixelshape->virtualX));
            																		}
            																		else {
HXLINE(  66)																			index = ::Std_obj::_hx_int(( (Float)(((y * pixelshape->width) + x)) ));
            																		}
HXDLIN(  66)																		int value;
HXDLIN(  66)																		if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)																			value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            																		}
            																		else {
HXLINE(  66)																			value = c;
            																		}
HXDLIN(  66)																		bool _hx_tmp;
HXDLIN(  66)																		if ((index >= 0)) {
HXLINE(  66)																			_hx_tmp = (index < (this1->byteLength >> 2));
            																		}
            																		else {
HXLINE(  66)																			_hx_tmp = false;
            																		}
HXDLIN(  66)																		if (_hx_tmp) {
HXLINE(  66)																			::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)																			int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  66)																			_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  66)																			_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  66)																			_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  66)																			_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																		}
            																	}
            																}
HXLINE(  74)																found = true;
            															}
            															else {
HXLINE(  66)																if (found) {
HXLINE(  66)																	goto _hx_goto_13;
            																}
            															}
            														}
            													}
            													_hx_goto_13:;
            												}
            											}
            										}
HXDLIN(  66)										if ((hasHit == true)) {
HXLINE(  66)											::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,cx,cy,bx,by,cx1,cy1,true);
HXDLIN(  66)											if (hasUndo) {
HXLINE(  66)												v->undoImage = undoImage;
HXDLIN(  66)												v->undoX = xIter3->start;
HXDLIN(  66)												v->undoY = yIter3->start;
            											}
            										}
            									}
            								}
            							}
HXLINE(  46)							lastX = nextX;
HXLINE(  47)							lastY = nextY;
            						}
            					}
            				}
            			}
HXLINE(  66)			{
HXLINE(  66)				Float x = ( (Float)(dx) );
HXDLIN(  66)				int p = ::Std_obj::_hx_int(x);
HXDLIN(  66)				int xx = p;
HXDLIN(  66)				int q = 0;
HXDLIN(  66)				int maxX = ::Std_obj::_hx_int((x + ( (Float)(fat) )));
HXDLIN(  66)				int maxY = ::Std_obj::_hx_int(( (Float)(dy) ));
HXDLIN(  66)				while(true){
HXLINE(  66)					{
HXLINE(  66)						p = (p + 1);
HXDLIN(  66)						int x = (p - 1);
HXDLIN(  66)						int this1 = color;
HXDLIN(  66)						int c = this1;
HXDLIN(  66)						bool _hx_tmp;
HXDLIN(  66)						if ((((c >> 24) & 255) < 254)) {
HXLINE(  66)							_hx_tmp = pixelshape->transparent;
            						}
            						else {
HXLINE(  66)							_hx_tmp = false;
            						}
HXDLIN(  66)						if (_hx_tmp) {
HXLINE(  66)							int location;
HXDLIN(  66)							if (pixelshape->useVirtualPos) {
HXLINE(  66)								location = ::Std_obj::_hx_int(((((( (Float)(q) ) - pixelshape->virtualY) * ( (Float)(pixelshape->width) )) + x) - pixelshape->virtualX));
            							}
            							else {
HXLINE(  66)								location = ::Std_obj::_hx_int(( (Float)(((q * pixelshape->width) + x)) ));
            							}
HXDLIN(  66)							::haxe::io::ArrayBufferViewImpl this1 = pixelshape->image;
HXDLIN(  66)							::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)							int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  66)							int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  66)							int this3 = this2;
HXDLIN(  66)							int this4;
HXDLIN(  66)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)								this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            							}
            							else {
HXLINE(  66)								this4 = this3;
            							}
HXDLIN(  66)							Float a1;
HXDLIN(  66)							int this5 = ((this4 >> 24) & 255);
HXDLIN(  66)							if ((this5 == 0)) {
HXLINE(  66)								a1 = ((Float)0.);
            							}
            							else {
HXLINE(  66)								a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            							}
HXDLIN(  66)							Float r1;
HXDLIN(  66)							int this6 = ((this4 >> 16) & 255);
HXDLIN(  66)							if ((this6 == 0)) {
HXLINE(  66)								r1 = ((Float)0.);
            							}
            							else {
HXLINE(  66)								r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            							}
HXDLIN(  66)							Float g1;
HXDLIN(  66)							int this7 = ((this4 >> 8) & 255);
HXDLIN(  66)							if ((this7 == 0)) {
HXLINE(  66)								g1 = ((Float)0.);
            							}
            							else {
HXLINE(  66)								g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            							}
HXDLIN(  66)							Float b1;
HXDLIN(  66)							int this8 = (this4 & 255);
HXDLIN(  66)							if ((this8 == 0)) {
HXLINE(  66)								b1 = ((Float)0.);
            							}
            							else {
HXLINE(  66)								b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            							}
HXDLIN(  66)							Float a2;
HXDLIN(  66)							int this9 = ((color >> 24) & 255);
HXDLIN(  66)							if ((this9 == 0)) {
HXLINE(  66)								a2 = ((Float)0.);
            							}
            							else {
HXLINE(  66)								a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            							}
HXDLIN(  66)							Float r2;
HXDLIN(  66)							int this10 = ((color >> 16) & 255);
HXDLIN(  66)							if ((this10 == 0)) {
HXLINE(  66)								r2 = ((Float)0.);
            							}
            							else {
HXLINE(  66)								r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            							}
HXDLIN(  66)							Float g2;
HXDLIN(  66)							int this11 = ((color >> 8) & 255);
HXDLIN(  66)							if ((this11 == 0)) {
HXLINE(  66)								g2 = ((Float)0.);
            							}
            							else {
HXLINE(  66)								g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            							}
HXDLIN(  66)							Float b2;
HXDLIN(  66)							int this12 = (color & 255);
HXDLIN(  66)							if ((this12 == 0)) {
HXLINE(  66)								b2 = ((Float)0.);
            							}
            							else {
HXLINE(  66)								b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            							}
HXDLIN(  66)							Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  66)							int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  66)							int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  66)							int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  66)							int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  66)							int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  66)							{
HXLINE(  66)								::haxe::io::ArrayBufferViewImpl this13 = pixelshape->image;
HXDLIN(  66)								int value;
HXDLIN(  66)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)									value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            								}
            								else {
HXLINE(  66)									value = blended;
            								}
HXDLIN(  66)								bool _hx_tmp;
HXDLIN(  66)								if ((location >= 0)) {
HXLINE(  66)									_hx_tmp = (location < (this13->byteLength >> 2));
            								}
            								else {
HXLINE(  66)									_hx_tmp = false;
            								}
HXDLIN(  66)								if (_hx_tmp) {
HXLINE(  66)									::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  66)									int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  66)									_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  66)									_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  66)									_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  66)									_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            								}
            							}
            						}
            						else {
HXLINE(  66)							::haxe::io::ArrayBufferViewImpl this1 = pixelshape->image;
HXDLIN(  66)							int index;
HXDLIN(  66)							if (pixelshape->useVirtualPos) {
HXLINE(  66)								index = ::Std_obj::_hx_int(((((( (Float)(q) ) - pixelshape->virtualY) * ( (Float)(pixelshape->width) )) + x) - pixelshape->virtualX));
            							}
            							else {
HXLINE(  66)								index = ::Std_obj::_hx_int(( (Float)(((q * pixelshape->width) + x)) ));
            							}
HXDLIN(  66)							int value;
HXDLIN(  66)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)								value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            							}
            							else {
HXLINE(  66)								value = c;
            							}
HXDLIN(  66)							bool _hx_tmp;
HXDLIN(  66)							if ((index >= 0)) {
HXLINE(  66)								_hx_tmp = (index < (this1->byteLength >> 2));
            							}
            							else {
HXLINE(  66)								_hx_tmp = false;
            							}
HXDLIN(  66)							if (_hx_tmp) {
HXLINE(  66)								::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)								int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  66)								_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  66)								_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  66)								_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  66)								_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            							}
            						}
            					}
HXDLIN(  66)					if ((p > maxX)) {
HXLINE( 247)						p = xx;
HXLINE(  66)						q = (q + 1);
            					}
HXDLIN(  66)					if ((q > maxY)) {
HXLINE(  66)						goto _hx_goto_14;
            					}
            				}
            				_hx_goto_14:;
            			}
HXDLIN(  66)			{
HXLINE(  66)				Float cy1 = ( (Float)(dy) );
HXDLIN(  66)				Float ry1 = ( (Float)(dy) );
HXDLIN(  66)				{
HXLINE(  66)					 ::Dynamic targetError1 = ((Float)1.05);
HXDLIN(  66)					if (::hx::IsNull( targetError1 )) {
HXLINE( 840)						targetError1 = ((Float)1.05);
            					}
HXLINE(  66)					Float rSmall1;
HXDLIN(  66)					if ((rightRadius > ry1)) {
HXLINE(  66)						rSmall1 = ry1;
            					}
            					else {
HXLINE(  66)						rSmall1 = rightRadius;
            					}
HXDLIN(  66)					 ::Dynamic targetE1 = ( (Float)(targetError1) );
HXDLIN(  66)					if (::hx::IsNull( targetE1 )) {
HXLINE(  20)						targetE1 = ((Float)1.05);
            					}
HXLINE(  66)					int result1 = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE1) ) / rSmall1)))));
HXDLIN(  66)					int noSides1;
HXDLIN(  66)					if ((result1 < 12)) {
HXLINE(  66)						noSides1 = 12;
            					}
            					else {
HXLINE(  66)						if ((result1 > 500)) {
HXLINE(  66)							noSides1 = 500;
            						}
            						else {
HXLINE(  66)							noSides1 = result1;
            						}
            					}
HXDLIN(  66)					int sides1 = (::Math_obj::ceil((( (Float)(noSides1) ) / ( (Float)(4) ))) * 4);
HXDLIN(  66)					Float theta1 = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides1) ));
HXDLIN(  66)					Float omega1 = ((( (Float)(3) ) * ::Math_obj::PI) / ( (Float)(2) ));
HXDLIN(  66)					int quarter1 = ::Std_obj::_hx_int((( (Float)(sides1) ) / ( (Float)(4) )));
HXDLIN(  66)					Float lastX1 = ((Float)0.);
HXDLIN(  66)					Float lastY1 = ((Float)0.);
HXDLIN(  66)					{
HXLINE(  26)						lastX1 = (farX + (rightRadius * ::Math_obj::cos(((( (Float)(sides1) ) * theta1) + omega1))));
HXLINE(  27)						lastY1 = (cy1 + (ry1 * ::Math_obj::sin(((( (Float)(sides1) ) * theta1) + omega1))));
            					}
HXLINE(  66)					{
HXLINE(  66)						int _g2 = 0;
HXDLIN(  66)						int _g3 = (quarter1 + 1);
HXDLIN(  66)						while((_g2 < _g3)){
HXLINE(  66)							_g2 = (_g2 + 1);
HXDLIN(  66)							int i = (_g2 - 1);
HXDLIN(  66)							Float nextX = (farX + (rightRadius * ::Math_obj::cos((((( (Float)(i) ) * theta1) + ((Float)0.0001)) + omega1))));
HXDLIN(  66)							Float nextY = (cy1 + (ry1 * ::Math_obj::sin((((( (Float)(i) ) * theta1) + ((Float)0.0001)) + omega1))));
HXDLIN(  66)							{
HXLINE(  66)								bool hasHit = false;
HXDLIN(  66)								bool hasUndo = false;
HXDLIN(  66)								{
HXLINE(  66)									Float bx = lastX1;
HXDLIN(  66)									Float by = lastY1;
HXDLIN(  66)									Float cx = nextX;
HXDLIN(  66)									Float cy = nextY;
HXDLIN(  66)									bool adjustWinding = (((((farX * by) - (bx * cy1)) + ((bx * cy) - (cx * by))) + ((cx * cy1) - (farX * cy))) > 0);
HXDLIN(  66)									if (!(adjustWinding)) {
HXLINE(  66)										Float bx_ = bx;
HXDLIN(  66)										Float by_ = by;
HXLINE(  26)										bx = cx;
HXLINE(  27)										by = cy;
HXLINE(  28)										cx = bx_;
HXLINE(  29)										cy = by_;
            									}
HXLINE(  66)									{
HXLINE(  66)										Float s0 = ((cy1 * cx) - (farX * cy));
HXDLIN(  66)										Float sx = (cy - cy1);
HXDLIN(  66)										Float sy = (farX - cx);
HXDLIN(  66)										Float t0 = ((farX * by) - (cy1 * bx));
HXDLIN(  66)										Float tx = (cy1 - by);
HXDLIN(  66)										Float ty = (bx - farX);
HXDLIN(  66)										Float A = ((((-(by) * cx) + (cy1 * (-(bx) + cx))) + (farX * (by - cy))) + (bx * cy));
HXDLIN(  66)										::pixelimage::iter::IntIterStart xIter3;
HXDLIN(  66)										if ((farX > bx)) {
HXLINE(  66)											if ((farX > cx)) {
HXLINE(  66)												int min;
HXDLIN(  66)												if ((bx > cx)) {
HXLINE(  66)													min = ::Math_obj::floor(cx);
            												}
            												else {
HXLINE(  66)													min = ::Math_obj::floor(bx);
            												}
HXDLIN(  66)												int ii_min = min;
HXDLIN(  66)												int ii_max = ::Math_obj::ceil(farX);
HXDLIN(  66)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)												xIter3 = this1;
            											}
            											else {
HXLINE(  66)												int ii_min = ::Math_obj::floor(bx);
HXDLIN(  66)												int ii_max = ::Math_obj::ceil(cx);
HXDLIN(  66)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)												xIter3 = this1;
            											}
            										}
            										else {
HXLINE(  66)											if ((bx > cx)) {
HXLINE(  66)												int min;
HXDLIN(  66)												if ((farX > cx)) {
HXLINE(  66)													min = ::Math_obj::floor(cx);
            												}
            												else {
HXLINE(  66)													min = ::Math_obj::ceil(farX);
            												}
HXDLIN(  66)												int ii_min = min;
HXDLIN(  66)												int ii_max = ::Math_obj::ceil(bx);
HXDLIN(  66)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)												xIter3 = this1;
            											}
            											else {
HXLINE(  66)												int ii_min = ::Math_obj::floor(farX);
HXDLIN(  66)												int ii_max = ::Math_obj::ceil(cx);
HXDLIN(  66)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)												xIter3 = this1;
            											}
            										}
HXDLIN(  66)										::pixelimage::iter::IntIterStart yIter3;
HXDLIN(  66)										if ((cy1 > by)) {
HXLINE(  66)											if ((cy1 > cy)) {
HXLINE(  66)												int min;
HXDLIN(  66)												if ((by > cy)) {
HXLINE(  66)													min = ::Math_obj::floor(cy);
            												}
            												else {
HXLINE(  66)													min = ::Math_obj::floor(by);
            												}
HXDLIN(  66)												int ii_min = min;
HXDLIN(  66)												int ii_max = ::Math_obj::ceil(cy1);
HXDLIN(  66)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)												yIter3 = this1;
            											}
            											else {
HXLINE(  66)												int ii_min = ::Math_obj::floor(by);
HXDLIN(  66)												int ii_max = ::Math_obj::ceil(cy);
HXDLIN(  66)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)												yIter3 = this1;
            											}
            										}
            										else {
HXLINE(  66)											if ((by > cy)) {
HXLINE(  66)												int min;
HXDLIN(  66)												if ((cy1 > cy)) {
HXLINE(  66)													min = ::Math_obj::floor(cy);
            												}
            												else {
HXLINE(  66)													min = ::Math_obj::ceil(cy1);
            												}
HXDLIN(  66)												int ii_min = min;
HXDLIN(  66)												int ii_max = ::Math_obj::ceil(by);
HXDLIN(  66)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)												yIter3 = this1;
            											}
            											else {
HXLINE(  66)												int ii_min = ::Math_obj::floor(cy1);
HXDLIN(  66)												int ii_max = ::Math_obj::ceil(cy);
HXDLIN(  66)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)												yIter3 = this1;
            											}
            										}
HXDLIN(  66)										::pixelimage::ImageStruct undoImage = null();
HXDLIN(  66)										if (hasUndo) {
HXLINE(  66)											int w = ((xIter3->max - xIter3->start) + 1);
HXDLIN(  66)											int h = ((yIter3->max - yIter3->start) + 1);
HXDLIN(  66)											int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN(  66)											::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  66)											::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN(  66)											::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN(  66)											undoImage = this3;
HXDLIN(  66)											{
HXLINE(  66)												int rectLeft = xIter3->start;
HXDLIN(  66)												int rectTop = yIter3->start;
HXDLIN(  66)												int rectRight = xIter3->max;
HXDLIN(  66)												bool forceClear = false;
HXDLIN(  66)												{
HXLINE(  66)													int _g = rectTop;
HXDLIN(  66)													int _g1 = yIter3->max;
HXDLIN(  66)													while((_g < _g1)){
HXLINE(  66)														_g = (_g + 1);
HXDLIN(  66)														int dy = (_g - 1);
HXDLIN(  66)														{
HXLINE(  66)															int _g1 = rectLeft;
HXDLIN(  66)															int _g2 = rectRight;
HXDLIN(  66)															while((_g1 < _g2)){
HXLINE(  66)																_g1 = (_g1 + 1);
HXDLIN(  66)																int dx = (_g1 - 1);
HXDLIN(  66)																::haxe::io::ArrayBufferViewImpl this1 = pixelshape->image;
HXDLIN(  66)																int index;
HXDLIN(  66)																if (pixelshape->useVirtualPos) {
HXLINE(  66)																	index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - pixelshape->virtualY) * ( (Float)(pixelshape->width) )) + dx) - pixelshape->virtualX));
            																}
            																else {
HXLINE(  66)																	index = ::Std_obj::_hx_int(( (Float)(((dy * pixelshape->width) + dx)) ));
            																}
HXDLIN(  66)																::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)																int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  66)																int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  66)																int col;
HXDLIN(  66)																if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)																	col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            																}
            																else {
HXLINE(  66)																	col = c;
            																}
HXDLIN(  66)																bool _hx_tmp;
HXDLIN(  66)																if (pixelshape->useMask) {
HXLINE(  66)																	_hx_tmp = ::hx::IsNotNull( pixelshape->mask );
            																}
            																else {
HXLINE(  66)																	_hx_tmp = false;
            																}
HXDLIN(  66)																if (_hx_tmp) {
HXLINE(  66)																	::pixelimage::ImageStruct this1 = pixelshape->mask;
HXDLIN(  66)																	::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  66)																	int index;
HXDLIN(  66)																	if (this1->useVirtualPos) {
HXLINE(  66)																		index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            																	}
            																	else {
HXLINE(  66)																		index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            																	}
HXDLIN(  66)																	::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  66)																	int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  66)																	int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  66)																	int v;
HXDLIN(  66)																	if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)																		v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            																	}
            																	else {
HXLINE(  66)																		v = c;
            																	}
HXDLIN(  66)																	int this3 = v;
HXDLIN(  66)																	int maskPixel = this3;
HXDLIN(  66)																	int this4 = col;
HXDLIN(  66)																	int this5 = this4;
HXDLIN(  66)																	if ((maskPixel == 0)) {
HXLINE(  66)																		int this1 = this5;
HXDLIN(  66)																		col = this1;
            																	}
            																	else {
HXLINE(  66)																		Float m0;
HXDLIN(  66)																		int this1 = ((maskPixel >> 24) & 255);
HXDLIN(  66)																		if ((this1 == 0)) {
HXLINE(  66)																			m0 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float m1;
HXDLIN(  66)																		int this2 = ((maskPixel >> 16) & 255);
HXDLIN(  66)																		if ((this2 == 0)) {
HXLINE(  66)																			m1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float m2;
HXDLIN(  66)																		int this3 = ((maskPixel >> 8) & 255);
HXDLIN(  66)																		if ((this3 == 0)) {
HXLINE(  66)																			m2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float m3;
HXDLIN(  66)																		int this4 = (maskPixel & 255);
HXDLIN(  66)																		if ((this4 == 0)) {
HXLINE(  66)																			m3 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN(  66)																		int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN(  66)																		int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN(  66)																		int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN(  66)																		col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            																	}
            																}
HXDLIN(  66)																if ((col != 0)) {
HXLINE(  66)																	int x = (dx - rectLeft);
HXDLIN(  66)																	int y = (dy - rectTop);
HXDLIN(  66)																	int this1 = col;
HXDLIN(  66)																	int c = this1;
HXDLIN(  66)																	bool _hx_tmp;
HXDLIN(  66)																	if ((((c >> 24) & 255) < 254)) {
HXLINE(  66)																		_hx_tmp = undoImage->transparent;
            																	}
            																	else {
HXLINE(  66)																		_hx_tmp = false;
            																	}
HXDLIN(  66)																	if (_hx_tmp) {
HXLINE(  66)																		int location;
HXDLIN(  66)																		if (undoImage->useVirtualPos) {
HXLINE(  66)																			location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            																		}
            																		else {
HXLINE(  66)																			location = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            																		}
HXDLIN(  66)																		::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  66)																		::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)																		int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  66)																		int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  66)																		int this3 = this2;
HXDLIN(  66)																		int this4;
HXDLIN(  66)																		if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)																			this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            																		}
            																		else {
HXLINE(  66)																			this4 = this3;
            																		}
HXDLIN(  66)																		Float a1;
HXDLIN(  66)																		int this5 = ((this4 >> 24) & 255);
HXDLIN(  66)																		if ((this5 == 0)) {
HXLINE(  66)																			a1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float r1;
HXDLIN(  66)																		int this6 = ((this4 >> 16) & 255);
HXDLIN(  66)																		if ((this6 == 0)) {
HXLINE(  66)																			r1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float g1;
HXDLIN(  66)																		int this7 = ((this4 >> 8) & 255);
HXDLIN(  66)																		if ((this7 == 0)) {
HXLINE(  66)																			g1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float b1;
HXDLIN(  66)																		int this8 = (this4 & 255);
HXDLIN(  66)																		if ((this8 == 0)) {
HXLINE(  66)																			b1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float a2;
HXDLIN(  66)																		int this9 = ((col >> 24) & 255);
HXDLIN(  66)																		if ((this9 == 0)) {
HXLINE(  66)																			a2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float r2;
HXDLIN(  66)																		int this10 = ((col >> 16) & 255);
HXDLIN(  66)																		if ((this10 == 0)) {
HXLINE(  66)																			r2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float g2;
HXDLIN(  66)																		int this11 = ((col >> 8) & 255);
HXDLIN(  66)																		if ((this11 == 0)) {
HXLINE(  66)																			g2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float b2;
HXDLIN(  66)																		int this12 = (col & 255);
HXDLIN(  66)																		if ((this12 == 0)) {
HXLINE(  66)																			b2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  66)																		int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  66)																		int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  66)																		int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  66)																		int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  66)																		int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  66)																		{
HXLINE(  66)																			::haxe::io::ArrayBufferViewImpl this13 = undoImage->image;
HXDLIN(  66)																			int value;
HXDLIN(  66)																			if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)																				value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																			}
            																			else {
HXLINE(  66)																				value = blended;
            																			}
HXDLIN(  66)																			bool _hx_tmp;
HXDLIN(  66)																			if ((location >= 0)) {
HXLINE(  66)																				_hx_tmp = (location < (this13->byteLength >> 2));
            																			}
            																			else {
HXLINE(  66)																				_hx_tmp = false;
            																			}
HXDLIN(  66)																			if (_hx_tmp) {
HXLINE(  66)																				::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  66)																				int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  66)																				_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  66)																				_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  66)																				_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  66)																				_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																			}
            																		}
            																	}
            																	else {
HXLINE(  66)																		::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  66)																		int index;
HXDLIN(  66)																		if (undoImage->useVirtualPos) {
HXLINE(  66)																			index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            																		}
            																		else {
HXLINE(  66)																			index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            																		}
HXDLIN(  66)																		int value;
HXDLIN(  66)																		if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)																			value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            																		}
            																		else {
HXLINE(  66)																			value = c;
            																		}
HXDLIN(  66)																		bool _hx_tmp;
HXDLIN(  66)																		if ((index >= 0)) {
HXLINE(  66)																			_hx_tmp = (index < (this1->byteLength >> 2));
            																		}
            																		else {
HXLINE(  66)																			_hx_tmp = false;
            																		}
HXDLIN(  66)																		if (_hx_tmp) {
HXLINE(  66)																			::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)																			int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  66)																			_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  66)																			_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  66)																			_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  66)																			_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																		}
            																	}
            																}
            																else {
HXLINE(  66)																	if (forceClear) {
HXLINE(  66)																		::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  66)																		int x = (dx - rectLeft);
HXDLIN(  66)																		int y = (dy - rectTop);
HXDLIN(  66)																		int index;
HXDLIN(  66)																		if (undoImage->useVirtualPos) {
HXLINE(  66)																			index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            																		}
            																		else {
HXLINE(  66)																			index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            																		}
HXDLIN(  66)																		bool _hx_tmp;
HXDLIN(  66)																		if ((index >= 0)) {
HXLINE(  66)																			_hx_tmp = (index < (this1->byteLength >> 2));
            																		}
            																		else {
HXLINE(  66)																			_hx_tmp = false;
            																		}
HXDLIN(  66)																		if (_hx_tmp) {
HXLINE(  66)																			::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)																			int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  66)																			_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  66)																			_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  66)																			_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  66)																			_this->b[(pos + 3)] = ( (unsigned char)(0) );
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
            										}
HXDLIN(  66)										bool found = false;
HXDLIN(  66)										Float s = ((Float)0.);
HXDLIN(  66)										Float t = ((Float)0.);
HXDLIN(  66)										Float sxx = ((Float)0.);
HXDLIN(  66)										Float txx = ((Float)0.);
HXDLIN(  66)										{
HXLINE(  66)											int _g_min = xIter3->start;
HXDLIN(  66)											int _g_max = xIter3->max;
HXDLIN(  66)											while((_g_min < _g_max)){
HXLINE(  66)												_g_min = (_g_min + 1);
HXDLIN(  66)												int x = (_g_min - 1);
HXLINE(  61)												sxx = (sx * ( (Float)(x) ));
HXLINE(  62)												txx = (tx * ( (Float)(x) ));
HXLINE(  63)												found = false;
HXLINE(  66)												{
HXLINE(  66)													int _g_min1 = yIter3->start;
HXDLIN(  66)													int _g_max = yIter3->max;
HXDLIN(  66)													while((_g_min1 < _g_max)){
HXLINE(  66)														_g_min1 = (_g_min1 + 1);
HXDLIN(  66)														int y = (_g_min1 - 1);
HXLINE(  65)														s = ((s0 + sxx) + (sy * ( (Float)(y) )));
HXLINE(  66)														t = ((t0 + txx) + (ty * ( (Float)(y) )));
HXDLIN(  66)														bool _hx_tmp;
HXDLIN(  66)														if (!((s <= 0))) {
HXLINE(  66)															_hx_tmp = (t <= 0);
            														}
            														else {
HXLINE(  66)															_hx_tmp = true;
            														}
HXDLIN(  66)														if (_hx_tmp) {
HXLINE(  66)															if (found) {
HXLINE(  66)																goto _hx_goto_19;
            															}
            														}
            														else {
HXLINE(  66)															if (((s + t) < A)) {
HXLINE(  66)																{
HXLINE(  66)																	int this1 = color;
HXDLIN(  66)																	int c = this1;
HXDLIN(  66)																	bool _hx_tmp;
HXDLIN(  66)																	if ((((c >> 24) & 255) < 254)) {
HXLINE(  66)																		_hx_tmp = pixelshape->transparent;
            																	}
            																	else {
HXLINE(  66)																		_hx_tmp = false;
            																	}
HXDLIN(  66)																	if (_hx_tmp) {
HXLINE(  66)																		int location;
HXDLIN(  66)																		if (pixelshape->useVirtualPos) {
HXLINE(  66)																			location = ::Std_obj::_hx_int(((((( (Float)(y) ) - pixelshape->virtualY) * ( (Float)(pixelshape->width) )) + x) - pixelshape->virtualX));
            																		}
            																		else {
HXLINE(  66)																			location = ::Std_obj::_hx_int(( (Float)(((y * pixelshape->width) + x)) ));
            																		}
HXDLIN(  66)																		::haxe::io::ArrayBufferViewImpl this1 = pixelshape->image;
HXDLIN(  66)																		::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)																		int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  66)																		int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  66)																		int this3 = this2;
HXDLIN(  66)																		int this4;
HXDLIN(  66)																		if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)																			this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            																		}
            																		else {
HXLINE(  66)																			this4 = this3;
            																		}
HXDLIN(  66)																		Float a1;
HXDLIN(  66)																		int this5 = ((this4 >> 24) & 255);
HXDLIN(  66)																		if ((this5 == 0)) {
HXLINE(  66)																			a1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float r1;
HXDLIN(  66)																		int this6 = ((this4 >> 16) & 255);
HXDLIN(  66)																		if ((this6 == 0)) {
HXLINE(  66)																			r1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float g1;
HXDLIN(  66)																		int this7 = ((this4 >> 8) & 255);
HXDLIN(  66)																		if ((this7 == 0)) {
HXLINE(  66)																			g1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float b1;
HXDLIN(  66)																		int this8 = (this4 & 255);
HXDLIN(  66)																		if ((this8 == 0)) {
HXLINE(  66)																			b1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float a2;
HXDLIN(  66)																		int this9 = ((color >> 24) & 255);
HXDLIN(  66)																		if ((this9 == 0)) {
HXLINE(  66)																			a2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float r2;
HXDLIN(  66)																		int this10 = ((color >> 16) & 255);
HXDLIN(  66)																		if ((this10 == 0)) {
HXLINE(  66)																			r2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float g2;
HXDLIN(  66)																		int this11 = ((color >> 8) & 255);
HXDLIN(  66)																		if ((this11 == 0)) {
HXLINE(  66)																			g2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float b2;
HXDLIN(  66)																		int this12 = (color & 255);
HXDLIN(  66)																		if ((this12 == 0)) {
HXLINE(  66)																			b2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  66)																		int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  66)																		int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  66)																		int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  66)																		int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  66)																		int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  66)																		{
HXLINE(  66)																			::haxe::io::ArrayBufferViewImpl this13 = pixelshape->image;
HXDLIN(  66)																			int value;
HXDLIN(  66)																			if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)																				value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																			}
            																			else {
HXLINE(  66)																				value = blended;
            																			}
HXDLIN(  66)																			bool _hx_tmp;
HXDLIN(  66)																			if ((location >= 0)) {
HXLINE(  66)																				_hx_tmp = (location < (this13->byteLength >> 2));
            																			}
            																			else {
HXLINE(  66)																				_hx_tmp = false;
            																			}
HXDLIN(  66)																			if (_hx_tmp) {
HXLINE(  66)																				::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  66)																				int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  66)																				_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  66)																				_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  66)																				_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  66)																				_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																			}
            																		}
            																	}
            																	else {
HXLINE(  66)																		::haxe::io::ArrayBufferViewImpl this1 = pixelshape->image;
HXDLIN(  66)																		int index;
HXDLIN(  66)																		if (pixelshape->useVirtualPos) {
HXLINE(  66)																			index = ::Std_obj::_hx_int(((((( (Float)(y) ) - pixelshape->virtualY) * ( (Float)(pixelshape->width) )) + x) - pixelshape->virtualX));
            																		}
            																		else {
HXLINE(  66)																			index = ::Std_obj::_hx_int(( (Float)(((y * pixelshape->width) + x)) ));
            																		}
HXDLIN(  66)																		int value;
HXDLIN(  66)																		if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)																			value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            																		}
            																		else {
HXLINE(  66)																			value = c;
            																		}
HXDLIN(  66)																		bool _hx_tmp;
HXDLIN(  66)																		if ((index >= 0)) {
HXLINE(  66)																			_hx_tmp = (index < (this1->byteLength >> 2));
            																		}
            																		else {
HXLINE(  66)																			_hx_tmp = false;
            																		}
HXDLIN(  66)																		if (_hx_tmp) {
HXLINE(  66)																			::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)																			int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  66)																			_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  66)																			_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  66)																			_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  66)																			_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																		}
            																	}
            																}
HXLINE(  74)																found = true;
            															}
            															else {
HXLINE(  66)																if (found) {
HXLINE(  66)																	goto _hx_goto_19;
            																}
            															}
            														}
            													}
            													_hx_goto_19:;
            												}
            											}
            										}
HXDLIN(  66)										if ((hasHit == true)) {
HXLINE(  66)											::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,farX,cy1,bx,by,cx,cy,true);
HXDLIN(  66)											if (hasUndo) {
HXLINE(  66)												v->undoImage = undoImage;
HXDLIN(  66)												v->undoX = xIter3->start;
HXDLIN(  66)												v->undoY = yIter3->start;
            											}
            										}
            									}
            								}
            							}
HXLINE(  46)							lastX1 = nextX;
HXLINE(  47)							lastY1 = nextY;
            						}
            					}
            				}
            			}
HXLINE(  66)			{
HXLINE(  66)				Float y = ( (Float)(dy) );
HXDLIN(  66)				int p1 = 0;
HXDLIN(  66)				int xx1 = p1;
HXDLIN(  66)				int q1 = ::Std_obj::_hx_int(y);
HXDLIN(  66)				int maxX1 = ::Std_obj::_hx_int(wid);
HXDLIN(  66)				int maxY1 = ::Std_obj::_hx_int((y + ( (Float)(tall) )));
HXDLIN(  66)				while(true){
HXLINE(  66)					{
HXLINE(  66)						p1 = (p1 + 1);
HXDLIN(  66)						int x = (p1 - 1);
HXDLIN(  66)						int this1 = color;
HXDLIN(  66)						int c = this1;
HXDLIN(  66)						bool _hx_tmp;
HXDLIN(  66)						if ((((c >> 24) & 255) < 254)) {
HXLINE(  66)							_hx_tmp = pixelshape->transparent;
            						}
            						else {
HXLINE(  66)							_hx_tmp = false;
            						}
HXDLIN(  66)						if (_hx_tmp) {
HXLINE(  66)							int location;
HXDLIN(  66)							if (pixelshape->useVirtualPos) {
HXLINE(  66)								location = ::Std_obj::_hx_int(((((( (Float)(q1) ) - pixelshape->virtualY) * ( (Float)(pixelshape->width) )) + x) - pixelshape->virtualX));
            							}
            							else {
HXLINE(  66)								location = ::Std_obj::_hx_int(( (Float)(((q1 * pixelshape->width) + x)) ));
            							}
HXDLIN(  66)							::haxe::io::ArrayBufferViewImpl this1 = pixelshape->image;
HXDLIN(  66)							::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)							int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  66)							int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  66)							int this3 = this2;
HXDLIN(  66)							int this4;
HXDLIN(  66)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)								this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            							}
            							else {
HXLINE(  66)								this4 = this3;
            							}
HXDLIN(  66)							Float a1;
HXDLIN(  66)							int this5 = ((this4 >> 24) & 255);
HXDLIN(  66)							if ((this5 == 0)) {
HXLINE(  66)								a1 = ((Float)0.);
            							}
            							else {
HXLINE(  66)								a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            							}
HXDLIN(  66)							Float r1;
HXDLIN(  66)							int this6 = ((this4 >> 16) & 255);
HXDLIN(  66)							if ((this6 == 0)) {
HXLINE(  66)								r1 = ((Float)0.);
            							}
            							else {
HXLINE(  66)								r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            							}
HXDLIN(  66)							Float g1;
HXDLIN(  66)							int this7 = ((this4 >> 8) & 255);
HXDLIN(  66)							if ((this7 == 0)) {
HXLINE(  66)								g1 = ((Float)0.);
            							}
            							else {
HXLINE(  66)								g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            							}
HXDLIN(  66)							Float b1;
HXDLIN(  66)							int this8 = (this4 & 255);
HXDLIN(  66)							if ((this8 == 0)) {
HXLINE(  66)								b1 = ((Float)0.);
            							}
            							else {
HXLINE(  66)								b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            							}
HXDLIN(  66)							Float a2;
HXDLIN(  66)							int this9 = ((color >> 24) & 255);
HXDLIN(  66)							if ((this9 == 0)) {
HXLINE(  66)								a2 = ((Float)0.);
            							}
            							else {
HXLINE(  66)								a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            							}
HXDLIN(  66)							Float r2;
HXDLIN(  66)							int this10 = ((color >> 16) & 255);
HXDLIN(  66)							if ((this10 == 0)) {
HXLINE(  66)								r2 = ((Float)0.);
            							}
            							else {
HXLINE(  66)								r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            							}
HXDLIN(  66)							Float g2;
HXDLIN(  66)							int this11 = ((color >> 8) & 255);
HXDLIN(  66)							if ((this11 == 0)) {
HXLINE(  66)								g2 = ((Float)0.);
            							}
            							else {
HXLINE(  66)								g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            							}
HXDLIN(  66)							Float b2;
HXDLIN(  66)							int this12 = (color & 255);
HXDLIN(  66)							if ((this12 == 0)) {
HXLINE(  66)								b2 = ((Float)0.);
            							}
            							else {
HXLINE(  66)								b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            							}
HXDLIN(  66)							Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  66)							int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  66)							int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  66)							int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  66)							int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  66)							int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  66)							{
HXLINE(  66)								::haxe::io::ArrayBufferViewImpl this13 = pixelshape->image;
HXDLIN(  66)								int value;
HXDLIN(  66)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)									value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            								}
            								else {
HXLINE(  66)									value = blended;
            								}
HXDLIN(  66)								bool _hx_tmp;
HXDLIN(  66)								if ((location >= 0)) {
HXLINE(  66)									_hx_tmp = (location < (this13->byteLength >> 2));
            								}
            								else {
HXLINE(  66)									_hx_tmp = false;
            								}
HXDLIN(  66)								if (_hx_tmp) {
HXLINE(  66)									::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  66)									int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  66)									_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  66)									_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  66)									_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  66)									_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            								}
            							}
            						}
            						else {
HXLINE(  66)							::haxe::io::ArrayBufferViewImpl this1 = pixelshape->image;
HXDLIN(  66)							int index;
HXDLIN(  66)							if (pixelshape->useVirtualPos) {
HXLINE(  66)								index = ::Std_obj::_hx_int(((((( (Float)(q1) ) - pixelshape->virtualY) * ( (Float)(pixelshape->width) )) + x) - pixelshape->virtualX));
            							}
            							else {
HXLINE(  66)								index = ::Std_obj::_hx_int(( (Float)(((q1 * pixelshape->width) + x)) ));
            							}
HXDLIN(  66)							int value;
HXDLIN(  66)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)								value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            							}
            							else {
HXLINE(  66)								value = c;
            							}
HXDLIN(  66)							bool _hx_tmp;
HXDLIN(  66)							if ((index >= 0)) {
HXLINE(  66)								_hx_tmp = (index < (this1->byteLength >> 2));
            							}
            							else {
HXLINE(  66)								_hx_tmp = false;
            							}
HXDLIN(  66)							if (_hx_tmp) {
HXLINE(  66)								::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)								int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  66)								_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  66)								_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  66)								_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  66)								_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            							}
            						}
            					}
HXDLIN(  66)					if ((p1 > maxX1)) {
HXLINE( 247)						p1 = xx1;
HXLINE(  66)						q1 = (q1 + 1);
            					}
HXDLIN(  66)					if ((q1 > maxY1)) {
HXLINE(  66)						goto _hx_goto_20;
            					}
            				}
            				_hx_goto_20:;
            			}
HXDLIN(  66)			{
HXLINE(  66)				Float cx1 = ( (Float)(dx) );
HXDLIN(  66)				Float rx1 = ( (Float)(dx) );
HXDLIN(  66)				{
HXLINE(  66)					 ::Dynamic targetError2 = ((Float)1.05);
HXDLIN(  66)					if (::hx::IsNull( targetError2 )) {
HXLINE( 840)						targetError2 = ((Float)1.05);
            					}
HXLINE(  66)					Float rSmall2;
HXDLIN(  66)					if ((rx1 > bottomRadius)) {
HXLINE(  66)						rSmall2 = bottomRadius;
            					}
            					else {
HXLINE(  66)						rSmall2 = rx1;
            					}
HXDLIN(  66)					 ::Dynamic targetE2 = ( (Float)(targetError2) );
HXDLIN(  66)					if (::hx::IsNull( targetE2 )) {
HXLINE(  20)						targetE2 = ((Float)1.05);
            					}
HXLINE(  66)					int result2 = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE2) ) / rSmall2)))));
HXDLIN(  66)					int noSides2;
HXDLIN(  66)					if ((result2 < 12)) {
HXLINE(  66)						noSides2 = 12;
            					}
            					else {
HXLINE(  66)						if ((result2 > 500)) {
HXLINE(  66)							noSides2 = 500;
            						}
            						else {
HXLINE(  66)							noSides2 = result2;
            						}
            					}
HXDLIN(  66)					int sides2 = (::Math_obj::ceil((( (Float)(noSides2) ) / ( (Float)(4) ))) * 4);
HXDLIN(  66)					Float theta2 = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides2) ));
HXDLIN(  66)					Float omega2 = (::Math_obj::PI / ( (Float)(2) ));
HXDLIN(  66)					int quarter2 = ::Std_obj::_hx_int((( (Float)(sides2) ) / ( (Float)(4) )));
HXDLIN(  66)					Float lastX2 = ((Float)0.);
HXDLIN(  66)					Float lastY2 = ((Float)0.);
HXDLIN(  66)					{
HXLINE(  26)						lastX2 = (cx1 + (rx1 * ::Math_obj::cos(((( (Float)(sides2) ) * theta2) + omega2))));
HXLINE(  27)						lastY2 = (lowerY + (bottomRadius * ::Math_obj::sin(((( (Float)(sides2) ) * theta2) + omega2))));
            					}
HXLINE(  66)					{
HXLINE(  66)						int _g4 = 0;
HXDLIN(  66)						int _g5 = (quarter2 + 1);
HXDLIN(  66)						while((_g4 < _g5)){
HXLINE(  66)							_g4 = (_g4 + 1);
HXDLIN(  66)							int i = (_g4 - 1);
HXDLIN(  66)							Float nextX = (cx1 + (rx1 * ::Math_obj::cos((((( (Float)(i) ) * theta2) + ((Float)0.0001)) + omega2))));
HXDLIN(  66)							Float nextY = (lowerY + (bottomRadius * ::Math_obj::sin((((( (Float)(i) ) * theta2) + ((Float)0.0001)) + omega2))));
HXDLIN(  66)							{
HXLINE(  66)								bool hasHit = false;
HXDLIN(  66)								bool hasUndo = false;
HXDLIN(  66)								{
HXLINE(  66)									Float bx = lastX2;
HXDLIN(  66)									Float by = lastY2;
HXDLIN(  66)									Float cx = nextX;
HXDLIN(  66)									Float cy = nextY;
HXDLIN(  66)									bool adjustWinding = (((((cx1 * by) - (bx * lowerY)) + ((bx * cy) - (cx * by))) + ((cx * lowerY) - (cx1 * cy))) > 0);
HXDLIN(  66)									if (!(adjustWinding)) {
HXLINE(  66)										Float bx_ = bx;
HXDLIN(  66)										Float by_ = by;
HXLINE(  26)										bx = cx;
HXLINE(  27)										by = cy;
HXLINE(  28)										cx = bx_;
HXLINE(  29)										cy = by_;
            									}
HXLINE(  66)									{
HXLINE(  66)										Float s0 = ((lowerY * cx) - (cx1 * cy));
HXDLIN(  66)										Float sx = (cy - lowerY);
HXDLIN(  66)										Float sy = (cx1 - cx);
HXDLIN(  66)										Float t0 = ((cx1 * by) - (lowerY * bx));
HXDLIN(  66)										Float tx = (lowerY - by);
HXDLIN(  66)										Float ty = (bx - cx1);
HXDLIN(  66)										Float A = ((((-(by) * cx) + (lowerY * (-(bx) + cx))) + (cx1 * (by - cy))) + (bx * cy));
HXDLIN(  66)										::pixelimage::iter::IntIterStart xIter3;
HXDLIN(  66)										if ((cx1 > bx)) {
HXLINE(  66)											if ((cx1 > cx)) {
HXLINE(  66)												int min;
HXDLIN(  66)												if ((bx > cx)) {
HXLINE(  66)													min = ::Math_obj::floor(cx);
            												}
            												else {
HXLINE(  66)													min = ::Math_obj::floor(bx);
            												}
HXDLIN(  66)												int ii_min = min;
HXDLIN(  66)												int ii_max = ::Math_obj::ceil(cx1);
HXDLIN(  66)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)												xIter3 = this1;
            											}
            											else {
HXLINE(  66)												int ii_min = ::Math_obj::floor(bx);
HXDLIN(  66)												int ii_max = ::Math_obj::ceil(cx);
HXDLIN(  66)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)												xIter3 = this1;
            											}
            										}
            										else {
HXLINE(  66)											if ((bx > cx)) {
HXLINE(  66)												int min;
HXDLIN(  66)												if ((cx1 > cx)) {
HXLINE(  66)													min = ::Math_obj::floor(cx);
            												}
            												else {
HXLINE(  66)													min = ::Math_obj::ceil(cx1);
            												}
HXDLIN(  66)												int ii_min = min;
HXDLIN(  66)												int ii_max = ::Math_obj::ceil(bx);
HXDLIN(  66)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)												xIter3 = this1;
            											}
            											else {
HXLINE(  66)												int ii_min = ::Math_obj::floor(cx1);
HXDLIN(  66)												int ii_max = ::Math_obj::ceil(cx);
HXDLIN(  66)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)												xIter3 = this1;
            											}
            										}
HXDLIN(  66)										::pixelimage::iter::IntIterStart yIter3;
HXDLIN(  66)										if ((lowerY > by)) {
HXLINE(  66)											if ((lowerY > cy)) {
HXLINE(  66)												int min;
HXDLIN(  66)												if ((by > cy)) {
HXLINE(  66)													min = ::Math_obj::floor(cy);
            												}
            												else {
HXLINE(  66)													min = ::Math_obj::floor(by);
            												}
HXDLIN(  66)												int ii_min = min;
HXDLIN(  66)												int ii_max = ::Math_obj::ceil(lowerY);
HXDLIN(  66)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)												yIter3 = this1;
            											}
            											else {
HXLINE(  66)												int ii_min = ::Math_obj::floor(by);
HXDLIN(  66)												int ii_max = ::Math_obj::ceil(cy);
HXDLIN(  66)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)												yIter3 = this1;
            											}
            										}
            										else {
HXLINE(  66)											if ((by > cy)) {
HXLINE(  66)												int min;
HXDLIN(  66)												if ((lowerY > cy)) {
HXLINE(  66)													min = ::Math_obj::floor(cy);
            												}
            												else {
HXLINE(  66)													min = ::Math_obj::ceil(lowerY);
            												}
HXDLIN(  66)												int ii_min = min;
HXDLIN(  66)												int ii_max = ::Math_obj::ceil(by);
HXDLIN(  66)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)												yIter3 = this1;
            											}
            											else {
HXLINE(  66)												int ii_min = ::Math_obj::floor(lowerY);
HXDLIN(  66)												int ii_max = ::Math_obj::ceil(cy);
HXDLIN(  66)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)												yIter3 = this1;
            											}
            										}
HXDLIN(  66)										::pixelimage::ImageStruct undoImage = null();
HXDLIN(  66)										if (hasUndo) {
HXLINE(  66)											int w = ((xIter3->max - xIter3->start) + 1);
HXDLIN(  66)											int h = ((yIter3->max - yIter3->start) + 1);
HXDLIN(  66)											int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN(  66)											::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  66)											::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN(  66)											::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN(  66)											undoImage = this3;
HXDLIN(  66)											{
HXLINE(  66)												int rectLeft = xIter3->start;
HXDLIN(  66)												int rectTop = yIter3->start;
HXDLIN(  66)												int rectRight = xIter3->max;
HXDLIN(  66)												bool forceClear = false;
HXDLIN(  66)												{
HXLINE(  66)													int _g = rectTop;
HXDLIN(  66)													int _g1 = yIter3->max;
HXDLIN(  66)													while((_g < _g1)){
HXLINE(  66)														_g = (_g + 1);
HXDLIN(  66)														int dy = (_g - 1);
HXDLIN(  66)														{
HXLINE(  66)															int _g1 = rectLeft;
HXDLIN(  66)															int _g2 = rectRight;
HXDLIN(  66)															while((_g1 < _g2)){
HXLINE(  66)																_g1 = (_g1 + 1);
HXDLIN(  66)																int dx = (_g1 - 1);
HXDLIN(  66)																::haxe::io::ArrayBufferViewImpl this1 = pixelshape->image;
HXDLIN(  66)																int index;
HXDLIN(  66)																if (pixelshape->useVirtualPos) {
HXLINE(  66)																	index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - pixelshape->virtualY) * ( (Float)(pixelshape->width) )) + dx) - pixelshape->virtualX));
            																}
            																else {
HXLINE(  66)																	index = ::Std_obj::_hx_int(( (Float)(((dy * pixelshape->width) + dx)) ));
            																}
HXDLIN(  66)																::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)																int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  66)																int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  66)																int col;
HXDLIN(  66)																if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)																	col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            																}
            																else {
HXLINE(  66)																	col = c;
            																}
HXDLIN(  66)																bool _hx_tmp;
HXDLIN(  66)																if (pixelshape->useMask) {
HXLINE(  66)																	_hx_tmp = ::hx::IsNotNull( pixelshape->mask );
            																}
            																else {
HXLINE(  66)																	_hx_tmp = false;
            																}
HXDLIN(  66)																if (_hx_tmp) {
HXLINE(  66)																	::pixelimage::ImageStruct this1 = pixelshape->mask;
HXDLIN(  66)																	::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  66)																	int index;
HXDLIN(  66)																	if (this1->useVirtualPos) {
HXLINE(  66)																		index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            																	}
            																	else {
HXLINE(  66)																		index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            																	}
HXDLIN(  66)																	::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  66)																	int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  66)																	int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  66)																	int v;
HXDLIN(  66)																	if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)																		v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            																	}
            																	else {
HXLINE(  66)																		v = c;
            																	}
HXDLIN(  66)																	int this3 = v;
HXDLIN(  66)																	int maskPixel = this3;
HXDLIN(  66)																	int this4 = col;
HXDLIN(  66)																	int this5 = this4;
HXDLIN(  66)																	if ((maskPixel == 0)) {
HXLINE(  66)																		int this1 = this5;
HXDLIN(  66)																		col = this1;
            																	}
            																	else {
HXLINE(  66)																		Float m0;
HXDLIN(  66)																		int this1 = ((maskPixel >> 24) & 255);
HXDLIN(  66)																		if ((this1 == 0)) {
HXLINE(  66)																			m0 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float m1;
HXDLIN(  66)																		int this2 = ((maskPixel >> 16) & 255);
HXDLIN(  66)																		if ((this2 == 0)) {
HXLINE(  66)																			m1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float m2;
HXDLIN(  66)																		int this3 = ((maskPixel >> 8) & 255);
HXDLIN(  66)																		if ((this3 == 0)) {
HXLINE(  66)																			m2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float m3;
HXDLIN(  66)																		int this4 = (maskPixel & 255);
HXDLIN(  66)																		if ((this4 == 0)) {
HXLINE(  66)																			m3 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN(  66)																		int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN(  66)																		int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN(  66)																		int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN(  66)																		col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            																	}
            																}
HXDLIN(  66)																if ((col != 0)) {
HXLINE(  66)																	int x = (dx - rectLeft);
HXDLIN(  66)																	int y = (dy - rectTop);
HXDLIN(  66)																	int this1 = col;
HXDLIN(  66)																	int c = this1;
HXDLIN(  66)																	bool _hx_tmp;
HXDLIN(  66)																	if ((((c >> 24) & 255) < 254)) {
HXLINE(  66)																		_hx_tmp = undoImage->transparent;
            																	}
            																	else {
HXLINE(  66)																		_hx_tmp = false;
            																	}
HXDLIN(  66)																	if (_hx_tmp) {
HXLINE(  66)																		int location;
HXDLIN(  66)																		if (undoImage->useVirtualPos) {
HXLINE(  66)																			location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            																		}
            																		else {
HXLINE(  66)																			location = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            																		}
HXDLIN(  66)																		::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  66)																		::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)																		int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  66)																		int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  66)																		int this3 = this2;
HXDLIN(  66)																		int this4;
HXDLIN(  66)																		if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)																			this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            																		}
            																		else {
HXLINE(  66)																			this4 = this3;
            																		}
HXDLIN(  66)																		Float a1;
HXDLIN(  66)																		int this5 = ((this4 >> 24) & 255);
HXDLIN(  66)																		if ((this5 == 0)) {
HXLINE(  66)																			a1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float r1;
HXDLIN(  66)																		int this6 = ((this4 >> 16) & 255);
HXDLIN(  66)																		if ((this6 == 0)) {
HXLINE(  66)																			r1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float g1;
HXDLIN(  66)																		int this7 = ((this4 >> 8) & 255);
HXDLIN(  66)																		if ((this7 == 0)) {
HXLINE(  66)																			g1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float b1;
HXDLIN(  66)																		int this8 = (this4 & 255);
HXDLIN(  66)																		if ((this8 == 0)) {
HXLINE(  66)																			b1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float a2;
HXDLIN(  66)																		int this9 = ((col >> 24) & 255);
HXDLIN(  66)																		if ((this9 == 0)) {
HXLINE(  66)																			a2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float r2;
HXDLIN(  66)																		int this10 = ((col >> 16) & 255);
HXDLIN(  66)																		if ((this10 == 0)) {
HXLINE(  66)																			r2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float g2;
HXDLIN(  66)																		int this11 = ((col >> 8) & 255);
HXDLIN(  66)																		if ((this11 == 0)) {
HXLINE(  66)																			g2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float b2;
HXDLIN(  66)																		int this12 = (col & 255);
HXDLIN(  66)																		if ((this12 == 0)) {
HXLINE(  66)																			b2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  66)																		int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  66)																		int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  66)																		int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  66)																		int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  66)																		int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  66)																		{
HXLINE(  66)																			::haxe::io::ArrayBufferViewImpl this13 = undoImage->image;
HXDLIN(  66)																			int value;
HXDLIN(  66)																			if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)																				value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																			}
            																			else {
HXLINE(  66)																				value = blended;
            																			}
HXDLIN(  66)																			bool _hx_tmp;
HXDLIN(  66)																			if ((location >= 0)) {
HXLINE(  66)																				_hx_tmp = (location < (this13->byteLength >> 2));
            																			}
            																			else {
HXLINE(  66)																				_hx_tmp = false;
            																			}
HXDLIN(  66)																			if (_hx_tmp) {
HXLINE(  66)																				::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  66)																				int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  66)																				_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  66)																				_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  66)																				_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  66)																				_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																			}
            																		}
            																	}
            																	else {
HXLINE(  66)																		::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  66)																		int index;
HXDLIN(  66)																		if (undoImage->useVirtualPos) {
HXLINE(  66)																			index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            																		}
            																		else {
HXLINE(  66)																			index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            																		}
HXDLIN(  66)																		int value;
HXDLIN(  66)																		if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)																			value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            																		}
            																		else {
HXLINE(  66)																			value = c;
            																		}
HXDLIN(  66)																		bool _hx_tmp;
HXDLIN(  66)																		if ((index >= 0)) {
HXLINE(  66)																			_hx_tmp = (index < (this1->byteLength >> 2));
            																		}
            																		else {
HXLINE(  66)																			_hx_tmp = false;
            																		}
HXDLIN(  66)																		if (_hx_tmp) {
HXLINE(  66)																			::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)																			int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  66)																			_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  66)																			_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  66)																			_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  66)																			_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																		}
            																	}
            																}
            																else {
HXLINE(  66)																	if (forceClear) {
HXLINE(  66)																		::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  66)																		int x = (dx - rectLeft);
HXDLIN(  66)																		int y = (dy - rectTop);
HXDLIN(  66)																		int index;
HXDLIN(  66)																		if (undoImage->useVirtualPos) {
HXLINE(  66)																			index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            																		}
            																		else {
HXLINE(  66)																			index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            																		}
HXDLIN(  66)																		bool _hx_tmp;
HXDLIN(  66)																		if ((index >= 0)) {
HXLINE(  66)																			_hx_tmp = (index < (this1->byteLength >> 2));
            																		}
            																		else {
HXLINE(  66)																			_hx_tmp = false;
            																		}
HXDLIN(  66)																		if (_hx_tmp) {
HXLINE(  66)																			::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)																			int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  66)																			_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  66)																			_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  66)																			_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  66)																			_this->b[(pos + 3)] = ( (unsigned char)(0) );
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
            										}
HXDLIN(  66)										bool found = false;
HXDLIN(  66)										Float s = ((Float)0.);
HXDLIN(  66)										Float t = ((Float)0.);
HXDLIN(  66)										Float sxx = ((Float)0.);
HXDLIN(  66)										Float txx = ((Float)0.);
HXDLIN(  66)										{
HXLINE(  66)											int _g_min = xIter3->start;
HXDLIN(  66)											int _g_max = xIter3->max;
HXDLIN(  66)											while((_g_min < _g_max)){
HXLINE(  66)												_g_min = (_g_min + 1);
HXDLIN(  66)												int x = (_g_min - 1);
HXLINE(  61)												sxx = (sx * ( (Float)(x) ));
HXLINE(  62)												txx = (tx * ( (Float)(x) ));
HXLINE(  63)												found = false;
HXLINE(  66)												{
HXLINE(  66)													int _g_min1 = yIter3->start;
HXDLIN(  66)													int _g_max = yIter3->max;
HXDLIN(  66)													while((_g_min1 < _g_max)){
HXLINE(  66)														_g_min1 = (_g_min1 + 1);
HXDLIN(  66)														int y = (_g_min1 - 1);
HXLINE(  65)														s = ((s0 + sxx) + (sy * ( (Float)(y) )));
HXLINE(  66)														t = ((t0 + txx) + (ty * ( (Float)(y) )));
HXDLIN(  66)														bool _hx_tmp;
HXDLIN(  66)														if (!((s <= 0))) {
HXLINE(  66)															_hx_tmp = (t <= 0);
            														}
            														else {
HXLINE(  66)															_hx_tmp = true;
            														}
HXDLIN(  66)														if (_hx_tmp) {
HXLINE(  66)															if (found) {
HXLINE(  66)																goto _hx_goto_25;
            															}
            														}
            														else {
HXLINE(  66)															if (((s + t) < A)) {
HXLINE(  66)																{
HXLINE(  66)																	int this1 = color;
HXDLIN(  66)																	int c = this1;
HXDLIN(  66)																	bool _hx_tmp;
HXDLIN(  66)																	if ((((c >> 24) & 255) < 254)) {
HXLINE(  66)																		_hx_tmp = pixelshape->transparent;
            																	}
            																	else {
HXLINE(  66)																		_hx_tmp = false;
            																	}
HXDLIN(  66)																	if (_hx_tmp) {
HXLINE(  66)																		int location;
HXDLIN(  66)																		if (pixelshape->useVirtualPos) {
HXLINE(  66)																			location = ::Std_obj::_hx_int(((((( (Float)(y) ) - pixelshape->virtualY) * ( (Float)(pixelshape->width) )) + x) - pixelshape->virtualX));
            																		}
            																		else {
HXLINE(  66)																			location = ::Std_obj::_hx_int(( (Float)(((y * pixelshape->width) + x)) ));
            																		}
HXDLIN(  66)																		::haxe::io::ArrayBufferViewImpl this1 = pixelshape->image;
HXDLIN(  66)																		::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)																		int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  66)																		int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  66)																		int this3 = this2;
HXDLIN(  66)																		int this4;
HXDLIN(  66)																		if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)																			this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            																		}
            																		else {
HXLINE(  66)																			this4 = this3;
            																		}
HXDLIN(  66)																		Float a1;
HXDLIN(  66)																		int this5 = ((this4 >> 24) & 255);
HXDLIN(  66)																		if ((this5 == 0)) {
HXLINE(  66)																			a1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float r1;
HXDLIN(  66)																		int this6 = ((this4 >> 16) & 255);
HXDLIN(  66)																		if ((this6 == 0)) {
HXLINE(  66)																			r1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float g1;
HXDLIN(  66)																		int this7 = ((this4 >> 8) & 255);
HXDLIN(  66)																		if ((this7 == 0)) {
HXLINE(  66)																			g1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float b1;
HXDLIN(  66)																		int this8 = (this4 & 255);
HXDLIN(  66)																		if ((this8 == 0)) {
HXLINE(  66)																			b1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float a2;
HXDLIN(  66)																		int this9 = ((color >> 24) & 255);
HXDLIN(  66)																		if ((this9 == 0)) {
HXLINE(  66)																			a2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float r2;
HXDLIN(  66)																		int this10 = ((color >> 16) & 255);
HXDLIN(  66)																		if ((this10 == 0)) {
HXLINE(  66)																			r2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float g2;
HXDLIN(  66)																		int this11 = ((color >> 8) & 255);
HXDLIN(  66)																		if ((this11 == 0)) {
HXLINE(  66)																			g2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float b2;
HXDLIN(  66)																		int this12 = (color & 255);
HXDLIN(  66)																		if ((this12 == 0)) {
HXLINE(  66)																			b2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  66)																			b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            																		}
HXDLIN(  66)																		Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  66)																		int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  66)																		int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  66)																		int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  66)																		int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  66)																		int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  66)																		{
HXLINE(  66)																			::haxe::io::ArrayBufferViewImpl this13 = pixelshape->image;
HXDLIN(  66)																			int value;
HXDLIN(  66)																			if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)																				value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																			}
            																			else {
HXLINE(  66)																				value = blended;
            																			}
HXDLIN(  66)																			bool _hx_tmp;
HXDLIN(  66)																			if ((location >= 0)) {
HXLINE(  66)																				_hx_tmp = (location < (this13->byteLength >> 2));
            																			}
            																			else {
HXLINE(  66)																				_hx_tmp = false;
            																			}
HXDLIN(  66)																			if (_hx_tmp) {
HXLINE(  66)																				::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  66)																				int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  66)																				_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  66)																				_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  66)																				_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  66)																				_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																			}
            																		}
            																	}
            																	else {
HXLINE(  66)																		::haxe::io::ArrayBufferViewImpl this1 = pixelshape->image;
HXDLIN(  66)																		int index;
HXDLIN(  66)																		if (pixelshape->useVirtualPos) {
HXLINE(  66)																			index = ::Std_obj::_hx_int(((((( (Float)(y) ) - pixelshape->virtualY) * ( (Float)(pixelshape->width) )) + x) - pixelshape->virtualX));
            																		}
            																		else {
HXLINE(  66)																			index = ::Std_obj::_hx_int(( (Float)(((y * pixelshape->width) + x)) ));
            																		}
HXDLIN(  66)																		int value;
HXDLIN(  66)																		if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)																			value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            																		}
            																		else {
HXLINE(  66)																			value = c;
            																		}
HXDLIN(  66)																		bool _hx_tmp;
HXDLIN(  66)																		if ((index >= 0)) {
HXLINE(  66)																			_hx_tmp = (index < (this1->byteLength >> 2));
            																		}
            																		else {
HXLINE(  66)																			_hx_tmp = false;
            																		}
HXDLIN(  66)																		if (_hx_tmp) {
HXLINE(  66)																			::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)																			int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  66)																			_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  66)																			_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  66)																			_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  66)																			_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																		}
            																	}
            																}
HXLINE(  74)																found = true;
            															}
            															else {
HXLINE(  66)																if (found) {
HXLINE(  66)																	goto _hx_goto_25;
            																}
            															}
            														}
            													}
            													_hx_goto_25:;
            												}
            											}
            										}
HXDLIN(  66)										if ((hasHit == true)) {
HXLINE(  66)											::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,cx1,lowerY,bx,by,cx,cy,true);
HXDLIN(  66)											if (hasUndo) {
HXLINE(  66)												v->undoImage = undoImage;
HXDLIN(  66)												v->undoX = xIter3->start;
HXDLIN(  66)												v->undoY = yIter3->start;
            											}
            										}
            									}
            								}
            							}
HXLINE(  46)							lastX2 = nextX;
HXLINE(  47)							lastY2 = nextY;
            						}
            					}
            				}
            			}
HXLINE(  66)			{
HXLINE(  66)				Float x1 = ( (Float)(dx) );
HXDLIN(  66)				int p2 = ::Std_obj::_hx_int(x1);
HXDLIN(  66)				int xx2 = p2;
HXDLIN(  66)				int q2 = ::Std_obj::_hx_int(lowerY);
HXDLIN(  66)				int maxX2 = ::Std_obj::_hx_int((x1 + ( (Float)(fat) )));
HXDLIN(  66)				int maxY2 = ::Std_obj::_hx_int((lowerY + bottomRadius));
HXDLIN(  66)				while(true){
HXLINE(  66)					{
HXLINE(  66)						p2 = (p2 + 1);
HXDLIN(  66)						int x = (p2 - 1);
HXDLIN(  66)						int this1 = color;
HXDLIN(  66)						int c = this1;
HXDLIN(  66)						bool _hx_tmp;
HXDLIN(  66)						if ((((c >> 24) & 255) < 254)) {
HXLINE(  66)							_hx_tmp = pixelshape->transparent;
            						}
            						else {
HXLINE(  66)							_hx_tmp = false;
            						}
HXDLIN(  66)						if (_hx_tmp) {
HXLINE(  66)							int location;
HXDLIN(  66)							if (pixelshape->useVirtualPos) {
HXLINE(  66)								location = ::Std_obj::_hx_int(((((( (Float)(q2) ) - pixelshape->virtualY) * ( (Float)(pixelshape->width) )) + x) - pixelshape->virtualX));
            							}
            							else {
HXLINE(  66)								location = ::Std_obj::_hx_int(( (Float)(((q2 * pixelshape->width) + x)) ));
            							}
HXDLIN(  66)							::haxe::io::ArrayBufferViewImpl this1 = pixelshape->image;
HXDLIN(  66)							::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)							int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  66)							int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  66)							int this3 = this2;
HXDLIN(  66)							int this4;
HXDLIN(  66)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)								this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            							}
            							else {
HXLINE(  66)								this4 = this3;
            							}
HXDLIN(  66)							Float a1;
HXDLIN(  66)							int this5 = ((this4 >> 24) & 255);
HXDLIN(  66)							if ((this5 == 0)) {
HXLINE(  66)								a1 = ((Float)0.);
            							}
            							else {
HXLINE(  66)								a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            							}
HXDLIN(  66)							Float r1;
HXDLIN(  66)							int this6 = ((this4 >> 16) & 255);
HXDLIN(  66)							if ((this6 == 0)) {
HXLINE(  66)								r1 = ((Float)0.);
            							}
            							else {
HXLINE(  66)								r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            							}
HXDLIN(  66)							Float g1;
HXDLIN(  66)							int this7 = ((this4 >> 8) & 255);
HXDLIN(  66)							if ((this7 == 0)) {
HXLINE(  66)								g1 = ((Float)0.);
            							}
            							else {
HXLINE(  66)								g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            							}
HXDLIN(  66)							Float b1;
HXDLIN(  66)							int this8 = (this4 & 255);
HXDLIN(  66)							if ((this8 == 0)) {
HXLINE(  66)								b1 = ((Float)0.);
            							}
            							else {
HXLINE(  66)								b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            							}
HXDLIN(  66)							Float a2;
HXDLIN(  66)							int this9 = ((color >> 24) & 255);
HXDLIN(  66)							if ((this9 == 0)) {
HXLINE(  66)								a2 = ((Float)0.);
            							}
            							else {
HXLINE(  66)								a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            							}
HXDLIN(  66)							Float r2;
HXDLIN(  66)							int this10 = ((color >> 16) & 255);
HXDLIN(  66)							if ((this10 == 0)) {
HXLINE(  66)								r2 = ((Float)0.);
            							}
            							else {
HXLINE(  66)								r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            							}
HXDLIN(  66)							Float g2;
HXDLIN(  66)							int this11 = ((color >> 8) & 255);
HXDLIN(  66)							if ((this11 == 0)) {
HXLINE(  66)								g2 = ((Float)0.);
            							}
            							else {
HXLINE(  66)								g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            							}
HXDLIN(  66)							Float b2;
HXDLIN(  66)							int this12 = (color & 255);
HXDLIN(  66)							if ((this12 == 0)) {
HXLINE(  66)								b2 = ((Float)0.);
            							}
            							else {
HXLINE(  66)								b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            							}
HXDLIN(  66)							Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  66)							int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  66)							int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  66)							int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  66)							int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  66)							int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  66)							{
HXLINE(  66)								::haxe::io::ArrayBufferViewImpl this13 = pixelshape->image;
HXDLIN(  66)								int value;
HXDLIN(  66)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)									value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            								}
            								else {
HXLINE(  66)									value = blended;
            								}
HXDLIN(  66)								bool _hx_tmp;
HXDLIN(  66)								if ((location >= 0)) {
HXLINE(  66)									_hx_tmp = (location < (this13->byteLength >> 2));
            								}
            								else {
HXLINE(  66)									_hx_tmp = false;
            								}
HXDLIN(  66)								if (_hx_tmp) {
HXLINE(  66)									::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  66)									int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  66)									_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  66)									_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  66)									_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  66)									_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            								}
            							}
            						}
            						else {
HXLINE(  66)							::haxe::io::ArrayBufferViewImpl this1 = pixelshape->image;
HXDLIN(  66)							int index;
HXDLIN(  66)							if (pixelshape->useVirtualPos) {
HXLINE(  66)								index = ::Std_obj::_hx_int(((((( (Float)(q2) ) - pixelshape->virtualY) * ( (Float)(pixelshape->width) )) + x) - pixelshape->virtualX));
            							}
            							else {
HXLINE(  66)								index = ::Std_obj::_hx_int(( (Float)(((q2 * pixelshape->width) + x)) ));
            							}
HXDLIN(  66)							int value;
HXDLIN(  66)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)								value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            							}
            							else {
HXLINE(  66)								value = c;
            							}
HXDLIN(  66)							bool _hx_tmp;
HXDLIN(  66)							if ((index >= 0)) {
HXLINE(  66)								_hx_tmp = (index < (this1->byteLength >> 2));
            							}
            							else {
HXLINE(  66)								_hx_tmp = false;
            							}
HXDLIN(  66)							if (_hx_tmp) {
HXLINE(  66)								::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)								int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  66)								_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  66)								_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  66)								_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  66)								_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            							}
            						}
            					}
HXDLIN(  66)					if ((p2 > maxX2)) {
HXLINE( 247)						p2 = xx2;
HXLINE(  66)						q2 = (q2 + 1);
            					}
HXDLIN(  66)					if ((q2 > maxY2)) {
HXLINE(  66)						goto _hx_goto_26;
            					}
            				}
            				_hx_goto_26:;
            			}
HXDLIN(  66)			{
HXLINE(  66)				 ::Dynamic targetError3 = ((Float)1.05);
HXDLIN(  66)				if (::hx::IsNull( targetError3 )) {
HXLINE( 840)					targetError3 = ((Float)1.05);
            				}
HXLINE(  66)				Float rSmall3;
HXDLIN(  66)				if ((rightRadius > bottomRadius)) {
HXLINE(  66)					rSmall3 = bottomRadius;
            				}
            				else {
HXLINE(  66)					rSmall3 = rightRadius;
            				}
HXDLIN(  66)				 ::Dynamic targetE3 = ( (Float)(targetError3) );
HXDLIN(  66)				if (::hx::IsNull( targetE3 )) {
HXLINE(  20)					targetE3 = ((Float)1.05);
            				}
HXLINE(  66)				int result3 = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE3) ) / rSmall3)))));
HXDLIN(  66)				int noSides3;
HXDLIN(  66)				if ((result3 < 12)) {
HXLINE(  66)					noSides3 = 12;
            				}
            				else {
HXLINE(  66)					if ((result3 > 500)) {
HXLINE(  66)						noSides3 = 500;
            					}
            					else {
HXLINE(  66)						noSides3 = result3;
            					}
            				}
HXDLIN(  66)				int sides3 = (::Math_obj::ceil((( (Float)(noSides3) ) / ( (Float)(4) ))) * 4);
HXDLIN(  66)				Float theta3 = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides3) ));
HXDLIN(  66)				Float omega3 = ( (Float)(0) );
HXDLIN(  66)				int quarter3 = ::Std_obj::_hx_int((( (Float)(sides3) ) / ( (Float)(4) )));
HXDLIN(  66)				Float lastX3 = ((Float)0.);
HXDLIN(  66)				Float lastY3 = ((Float)0.);
HXDLIN(  66)				{
HXLINE(  26)					lastX3 = (farX + (rightRadius * ::Math_obj::cos(((( (Float)(sides3) ) * theta3) + omega3))));
HXLINE(  27)					lastY3 = (lowerY + (bottomRadius * ::Math_obj::sin(((( (Float)(sides3) ) * theta3) + omega3))));
            				}
HXLINE(  66)				{
HXLINE(  66)					int _g6 = 0;
HXDLIN(  66)					int _g7 = (quarter3 + 1);
HXDLIN(  66)					while((_g6 < _g7)){
HXLINE(  66)						_g6 = (_g6 + 1);
HXDLIN(  66)						int i = (_g6 - 1);
HXDLIN(  66)						Float nextX = (farX + (rightRadius * ::Math_obj::cos((((( (Float)(i) ) * theta3) + ((Float)0.0001)) + omega3))));
HXDLIN(  66)						Float nextY = (lowerY + (bottomRadius * ::Math_obj::sin((((( (Float)(i) ) * theta3) + ((Float)0.0001)) + omega3))));
HXDLIN(  66)						{
HXLINE(  66)							bool hasHit = false;
HXDLIN(  66)							bool hasUndo = false;
HXDLIN(  66)							{
HXLINE(  66)								Float bx = lastX3;
HXDLIN(  66)								Float by = lastY3;
HXDLIN(  66)								Float cx = nextX;
HXDLIN(  66)								Float cy = nextY;
HXDLIN(  66)								bool adjustWinding = (((((farX * by) - (bx * lowerY)) + ((bx * cy) - (cx * by))) + ((cx * lowerY) - (farX * cy))) > 0);
HXDLIN(  66)								if (!(adjustWinding)) {
HXLINE(  66)									Float bx_ = bx;
HXDLIN(  66)									Float by_ = by;
HXLINE(  26)									bx = cx;
HXLINE(  27)									by = cy;
HXLINE(  28)									cx = bx_;
HXLINE(  29)									cy = by_;
            								}
HXLINE(  66)								{
HXLINE(  66)									Float s0 = ((lowerY * cx) - (farX * cy));
HXDLIN(  66)									Float sx = (cy - lowerY);
HXDLIN(  66)									Float sy = (farX - cx);
HXDLIN(  66)									Float t0 = ((farX * by) - (lowerY * bx));
HXDLIN(  66)									Float tx = (lowerY - by);
HXDLIN(  66)									Float ty = (bx - farX);
HXDLIN(  66)									Float A = ((((-(by) * cx) + (lowerY * (-(bx) + cx))) + (farX * (by - cy))) + (bx * cy));
HXDLIN(  66)									::pixelimage::iter::IntIterStart xIter3;
HXDLIN(  66)									if ((farX > bx)) {
HXLINE(  66)										if ((farX > cx)) {
HXLINE(  66)											int min;
HXDLIN(  66)											if ((bx > cx)) {
HXLINE(  66)												min = ::Math_obj::floor(cx);
            											}
            											else {
HXLINE(  66)												min = ::Math_obj::floor(bx);
            											}
HXDLIN(  66)											int ii_min = min;
HXDLIN(  66)											int ii_max = ::Math_obj::ceil(farX);
HXDLIN(  66)											::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)											xIter3 = this1;
            										}
            										else {
HXLINE(  66)											int ii_min = ::Math_obj::floor(bx);
HXDLIN(  66)											int ii_max = ::Math_obj::ceil(cx);
HXDLIN(  66)											::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)											xIter3 = this1;
            										}
            									}
            									else {
HXLINE(  66)										if ((bx > cx)) {
HXLINE(  66)											int min;
HXDLIN(  66)											if ((farX > cx)) {
HXLINE(  66)												min = ::Math_obj::floor(cx);
            											}
            											else {
HXLINE(  66)												min = ::Math_obj::ceil(farX);
            											}
HXDLIN(  66)											int ii_min = min;
HXDLIN(  66)											int ii_max = ::Math_obj::ceil(bx);
HXDLIN(  66)											::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)											xIter3 = this1;
            										}
            										else {
HXLINE(  66)											int ii_min = ::Math_obj::floor(farX);
HXDLIN(  66)											int ii_max = ::Math_obj::ceil(cx);
HXDLIN(  66)											::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)											xIter3 = this1;
            										}
            									}
HXDLIN(  66)									::pixelimage::iter::IntIterStart yIter3;
HXDLIN(  66)									if ((lowerY > by)) {
HXLINE(  66)										if ((lowerY > cy)) {
HXLINE(  66)											int min;
HXDLIN(  66)											if ((by > cy)) {
HXLINE(  66)												min = ::Math_obj::floor(cy);
            											}
            											else {
HXLINE(  66)												min = ::Math_obj::floor(by);
            											}
HXDLIN(  66)											int ii_min = min;
HXDLIN(  66)											int ii_max = ::Math_obj::ceil(lowerY);
HXDLIN(  66)											::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)											yIter3 = this1;
            										}
            										else {
HXLINE(  66)											int ii_min = ::Math_obj::floor(by);
HXDLIN(  66)											int ii_max = ::Math_obj::ceil(cy);
HXDLIN(  66)											::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)											yIter3 = this1;
            										}
            									}
            									else {
HXLINE(  66)										if ((by > cy)) {
HXLINE(  66)											int min;
HXDLIN(  66)											if ((lowerY > cy)) {
HXLINE(  66)												min = ::Math_obj::floor(cy);
            											}
            											else {
HXLINE(  66)												min = ::Math_obj::ceil(lowerY);
            											}
HXDLIN(  66)											int ii_min = min;
HXDLIN(  66)											int ii_max = ::Math_obj::ceil(by);
HXDLIN(  66)											::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)											yIter3 = this1;
            										}
            										else {
HXLINE(  66)											int ii_min = ::Math_obj::floor(lowerY);
HXDLIN(  66)											int ii_max = ::Math_obj::ceil(cy);
HXDLIN(  66)											::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  66)											yIter3 = this1;
            										}
            									}
HXDLIN(  66)									::pixelimage::ImageStruct undoImage = null();
HXDLIN(  66)									if (hasUndo) {
HXLINE(  66)										int w = ((xIter3->max - xIter3->start) + 1);
HXDLIN(  66)										int h = ((yIter3->max - yIter3->start) + 1);
HXDLIN(  66)										int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN(  66)										::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  66)										::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN(  66)										::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN(  66)										undoImage = this3;
HXDLIN(  66)										{
HXLINE(  66)											int rectLeft = xIter3->start;
HXDLIN(  66)											int rectTop = yIter3->start;
HXDLIN(  66)											int rectRight = xIter3->max;
HXDLIN(  66)											bool forceClear = false;
HXDLIN(  66)											{
HXLINE(  66)												int _g = rectTop;
HXDLIN(  66)												int _g1 = yIter3->max;
HXDLIN(  66)												while((_g < _g1)){
HXLINE(  66)													_g = (_g + 1);
HXDLIN(  66)													int dy = (_g - 1);
HXDLIN(  66)													{
HXLINE(  66)														int _g1 = rectLeft;
HXDLIN(  66)														int _g2 = rectRight;
HXDLIN(  66)														while((_g1 < _g2)){
HXLINE(  66)															_g1 = (_g1 + 1);
HXDLIN(  66)															int dx = (_g1 - 1);
HXDLIN(  66)															::haxe::io::ArrayBufferViewImpl this1 = pixelshape->image;
HXDLIN(  66)															int index;
HXDLIN(  66)															if (pixelshape->useVirtualPos) {
HXLINE(  66)																index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - pixelshape->virtualY) * ( (Float)(pixelshape->width) )) + dx) - pixelshape->virtualX));
            															}
            															else {
HXLINE(  66)																index = ::Std_obj::_hx_int(( (Float)(((dy * pixelshape->width) + dx)) ));
            															}
HXDLIN(  66)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  66)															int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  66)															int col;
HXDLIN(  66)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)																col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            															}
            															else {
HXLINE(  66)																col = c;
            															}
HXDLIN(  66)															bool _hx_tmp;
HXDLIN(  66)															if (pixelshape->useMask) {
HXLINE(  66)																_hx_tmp = ::hx::IsNotNull( pixelshape->mask );
            															}
            															else {
HXLINE(  66)																_hx_tmp = false;
            															}
HXDLIN(  66)															if (_hx_tmp) {
HXLINE(  66)																::pixelimage::ImageStruct this1 = pixelshape->mask;
HXDLIN(  66)																::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  66)																int index;
HXDLIN(  66)																if (this1->useVirtualPos) {
HXLINE(  66)																	index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            																}
            																else {
HXLINE(  66)																	index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            																}
HXDLIN(  66)																::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  66)																int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  66)																int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  66)																int v;
HXDLIN(  66)																if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)																	v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            																}
            																else {
HXLINE(  66)																	v = c;
            																}
HXDLIN(  66)																int this3 = v;
HXDLIN(  66)																int maskPixel = this3;
HXDLIN(  66)																int this4 = col;
HXDLIN(  66)																int this5 = this4;
HXDLIN(  66)																if ((maskPixel == 0)) {
HXLINE(  66)																	int this1 = this5;
HXDLIN(  66)																	col = this1;
            																}
            																else {
HXLINE(  66)																	Float m0;
HXDLIN(  66)																	int this1 = ((maskPixel >> 24) & 255);
HXDLIN(  66)																	if ((this1 == 0)) {
HXLINE(  66)																		m0 = ((Float)0.);
            																	}
            																	else {
HXLINE(  66)																		m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            																	}
HXDLIN(  66)																	Float m1;
HXDLIN(  66)																	int this2 = ((maskPixel >> 16) & 255);
HXDLIN(  66)																	if ((this2 == 0)) {
HXLINE(  66)																		m1 = ((Float)0.);
            																	}
            																	else {
HXLINE(  66)																		m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            																	}
HXDLIN(  66)																	Float m2;
HXDLIN(  66)																	int this3 = ((maskPixel >> 8) & 255);
HXDLIN(  66)																	if ((this3 == 0)) {
HXLINE(  66)																		m2 = ((Float)0.);
            																	}
            																	else {
HXLINE(  66)																		m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            																	}
HXDLIN(  66)																	Float m3;
HXDLIN(  66)																	int this4 = (maskPixel & 255);
HXDLIN(  66)																	if ((this4 == 0)) {
HXLINE(  66)																		m3 = ((Float)0.);
            																	}
            																	else {
HXLINE(  66)																		m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            																	}
HXDLIN(  66)																	int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN(  66)																	int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN(  66)																	int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN(  66)																	int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN(  66)																	col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            																}
            															}
HXDLIN(  66)															if ((col != 0)) {
HXLINE(  66)																int x = (dx - rectLeft);
HXDLIN(  66)																int y = (dy - rectTop);
HXDLIN(  66)																int this1 = col;
HXDLIN(  66)																int c = this1;
HXDLIN(  66)																bool _hx_tmp;
HXDLIN(  66)																if ((((c >> 24) & 255) < 254)) {
HXLINE(  66)																	_hx_tmp = undoImage->transparent;
            																}
            																else {
HXLINE(  66)																	_hx_tmp = false;
            																}
HXDLIN(  66)																if (_hx_tmp) {
HXLINE(  66)																	int location;
HXDLIN(  66)																	if (undoImage->useVirtualPos) {
HXLINE(  66)																		location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            																	}
            																	else {
HXLINE(  66)																		location = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            																	}
HXDLIN(  66)																	::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  66)																	::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)																	int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  66)																	int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  66)																	int this3 = this2;
HXDLIN(  66)																	int this4;
HXDLIN(  66)																	if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)																		this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            																	}
            																	else {
HXLINE(  66)																		this4 = this3;
            																	}
HXDLIN(  66)																	Float a1;
HXDLIN(  66)																	int this5 = ((this4 >> 24) & 255);
HXDLIN(  66)																	if ((this5 == 0)) {
HXLINE(  66)																		a1 = ((Float)0.);
            																	}
            																	else {
HXLINE(  66)																		a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            																	}
HXDLIN(  66)																	Float r1;
HXDLIN(  66)																	int this6 = ((this4 >> 16) & 255);
HXDLIN(  66)																	if ((this6 == 0)) {
HXLINE(  66)																		r1 = ((Float)0.);
            																	}
            																	else {
HXLINE(  66)																		r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            																	}
HXDLIN(  66)																	Float g1;
HXDLIN(  66)																	int this7 = ((this4 >> 8) & 255);
HXDLIN(  66)																	if ((this7 == 0)) {
HXLINE(  66)																		g1 = ((Float)0.);
            																	}
            																	else {
HXLINE(  66)																		g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            																	}
HXDLIN(  66)																	Float b1;
HXDLIN(  66)																	int this8 = (this4 & 255);
HXDLIN(  66)																	if ((this8 == 0)) {
HXLINE(  66)																		b1 = ((Float)0.);
            																	}
            																	else {
HXLINE(  66)																		b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            																	}
HXDLIN(  66)																	Float a2;
HXDLIN(  66)																	int this9 = ((col >> 24) & 255);
HXDLIN(  66)																	if ((this9 == 0)) {
HXLINE(  66)																		a2 = ((Float)0.);
            																	}
            																	else {
HXLINE(  66)																		a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            																	}
HXDLIN(  66)																	Float r2;
HXDLIN(  66)																	int this10 = ((col >> 16) & 255);
HXDLIN(  66)																	if ((this10 == 0)) {
HXLINE(  66)																		r2 = ((Float)0.);
            																	}
            																	else {
HXLINE(  66)																		r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            																	}
HXDLIN(  66)																	Float g2;
HXDLIN(  66)																	int this11 = ((col >> 8) & 255);
HXDLIN(  66)																	if ((this11 == 0)) {
HXLINE(  66)																		g2 = ((Float)0.);
            																	}
            																	else {
HXLINE(  66)																		g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            																	}
HXDLIN(  66)																	Float b2;
HXDLIN(  66)																	int this12 = (col & 255);
HXDLIN(  66)																	if ((this12 == 0)) {
HXLINE(  66)																		b2 = ((Float)0.);
            																	}
            																	else {
HXLINE(  66)																		b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            																	}
HXDLIN(  66)																	Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  66)																	int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  66)																	int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  66)																	int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  66)																	int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  66)																	int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  66)																	{
HXLINE(  66)																		::haxe::io::ArrayBufferViewImpl this13 = undoImage->image;
HXDLIN(  66)																		int value;
HXDLIN(  66)																		if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)																			value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																		}
            																		else {
HXLINE(  66)																			value = blended;
            																		}
HXDLIN(  66)																		bool _hx_tmp;
HXDLIN(  66)																		if ((location >= 0)) {
HXLINE(  66)																			_hx_tmp = (location < (this13->byteLength >> 2));
            																		}
            																		else {
HXLINE(  66)																			_hx_tmp = false;
            																		}
HXDLIN(  66)																		if (_hx_tmp) {
HXLINE(  66)																			::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  66)																			int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  66)																			_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  66)																			_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  66)																			_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  66)																			_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																		}
            																	}
            																}
            																else {
HXLINE(  66)																	::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  66)																	int index;
HXDLIN(  66)																	if (undoImage->useVirtualPos) {
HXLINE(  66)																		index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            																	}
            																	else {
HXLINE(  66)																		index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            																	}
HXDLIN(  66)																	int value;
HXDLIN(  66)																	if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)																		value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            																	}
            																	else {
HXLINE(  66)																		value = c;
            																	}
HXDLIN(  66)																	bool _hx_tmp;
HXDLIN(  66)																	if ((index >= 0)) {
HXLINE(  66)																		_hx_tmp = (index < (this1->byteLength >> 2));
            																	}
            																	else {
HXLINE(  66)																		_hx_tmp = false;
            																	}
HXDLIN(  66)																	if (_hx_tmp) {
HXLINE(  66)																		::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)																		int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  66)																		_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  66)																		_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  66)																		_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  66)																		_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																	}
            																}
            															}
            															else {
HXLINE(  66)																if (forceClear) {
HXLINE(  66)																	::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  66)																	int x = (dx - rectLeft);
HXDLIN(  66)																	int y = (dy - rectTop);
HXDLIN(  66)																	int index;
HXDLIN(  66)																	if (undoImage->useVirtualPos) {
HXLINE(  66)																		index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            																	}
            																	else {
HXLINE(  66)																		index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            																	}
HXDLIN(  66)																	bool _hx_tmp;
HXDLIN(  66)																	if ((index >= 0)) {
HXLINE(  66)																		_hx_tmp = (index < (this1->byteLength >> 2));
            																	}
            																	else {
HXLINE(  66)																		_hx_tmp = false;
            																	}
HXDLIN(  66)																	if (_hx_tmp) {
HXLINE(  66)																		::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)																		int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  66)																		_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  66)																		_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  66)																		_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  66)																		_this->b[(pos + 3)] = ( (unsigned char)(0) );
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  66)									bool found = false;
HXDLIN(  66)									Float s = ((Float)0.);
HXDLIN(  66)									Float t = ((Float)0.);
HXDLIN(  66)									Float sxx = ((Float)0.);
HXDLIN(  66)									Float txx = ((Float)0.);
HXDLIN(  66)									{
HXLINE(  66)										int _g_min = xIter3->start;
HXDLIN(  66)										int _g_max = xIter3->max;
HXDLIN(  66)										while((_g_min < _g_max)){
HXLINE(  66)											_g_min = (_g_min + 1);
HXDLIN(  66)											int x = (_g_min - 1);
HXLINE(  61)											sxx = (sx * ( (Float)(x) ));
HXLINE(  62)											txx = (tx * ( (Float)(x) ));
HXLINE(  63)											found = false;
HXLINE(  66)											{
HXLINE(  66)												int _g_min1 = yIter3->start;
HXDLIN(  66)												int _g_max = yIter3->max;
HXDLIN(  66)												while((_g_min1 < _g_max)){
HXLINE(  66)													_g_min1 = (_g_min1 + 1);
HXDLIN(  66)													int y = (_g_min1 - 1);
HXLINE(  65)													s = ((s0 + sxx) + (sy * ( (Float)(y) )));
HXLINE(  66)													t = ((t0 + txx) + (ty * ( (Float)(y) )));
HXDLIN(  66)													bool _hx_tmp;
HXDLIN(  66)													if (!((s <= 0))) {
HXLINE(  66)														_hx_tmp = (t <= 0);
            													}
            													else {
HXLINE(  66)														_hx_tmp = true;
            													}
HXDLIN(  66)													if (_hx_tmp) {
HXLINE(  66)														if (found) {
HXLINE(  66)															goto _hx_goto_31;
            														}
            													}
            													else {
HXLINE(  66)														if (((s + t) < A)) {
HXLINE(  66)															{
HXLINE(  66)																int this1 = color;
HXDLIN(  66)																int c = this1;
HXDLIN(  66)																bool _hx_tmp;
HXDLIN(  66)																if ((((c >> 24) & 255) < 254)) {
HXLINE(  66)																	_hx_tmp = pixelshape->transparent;
            																}
            																else {
HXLINE(  66)																	_hx_tmp = false;
            																}
HXDLIN(  66)																if (_hx_tmp) {
HXLINE(  66)																	int location;
HXDLIN(  66)																	if (pixelshape->useVirtualPos) {
HXLINE(  66)																		location = ::Std_obj::_hx_int(((((( (Float)(y) ) - pixelshape->virtualY) * ( (Float)(pixelshape->width) )) + x) - pixelshape->virtualX));
            																	}
            																	else {
HXLINE(  66)																		location = ::Std_obj::_hx_int(( (Float)(((y * pixelshape->width) + x)) ));
            																	}
HXDLIN(  66)																	::haxe::io::ArrayBufferViewImpl this1 = pixelshape->image;
HXDLIN(  66)																	::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)																	int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  66)																	int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  66)																	int this3 = this2;
HXDLIN(  66)																	int this4;
HXDLIN(  66)																	if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)																		this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            																	}
            																	else {
HXLINE(  66)																		this4 = this3;
            																	}
HXDLIN(  66)																	Float a1;
HXDLIN(  66)																	int this5 = ((this4 >> 24) & 255);
HXDLIN(  66)																	if ((this5 == 0)) {
HXLINE(  66)																		a1 = ((Float)0.);
            																	}
            																	else {
HXLINE(  66)																		a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            																	}
HXDLIN(  66)																	Float r1;
HXDLIN(  66)																	int this6 = ((this4 >> 16) & 255);
HXDLIN(  66)																	if ((this6 == 0)) {
HXLINE(  66)																		r1 = ((Float)0.);
            																	}
            																	else {
HXLINE(  66)																		r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            																	}
HXDLIN(  66)																	Float g1;
HXDLIN(  66)																	int this7 = ((this4 >> 8) & 255);
HXDLIN(  66)																	if ((this7 == 0)) {
HXLINE(  66)																		g1 = ((Float)0.);
            																	}
            																	else {
HXLINE(  66)																		g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            																	}
HXDLIN(  66)																	Float b1;
HXDLIN(  66)																	int this8 = (this4 & 255);
HXDLIN(  66)																	if ((this8 == 0)) {
HXLINE(  66)																		b1 = ((Float)0.);
            																	}
            																	else {
HXLINE(  66)																		b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            																	}
HXDLIN(  66)																	Float a2;
HXDLIN(  66)																	int this9 = ((color >> 24) & 255);
HXDLIN(  66)																	if ((this9 == 0)) {
HXLINE(  66)																		a2 = ((Float)0.);
            																	}
            																	else {
HXLINE(  66)																		a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            																	}
HXDLIN(  66)																	Float r2;
HXDLIN(  66)																	int this10 = ((color >> 16) & 255);
HXDLIN(  66)																	if ((this10 == 0)) {
HXLINE(  66)																		r2 = ((Float)0.);
            																	}
            																	else {
HXLINE(  66)																		r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            																	}
HXDLIN(  66)																	Float g2;
HXDLIN(  66)																	int this11 = ((color >> 8) & 255);
HXDLIN(  66)																	if ((this11 == 0)) {
HXLINE(  66)																		g2 = ((Float)0.);
            																	}
            																	else {
HXLINE(  66)																		g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            																	}
HXDLIN(  66)																	Float b2;
HXDLIN(  66)																	int this12 = (color & 255);
HXDLIN(  66)																	if ((this12 == 0)) {
HXLINE(  66)																		b2 = ((Float)0.);
            																	}
            																	else {
HXLINE(  66)																		b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            																	}
HXDLIN(  66)																	Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  66)																	int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  66)																	int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  66)																	int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  66)																	int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  66)																	int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  66)																	{
HXLINE(  66)																		::haxe::io::ArrayBufferViewImpl this13 = pixelshape->image;
HXDLIN(  66)																		int value;
HXDLIN(  66)																		if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)																			value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																		}
            																		else {
HXLINE(  66)																			value = blended;
            																		}
HXDLIN(  66)																		bool _hx_tmp;
HXDLIN(  66)																		if ((location >= 0)) {
HXLINE(  66)																			_hx_tmp = (location < (this13->byteLength >> 2));
            																		}
            																		else {
HXLINE(  66)																			_hx_tmp = false;
            																		}
HXDLIN(  66)																		if (_hx_tmp) {
HXLINE(  66)																			::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  66)																			int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  66)																			_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  66)																			_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  66)																			_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  66)																			_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																		}
            																	}
            																}
            																else {
HXLINE(  66)																	::haxe::io::ArrayBufferViewImpl this1 = pixelshape->image;
HXDLIN(  66)																	int index;
HXDLIN(  66)																	if (pixelshape->useVirtualPos) {
HXLINE(  66)																		index = ::Std_obj::_hx_int(((((( (Float)(y) ) - pixelshape->virtualY) * ( (Float)(pixelshape->width) )) + x) - pixelshape->virtualX));
            																	}
            																	else {
HXLINE(  66)																		index = ::Std_obj::_hx_int(( (Float)(((y * pixelshape->width) + x)) ));
            																	}
HXDLIN(  66)																	int value;
HXDLIN(  66)																	if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  66)																		value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            																	}
            																	else {
HXLINE(  66)																		value = c;
            																	}
HXDLIN(  66)																	bool _hx_tmp;
HXDLIN(  66)																	if ((index >= 0)) {
HXLINE(  66)																		_hx_tmp = (index < (this1->byteLength >> 2));
            																	}
            																	else {
HXLINE(  66)																		_hx_tmp = false;
            																	}
HXDLIN(  66)																	if (_hx_tmp) {
HXLINE(  66)																		::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  66)																		int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  66)																		_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  66)																		_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  66)																		_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  66)																		_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																	}
            																}
            															}
HXLINE(  74)															found = true;
            														}
            														else {
HXLINE(  66)															if (found) {
HXLINE(  66)																goto _hx_goto_31;
            															}
            														}
            													}
            												}
            												_hx_goto_31:;
            											}
            										}
            									}
HXDLIN(  66)									if ((hasHit == true)) {
HXLINE(  66)										::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,farX,lowerY,bx,by,cx,cy,true);
HXDLIN(  66)										if (hasUndo) {
HXLINE(  66)											v->undoImage = undoImage;
HXDLIN(  66)											v->undoX = xIter3->start;
HXDLIN(  66)											v->undoY = yIter3->start;
            										}
            									}
            								}
            							}
            						}
HXLINE(  46)						lastX3 = nextX;
HXLINE(  47)						lastY3 = nextY;
            					}
            				}
            			}
            		}
HXLINE(  67)		{
HXLINE(  67)			::pixelimage::ImageStruct pixelshape1 = temp;
HXDLIN(  67)			Float x2 = this->strokeWidth;
HXDLIN(  67)			Float y1 = this->strokeWidth;
HXDLIN(  67)			Float wid1 = (this->diameter - (( (Float)(2) ) * this->strokeWidth));
HXDLIN(  67)			Float hi1 = (this->diameter - (( (Float)(2) ) * this->strokeWidth));
HXDLIN(  67)			int color1 = this->fill;
HXDLIN(  67)			 ::Dynamic dx1 = ((Float)-1.);
HXDLIN(  67)			 ::Dynamic dy1 = ((Float)-1.);
HXDLIN(  67)			 ::Dynamic fat1 = ((Float)-1.);
HXDLIN(  67)			 ::Dynamic tall1 = ((Float)-1.);
HXDLIN(  67)			if (::hx::IsLess( dx1,((Float)0.) )) {
HXLINE(  67)				Float smallest;
HXDLIN(  67)				if ((hi1 < wid1)) {
HXLINE(  67)					smallest = hi1;
            				}
            				else {
HXLINE(  67)					smallest = wid1;
            				}
HXDLIN(  67)				Float goldenRatio = ((Float)1.61803398875);
HXLINE(  27)				dx1 = (smallest / (goldenRatio + 2));
            			}
HXLINE(  67)			if (::hx::IsLess( dy1,((Float)0.) )) {
HXLINE(  29)				dy1 = dx1;
            			}
HXLINE(  67)			if (::hx::IsLess( fat1,((Float)0.) )) {
HXLINE(  30)				fat1 = (wid1 - (( (Float)(2) ) * ( (Float)(dx1) )));
            			}
HXLINE(  67)			if (::hx::IsLess( tall1,((Float)0.) )) {
HXLINE(  31)				tall1 = (hi1 - (( (Float)(2) ) * ( (Float)(dy1) )));
            			}
HXLINE(  67)			Float rightRadius1 = ((wid1 - ( (Float)(fat1) )) - ( (Float)(dx1) ));
HXDLIN(  67)			Float bottomRadius1 = ((hi1 - ( (Float)(tall1) )) - ( (Float)(dy1) ));
HXDLIN(  67)			Float farX1 = ((x2 + dx1) + fat1);
HXDLIN(  67)			Float lowerY1 = ((y1 + dy1) + tall1);
HXDLIN(  67)			{
HXLINE(  67)				Float cx2 = (x2 + dx1);
HXDLIN(  67)				Float cy2 = (y1 + dy1);
HXDLIN(  67)				Float rx2 = ( (Float)(dx1) );
HXDLIN(  67)				Float ry2 = ( (Float)(dy1) );
HXDLIN(  67)				{
HXLINE(  67)					 ::Dynamic targetError4 = ((Float)1.05);
HXDLIN(  67)					if (::hx::IsNull( targetError4 )) {
HXLINE( 840)						targetError4 = ((Float)1.05);
            					}
HXLINE(  67)					Float rSmall4;
HXDLIN(  67)					if ((rx2 > ry2)) {
HXLINE(  67)						rSmall4 = ry2;
            					}
            					else {
HXLINE(  67)						rSmall4 = rx2;
            					}
HXDLIN(  67)					 ::Dynamic targetE4 = ( (Float)(targetError4) );
HXDLIN(  67)					if (::hx::IsNull( targetE4 )) {
HXLINE(  20)						targetE4 = ((Float)1.05);
            					}
HXLINE(  67)					int result4 = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE4) ) / rSmall4)))));
HXDLIN(  67)					int noSides4;
HXDLIN(  67)					if ((result4 < 12)) {
HXLINE(  67)						noSides4 = 12;
            					}
            					else {
HXLINE(  67)						if ((result4 > 500)) {
HXLINE(  67)							noSides4 = 500;
            						}
            						else {
HXLINE(  67)							noSides4 = result4;
            						}
            					}
HXDLIN(  67)					int sides4 = (::Math_obj::ceil((( (Float)(noSides4) ) / ( (Float)(4) ))) * 4);
HXDLIN(  67)					Float theta4 = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides4) ));
HXDLIN(  67)					Float omega4 = ::Math_obj::PI;
HXDLIN(  67)					int quarter4 = ::Std_obj::_hx_int((( (Float)(sides4) ) / ( (Float)(4) )));
HXDLIN(  67)					Float lastX4 = ((Float)0.);
HXDLIN(  67)					Float lastY4 = ((Float)0.);
HXDLIN(  67)					{
HXLINE(  26)						lastX4 = (cx2 + (rx2 * ::Math_obj::cos(((( (Float)(sides4) ) * theta4) + omega4))));
HXLINE(  27)						lastY4 = (cy2 + (ry2 * ::Math_obj::sin(((( (Float)(sides4) ) * theta4) + omega4))));
            					}
HXLINE(  67)					{
HXLINE(  67)						int _g8 = 0;
HXDLIN(  67)						int _g9 = (quarter4 + 1);
HXDLIN(  67)						while((_g8 < _g9)){
HXLINE(  67)							_g8 = (_g8 + 1);
HXDLIN(  67)							int i = (_g8 - 1);
HXDLIN(  67)							Float nextX = (cx2 + (rx2 * ::Math_obj::cos((((( (Float)(i) ) * theta4) + ((Float)0.0001)) + omega4))));
HXDLIN(  67)							Float nextY = (cy2 + (ry2 * ::Math_obj::sin((((( (Float)(i) ) * theta4) + ((Float)0.0001)) + omega4))));
HXDLIN(  67)							{
HXLINE(  67)								bool hasHit = false;
HXDLIN(  67)								bool hasUndo = false;
HXDLIN(  67)								{
HXLINE(  67)									Float bx = lastX4;
HXDLIN(  67)									Float by = lastY4;
HXDLIN(  67)									Float cx = nextX;
HXDLIN(  67)									Float cy = nextY;
HXDLIN(  67)									bool adjustWinding = (((((cx2 * by) - (bx * cy2)) + ((bx * cy) - (cx * by))) + ((cx * cy2) - (cx2 * cy))) > 0);
HXDLIN(  67)									if (!(adjustWinding)) {
HXLINE(  67)										Float bx_ = bx;
HXDLIN(  67)										Float by_ = by;
HXLINE(  26)										bx = cx;
HXLINE(  27)										by = cy;
HXLINE(  28)										cx = bx_;
HXLINE(  29)										cy = by_;
            									}
HXLINE(  67)									{
HXLINE(  67)										Float s0 = ((cy2 * cx) - (cx2 * cy));
HXDLIN(  67)										Float sx = (cy - cy2);
HXDLIN(  67)										Float sy = (cx2 - cx);
HXDLIN(  67)										Float t0 = ((cx2 * by) - (cy2 * bx));
HXDLIN(  67)										Float tx = (cy2 - by);
HXDLIN(  67)										Float ty = (bx - cx2);
HXDLIN(  67)										Float A = ((((-(by) * cx) + (cy2 * (-(bx) + cx))) + (cx2 * (by - cy))) + (bx * cy));
HXDLIN(  67)										::pixelimage::iter::IntIterStart xIter3;
HXDLIN(  67)										if ((cx2 > bx)) {
HXLINE(  67)											if ((cx2 > cx)) {
HXLINE(  67)												int min;
HXDLIN(  67)												if ((bx > cx)) {
HXLINE(  67)													min = ::Math_obj::floor(cx);
            												}
            												else {
HXLINE(  67)													min = ::Math_obj::floor(bx);
            												}
HXDLIN(  67)												int ii_min = min;
HXDLIN(  67)												int ii_max = ::Math_obj::ceil(cx2);
HXDLIN(  67)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  67)												xIter3 = this1;
            											}
            											else {
HXLINE(  67)												int ii_min = ::Math_obj::floor(bx);
HXDLIN(  67)												int ii_max = ::Math_obj::ceil(cx);
HXDLIN(  67)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  67)												xIter3 = this1;
            											}
            										}
            										else {
HXLINE(  67)											if ((bx > cx)) {
HXLINE(  67)												int min;
HXDLIN(  67)												if ((cx2 > cx)) {
HXLINE(  67)													min = ::Math_obj::floor(cx);
            												}
            												else {
HXLINE(  67)													min = ::Math_obj::ceil(cx2);
            												}
HXDLIN(  67)												int ii_min = min;
HXDLIN(  67)												int ii_max = ::Math_obj::ceil(bx);
HXDLIN(  67)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  67)												xIter3 = this1;
            											}
            											else {
HXLINE(  67)												int ii_min = ::Math_obj::floor(cx2);
HXDLIN(  67)												int ii_max = ::Math_obj::ceil(cx);
HXDLIN(  67)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  67)												xIter3 = this1;
            											}
            										}
HXDLIN(  67)										::pixelimage::iter::IntIterStart yIter3;
HXDLIN(  67)										if ((cy2 > by)) {
HXLINE(  67)											if ((cy2 > cy)) {
HXLINE(  67)												int min;
HXDLIN(  67)												if ((by > cy)) {
HXLINE(  67)													min = ::Math_obj::floor(cy);
            												}
            												else {
HXLINE(  67)													min = ::Math_obj::floor(by);
            												}
HXDLIN(  67)												int ii_min = min;
HXDLIN(  67)												int ii_max = ::Math_obj::ceil(cy2);
HXDLIN(  67)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  67)												yIter3 = this1;
            											}
            											else {
HXLINE(  67)												int ii_min = ::Math_obj::floor(by);
HXDLIN(  67)												int ii_max = ::Math_obj::ceil(cy);
HXDLIN(  67)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  67)												yIter3 = this1;
            											}
            										}
            										else {
HXLINE(  67)											if ((by > cy)) {
HXLINE(  67)												int min;
HXDLIN(  67)												if ((cy2 > cy)) {
HXLINE(  67)													min = ::Math_obj::floor(cy);
            												}
            												else {
HXLINE(  67)													min = ::Math_obj::ceil(cy2);
            												}
HXDLIN(  67)												int ii_min = min;
HXDLIN(  67)												int ii_max = ::Math_obj::ceil(by);
HXDLIN(  67)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  67)												yIter3 = this1;
            											}
            											else {
HXLINE(  67)												int ii_min = ::Math_obj::floor(cy2);
HXDLIN(  67)												int ii_max = ::Math_obj::ceil(cy);
HXDLIN(  67)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  67)												yIter3 = this1;
            											}
            										}
HXDLIN(  67)										::pixelimage::ImageStruct undoImage = null();
HXDLIN(  67)										if (hasUndo) {
HXLINE(  67)											int w = ((xIter3->max - xIter3->start) + 1);
HXDLIN(  67)											int h = ((yIter3->max - yIter3->start) + 1);
HXDLIN(  67)											int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN(  67)											::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  67)											::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN(  67)											::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN(  67)											undoImage = this3;
HXDLIN(  67)											{
HXLINE(  67)												int rectLeft = xIter3->start;
HXDLIN(  67)												int rectTop = yIter3->start;
HXDLIN(  67)												int rectRight = xIter3->max;
HXDLIN(  67)												bool forceClear = false;
HXDLIN(  67)												{
HXLINE(  67)													int _g = rectTop;
HXDLIN(  67)													int _g1 = yIter3->max;
HXDLIN(  67)													while((_g < _g1)){
HXLINE(  67)														_g = (_g + 1);
HXDLIN(  67)														int dy = (_g - 1);
HXDLIN(  67)														{
HXLINE(  67)															int _g1 = rectLeft;
HXDLIN(  67)															int _g2 = rectRight;
HXDLIN(  67)															while((_g1 < _g2)){
HXLINE(  67)																_g1 = (_g1 + 1);
HXDLIN(  67)																int dx = (_g1 - 1);
HXDLIN(  67)																::haxe::io::ArrayBufferViewImpl this1 = pixelshape1->image;
HXDLIN(  67)																int index;
HXDLIN(  67)																if (pixelshape1->useVirtualPos) {
HXLINE(  67)																	index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - pixelshape1->virtualY) * ( (Float)(pixelshape1->width) )) + dx) - pixelshape1->virtualX));
            																}
            																else {
HXLINE(  67)																	index = ::Std_obj::_hx_int(( (Float)(((dy * pixelshape1->width) + dx)) ));
            																}
HXDLIN(  67)																::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  67)																int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  67)																int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  67)																int col;
HXDLIN(  67)																if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																	col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            																}
            																else {
HXLINE(  67)																	col = c;
            																}
HXDLIN(  67)																bool _hx_tmp;
HXDLIN(  67)																if (pixelshape1->useMask) {
HXLINE(  67)																	_hx_tmp = ::hx::IsNotNull( pixelshape1->mask );
            																}
            																else {
HXLINE(  67)																	_hx_tmp = false;
            																}
HXDLIN(  67)																if (_hx_tmp) {
HXLINE(  67)																	::pixelimage::ImageStruct this1 = pixelshape1->mask;
HXDLIN(  67)																	::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  67)																	int index;
HXDLIN(  67)																	if (this1->useVirtualPos) {
HXLINE(  67)																		index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            																	}
            																	else {
HXLINE(  67)																		index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            																	}
HXDLIN(  67)																	::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  67)																	int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  67)																	int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  67)																	int v;
HXDLIN(  67)																	if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																		v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            																	}
            																	else {
HXLINE(  67)																		v = c;
            																	}
HXDLIN(  67)																	int this3 = v;
HXDLIN(  67)																	int maskPixel = this3;
HXDLIN(  67)																	int this4 = col;
HXDLIN(  67)																	int this5 = this4;
HXDLIN(  67)																	if ((maskPixel == 0)) {
HXLINE(  67)																		int this1 = this5;
HXDLIN(  67)																		col = this1;
            																	}
            																	else {
HXLINE(  67)																		Float m0;
HXDLIN(  67)																		int this1 = ((maskPixel >> 24) & 255);
HXDLIN(  67)																		if ((this1 == 0)) {
HXLINE(  67)																			m0 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float m1;
HXDLIN(  67)																		int this2 = ((maskPixel >> 16) & 255);
HXDLIN(  67)																		if ((this2 == 0)) {
HXLINE(  67)																			m1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float m2;
HXDLIN(  67)																		int this3 = ((maskPixel >> 8) & 255);
HXDLIN(  67)																		if ((this3 == 0)) {
HXLINE(  67)																			m2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float m3;
HXDLIN(  67)																		int this4 = (maskPixel & 255);
HXDLIN(  67)																		if ((this4 == 0)) {
HXLINE(  67)																			m3 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN(  67)																		int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN(  67)																		int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN(  67)																		int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN(  67)																		col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            																	}
            																}
HXDLIN(  67)																if ((col != 0)) {
HXLINE(  67)																	int x = (dx - rectLeft);
HXDLIN(  67)																	int y = (dy - rectTop);
HXDLIN(  67)																	int this1 = col;
HXDLIN(  67)																	int c = this1;
HXDLIN(  67)																	bool _hx_tmp;
HXDLIN(  67)																	if ((((c >> 24) & 255) < 254)) {
HXLINE(  67)																		_hx_tmp = undoImage->transparent;
            																	}
            																	else {
HXLINE(  67)																		_hx_tmp = false;
            																	}
HXDLIN(  67)																	if (_hx_tmp) {
HXLINE(  67)																		int location;
HXDLIN(  67)																		if (undoImage->useVirtualPos) {
HXLINE(  67)																			location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            																		}
            																		else {
HXLINE(  67)																			location = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            																		}
HXDLIN(  67)																		::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  67)																		::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  67)																		int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  67)																		int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  67)																		int this3 = this2;
HXDLIN(  67)																		int this4;
HXDLIN(  67)																		if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																			this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            																		}
            																		else {
HXLINE(  67)																			this4 = this3;
            																		}
HXDLIN(  67)																		Float a1;
HXDLIN(  67)																		int this5 = ((this4 >> 24) & 255);
HXDLIN(  67)																		if ((this5 == 0)) {
HXLINE(  67)																			a1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float r1;
HXDLIN(  67)																		int this6 = ((this4 >> 16) & 255);
HXDLIN(  67)																		if ((this6 == 0)) {
HXLINE(  67)																			r1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float g1;
HXDLIN(  67)																		int this7 = ((this4 >> 8) & 255);
HXDLIN(  67)																		if ((this7 == 0)) {
HXLINE(  67)																			g1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float b1;
HXDLIN(  67)																		int this8 = (this4 & 255);
HXDLIN(  67)																		if ((this8 == 0)) {
HXLINE(  67)																			b1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float a2;
HXDLIN(  67)																		int this9 = ((col >> 24) & 255);
HXDLIN(  67)																		if ((this9 == 0)) {
HXLINE(  67)																			a2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float r2;
HXDLIN(  67)																		int this10 = ((col >> 16) & 255);
HXDLIN(  67)																		if ((this10 == 0)) {
HXLINE(  67)																			r2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float g2;
HXDLIN(  67)																		int this11 = ((col >> 8) & 255);
HXDLIN(  67)																		if ((this11 == 0)) {
HXLINE(  67)																			g2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float b2;
HXDLIN(  67)																		int this12 = (col & 255);
HXDLIN(  67)																		if ((this12 == 0)) {
HXLINE(  67)																			b2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  67)																		int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  67)																		int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  67)																		int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  67)																		int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  67)																		int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  67)																		{
HXLINE(  67)																			::haxe::io::ArrayBufferViewImpl this13 = undoImage->image;
HXDLIN(  67)																			int value;
HXDLIN(  67)																			if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																				value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																			}
            																			else {
HXLINE(  67)																				value = blended;
            																			}
HXDLIN(  67)																			bool _hx_tmp;
HXDLIN(  67)																			if ((location >= 0)) {
HXLINE(  67)																				_hx_tmp = (location < (this13->byteLength >> 2));
            																			}
            																			else {
HXLINE(  67)																				_hx_tmp = false;
            																			}
HXDLIN(  67)																			if (_hx_tmp) {
HXLINE(  67)																				::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  67)																				int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  67)																				_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  67)																				_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  67)																				_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  67)																				_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																			}
            																		}
            																	}
            																	else {
HXLINE(  67)																		::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  67)																		int index;
HXDLIN(  67)																		if (undoImage->useVirtualPos) {
HXLINE(  67)																			index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            																		}
            																		else {
HXLINE(  67)																			index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            																		}
HXDLIN(  67)																		int value;
HXDLIN(  67)																		if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																			value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            																		}
            																		else {
HXLINE(  67)																			value = c;
            																		}
HXDLIN(  67)																		bool _hx_tmp;
HXDLIN(  67)																		if ((index >= 0)) {
HXLINE(  67)																			_hx_tmp = (index < (this1->byteLength >> 2));
            																		}
            																		else {
HXLINE(  67)																			_hx_tmp = false;
            																		}
HXDLIN(  67)																		if (_hx_tmp) {
HXLINE(  67)																			::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  67)																			int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  67)																			_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  67)																			_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  67)																			_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  67)																			_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																		}
            																	}
            																}
            																else {
HXLINE(  67)																	if (forceClear) {
HXLINE(  67)																		::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  67)																		int x = (dx - rectLeft);
HXDLIN(  67)																		int y = (dy - rectTop);
HXDLIN(  67)																		int index;
HXDLIN(  67)																		if (undoImage->useVirtualPos) {
HXLINE(  67)																			index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            																		}
            																		else {
HXLINE(  67)																			index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            																		}
HXDLIN(  67)																		bool _hx_tmp;
HXDLIN(  67)																		if ((index >= 0)) {
HXLINE(  67)																			_hx_tmp = (index < (this1->byteLength >> 2));
            																		}
            																		else {
HXLINE(  67)																			_hx_tmp = false;
            																		}
HXDLIN(  67)																		if (_hx_tmp) {
HXLINE(  67)																			::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  67)																			int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  67)																			_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  67)																			_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  67)																			_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  67)																			_this->b[(pos + 3)] = ( (unsigned char)(0) );
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
            										}
HXDLIN(  67)										bool found = false;
HXDLIN(  67)										Float s = ((Float)0.);
HXDLIN(  67)										Float t = ((Float)0.);
HXDLIN(  67)										Float sxx = ((Float)0.);
HXDLIN(  67)										Float txx = ((Float)0.);
HXDLIN(  67)										{
HXLINE(  67)											int _g_min = xIter3->start;
HXDLIN(  67)											int _g_max = xIter3->max;
HXDLIN(  67)											while((_g_min < _g_max)){
HXLINE(  67)												_g_min = (_g_min + 1);
HXDLIN(  67)												int x = (_g_min - 1);
HXLINE(  61)												sxx = (sx * ( (Float)(x) ));
HXLINE(  62)												txx = (tx * ( (Float)(x) ));
HXLINE(  63)												found = false;
HXLINE(  67)												{
HXLINE(  67)													int _g_min1 = yIter3->start;
HXDLIN(  67)													int _g_max = yIter3->max;
HXDLIN(  67)													while((_g_min1 < _g_max)){
HXLINE(  67)														_g_min1 = (_g_min1 + 1);
HXDLIN(  67)														int y = (_g_min1 - 1);
HXLINE(  65)														s = ((s0 + sxx) + (sy * ( (Float)(y) )));
HXLINE(  66)														t = ((t0 + txx) + (ty * ( (Float)(y) )));
HXLINE(  67)														bool _hx_tmp;
HXDLIN(  67)														if (!((s <= 0))) {
HXLINE(  67)															_hx_tmp = (t <= 0);
            														}
            														else {
HXLINE(  67)															_hx_tmp = true;
            														}
HXDLIN(  67)														if (_hx_tmp) {
HXLINE(  67)															if (found) {
HXLINE(  67)																goto _hx_goto_36;
            															}
            														}
            														else {
HXLINE(  67)															if (((s + t) < A)) {
HXLINE(  67)																{
HXLINE(  67)																	int this1 = color1;
HXDLIN(  67)																	int c = this1;
HXDLIN(  67)																	bool _hx_tmp;
HXDLIN(  67)																	if ((((c >> 24) & 255) < 254)) {
HXLINE(  67)																		_hx_tmp = pixelshape1->transparent;
            																	}
            																	else {
HXLINE(  67)																		_hx_tmp = false;
            																	}
HXDLIN(  67)																	if (_hx_tmp) {
HXLINE(  67)																		int location;
HXDLIN(  67)																		if (pixelshape1->useVirtualPos) {
HXLINE(  67)																			location = ::Std_obj::_hx_int(((((( (Float)(y) ) - pixelshape1->virtualY) * ( (Float)(pixelshape1->width) )) + x) - pixelshape1->virtualX));
            																		}
            																		else {
HXLINE(  67)																			location = ::Std_obj::_hx_int(( (Float)(((y * pixelshape1->width) + x)) ));
            																		}
HXDLIN(  67)																		::haxe::io::ArrayBufferViewImpl this1 = pixelshape1->image;
HXDLIN(  67)																		::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  67)																		int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  67)																		int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  67)																		int this3 = this2;
HXDLIN(  67)																		int this4;
HXDLIN(  67)																		if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																			this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            																		}
            																		else {
HXLINE(  67)																			this4 = this3;
            																		}
HXDLIN(  67)																		Float a1;
HXDLIN(  67)																		int this5 = ((this4 >> 24) & 255);
HXDLIN(  67)																		if ((this5 == 0)) {
HXLINE(  67)																			a1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float r1;
HXDLIN(  67)																		int this6 = ((this4 >> 16) & 255);
HXDLIN(  67)																		if ((this6 == 0)) {
HXLINE(  67)																			r1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float g1;
HXDLIN(  67)																		int this7 = ((this4 >> 8) & 255);
HXDLIN(  67)																		if ((this7 == 0)) {
HXLINE(  67)																			g1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float b1;
HXDLIN(  67)																		int this8 = (this4 & 255);
HXDLIN(  67)																		if ((this8 == 0)) {
HXLINE(  67)																			b1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float a2;
HXDLIN(  67)																		int this9 = ((color1 >> 24) & 255);
HXDLIN(  67)																		if ((this9 == 0)) {
HXLINE(  67)																			a2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float r2;
HXDLIN(  67)																		int this10 = ((color1 >> 16) & 255);
HXDLIN(  67)																		if ((this10 == 0)) {
HXLINE(  67)																			r2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float g2;
HXDLIN(  67)																		int this11 = ((color1 >> 8) & 255);
HXDLIN(  67)																		if ((this11 == 0)) {
HXLINE(  67)																			g2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float b2;
HXDLIN(  67)																		int this12 = (color1 & 255);
HXDLIN(  67)																		if ((this12 == 0)) {
HXLINE(  67)																			b2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  67)																		int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  67)																		int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  67)																		int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  67)																		int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  67)																		int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  67)																		{
HXLINE(  67)																			::haxe::io::ArrayBufferViewImpl this13 = pixelshape1->image;
HXDLIN(  67)																			int value;
HXDLIN(  67)																			if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																				value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																			}
            																			else {
HXLINE(  67)																				value = blended;
            																			}
HXDLIN(  67)																			bool _hx_tmp;
HXDLIN(  67)																			if ((location >= 0)) {
HXLINE(  67)																				_hx_tmp = (location < (this13->byteLength >> 2));
            																			}
            																			else {
HXLINE(  67)																				_hx_tmp = false;
            																			}
HXDLIN(  67)																			if (_hx_tmp) {
HXLINE(  67)																				::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  67)																				int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  67)																				_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  67)																				_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  67)																				_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  67)																				_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																			}
            																		}
            																	}
            																	else {
HXLINE(  67)																		::haxe::io::ArrayBufferViewImpl this1 = pixelshape1->image;
HXDLIN(  67)																		int index;
HXDLIN(  67)																		if (pixelshape1->useVirtualPos) {
HXLINE(  67)																			index = ::Std_obj::_hx_int(((((( (Float)(y) ) - pixelshape1->virtualY) * ( (Float)(pixelshape1->width) )) + x) - pixelshape1->virtualX));
            																		}
            																		else {
HXLINE(  67)																			index = ::Std_obj::_hx_int(( (Float)(((y * pixelshape1->width) + x)) ));
            																		}
HXDLIN(  67)																		int value;
HXDLIN(  67)																		if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																			value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            																		}
            																		else {
HXLINE(  67)																			value = c;
            																		}
HXDLIN(  67)																		bool _hx_tmp;
HXDLIN(  67)																		if ((index >= 0)) {
HXLINE(  67)																			_hx_tmp = (index < (this1->byteLength >> 2));
            																		}
            																		else {
HXLINE(  67)																			_hx_tmp = false;
            																		}
HXDLIN(  67)																		if (_hx_tmp) {
HXLINE(  67)																			::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  67)																			int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  67)																			_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  67)																			_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  67)																			_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  67)																			_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																		}
            																	}
            																}
HXLINE(  74)																found = true;
            															}
            															else {
HXLINE(  67)																if (found) {
HXLINE(  67)																	goto _hx_goto_36;
            																}
            															}
            														}
            													}
            													_hx_goto_36:;
            												}
            											}
            										}
HXDLIN(  67)										if ((hasHit == true)) {
HXLINE(  67)											::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,cx2,cy2,bx,by,cx,cy,true);
HXDLIN(  67)											if (hasUndo) {
HXLINE(  67)												v->undoImage = undoImage;
HXDLIN(  67)												v->undoX = xIter3->start;
HXDLIN(  67)												v->undoY = yIter3->start;
            											}
            										}
            									}
            								}
            							}
HXLINE(  46)							lastX4 = nextX;
HXLINE(  47)							lastY4 = nextY;
            						}
            					}
            				}
            			}
HXLINE(  67)			{
HXLINE(  67)				Float x3 = (x2 + dx1);
HXDLIN(  67)				int p3 = ::Std_obj::_hx_int(x3);
HXDLIN(  67)				int xx3 = p3;
HXDLIN(  67)				int q3 = ::Std_obj::_hx_int(y1);
HXDLIN(  67)				int maxX3 = ::Std_obj::_hx_int((x3 + ( (Float)(fat1) )));
HXDLIN(  67)				int maxY3 = ::Std_obj::_hx_int((y1 + ( (Float)(dy1) )));
HXDLIN(  67)				while(true){
HXLINE(  67)					{
HXLINE(  67)						p3 = (p3 + 1);
HXDLIN(  67)						int x = (p3 - 1);
HXDLIN(  67)						int this1 = color1;
HXDLIN(  67)						int c = this1;
HXDLIN(  67)						bool _hx_tmp;
HXDLIN(  67)						if ((((c >> 24) & 255) < 254)) {
HXLINE(  67)							_hx_tmp = pixelshape1->transparent;
            						}
            						else {
HXLINE(  67)							_hx_tmp = false;
            						}
HXDLIN(  67)						if (_hx_tmp) {
HXLINE(  67)							int location;
HXDLIN(  67)							if (pixelshape1->useVirtualPos) {
HXLINE(  67)								location = ::Std_obj::_hx_int(((((( (Float)(q3) ) - pixelshape1->virtualY) * ( (Float)(pixelshape1->width) )) + x) - pixelshape1->virtualX));
            							}
            							else {
HXLINE(  67)								location = ::Std_obj::_hx_int(( (Float)(((q3 * pixelshape1->width) + x)) ));
            							}
HXDLIN(  67)							::haxe::io::ArrayBufferViewImpl this1 = pixelshape1->image;
HXDLIN(  67)							::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  67)							int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  67)							int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  67)							int this3 = this2;
HXDLIN(  67)							int this4;
HXDLIN(  67)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)								this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            							}
            							else {
HXLINE(  67)								this4 = this3;
            							}
HXDLIN(  67)							Float a1;
HXDLIN(  67)							int this5 = ((this4 >> 24) & 255);
HXDLIN(  67)							if ((this5 == 0)) {
HXLINE(  67)								a1 = ((Float)0.);
            							}
            							else {
HXLINE(  67)								a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            							}
HXDLIN(  67)							Float r1;
HXDLIN(  67)							int this6 = ((this4 >> 16) & 255);
HXDLIN(  67)							if ((this6 == 0)) {
HXLINE(  67)								r1 = ((Float)0.);
            							}
            							else {
HXLINE(  67)								r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            							}
HXDLIN(  67)							Float g1;
HXDLIN(  67)							int this7 = ((this4 >> 8) & 255);
HXDLIN(  67)							if ((this7 == 0)) {
HXLINE(  67)								g1 = ((Float)0.);
            							}
            							else {
HXLINE(  67)								g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            							}
HXDLIN(  67)							Float b1;
HXDLIN(  67)							int this8 = (this4 & 255);
HXDLIN(  67)							if ((this8 == 0)) {
HXLINE(  67)								b1 = ((Float)0.);
            							}
            							else {
HXLINE(  67)								b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            							}
HXDLIN(  67)							Float a2;
HXDLIN(  67)							int this9 = ((color1 >> 24) & 255);
HXDLIN(  67)							if ((this9 == 0)) {
HXLINE(  67)								a2 = ((Float)0.);
            							}
            							else {
HXLINE(  67)								a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            							}
HXDLIN(  67)							Float r2;
HXDLIN(  67)							int this10 = ((color1 >> 16) & 255);
HXDLIN(  67)							if ((this10 == 0)) {
HXLINE(  67)								r2 = ((Float)0.);
            							}
            							else {
HXLINE(  67)								r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            							}
HXDLIN(  67)							Float g2;
HXDLIN(  67)							int this11 = ((color1 >> 8) & 255);
HXDLIN(  67)							if ((this11 == 0)) {
HXLINE(  67)								g2 = ((Float)0.);
            							}
            							else {
HXLINE(  67)								g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            							}
HXDLIN(  67)							Float b2;
HXDLIN(  67)							int this12 = (color1 & 255);
HXDLIN(  67)							if ((this12 == 0)) {
HXLINE(  67)								b2 = ((Float)0.);
            							}
            							else {
HXLINE(  67)								b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            							}
HXDLIN(  67)							Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  67)							int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  67)							int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  67)							int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  67)							int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  67)							int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  67)							{
HXLINE(  67)								::haxe::io::ArrayBufferViewImpl this13 = pixelshape1->image;
HXDLIN(  67)								int value;
HXDLIN(  67)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)									value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            								}
            								else {
HXLINE(  67)									value = blended;
            								}
HXDLIN(  67)								bool _hx_tmp;
HXDLIN(  67)								if ((location >= 0)) {
HXLINE(  67)									_hx_tmp = (location < (this13->byteLength >> 2));
            								}
            								else {
HXLINE(  67)									_hx_tmp = false;
            								}
HXDLIN(  67)								if (_hx_tmp) {
HXLINE(  67)									::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  67)									int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  67)									_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  67)									_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  67)									_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  67)									_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            								}
            							}
            						}
            						else {
HXLINE(  67)							::haxe::io::ArrayBufferViewImpl this1 = pixelshape1->image;
HXDLIN(  67)							int index;
HXDLIN(  67)							if (pixelshape1->useVirtualPos) {
HXLINE(  67)								index = ::Std_obj::_hx_int(((((( (Float)(q3) ) - pixelshape1->virtualY) * ( (Float)(pixelshape1->width) )) + x) - pixelshape1->virtualX));
            							}
            							else {
HXLINE(  67)								index = ::Std_obj::_hx_int(( (Float)(((q3 * pixelshape1->width) + x)) ));
            							}
HXDLIN(  67)							int value;
HXDLIN(  67)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)								value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            							}
            							else {
HXLINE(  67)								value = c;
            							}
HXDLIN(  67)							bool _hx_tmp;
HXDLIN(  67)							if ((index >= 0)) {
HXLINE(  67)								_hx_tmp = (index < (this1->byteLength >> 2));
            							}
            							else {
HXLINE(  67)								_hx_tmp = false;
            							}
HXDLIN(  67)							if (_hx_tmp) {
HXLINE(  67)								::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  67)								int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  67)								_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  67)								_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  67)								_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  67)								_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            							}
            						}
            					}
HXDLIN(  67)					if ((p3 > maxX3)) {
HXLINE( 247)						p3 = xx3;
HXLINE(  67)						q3 = (q3 + 1);
            					}
HXDLIN(  67)					if ((q3 > maxY3)) {
HXLINE(  67)						goto _hx_goto_37;
            					}
            				}
            				_hx_goto_37:;
            			}
HXDLIN(  67)			{
HXLINE(  67)				Float cy3 = (y1 + dy1);
HXDLIN(  67)				Float ry3 = ( (Float)(dy1) );
HXDLIN(  67)				{
HXLINE(  67)					 ::Dynamic targetError5 = ((Float)1.05);
HXDLIN(  67)					if (::hx::IsNull( targetError5 )) {
HXLINE( 840)						targetError5 = ((Float)1.05);
            					}
HXLINE(  67)					Float rSmall5;
HXDLIN(  67)					if ((rightRadius1 > ry3)) {
HXLINE(  67)						rSmall5 = ry3;
            					}
            					else {
HXLINE(  67)						rSmall5 = rightRadius1;
            					}
HXDLIN(  67)					 ::Dynamic targetE5 = ( (Float)(targetError5) );
HXDLIN(  67)					if (::hx::IsNull( targetE5 )) {
HXLINE(  20)						targetE5 = ((Float)1.05);
            					}
HXLINE(  67)					int result5 = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE5) ) / rSmall5)))));
HXDLIN(  67)					int noSides5;
HXDLIN(  67)					if ((result5 < 12)) {
HXLINE(  67)						noSides5 = 12;
            					}
            					else {
HXLINE(  67)						if ((result5 > 500)) {
HXLINE(  67)							noSides5 = 500;
            						}
            						else {
HXLINE(  67)							noSides5 = result5;
            						}
            					}
HXDLIN(  67)					int sides5 = (::Math_obj::ceil((( (Float)(noSides5) ) / ( (Float)(4) ))) * 4);
HXDLIN(  67)					Float theta5 = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides5) ));
HXDLIN(  67)					Float omega5 = ((( (Float)(3) ) * ::Math_obj::PI) / ( (Float)(2) ));
HXDLIN(  67)					int quarter5 = ::Std_obj::_hx_int((( (Float)(sides5) ) / ( (Float)(4) )));
HXDLIN(  67)					Float lastX5 = ((Float)0.);
HXDLIN(  67)					Float lastY5 = ((Float)0.);
HXDLIN(  67)					{
HXLINE(  26)						lastX5 = (farX1 + (rightRadius1 * ::Math_obj::cos(((( (Float)(sides5) ) * theta5) + omega5))));
HXLINE(  27)						lastY5 = (cy3 + (ry3 * ::Math_obj::sin(((( (Float)(sides5) ) * theta5) + omega5))));
            					}
HXLINE(  67)					{
HXLINE(  67)						int _g10 = 0;
HXDLIN(  67)						int _g11 = (quarter5 + 1);
HXDLIN(  67)						while((_g10 < _g11)){
HXLINE(  67)							_g10 = (_g10 + 1);
HXDLIN(  67)							int i = (_g10 - 1);
HXDLIN(  67)							Float nextX = (farX1 + (rightRadius1 * ::Math_obj::cos((((( (Float)(i) ) * theta5) + ((Float)0.0001)) + omega5))));
HXDLIN(  67)							Float nextY = (cy3 + (ry3 * ::Math_obj::sin((((( (Float)(i) ) * theta5) + ((Float)0.0001)) + omega5))));
HXDLIN(  67)							{
HXLINE(  67)								bool hasHit = false;
HXDLIN(  67)								bool hasUndo = false;
HXDLIN(  67)								{
HXLINE(  67)									Float bx = lastX5;
HXDLIN(  67)									Float by = lastY5;
HXDLIN(  67)									Float cx = nextX;
HXDLIN(  67)									Float cy = nextY;
HXDLIN(  67)									bool adjustWinding = (((((farX1 * by) - (bx * cy3)) + ((bx * cy) - (cx * by))) + ((cx * cy3) - (farX1 * cy))) > 0);
HXDLIN(  67)									if (!(adjustWinding)) {
HXLINE(  67)										Float bx_ = bx;
HXDLIN(  67)										Float by_ = by;
HXLINE(  26)										bx = cx;
HXLINE(  27)										by = cy;
HXLINE(  28)										cx = bx_;
HXLINE(  29)										cy = by_;
            									}
HXLINE(  67)									{
HXLINE(  67)										Float s0 = ((cy3 * cx) - (farX1 * cy));
HXDLIN(  67)										Float sx = (cy - cy3);
HXDLIN(  67)										Float sy = (farX1 - cx);
HXDLIN(  67)										Float t0 = ((farX1 * by) - (cy3 * bx));
HXDLIN(  67)										Float tx = (cy3 - by);
HXDLIN(  67)										Float ty = (bx - farX1);
HXDLIN(  67)										Float A = ((((-(by) * cx) + (cy3 * (-(bx) + cx))) + (farX1 * (by - cy))) + (bx * cy));
HXDLIN(  67)										::pixelimage::iter::IntIterStart xIter3;
HXDLIN(  67)										if ((farX1 > bx)) {
HXLINE(  67)											if ((farX1 > cx)) {
HXLINE(  67)												int min;
HXDLIN(  67)												if ((bx > cx)) {
HXLINE(  67)													min = ::Math_obj::floor(cx);
            												}
            												else {
HXLINE(  67)													min = ::Math_obj::floor(bx);
            												}
HXDLIN(  67)												int ii_min = min;
HXDLIN(  67)												int ii_max = ::Math_obj::ceil(farX1);
HXDLIN(  67)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  67)												xIter3 = this1;
            											}
            											else {
HXLINE(  67)												int ii_min = ::Math_obj::floor(bx);
HXDLIN(  67)												int ii_max = ::Math_obj::ceil(cx);
HXDLIN(  67)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  67)												xIter3 = this1;
            											}
            										}
            										else {
HXLINE(  67)											if ((bx > cx)) {
HXLINE(  67)												int min;
HXDLIN(  67)												if ((farX1 > cx)) {
HXLINE(  67)													min = ::Math_obj::floor(cx);
            												}
            												else {
HXLINE(  67)													min = ::Math_obj::ceil(farX1);
            												}
HXDLIN(  67)												int ii_min = min;
HXDLIN(  67)												int ii_max = ::Math_obj::ceil(bx);
HXDLIN(  67)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  67)												xIter3 = this1;
            											}
            											else {
HXLINE(  67)												int ii_min = ::Math_obj::floor(farX1);
HXDLIN(  67)												int ii_max = ::Math_obj::ceil(cx);
HXDLIN(  67)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  67)												xIter3 = this1;
            											}
            										}
HXDLIN(  67)										::pixelimage::iter::IntIterStart yIter3;
HXDLIN(  67)										if ((cy3 > by)) {
HXLINE(  67)											if ((cy3 > cy)) {
HXLINE(  67)												int min;
HXDLIN(  67)												if ((by > cy)) {
HXLINE(  67)													min = ::Math_obj::floor(cy);
            												}
            												else {
HXLINE(  67)													min = ::Math_obj::floor(by);
            												}
HXDLIN(  67)												int ii_min = min;
HXDLIN(  67)												int ii_max = ::Math_obj::ceil(cy3);
HXDLIN(  67)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  67)												yIter3 = this1;
            											}
            											else {
HXLINE(  67)												int ii_min = ::Math_obj::floor(by);
HXDLIN(  67)												int ii_max = ::Math_obj::ceil(cy);
HXDLIN(  67)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  67)												yIter3 = this1;
            											}
            										}
            										else {
HXLINE(  67)											if ((by > cy)) {
HXLINE(  67)												int min;
HXDLIN(  67)												if ((cy3 > cy)) {
HXLINE(  67)													min = ::Math_obj::floor(cy);
            												}
            												else {
HXLINE(  67)													min = ::Math_obj::ceil(cy3);
            												}
HXDLIN(  67)												int ii_min = min;
HXDLIN(  67)												int ii_max = ::Math_obj::ceil(by);
HXDLIN(  67)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  67)												yIter3 = this1;
            											}
            											else {
HXLINE(  67)												int ii_min = ::Math_obj::floor(cy3);
HXDLIN(  67)												int ii_max = ::Math_obj::ceil(cy);
HXDLIN(  67)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  67)												yIter3 = this1;
            											}
            										}
HXDLIN(  67)										::pixelimage::ImageStruct undoImage = null();
HXDLIN(  67)										if (hasUndo) {
HXLINE(  67)											int w = ((xIter3->max - xIter3->start) + 1);
HXDLIN(  67)											int h = ((yIter3->max - yIter3->start) + 1);
HXDLIN(  67)											int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN(  67)											::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  67)											::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN(  67)											::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN(  67)											undoImage = this3;
HXDLIN(  67)											{
HXLINE(  67)												int rectLeft = xIter3->start;
HXDLIN(  67)												int rectTop = yIter3->start;
HXDLIN(  67)												int rectRight = xIter3->max;
HXDLIN(  67)												bool forceClear = false;
HXDLIN(  67)												{
HXLINE(  67)													int _g = rectTop;
HXDLIN(  67)													int _g1 = yIter3->max;
HXDLIN(  67)													while((_g < _g1)){
HXLINE(  67)														_g = (_g + 1);
HXDLIN(  67)														int dy = (_g - 1);
HXDLIN(  67)														{
HXLINE(  67)															int _g1 = rectLeft;
HXDLIN(  67)															int _g2 = rectRight;
HXDLIN(  67)															while((_g1 < _g2)){
HXLINE(  67)																_g1 = (_g1 + 1);
HXDLIN(  67)																int dx = (_g1 - 1);
HXDLIN(  67)																::haxe::io::ArrayBufferViewImpl this1 = pixelshape1->image;
HXDLIN(  67)																int index;
HXDLIN(  67)																if (pixelshape1->useVirtualPos) {
HXLINE(  67)																	index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - pixelshape1->virtualY) * ( (Float)(pixelshape1->width) )) + dx) - pixelshape1->virtualX));
            																}
            																else {
HXLINE(  67)																	index = ::Std_obj::_hx_int(( (Float)(((dy * pixelshape1->width) + dx)) ));
            																}
HXDLIN(  67)																::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  67)																int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  67)																int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  67)																int col;
HXDLIN(  67)																if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																	col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            																}
            																else {
HXLINE(  67)																	col = c;
            																}
HXDLIN(  67)																bool _hx_tmp;
HXDLIN(  67)																if (pixelshape1->useMask) {
HXLINE(  67)																	_hx_tmp = ::hx::IsNotNull( pixelshape1->mask );
            																}
            																else {
HXLINE(  67)																	_hx_tmp = false;
            																}
HXDLIN(  67)																if (_hx_tmp) {
HXLINE(  67)																	::pixelimage::ImageStruct this1 = pixelshape1->mask;
HXDLIN(  67)																	::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  67)																	int index;
HXDLIN(  67)																	if (this1->useVirtualPos) {
HXLINE(  67)																		index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            																	}
            																	else {
HXLINE(  67)																		index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            																	}
HXDLIN(  67)																	::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  67)																	int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  67)																	int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  67)																	int v;
HXDLIN(  67)																	if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																		v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            																	}
            																	else {
HXLINE(  67)																		v = c;
            																	}
HXDLIN(  67)																	int this3 = v;
HXDLIN(  67)																	int maskPixel = this3;
HXDLIN(  67)																	int this4 = col;
HXDLIN(  67)																	int this5 = this4;
HXDLIN(  67)																	if ((maskPixel == 0)) {
HXLINE(  67)																		int this1 = this5;
HXDLIN(  67)																		col = this1;
            																	}
            																	else {
HXLINE(  67)																		Float m0;
HXDLIN(  67)																		int this1 = ((maskPixel >> 24) & 255);
HXDLIN(  67)																		if ((this1 == 0)) {
HXLINE(  67)																			m0 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float m1;
HXDLIN(  67)																		int this2 = ((maskPixel >> 16) & 255);
HXDLIN(  67)																		if ((this2 == 0)) {
HXLINE(  67)																			m1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float m2;
HXDLIN(  67)																		int this3 = ((maskPixel >> 8) & 255);
HXDLIN(  67)																		if ((this3 == 0)) {
HXLINE(  67)																			m2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float m3;
HXDLIN(  67)																		int this4 = (maskPixel & 255);
HXDLIN(  67)																		if ((this4 == 0)) {
HXLINE(  67)																			m3 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN(  67)																		int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN(  67)																		int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN(  67)																		int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN(  67)																		col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            																	}
            																}
HXDLIN(  67)																if ((col != 0)) {
HXLINE(  67)																	int x = (dx - rectLeft);
HXDLIN(  67)																	int y = (dy - rectTop);
HXDLIN(  67)																	int this1 = col;
HXDLIN(  67)																	int c = this1;
HXDLIN(  67)																	bool _hx_tmp;
HXDLIN(  67)																	if ((((c >> 24) & 255) < 254)) {
HXLINE(  67)																		_hx_tmp = undoImage->transparent;
            																	}
            																	else {
HXLINE(  67)																		_hx_tmp = false;
            																	}
HXDLIN(  67)																	if (_hx_tmp) {
HXLINE(  67)																		int location;
HXDLIN(  67)																		if (undoImage->useVirtualPos) {
HXLINE(  67)																			location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            																		}
            																		else {
HXLINE(  67)																			location = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            																		}
HXDLIN(  67)																		::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  67)																		::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  67)																		int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  67)																		int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  67)																		int this3 = this2;
HXDLIN(  67)																		int this4;
HXDLIN(  67)																		if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																			this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            																		}
            																		else {
HXLINE(  67)																			this4 = this3;
            																		}
HXDLIN(  67)																		Float a1;
HXDLIN(  67)																		int this5 = ((this4 >> 24) & 255);
HXDLIN(  67)																		if ((this5 == 0)) {
HXLINE(  67)																			a1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float r1;
HXDLIN(  67)																		int this6 = ((this4 >> 16) & 255);
HXDLIN(  67)																		if ((this6 == 0)) {
HXLINE(  67)																			r1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float g1;
HXDLIN(  67)																		int this7 = ((this4 >> 8) & 255);
HXDLIN(  67)																		if ((this7 == 0)) {
HXLINE(  67)																			g1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float b1;
HXDLIN(  67)																		int this8 = (this4 & 255);
HXDLIN(  67)																		if ((this8 == 0)) {
HXLINE(  67)																			b1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float a2;
HXDLIN(  67)																		int this9 = ((col >> 24) & 255);
HXDLIN(  67)																		if ((this9 == 0)) {
HXLINE(  67)																			a2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float r2;
HXDLIN(  67)																		int this10 = ((col >> 16) & 255);
HXDLIN(  67)																		if ((this10 == 0)) {
HXLINE(  67)																			r2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float g2;
HXDLIN(  67)																		int this11 = ((col >> 8) & 255);
HXDLIN(  67)																		if ((this11 == 0)) {
HXLINE(  67)																			g2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float b2;
HXDLIN(  67)																		int this12 = (col & 255);
HXDLIN(  67)																		if ((this12 == 0)) {
HXLINE(  67)																			b2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  67)																		int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  67)																		int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  67)																		int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  67)																		int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  67)																		int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  67)																		{
HXLINE(  67)																			::haxe::io::ArrayBufferViewImpl this13 = undoImage->image;
HXDLIN(  67)																			int value;
HXDLIN(  67)																			if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																				value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																			}
            																			else {
HXLINE(  67)																				value = blended;
            																			}
HXDLIN(  67)																			bool _hx_tmp;
HXDLIN(  67)																			if ((location >= 0)) {
HXLINE(  67)																				_hx_tmp = (location < (this13->byteLength >> 2));
            																			}
            																			else {
HXLINE(  67)																				_hx_tmp = false;
            																			}
HXDLIN(  67)																			if (_hx_tmp) {
HXLINE(  67)																				::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  67)																				int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  67)																				_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  67)																				_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  67)																				_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  67)																				_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																			}
            																		}
            																	}
            																	else {
HXLINE(  67)																		::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  67)																		int index;
HXDLIN(  67)																		if (undoImage->useVirtualPos) {
HXLINE(  67)																			index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            																		}
            																		else {
HXLINE(  67)																			index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            																		}
HXDLIN(  67)																		int value;
HXDLIN(  67)																		if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																			value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            																		}
            																		else {
HXLINE(  67)																			value = c;
            																		}
HXDLIN(  67)																		bool _hx_tmp;
HXDLIN(  67)																		if ((index >= 0)) {
HXLINE(  67)																			_hx_tmp = (index < (this1->byteLength >> 2));
            																		}
            																		else {
HXLINE(  67)																			_hx_tmp = false;
            																		}
HXDLIN(  67)																		if (_hx_tmp) {
HXLINE(  67)																			::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  67)																			int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  67)																			_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  67)																			_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  67)																			_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  67)																			_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																		}
            																	}
            																}
            																else {
HXLINE(  67)																	if (forceClear) {
HXLINE(  67)																		::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  67)																		int x = (dx - rectLeft);
HXDLIN(  67)																		int y = (dy - rectTop);
HXDLIN(  67)																		int index;
HXDLIN(  67)																		if (undoImage->useVirtualPos) {
HXLINE(  67)																			index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            																		}
            																		else {
HXLINE(  67)																			index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            																		}
HXDLIN(  67)																		bool _hx_tmp;
HXDLIN(  67)																		if ((index >= 0)) {
HXLINE(  67)																			_hx_tmp = (index < (this1->byteLength >> 2));
            																		}
            																		else {
HXLINE(  67)																			_hx_tmp = false;
            																		}
HXDLIN(  67)																		if (_hx_tmp) {
HXLINE(  67)																			::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  67)																			int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  67)																			_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  67)																			_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  67)																			_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  67)																			_this->b[(pos + 3)] = ( (unsigned char)(0) );
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
            										}
HXDLIN(  67)										bool found = false;
HXDLIN(  67)										Float s = ((Float)0.);
HXDLIN(  67)										Float t = ((Float)0.);
HXDLIN(  67)										Float sxx = ((Float)0.);
HXDLIN(  67)										Float txx = ((Float)0.);
HXDLIN(  67)										{
HXLINE(  67)											int _g_min = xIter3->start;
HXDLIN(  67)											int _g_max = xIter3->max;
HXDLIN(  67)											while((_g_min < _g_max)){
HXLINE(  67)												_g_min = (_g_min + 1);
HXDLIN(  67)												int x = (_g_min - 1);
HXLINE(  61)												sxx = (sx * ( (Float)(x) ));
HXLINE(  62)												txx = (tx * ( (Float)(x) ));
HXLINE(  63)												found = false;
HXLINE(  67)												{
HXLINE(  67)													int _g_min1 = yIter3->start;
HXDLIN(  67)													int _g_max = yIter3->max;
HXDLIN(  67)													while((_g_min1 < _g_max)){
HXLINE(  67)														_g_min1 = (_g_min1 + 1);
HXDLIN(  67)														int y = (_g_min1 - 1);
HXLINE(  65)														s = ((s0 + sxx) + (sy * ( (Float)(y) )));
HXLINE(  66)														t = ((t0 + txx) + (ty * ( (Float)(y) )));
HXLINE(  67)														bool _hx_tmp;
HXDLIN(  67)														if (!((s <= 0))) {
HXLINE(  67)															_hx_tmp = (t <= 0);
            														}
            														else {
HXLINE(  67)															_hx_tmp = true;
            														}
HXDLIN(  67)														if (_hx_tmp) {
HXLINE(  67)															if (found) {
HXLINE(  67)																goto _hx_goto_42;
            															}
            														}
            														else {
HXLINE(  67)															if (((s + t) < A)) {
HXLINE(  67)																{
HXLINE(  67)																	int this1 = color1;
HXDLIN(  67)																	int c = this1;
HXDLIN(  67)																	bool _hx_tmp;
HXDLIN(  67)																	if ((((c >> 24) & 255) < 254)) {
HXLINE(  67)																		_hx_tmp = pixelshape1->transparent;
            																	}
            																	else {
HXLINE(  67)																		_hx_tmp = false;
            																	}
HXDLIN(  67)																	if (_hx_tmp) {
HXLINE(  67)																		int location;
HXDLIN(  67)																		if (pixelshape1->useVirtualPos) {
HXLINE(  67)																			location = ::Std_obj::_hx_int(((((( (Float)(y) ) - pixelshape1->virtualY) * ( (Float)(pixelshape1->width) )) + x) - pixelshape1->virtualX));
            																		}
            																		else {
HXLINE(  67)																			location = ::Std_obj::_hx_int(( (Float)(((y * pixelshape1->width) + x)) ));
            																		}
HXDLIN(  67)																		::haxe::io::ArrayBufferViewImpl this1 = pixelshape1->image;
HXDLIN(  67)																		::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  67)																		int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  67)																		int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  67)																		int this3 = this2;
HXDLIN(  67)																		int this4;
HXDLIN(  67)																		if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																			this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            																		}
            																		else {
HXLINE(  67)																			this4 = this3;
            																		}
HXDLIN(  67)																		Float a1;
HXDLIN(  67)																		int this5 = ((this4 >> 24) & 255);
HXDLIN(  67)																		if ((this5 == 0)) {
HXLINE(  67)																			a1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float r1;
HXDLIN(  67)																		int this6 = ((this4 >> 16) & 255);
HXDLIN(  67)																		if ((this6 == 0)) {
HXLINE(  67)																			r1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float g1;
HXDLIN(  67)																		int this7 = ((this4 >> 8) & 255);
HXDLIN(  67)																		if ((this7 == 0)) {
HXLINE(  67)																			g1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float b1;
HXDLIN(  67)																		int this8 = (this4 & 255);
HXDLIN(  67)																		if ((this8 == 0)) {
HXLINE(  67)																			b1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float a2;
HXDLIN(  67)																		int this9 = ((color1 >> 24) & 255);
HXDLIN(  67)																		if ((this9 == 0)) {
HXLINE(  67)																			a2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float r2;
HXDLIN(  67)																		int this10 = ((color1 >> 16) & 255);
HXDLIN(  67)																		if ((this10 == 0)) {
HXLINE(  67)																			r2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float g2;
HXDLIN(  67)																		int this11 = ((color1 >> 8) & 255);
HXDLIN(  67)																		if ((this11 == 0)) {
HXLINE(  67)																			g2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float b2;
HXDLIN(  67)																		int this12 = (color1 & 255);
HXDLIN(  67)																		if ((this12 == 0)) {
HXLINE(  67)																			b2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  67)																		int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  67)																		int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  67)																		int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  67)																		int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  67)																		int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  67)																		{
HXLINE(  67)																			::haxe::io::ArrayBufferViewImpl this13 = pixelshape1->image;
HXDLIN(  67)																			int value;
HXDLIN(  67)																			if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																				value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																			}
            																			else {
HXLINE(  67)																				value = blended;
            																			}
HXDLIN(  67)																			bool _hx_tmp;
HXDLIN(  67)																			if ((location >= 0)) {
HXLINE(  67)																				_hx_tmp = (location < (this13->byteLength >> 2));
            																			}
            																			else {
HXLINE(  67)																				_hx_tmp = false;
            																			}
HXDLIN(  67)																			if (_hx_tmp) {
HXLINE(  67)																				::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  67)																				int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  67)																				_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  67)																				_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  67)																				_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  67)																				_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																			}
            																		}
            																	}
            																	else {
HXLINE(  67)																		::haxe::io::ArrayBufferViewImpl this1 = pixelshape1->image;
HXDLIN(  67)																		int index;
HXDLIN(  67)																		if (pixelshape1->useVirtualPos) {
HXLINE(  67)																			index = ::Std_obj::_hx_int(((((( (Float)(y) ) - pixelshape1->virtualY) * ( (Float)(pixelshape1->width) )) + x) - pixelshape1->virtualX));
            																		}
            																		else {
HXLINE(  67)																			index = ::Std_obj::_hx_int(( (Float)(((y * pixelshape1->width) + x)) ));
            																		}
HXDLIN(  67)																		int value;
HXDLIN(  67)																		if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																			value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            																		}
            																		else {
HXLINE(  67)																			value = c;
            																		}
HXDLIN(  67)																		bool _hx_tmp;
HXDLIN(  67)																		if ((index >= 0)) {
HXLINE(  67)																			_hx_tmp = (index < (this1->byteLength >> 2));
            																		}
            																		else {
HXLINE(  67)																			_hx_tmp = false;
            																		}
HXDLIN(  67)																		if (_hx_tmp) {
HXLINE(  67)																			::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  67)																			int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  67)																			_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  67)																			_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  67)																			_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  67)																			_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																		}
            																	}
            																}
HXLINE(  74)																found = true;
            															}
            															else {
HXLINE(  67)																if (found) {
HXLINE(  67)																	goto _hx_goto_42;
            																}
            															}
            														}
            													}
            													_hx_goto_42:;
            												}
            											}
            										}
HXDLIN(  67)										if ((hasHit == true)) {
HXLINE(  67)											::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,farX1,cy3,bx,by,cx,cy,true);
HXDLIN(  67)											if (hasUndo) {
HXLINE(  67)												v->undoImage = undoImage;
HXDLIN(  67)												v->undoX = xIter3->start;
HXDLIN(  67)												v->undoY = yIter3->start;
            											}
            										}
            									}
            								}
            							}
HXLINE(  46)							lastX5 = nextX;
HXLINE(  47)							lastY5 = nextY;
            						}
            					}
            				}
            			}
HXLINE(  67)			{
HXLINE(  67)				Float y2 = (y1 + dy1);
HXDLIN(  67)				int p4 = ::Std_obj::_hx_int(x2);
HXDLIN(  67)				int xx4 = p4;
HXDLIN(  67)				int q4 = ::Std_obj::_hx_int(y2);
HXDLIN(  67)				int maxX4 = ::Std_obj::_hx_int((x2 + wid1));
HXDLIN(  67)				int maxY4 = ::Std_obj::_hx_int((y2 + ( (Float)(tall1) )));
HXDLIN(  67)				while(true){
HXLINE(  67)					{
HXLINE(  67)						p4 = (p4 + 1);
HXDLIN(  67)						int x = (p4 - 1);
HXDLIN(  67)						int this1 = color1;
HXDLIN(  67)						int c = this1;
HXDLIN(  67)						bool _hx_tmp;
HXDLIN(  67)						if ((((c >> 24) & 255) < 254)) {
HXLINE(  67)							_hx_tmp = pixelshape1->transparent;
            						}
            						else {
HXLINE(  67)							_hx_tmp = false;
            						}
HXDLIN(  67)						if (_hx_tmp) {
HXLINE(  67)							int location;
HXDLIN(  67)							if (pixelshape1->useVirtualPos) {
HXLINE(  67)								location = ::Std_obj::_hx_int(((((( (Float)(q4) ) - pixelshape1->virtualY) * ( (Float)(pixelshape1->width) )) + x) - pixelshape1->virtualX));
            							}
            							else {
HXLINE(  67)								location = ::Std_obj::_hx_int(( (Float)(((q4 * pixelshape1->width) + x)) ));
            							}
HXDLIN(  67)							::haxe::io::ArrayBufferViewImpl this1 = pixelshape1->image;
HXDLIN(  67)							::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  67)							int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  67)							int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  67)							int this3 = this2;
HXDLIN(  67)							int this4;
HXDLIN(  67)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)								this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            							}
            							else {
HXLINE(  67)								this4 = this3;
            							}
HXDLIN(  67)							Float a1;
HXDLIN(  67)							int this5 = ((this4 >> 24) & 255);
HXDLIN(  67)							if ((this5 == 0)) {
HXLINE(  67)								a1 = ((Float)0.);
            							}
            							else {
HXLINE(  67)								a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            							}
HXDLIN(  67)							Float r1;
HXDLIN(  67)							int this6 = ((this4 >> 16) & 255);
HXDLIN(  67)							if ((this6 == 0)) {
HXLINE(  67)								r1 = ((Float)0.);
            							}
            							else {
HXLINE(  67)								r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            							}
HXDLIN(  67)							Float g1;
HXDLIN(  67)							int this7 = ((this4 >> 8) & 255);
HXDLIN(  67)							if ((this7 == 0)) {
HXLINE(  67)								g1 = ((Float)0.);
            							}
            							else {
HXLINE(  67)								g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            							}
HXDLIN(  67)							Float b1;
HXDLIN(  67)							int this8 = (this4 & 255);
HXDLIN(  67)							if ((this8 == 0)) {
HXLINE(  67)								b1 = ((Float)0.);
            							}
            							else {
HXLINE(  67)								b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            							}
HXDLIN(  67)							Float a2;
HXDLIN(  67)							int this9 = ((color1 >> 24) & 255);
HXDLIN(  67)							if ((this9 == 0)) {
HXLINE(  67)								a2 = ((Float)0.);
            							}
            							else {
HXLINE(  67)								a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            							}
HXDLIN(  67)							Float r2;
HXDLIN(  67)							int this10 = ((color1 >> 16) & 255);
HXDLIN(  67)							if ((this10 == 0)) {
HXLINE(  67)								r2 = ((Float)0.);
            							}
            							else {
HXLINE(  67)								r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            							}
HXDLIN(  67)							Float g2;
HXDLIN(  67)							int this11 = ((color1 >> 8) & 255);
HXDLIN(  67)							if ((this11 == 0)) {
HXLINE(  67)								g2 = ((Float)0.);
            							}
            							else {
HXLINE(  67)								g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            							}
HXDLIN(  67)							Float b2;
HXDLIN(  67)							int this12 = (color1 & 255);
HXDLIN(  67)							if ((this12 == 0)) {
HXLINE(  67)								b2 = ((Float)0.);
            							}
            							else {
HXLINE(  67)								b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            							}
HXDLIN(  67)							Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  67)							int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  67)							int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  67)							int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  67)							int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  67)							int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  67)							{
HXLINE(  67)								::haxe::io::ArrayBufferViewImpl this13 = pixelshape1->image;
HXDLIN(  67)								int value;
HXDLIN(  67)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)									value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            								}
            								else {
HXLINE(  67)									value = blended;
            								}
HXDLIN(  67)								bool _hx_tmp;
HXDLIN(  67)								if ((location >= 0)) {
HXLINE(  67)									_hx_tmp = (location < (this13->byteLength >> 2));
            								}
            								else {
HXLINE(  67)									_hx_tmp = false;
            								}
HXDLIN(  67)								if (_hx_tmp) {
HXLINE(  67)									::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  67)									int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  67)									_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  67)									_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  67)									_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  67)									_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            								}
            							}
            						}
            						else {
HXLINE(  67)							::haxe::io::ArrayBufferViewImpl this1 = pixelshape1->image;
HXDLIN(  67)							int index;
HXDLIN(  67)							if (pixelshape1->useVirtualPos) {
HXLINE(  67)								index = ::Std_obj::_hx_int(((((( (Float)(q4) ) - pixelshape1->virtualY) * ( (Float)(pixelshape1->width) )) + x) - pixelshape1->virtualX));
            							}
            							else {
HXLINE(  67)								index = ::Std_obj::_hx_int(( (Float)(((q4 * pixelshape1->width) + x)) ));
            							}
HXDLIN(  67)							int value;
HXDLIN(  67)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)								value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            							}
            							else {
HXLINE(  67)								value = c;
            							}
HXDLIN(  67)							bool _hx_tmp;
HXDLIN(  67)							if ((index >= 0)) {
HXLINE(  67)								_hx_tmp = (index < (this1->byteLength >> 2));
            							}
            							else {
HXLINE(  67)								_hx_tmp = false;
            							}
HXDLIN(  67)							if (_hx_tmp) {
HXLINE(  67)								::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  67)								int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  67)								_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  67)								_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  67)								_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  67)								_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            							}
            						}
            					}
HXDLIN(  67)					if ((p4 > maxX4)) {
HXLINE( 247)						p4 = xx4;
HXLINE(  67)						q4 = (q4 + 1);
            					}
HXDLIN(  67)					if ((q4 > maxY4)) {
HXLINE(  67)						goto _hx_goto_43;
            					}
            				}
            				_hx_goto_43:;
            			}
HXDLIN(  67)			{
HXLINE(  67)				Float cx3 = (x2 + dx1);
HXDLIN(  67)				Float rx3 = ( (Float)(dx1) );
HXDLIN(  67)				{
HXLINE(  67)					 ::Dynamic targetError6 = ((Float)1.05);
HXDLIN(  67)					if (::hx::IsNull( targetError6 )) {
HXLINE( 840)						targetError6 = ((Float)1.05);
            					}
HXLINE(  67)					Float rSmall6;
HXDLIN(  67)					if ((rx3 > bottomRadius1)) {
HXLINE(  67)						rSmall6 = bottomRadius1;
            					}
            					else {
HXLINE(  67)						rSmall6 = rx3;
            					}
HXDLIN(  67)					 ::Dynamic targetE6 = ( (Float)(targetError6) );
HXDLIN(  67)					if (::hx::IsNull( targetE6 )) {
HXLINE(  20)						targetE6 = ((Float)1.05);
            					}
HXLINE(  67)					int result6 = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE6) ) / rSmall6)))));
HXDLIN(  67)					int noSides6;
HXDLIN(  67)					if ((result6 < 12)) {
HXLINE(  67)						noSides6 = 12;
            					}
            					else {
HXLINE(  67)						if ((result6 > 500)) {
HXLINE(  67)							noSides6 = 500;
            						}
            						else {
HXLINE(  67)							noSides6 = result6;
            						}
            					}
HXDLIN(  67)					int sides6 = (::Math_obj::ceil((( (Float)(noSides6) ) / ( (Float)(4) ))) * 4);
HXDLIN(  67)					Float theta6 = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides6) ));
HXDLIN(  67)					Float omega6 = (::Math_obj::PI / ( (Float)(2) ));
HXDLIN(  67)					int quarter6 = ::Std_obj::_hx_int((( (Float)(sides6) ) / ( (Float)(4) )));
HXDLIN(  67)					Float lastX6 = ((Float)0.);
HXDLIN(  67)					Float lastY6 = ((Float)0.);
HXDLIN(  67)					{
HXLINE(  26)						lastX6 = (cx3 + (rx3 * ::Math_obj::cos(((( (Float)(sides6) ) * theta6) + omega6))));
HXLINE(  27)						lastY6 = (lowerY1 + (bottomRadius1 * ::Math_obj::sin(((( (Float)(sides6) ) * theta6) + omega6))));
            					}
HXLINE(  67)					{
HXLINE(  67)						int _g12 = 0;
HXDLIN(  67)						int _g13 = (quarter6 + 1);
HXDLIN(  67)						while((_g12 < _g13)){
HXLINE(  67)							_g12 = (_g12 + 1);
HXDLIN(  67)							int i = (_g12 - 1);
HXDLIN(  67)							Float nextX = (cx3 + (rx3 * ::Math_obj::cos((((( (Float)(i) ) * theta6) + ((Float)0.0001)) + omega6))));
HXDLIN(  67)							Float nextY = (lowerY1 + (bottomRadius1 * ::Math_obj::sin((((( (Float)(i) ) * theta6) + ((Float)0.0001)) + omega6))));
HXDLIN(  67)							{
HXLINE(  67)								bool hasHit = false;
HXDLIN(  67)								bool hasUndo = false;
HXDLIN(  67)								{
HXLINE(  67)									Float bx = lastX6;
HXDLIN(  67)									Float by = lastY6;
HXDLIN(  67)									Float cx = nextX;
HXDLIN(  67)									Float cy = nextY;
HXDLIN(  67)									bool adjustWinding = (((((cx3 * by) - (bx * lowerY1)) + ((bx * cy) - (cx * by))) + ((cx * lowerY1) - (cx3 * cy))) > 0);
HXDLIN(  67)									if (!(adjustWinding)) {
HXLINE(  67)										Float bx_ = bx;
HXDLIN(  67)										Float by_ = by;
HXLINE(  26)										bx = cx;
HXLINE(  27)										by = cy;
HXLINE(  28)										cx = bx_;
HXLINE(  29)										cy = by_;
            									}
HXLINE(  67)									{
HXLINE(  67)										Float s0 = ((lowerY1 * cx) - (cx3 * cy));
HXDLIN(  67)										Float sx = (cy - lowerY1);
HXDLIN(  67)										Float sy = (cx3 - cx);
HXDLIN(  67)										Float t0 = ((cx3 * by) - (lowerY1 * bx));
HXDLIN(  67)										Float tx = (lowerY1 - by);
HXDLIN(  67)										Float ty = (bx - cx3);
HXDLIN(  67)										Float A = ((((-(by) * cx) + (lowerY1 * (-(bx) + cx))) + (cx3 * (by - cy))) + (bx * cy));
HXDLIN(  67)										::pixelimage::iter::IntIterStart xIter3;
HXDLIN(  67)										if ((cx3 > bx)) {
HXLINE(  67)											if ((cx3 > cx)) {
HXLINE(  67)												int min;
HXDLIN(  67)												if ((bx > cx)) {
HXLINE(  67)													min = ::Math_obj::floor(cx);
            												}
            												else {
HXLINE(  67)													min = ::Math_obj::floor(bx);
            												}
HXDLIN(  67)												int ii_min = min;
HXDLIN(  67)												int ii_max = ::Math_obj::ceil(cx3);
HXDLIN(  67)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  67)												xIter3 = this1;
            											}
            											else {
HXLINE(  67)												int ii_min = ::Math_obj::floor(bx);
HXDLIN(  67)												int ii_max = ::Math_obj::ceil(cx);
HXDLIN(  67)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  67)												xIter3 = this1;
            											}
            										}
            										else {
HXLINE(  67)											if ((bx > cx)) {
HXLINE(  67)												int min;
HXDLIN(  67)												if ((cx3 > cx)) {
HXLINE(  67)													min = ::Math_obj::floor(cx);
            												}
            												else {
HXLINE(  67)													min = ::Math_obj::ceil(cx3);
            												}
HXDLIN(  67)												int ii_min = min;
HXDLIN(  67)												int ii_max = ::Math_obj::ceil(bx);
HXDLIN(  67)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  67)												xIter3 = this1;
            											}
            											else {
HXLINE(  67)												int ii_min = ::Math_obj::floor(cx3);
HXDLIN(  67)												int ii_max = ::Math_obj::ceil(cx);
HXDLIN(  67)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  67)												xIter3 = this1;
            											}
            										}
HXDLIN(  67)										::pixelimage::iter::IntIterStart yIter3;
HXDLIN(  67)										if ((lowerY1 > by)) {
HXLINE(  67)											if ((lowerY1 > cy)) {
HXLINE(  67)												int min;
HXDLIN(  67)												if ((by > cy)) {
HXLINE(  67)													min = ::Math_obj::floor(cy);
            												}
            												else {
HXLINE(  67)													min = ::Math_obj::floor(by);
            												}
HXDLIN(  67)												int ii_min = min;
HXDLIN(  67)												int ii_max = ::Math_obj::ceil(lowerY1);
HXDLIN(  67)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  67)												yIter3 = this1;
            											}
            											else {
HXLINE(  67)												int ii_min = ::Math_obj::floor(by);
HXDLIN(  67)												int ii_max = ::Math_obj::ceil(cy);
HXDLIN(  67)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  67)												yIter3 = this1;
            											}
            										}
            										else {
HXLINE(  67)											if ((by > cy)) {
HXLINE(  67)												int min;
HXDLIN(  67)												if ((lowerY1 > cy)) {
HXLINE(  67)													min = ::Math_obj::floor(cy);
            												}
            												else {
HXLINE(  67)													min = ::Math_obj::ceil(lowerY1);
            												}
HXDLIN(  67)												int ii_min = min;
HXDLIN(  67)												int ii_max = ::Math_obj::ceil(by);
HXDLIN(  67)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  67)												yIter3 = this1;
            											}
            											else {
HXLINE(  67)												int ii_min = ::Math_obj::floor(lowerY1);
HXDLIN(  67)												int ii_max = ::Math_obj::ceil(cy);
HXDLIN(  67)												::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  67)												yIter3 = this1;
            											}
            										}
HXDLIN(  67)										::pixelimage::ImageStruct undoImage = null();
HXDLIN(  67)										if (hasUndo) {
HXLINE(  67)											int w = ((xIter3->max - xIter3->start) + 1);
HXDLIN(  67)											int h = ((yIter3->max - yIter3->start) + 1);
HXDLIN(  67)											int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN(  67)											::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  67)											::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN(  67)											::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN(  67)											undoImage = this3;
HXDLIN(  67)											{
HXLINE(  67)												int rectLeft = xIter3->start;
HXDLIN(  67)												int rectTop = yIter3->start;
HXDLIN(  67)												int rectRight = xIter3->max;
HXDLIN(  67)												bool forceClear = false;
HXDLIN(  67)												{
HXLINE(  67)													int _g = rectTop;
HXDLIN(  67)													int _g1 = yIter3->max;
HXDLIN(  67)													while((_g < _g1)){
HXLINE(  67)														_g = (_g + 1);
HXDLIN(  67)														int dy = (_g - 1);
HXDLIN(  67)														{
HXLINE(  67)															int _g1 = rectLeft;
HXDLIN(  67)															int _g2 = rectRight;
HXDLIN(  67)															while((_g1 < _g2)){
HXLINE(  67)																_g1 = (_g1 + 1);
HXDLIN(  67)																int dx = (_g1 - 1);
HXDLIN(  67)																::haxe::io::ArrayBufferViewImpl this1 = pixelshape1->image;
HXDLIN(  67)																int index;
HXDLIN(  67)																if (pixelshape1->useVirtualPos) {
HXLINE(  67)																	index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - pixelshape1->virtualY) * ( (Float)(pixelshape1->width) )) + dx) - pixelshape1->virtualX));
            																}
            																else {
HXLINE(  67)																	index = ::Std_obj::_hx_int(( (Float)(((dy * pixelshape1->width) + dx)) ));
            																}
HXDLIN(  67)																::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  67)																int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  67)																int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  67)																int col;
HXDLIN(  67)																if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																	col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            																}
            																else {
HXLINE(  67)																	col = c;
            																}
HXDLIN(  67)																bool _hx_tmp;
HXDLIN(  67)																if (pixelshape1->useMask) {
HXLINE(  67)																	_hx_tmp = ::hx::IsNotNull( pixelshape1->mask );
            																}
            																else {
HXLINE(  67)																	_hx_tmp = false;
            																}
HXDLIN(  67)																if (_hx_tmp) {
HXLINE(  67)																	::pixelimage::ImageStruct this1 = pixelshape1->mask;
HXDLIN(  67)																	::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  67)																	int index;
HXDLIN(  67)																	if (this1->useVirtualPos) {
HXLINE(  67)																		index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            																	}
            																	else {
HXLINE(  67)																		index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            																	}
HXDLIN(  67)																	::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  67)																	int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  67)																	int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  67)																	int v;
HXDLIN(  67)																	if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																		v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            																	}
            																	else {
HXLINE(  67)																		v = c;
            																	}
HXDLIN(  67)																	int this3 = v;
HXDLIN(  67)																	int maskPixel = this3;
HXDLIN(  67)																	int this4 = col;
HXDLIN(  67)																	int this5 = this4;
HXDLIN(  67)																	if ((maskPixel == 0)) {
HXLINE(  67)																		int this1 = this5;
HXDLIN(  67)																		col = this1;
            																	}
            																	else {
HXLINE(  67)																		Float m0;
HXDLIN(  67)																		int this1 = ((maskPixel >> 24) & 255);
HXDLIN(  67)																		if ((this1 == 0)) {
HXLINE(  67)																			m0 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float m1;
HXDLIN(  67)																		int this2 = ((maskPixel >> 16) & 255);
HXDLIN(  67)																		if ((this2 == 0)) {
HXLINE(  67)																			m1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float m2;
HXDLIN(  67)																		int this3 = ((maskPixel >> 8) & 255);
HXDLIN(  67)																		if ((this3 == 0)) {
HXLINE(  67)																			m2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float m3;
HXDLIN(  67)																		int this4 = (maskPixel & 255);
HXDLIN(  67)																		if ((this4 == 0)) {
HXLINE(  67)																			m3 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN(  67)																		int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN(  67)																		int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN(  67)																		int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN(  67)																		col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            																	}
            																}
HXDLIN(  67)																if ((col != 0)) {
HXLINE(  67)																	int x = (dx - rectLeft);
HXDLIN(  67)																	int y = (dy - rectTop);
HXDLIN(  67)																	int this1 = col;
HXDLIN(  67)																	int c = this1;
HXDLIN(  67)																	bool _hx_tmp;
HXDLIN(  67)																	if ((((c >> 24) & 255) < 254)) {
HXLINE(  67)																		_hx_tmp = undoImage->transparent;
            																	}
            																	else {
HXLINE(  67)																		_hx_tmp = false;
            																	}
HXDLIN(  67)																	if (_hx_tmp) {
HXLINE(  67)																		int location;
HXDLIN(  67)																		if (undoImage->useVirtualPos) {
HXLINE(  67)																			location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            																		}
            																		else {
HXLINE(  67)																			location = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            																		}
HXDLIN(  67)																		::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  67)																		::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  67)																		int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  67)																		int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  67)																		int this3 = this2;
HXDLIN(  67)																		int this4;
HXDLIN(  67)																		if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																			this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            																		}
            																		else {
HXLINE(  67)																			this4 = this3;
            																		}
HXDLIN(  67)																		Float a1;
HXDLIN(  67)																		int this5 = ((this4 >> 24) & 255);
HXDLIN(  67)																		if ((this5 == 0)) {
HXLINE(  67)																			a1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float r1;
HXDLIN(  67)																		int this6 = ((this4 >> 16) & 255);
HXDLIN(  67)																		if ((this6 == 0)) {
HXLINE(  67)																			r1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float g1;
HXDLIN(  67)																		int this7 = ((this4 >> 8) & 255);
HXDLIN(  67)																		if ((this7 == 0)) {
HXLINE(  67)																			g1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float b1;
HXDLIN(  67)																		int this8 = (this4 & 255);
HXDLIN(  67)																		if ((this8 == 0)) {
HXLINE(  67)																			b1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float a2;
HXDLIN(  67)																		int this9 = ((col >> 24) & 255);
HXDLIN(  67)																		if ((this9 == 0)) {
HXLINE(  67)																			a2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float r2;
HXDLIN(  67)																		int this10 = ((col >> 16) & 255);
HXDLIN(  67)																		if ((this10 == 0)) {
HXLINE(  67)																			r2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float g2;
HXDLIN(  67)																		int this11 = ((col >> 8) & 255);
HXDLIN(  67)																		if ((this11 == 0)) {
HXLINE(  67)																			g2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float b2;
HXDLIN(  67)																		int this12 = (col & 255);
HXDLIN(  67)																		if ((this12 == 0)) {
HXLINE(  67)																			b2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  67)																		int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  67)																		int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  67)																		int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  67)																		int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  67)																		int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  67)																		{
HXLINE(  67)																			::haxe::io::ArrayBufferViewImpl this13 = undoImage->image;
HXDLIN(  67)																			int value;
HXDLIN(  67)																			if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																				value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																			}
            																			else {
HXLINE(  67)																				value = blended;
            																			}
HXDLIN(  67)																			bool _hx_tmp;
HXDLIN(  67)																			if ((location >= 0)) {
HXLINE(  67)																				_hx_tmp = (location < (this13->byteLength >> 2));
            																			}
            																			else {
HXLINE(  67)																				_hx_tmp = false;
            																			}
HXDLIN(  67)																			if (_hx_tmp) {
HXLINE(  67)																				::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  67)																				int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  67)																				_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  67)																				_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  67)																				_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  67)																				_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																			}
            																		}
            																	}
            																	else {
HXLINE(  67)																		::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  67)																		int index;
HXDLIN(  67)																		if (undoImage->useVirtualPos) {
HXLINE(  67)																			index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            																		}
            																		else {
HXLINE(  67)																			index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            																		}
HXDLIN(  67)																		int value;
HXDLIN(  67)																		if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																			value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            																		}
            																		else {
HXLINE(  67)																			value = c;
            																		}
HXDLIN(  67)																		bool _hx_tmp;
HXDLIN(  67)																		if ((index >= 0)) {
HXLINE(  67)																			_hx_tmp = (index < (this1->byteLength >> 2));
            																		}
            																		else {
HXLINE(  67)																			_hx_tmp = false;
            																		}
HXDLIN(  67)																		if (_hx_tmp) {
HXLINE(  67)																			::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  67)																			int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  67)																			_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  67)																			_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  67)																			_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  67)																			_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																		}
            																	}
            																}
            																else {
HXLINE(  67)																	if (forceClear) {
HXLINE(  67)																		::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  67)																		int x = (dx - rectLeft);
HXDLIN(  67)																		int y = (dy - rectTop);
HXDLIN(  67)																		int index;
HXDLIN(  67)																		if (undoImage->useVirtualPos) {
HXLINE(  67)																			index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            																		}
            																		else {
HXLINE(  67)																			index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            																		}
HXDLIN(  67)																		bool _hx_tmp;
HXDLIN(  67)																		if ((index >= 0)) {
HXLINE(  67)																			_hx_tmp = (index < (this1->byteLength >> 2));
            																		}
            																		else {
HXLINE(  67)																			_hx_tmp = false;
            																		}
HXDLIN(  67)																		if (_hx_tmp) {
HXLINE(  67)																			::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  67)																			int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  67)																			_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  67)																			_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  67)																			_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  67)																			_this->b[(pos + 3)] = ( (unsigned char)(0) );
            																		}
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
            										}
HXDLIN(  67)										bool found = false;
HXDLIN(  67)										Float s = ((Float)0.);
HXDLIN(  67)										Float t = ((Float)0.);
HXDLIN(  67)										Float sxx = ((Float)0.);
HXDLIN(  67)										Float txx = ((Float)0.);
HXDLIN(  67)										{
HXLINE(  67)											int _g_min = xIter3->start;
HXDLIN(  67)											int _g_max = xIter3->max;
HXDLIN(  67)											while((_g_min < _g_max)){
HXLINE(  67)												_g_min = (_g_min + 1);
HXDLIN(  67)												int x = (_g_min - 1);
HXLINE(  61)												sxx = (sx * ( (Float)(x) ));
HXLINE(  62)												txx = (tx * ( (Float)(x) ));
HXLINE(  63)												found = false;
HXLINE(  67)												{
HXLINE(  67)													int _g_min1 = yIter3->start;
HXDLIN(  67)													int _g_max = yIter3->max;
HXDLIN(  67)													while((_g_min1 < _g_max)){
HXLINE(  67)														_g_min1 = (_g_min1 + 1);
HXDLIN(  67)														int y = (_g_min1 - 1);
HXLINE(  65)														s = ((s0 + sxx) + (sy * ( (Float)(y) )));
HXLINE(  66)														t = ((t0 + txx) + (ty * ( (Float)(y) )));
HXLINE(  67)														bool _hx_tmp;
HXDLIN(  67)														if (!((s <= 0))) {
HXLINE(  67)															_hx_tmp = (t <= 0);
            														}
            														else {
HXLINE(  67)															_hx_tmp = true;
            														}
HXDLIN(  67)														if (_hx_tmp) {
HXLINE(  67)															if (found) {
HXLINE(  67)																goto _hx_goto_48;
            															}
            														}
            														else {
HXLINE(  67)															if (((s + t) < A)) {
HXLINE(  67)																{
HXLINE(  67)																	int this1 = color1;
HXDLIN(  67)																	int c = this1;
HXDLIN(  67)																	bool _hx_tmp;
HXDLIN(  67)																	if ((((c >> 24) & 255) < 254)) {
HXLINE(  67)																		_hx_tmp = pixelshape1->transparent;
            																	}
            																	else {
HXLINE(  67)																		_hx_tmp = false;
            																	}
HXDLIN(  67)																	if (_hx_tmp) {
HXLINE(  67)																		int location;
HXDLIN(  67)																		if (pixelshape1->useVirtualPos) {
HXLINE(  67)																			location = ::Std_obj::_hx_int(((((( (Float)(y) ) - pixelshape1->virtualY) * ( (Float)(pixelshape1->width) )) + x) - pixelshape1->virtualX));
            																		}
            																		else {
HXLINE(  67)																			location = ::Std_obj::_hx_int(( (Float)(((y * pixelshape1->width) + x)) ));
            																		}
HXDLIN(  67)																		::haxe::io::ArrayBufferViewImpl this1 = pixelshape1->image;
HXDLIN(  67)																		::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  67)																		int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  67)																		int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  67)																		int this3 = this2;
HXDLIN(  67)																		int this4;
HXDLIN(  67)																		if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																			this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            																		}
            																		else {
HXLINE(  67)																			this4 = this3;
            																		}
HXDLIN(  67)																		Float a1;
HXDLIN(  67)																		int this5 = ((this4 >> 24) & 255);
HXDLIN(  67)																		if ((this5 == 0)) {
HXLINE(  67)																			a1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float r1;
HXDLIN(  67)																		int this6 = ((this4 >> 16) & 255);
HXDLIN(  67)																		if ((this6 == 0)) {
HXLINE(  67)																			r1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float g1;
HXDLIN(  67)																		int this7 = ((this4 >> 8) & 255);
HXDLIN(  67)																		if ((this7 == 0)) {
HXLINE(  67)																			g1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float b1;
HXDLIN(  67)																		int this8 = (this4 & 255);
HXDLIN(  67)																		if ((this8 == 0)) {
HXLINE(  67)																			b1 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float a2;
HXDLIN(  67)																		int this9 = ((color1 >> 24) & 255);
HXDLIN(  67)																		if ((this9 == 0)) {
HXLINE(  67)																			a2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float r2;
HXDLIN(  67)																		int this10 = ((color1 >> 16) & 255);
HXDLIN(  67)																		if ((this10 == 0)) {
HXLINE(  67)																			r2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float g2;
HXDLIN(  67)																		int this11 = ((color1 >> 8) & 255);
HXDLIN(  67)																		if ((this11 == 0)) {
HXLINE(  67)																			g2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float b2;
HXDLIN(  67)																		int this12 = (color1 & 255);
HXDLIN(  67)																		if ((this12 == 0)) {
HXLINE(  67)																			b2 = ((Float)0.);
            																		}
            																		else {
HXLINE(  67)																			b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            																		}
HXDLIN(  67)																		Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  67)																		int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  67)																		int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  67)																		int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  67)																		int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  67)																		int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  67)																		{
HXLINE(  67)																			::haxe::io::ArrayBufferViewImpl this13 = pixelshape1->image;
HXDLIN(  67)																			int value;
HXDLIN(  67)																			if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																				value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																			}
            																			else {
HXLINE(  67)																				value = blended;
            																			}
HXDLIN(  67)																			bool _hx_tmp;
HXDLIN(  67)																			if ((location >= 0)) {
HXLINE(  67)																				_hx_tmp = (location < (this13->byteLength >> 2));
            																			}
            																			else {
HXLINE(  67)																				_hx_tmp = false;
            																			}
HXDLIN(  67)																			if (_hx_tmp) {
HXLINE(  67)																				::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  67)																				int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  67)																				_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  67)																				_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  67)																				_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  67)																				_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																			}
            																		}
            																	}
            																	else {
HXLINE(  67)																		::haxe::io::ArrayBufferViewImpl this1 = pixelshape1->image;
HXDLIN(  67)																		int index;
HXDLIN(  67)																		if (pixelshape1->useVirtualPos) {
HXLINE(  67)																			index = ::Std_obj::_hx_int(((((( (Float)(y) ) - pixelshape1->virtualY) * ( (Float)(pixelshape1->width) )) + x) - pixelshape1->virtualX));
            																		}
            																		else {
HXLINE(  67)																			index = ::Std_obj::_hx_int(( (Float)(((y * pixelshape1->width) + x)) ));
            																		}
HXDLIN(  67)																		int value;
HXDLIN(  67)																		if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																			value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            																		}
            																		else {
HXLINE(  67)																			value = c;
            																		}
HXDLIN(  67)																		bool _hx_tmp;
HXDLIN(  67)																		if ((index >= 0)) {
HXLINE(  67)																			_hx_tmp = (index < (this1->byteLength >> 2));
            																		}
            																		else {
HXLINE(  67)																			_hx_tmp = false;
            																		}
HXDLIN(  67)																		if (_hx_tmp) {
HXLINE(  67)																			::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  67)																			int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  67)																			_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  67)																			_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  67)																			_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  67)																			_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																		}
            																	}
            																}
HXLINE(  74)																found = true;
            															}
            															else {
HXLINE(  67)																if (found) {
HXLINE(  67)																	goto _hx_goto_48;
            																}
            															}
            														}
            													}
            													_hx_goto_48:;
            												}
            											}
            										}
HXDLIN(  67)										if ((hasHit == true)) {
HXLINE(  67)											::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,cx3,lowerY1,bx,by,cx,cy,true);
HXDLIN(  67)											if (hasUndo) {
HXLINE(  67)												v->undoImage = undoImage;
HXDLIN(  67)												v->undoX = xIter3->start;
HXDLIN(  67)												v->undoY = yIter3->start;
            											}
            										}
            									}
            								}
            							}
HXLINE(  46)							lastX6 = nextX;
HXLINE(  47)							lastY6 = nextY;
            						}
            					}
            				}
            			}
HXLINE(  67)			{
HXLINE(  67)				Float x4 = (x2 + dx1);
HXDLIN(  67)				int p5 = ::Std_obj::_hx_int(x4);
HXDLIN(  67)				int xx5 = p5;
HXDLIN(  67)				int q5 = ::Std_obj::_hx_int(lowerY1);
HXDLIN(  67)				int maxX5 = ::Std_obj::_hx_int((x4 + ( (Float)(fat1) )));
HXDLIN(  67)				int maxY5 = ::Std_obj::_hx_int((lowerY1 + bottomRadius1));
HXDLIN(  67)				while(true){
HXLINE(  67)					{
HXLINE(  67)						p5 = (p5 + 1);
HXDLIN(  67)						int x = (p5 - 1);
HXDLIN(  67)						int this1 = color1;
HXDLIN(  67)						int c = this1;
HXDLIN(  67)						bool _hx_tmp;
HXDLIN(  67)						if ((((c >> 24) & 255) < 254)) {
HXLINE(  67)							_hx_tmp = pixelshape1->transparent;
            						}
            						else {
HXLINE(  67)							_hx_tmp = false;
            						}
HXDLIN(  67)						if (_hx_tmp) {
HXLINE(  67)							int location;
HXDLIN(  67)							if (pixelshape1->useVirtualPos) {
HXLINE(  67)								location = ::Std_obj::_hx_int(((((( (Float)(q5) ) - pixelshape1->virtualY) * ( (Float)(pixelshape1->width) )) + x) - pixelshape1->virtualX));
            							}
            							else {
HXLINE(  67)								location = ::Std_obj::_hx_int(( (Float)(((q5 * pixelshape1->width) + x)) ));
            							}
HXDLIN(  67)							::haxe::io::ArrayBufferViewImpl this1 = pixelshape1->image;
HXDLIN(  67)							::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  67)							int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  67)							int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  67)							int this3 = this2;
HXDLIN(  67)							int this4;
HXDLIN(  67)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)								this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            							}
            							else {
HXLINE(  67)								this4 = this3;
            							}
HXDLIN(  67)							Float a1;
HXDLIN(  67)							int this5 = ((this4 >> 24) & 255);
HXDLIN(  67)							if ((this5 == 0)) {
HXLINE(  67)								a1 = ((Float)0.);
            							}
            							else {
HXLINE(  67)								a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            							}
HXDLIN(  67)							Float r1;
HXDLIN(  67)							int this6 = ((this4 >> 16) & 255);
HXDLIN(  67)							if ((this6 == 0)) {
HXLINE(  67)								r1 = ((Float)0.);
            							}
            							else {
HXLINE(  67)								r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            							}
HXDLIN(  67)							Float g1;
HXDLIN(  67)							int this7 = ((this4 >> 8) & 255);
HXDLIN(  67)							if ((this7 == 0)) {
HXLINE(  67)								g1 = ((Float)0.);
            							}
            							else {
HXLINE(  67)								g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            							}
HXDLIN(  67)							Float b1;
HXDLIN(  67)							int this8 = (this4 & 255);
HXDLIN(  67)							if ((this8 == 0)) {
HXLINE(  67)								b1 = ((Float)0.);
            							}
            							else {
HXLINE(  67)								b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            							}
HXDLIN(  67)							Float a2;
HXDLIN(  67)							int this9 = ((color1 >> 24) & 255);
HXDLIN(  67)							if ((this9 == 0)) {
HXLINE(  67)								a2 = ((Float)0.);
            							}
            							else {
HXLINE(  67)								a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            							}
HXDLIN(  67)							Float r2;
HXDLIN(  67)							int this10 = ((color1 >> 16) & 255);
HXDLIN(  67)							if ((this10 == 0)) {
HXLINE(  67)								r2 = ((Float)0.);
            							}
            							else {
HXLINE(  67)								r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            							}
HXDLIN(  67)							Float g2;
HXDLIN(  67)							int this11 = ((color1 >> 8) & 255);
HXDLIN(  67)							if ((this11 == 0)) {
HXLINE(  67)								g2 = ((Float)0.);
            							}
            							else {
HXLINE(  67)								g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            							}
HXDLIN(  67)							Float b2;
HXDLIN(  67)							int this12 = (color1 & 255);
HXDLIN(  67)							if ((this12 == 0)) {
HXLINE(  67)								b2 = ((Float)0.);
            							}
            							else {
HXLINE(  67)								b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            							}
HXDLIN(  67)							Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  67)							int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  67)							int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  67)							int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  67)							int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  67)							int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  67)							{
HXLINE(  67)								::haxe::io::ArrayBufferViewImpl this13 = pixelshape1->image;
HXDLIN(  67)								int value;
HXDLIN(  67)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)									value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            								}
            								else {
HXLINE(  67)									value = blended;
            								}
HXDLIN(  67)								bool _hx_tmp;
HXDLIN(  67)								if ((location >= 0)) {
HXLINE(  67)									_hx_tmp = (location < (this13->byteLength >> 2));
            								}
            								else {
HXLINE(  67)									_hx_tmp = false;
            								}
HXDLIN(  67)								if (_hx_tmp) {
HXLINE(  67)									::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  67)									int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  67)									_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  67)									_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  67)									_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  67)									_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            								}
            							}
            						}
            						else {
HXLINE(  67)							::haxe::io::ArrayBufferViewImpl this1 = pixelshape1->image;
HXDLIN(  67)							int index;
HXDLIN(  67)							if (pixelshape1->useVirtualPos) {
HXLINE(  67)								index = ::Std_obj::_hx_int(((((( (Float)(q5) ) - pixelshape1->virtualY) * ( (Float)(pixelshape1->width) )) + x) - pixelshape1->virtualX));
            							}
            							else {
HXLINE(  67)								index = ::Std_obj::_hx_int(( (Float)(((q5 * pixelshape1->width) + x)) ));
            							}
HXDLIN(  67)							int value;
HXDLIN(  67)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)								value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            							}
            							else {
HXLINE(  67)								value = c;
            							}
HXDLIN(  67)							bool _hx_tmp;
HXDLIN(  67)							if ((index >= 0)) {
HXLINE(  67)								_hx_tmp = (index < (this1->byteLength >> 2));
            							}
            							else {
HXLINE(  67)								_hx_tmp = false;
            							}
HXDLIN(  67)							if (_hx_tmp) {
HXLINE(  67)								::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  67)								int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  67)								_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  67)								_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  67)								_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  67)								_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            							}
            						}
            					}
HXDLIN(  67)					if ((p5 > maxX5)) {
HXLINE( 247)						p5 = xx5;
HXLINE(  67)						q5 = (q5 + 1);
            					}
HXDLIN(  67)					if ((q5 > maxY5)) {
HXLINE(  67)						goto _hx_goto_49;
            					}
            				}
            				_hx_goto_49:;
            			}
HXDLIN(  67)			{
HXLINE(  67)				 ::Dynamic targetError7 = ((Float)1.05);
HXDLIN(  67)				if (::hx::IsNull( targetError7 )) {
HXLINE( 840)					targetError7 = ((Float)1.05);
            				}
HXLINE(  67)				Float rSmall7;
HXDLIN(  67)				if ((rightRadius1 > bottomRadius1)) {
HXLINE(  67)					rSmall7 = bottomRadius1;
            				}
            				else {
HXLINE(  67)					rSmall7 = rightRadius1;
            				}
HXDLIN(  67)				 ::Dynamic targetE7 = ( (Float)(targetError7) );
HXDLIN(  67)				if (::hx::IsNull( targetE7 )) {
HXLINE(  20)					targetE7 = ((Float)1.05);
            				}
HXLINE(  67)				int result7 = ::Math_obj::ceil((::Math_obj::PI / ::Math_obj::acos((( (Float)(1) ) - (( (Float)(targetE7) ) / rSmall7)))));
HXDLIN(  67)				int noSides7;
HXDLIN(  67)				if ((result7 < 12)) {
HXLINE(  67)					noSides7 = 12;
            				}
            				else {
HXLINE(  67)					if ((result7 > 500)) {
HXLINE(  67)						noSides7 = 500;
            					}
            					else {
HXLINE(  67)						noSides7 = result7;
            					}
            				}
HXDLIN(  67)				int sides7 = (::Math_obj::ceil((( (Float)(noSides7) ) / ( (Float)(4) ))) * 4);
HXDLIN(  67)				Float theta7 = ((( (Float)(2) ) * ::Math_obj::PI) / ( (Float)(sides7) ));
HXDLIN(  67)				Float omega7 = ( (Float)(0) );
HXDLIN(  67)				int quarter7 = ::Std_obj::_hx_int((( (Float)(sides7) ) / ( (Float)(4) )));
HXDLIN(  67)				Float lastX7 = ((Float)0.);
HXDLIN(  67)				Float lastY7 = ((Float)0.);
HXDLIN(  67)				{
HXLINE(  26)					lastX7 = (farX1 + (rightRadius1 * ::Math_obj::cos(((( (Float)(sides7) ) * theta7) + omega7))));
HXLINE(  27)					lastY7 = (lowerY1 + (bottomRadius1 * ::Math_obj::sin(((( (Float)(sides7) ) * theta7) + omega7))));
            				}
HXLINE(  67)				{
HXLINE(  67)					int _g14 = 0;
HXDLIN(  67)					int _g15 = (quarter7 + 1);
HXDLIN(  67)					while((_g14 < _g15)){
HXLINE(  67)						_g14 = (_g14 + 1);
HXDLIN(  67)						int i = (_g14 - 1);
HXDLIN(  67)						Float nextX = (farX1 + (rightRadius1 * ::Math_obj::cos((((( (Float)(i) ) * theta7) + ((Float)0.0001)) + omega7))));
HXDLIN(  67)						Float nextY = (lowerY1 + (bottomRadius1 * ::Math_obj::sin((((( (Float)(i) ) * theta7) + ((Float)0.0001)) + omega7))));
HXDLIN(  67)						{
HXLINE(  67)							bool hasHit = false;
HXDLIN(  67)							bool hasUndo = false;
HXDLIN(  67)							{
HXLINE(  67)								Float bx = lastX7;
HXDLIN(  67)								Float by = lastY7;
HXDLIN(  67)								Float cx = nextX;
HXDLIN(  67)								Float cy = nextY;
HXDLIN(  67)								bool adjustWinding = (((((farX1 * by) - (bx * lowerY1)) + ((bx * cy) - (cx * by))) + ((cx * lowerY1) - (farX1 * cy))) > 0);
HXDLIN(  67)								if (!(adjustWinding)) {
HXLINE(  67)									Float bx_ = bx;
HXDLIN(  67)									Float by_ = by;
HXLINE(  26)									bx = cx;
HXLINE(  27)									by = cy;
HXLINE(  28)									cx = bx_;
HXLINE(  29)									cy = by_;
            								}
HXLINE(  67)								{
HXLINE(  67)									Float s0 = ((lowerY1 * cx) - (farX1 * cy));
HXDLIN(  67)									Float sx = (cy - lowerY1);
HXDLIN(  67)									Float sy = (farX1 - cx);
HXDLIN(  67)									Float t0 = ((farX1 * by) - (lowerY1 * bx));
HXDLIN(  67)									Float tx = (lowerY1 - by);
HXDLIN(  67)									Float ty = (bx - farX1);
HXDLIN(  67)									Float A = ((((-(by) * cx) + (lowerY1 * (-(bx) + cx))) + (farX1 * (by - cy))) + (bx * cy));
HXDLIN(  67)									::pixelimage::iter::IntIterStart xIter3;
HXDLIN(  67)									if ((farX1 > bx)) {
HXLINE(  67)										if ((farX1 > cx)) {
HXLINE(  67)											int min;
HXDLIN(  67)											if ((bx > cx)) {
HXLINE(  67)												min = ::Math_obj::floor(cx);
            											}
            											else {
HXLINE(  67)												min = ::Math_obj::floor(bx);
            											}
HXDLIN(  67)											int ii_min = min;
HXDLIN(  67)											int ii_max = ::Math_obj::ceil(farX1);
HXDLIN(  67)											::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  67)											xIter3 = this1;
            										}
            										else {
HXLINE(  67)											int ii_min = ::Math_obj::floor(bx);
HXDLIN(  67)											int ii_max = ::Math_obj::ceil(cx);
HXDLIN(  67)											::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  67)											xIter3 = this1;
            										}
            									}
            									else {
HXLINE(  67)										if ((bx > cx)) {
HXLINE(  67)											int min;
HXDLIN(  67)											if ((farX1 > cx)) {
HXLINE(  67)												min = ::Math_obj::floor(cx);
            											}
            											else {
HXLINE(  67)												min = ::Math_obj::ceil(farX1);
            											}
HXDLIN(  67)											int ii_min = min;
HXDLIN(  67)											int ii_max = ::Math_obj::ceil(bx);
HXDLIN(  67)											::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  67)											xIter3 = this1;
            										}
            										else {
HXLINE(  67)											int ii_min = ::Math_obj::floor(farX1);
HXDLIN(  67)											int ii_max = ::Math_obj::ceil(cx);
HXDLIN(  67)											::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  67)											xIter3 = this1;
            										}
            									}
HXDLIN(  67)									::pixelimage::iter::IntIterStart yIter3;
HXDLIN(  67)									if ((lowerY1 > by)) {
HXLINE(  67)										if ((lowerY1 > cy)) {
HXLINE(  67)											int min;
HXDLIN(  67)											if ((by > cy)) {
HXLINE(  67)												min = ::Math_obj::floor(cy);
            											}
            											else {
HXLINE(  67)												min = ::Math_obj::floor(by);
            											}
HXDLIN(  67)											int ii_min = min;
HXDLIN(  67)											int ii_max = ::Math_obj::ceil(lowerY1);
HXDLIN(  67)											::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  67)											yIter3 = this1;
            										}
            										else {
HXLINE(  67)											int ii_min = ::Math_obj::floor(by);
HXDLIN(  67)											int ii_max = ::Math_obj::ceil(cy);
HXDLIN(  67)											::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  67)											yIter3 = this1;
            										}
            									}
            									else {
HXLINE(  67)										if ((by > cy)) {
HXLINE(  67)											int min;
HXDLIN(  67)											if ((lowerY1 > cy)) {
HXLINE(  67)												min = ::Math_obj::floor(cy);
            											}
            											else {
HXLINE(  67)												min = ::Math_obj::ceil(lowerY1);
            											}
HXDLIN(  67)											int ii_min = min;
HXDLIN(  67)											int ii_max = ::Math_obj::ceil(by);
HXDLIN(  67)											::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  67)											yIter3 = this1;
            										}
            										else {
HXLINE(  67)											int ii_min = ::Math_obj::floor(lowerY1);
HXDLIN(  67)											int ii_max = ::Math_obj::ceil(cy);
HXDLIN(  67)											::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  67)											yIter3 = this1;
            										}
            									}
HXDLIN(  67)									::pixelimage::ImageStruct undoImage = null();
HXDLIN(  67)									if (hasUndo) {
HXLINE(  67)										int w = ((xIter3->max - xIter3->start) + 1);
HXDLIN(  67)										int h = ((yIter3->max - yIter3->start) + 1);
HXDLIN(  67)										int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN(  67)										::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  67)										::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN(  67)										::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN(  67)										undoImage = this3;
HXDLIN(  67)										{
HXLINE(  67)											int rectLeft = xIter3->start;
HXDLIN(  67)											int rectTop = yIter3->start;
HXDLIN(  67)											int rectRight = xIter3->max;
HXDLIN(  67)											bool forceClear = false;
HXDLIN(  67)											{
HXLINE(  67)												int _g = rectTop;
HXDLIN(  67)												int _g1 = yIter3->max;
HXDLIN(  67)												while((_g < _g1)){
HXLINE(  67)													_g = (_g + 1);
HXDLIN(  67)													int dy = (_g - 1);
HXDLIN(  67)													{
HXLINE(  67)														int _g1 = rectLeft;
HXDLIN(  67)														int _g2 = rectRight;
HXDLIN(  67)														while((_g1 < _g2)){
HXLINE(  67)															_g1 = (_g1 + 1);
HXDLIN(  67)															int dx = (_g1 - 1);
HXDLIN(  67)															::haxe::io::ArrayBufferViewImpl this1 = pixelshape1->image;
HXDLIN(  67)															int index;
HXDLIN(  67)															if (pixelshape1->useVirtualPos) {
HXLINE(  67)																index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - pixelshape1->virtualY) * ( (Float)(pixelshape1->width) )) + dx) - pixelshape1->virtualX));
            															}
            															else {
HXLINE(  67)																index = ::Std_obj::_hx_int(( (Float)(((dy * pixelshape1->width) + dx)) ));
            															}
HXDLIN(  67)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  67)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  67)															int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  67)															int col;
HXDLIN(  67)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            															}
            															else {
HXLINE(  67)																col = c;
            															}
HXDLIN(  67)															bool _hx_tmp;
HXDLIN(  67)															if (pixelshape1->useMask) {
HXLINE(  67)																_hx_tmp = ::hx::IsNotNull( pixelshape1->mask );
            															}
            															else {
HXLINE(  67)																_hx_tmp = false;
            															}
HXDLIN(  67)															if (_hx_tmp) {
HXLINE(  67)																::pixelimage::ImageStruct this1 = pixelshape1->mask;
HXDLIN(  67)																::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  67)																int index;
HXDLIN(  67)																if (this1->useVirtualPos) {
HXLINE(  67)																	index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            																}
            																else {
HXLINE(  67)																	index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            																}
HXDLIN(  67)																::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  67)																int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  67)																int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  67)																int v;
HXDLIN(  67)																if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																	v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            																}
            																else {
HXLINE(  67)																	v = c;
            																}
HXDLIN(  67)																int this3 = v;
HXDLIN(  67)																int maskPixel = this3;
HXDLIN(  67)																int this4 = col;
HXDLIN(  67)																int this5 = this4;
HXDLIN(  67)																if ((maskPixel == 0)) {
HXLINE(  67)																	int this1 = this5;
HXDLIN(  67)																	col = this1;
            																}
            																else {
HXLINE(  67)																	Float m0;
HXDLIN(  67)																	int this1 = ((maskPixel >> 24) & 255);
HXDLIN(  67)																	if ((this1 == 0)) {
HXLINE(  67)																		m0 = ((Float)0.);
            																	}
            																	else {
HXLINE(  67)																		m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            																	}
HXDLIN(  67)																	Float m1;
HXDLIN(  67)																	int this2 = ((maskPixel >> 16) & 255);
HXDLIN(  67)																	if ((this2 == 0)) {
HXLINE(  67)																		m1 = ((Float)0.);
            																	}
            																	else {
HXLINE(  67)																		m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            																	}
HXDLIN(  67)																	Float m2;
HXDLIN(  67)																	int this3 = ((maskPixel >> 8) & 255);
HXDLIN(  67)																	if ((this3 == 0)) {
HXLINE(  67)																		m2 = ((Float)0.);
            																	}
            																	else {
HXLINE(  67)																		m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            																	}
HXDLIN(  67)																	Float m3;
HXDLIN(  67)																	int this4 = (maskPixel & 255);
HXDLIN(  67)																	if ((this4 == 0)) {
HXLINE(  67)																		m3 = ((Float)0.);
            																	}
            																	else {
HXLINE(  67)																		m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            																	}
HXDLIN(  67)																	int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN(  67)																	int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN(  67)																	int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN(  67)																	int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN(  67)																	col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            																}
            															}
HXDLIN(  67)															if ((col != 0)) {
HXLINE(  67)																int x = (dx - rectLeft);
HXDLIN(  67)																int y = (dy - rectTop);
HXDLIN(  67)																int this1 = col;
HXDLIN(  67)																int c = this1;
HXDLIN(  67)																bool _hx_tmp;
HXDLIN(  67)																if ((((c >> 24) & 255) < 254)) {
HXLINE(  67)																	_hx_tmp = undoImage->transparent;
            																}
            																else {
HXLINE(  67)																	_hx_tmp = false;
            																}
HXDLIN(  67)																if (_hx_tmp) {
HXLINE(  67)																	int location;
HXDLIN(  67)																	if (undoImage->useVirtualPos) {
HXLINE(  67)																		location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            																	}
            																	else {
HXLINE(  67)																		location = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            																	}
HXDLIN(  67)																	::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  67)																	::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  67)																	int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  67)																	int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  67)																	int this3 = this2;
HXDLIN(  67)																	int this4;
HXDLIN(  67)																	if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																		this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            																	}
            																	else {
HXLINE(  67)																		this4 = this3;
            																	}
HXDLIN(  67)																	Float a1;
HXDLIN(  67)																	int this5 = ((this4 >> 24) & 255);
HXDLIN(  67)																	if ((this5 == 0)) {
HXLINE(  67)																		a1 = ((Float)0.);
            																	}
            																	else {
HXLINE(  67)																		a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            																	}
HXDLIN(  67)																	Float r1;
HXDLIN(  67)																	int this6 = ((this4 >> 16) & 255);
HXDLIN(  67)																	if ((this6 == 0)) {
HXLINE(  67)																		r1 = ((Float)0.);
            																	}
            																	else {
HXLINE(  67)																		r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            																	}
HXDLIN(  67)																	Float g1;
HXDLIN(  67)																	int this7 = ((this4 >> 8) & 255);
HXDLIN(  67)																	if ((this7 == 0)) {
HXLINE(  67)																		g1 = ((Float)0.);
            																	}
            																	else {
HXLINE(  67)																		g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            																	}
HXDLIN(  67)																	Float b1;
HXDLIN(  67)																	int this8 = (this4 & 255);
HXDLIN(  67)																	if ((this8 == 0)) {
HXLINE(  67)																		b1 = ((Float)0.);
            																	}
            																	else {
HXLINE(  67)																		b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            																	}
HXDLIN(  67)																	Float a2;
HXDLIN(  67)																	int this9 = ((col >> 24) & 255);
HXDLIN(  67)																	if ((this9 == 0)) {
HXLINE(  67)																		a2 = ((Float)0.);
            																	}
            																	else {
HXLINE(  67)																		a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            																	}
HXDLIN(  67)																	Float r2;
HXDLIN(  67)																	int this10 = ((col >> 16) & 255);
HXDLIN(  67)																	if ((this10 == 0)) {
HXLINE(  67)																		r2 = ((Float)0.);
            																	}
            																	else {
HXLINE(  67)																		r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            																	}
HXDLIN(  67)																	Float g2;
HXDLIN(  67)																	int this11 = ((col >> 8) & 255);
HXDLIN(  67)																	if ((this11 == 0)) {
HXLINE(  67)																		g2 = ((Float)0.);
            																	}
            																	else {
HXLINE(  67)																		g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            																	}
HXDLIN(  67)																	Float b2;
HXDLIN(  67)																	int this12 = (col & 255);
HXDLIN(  67)																	if ((this12 == 0)) {
HXLINE(  67)																		b2 = ((Float)0.);
            																	}
            																	else {
HXLINE(  67)																		b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            																	}
HXDLIN(  67)																	Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  67)																	int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  67)																	int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  67)																	int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  67)																	int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  67)																	int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  67)																	{
HXLINE(  67)																		::haxe::io::ArrayBufferViewImpl this13 = undoImage->image;
HXDLIN(  67)																		int value;
HXDLIN(  67)																		if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																			value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																		}
            																		else {
HXLINE(  67)																			value = blended;
            																		}
HXDLIN(  67)																		bool _hx_tmp;
HXDLIN(  67)																		if ((location >= 0)) {
HXLINE(  67)																			_hx_tmp = (location < (this13->byteLength >> 2));
            																		}
            																		else {
HXLINE(  67)																			_hx_tmp = false;
            																		}
HXDLIN(  67)																		if (_hx_tmp) {
HXLINE(  67)																			::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  67)																			int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  67)																			_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  67)																			_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  67)																			_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  67)																			_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																		}
            																	}
            																}
            																else {
HXLINE(  67)																	::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  67)																	int index;
HXDLIN(  67)																	if (undoImage->useVirtualPos) {
HXLINE(  67)																		index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            																	}
            																	else {
HXLINE(  67)																		index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            																	}
HXDLIN(  67)																	int value;
HXDLIN(  67)																	if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																		value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            																	}
            																	else {
HXLINE(  67)																		value = c;
            																	}
HXDLIN(  67)																	bool _hx_tmp;
HXDLIN(  67)																	if ((index >= 0)) {
HXLINE(  67)																		_hx_tmp = (index < (this1->byteLength >> 2));
            																	}
            																	else {
HXLINE(  67)																		_hx_tmp = false;
            																	}
HXDLIN(  67)																	if (_hx_tmp) {
HXLINE(  67)																		::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  67)																		int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  67)																		_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  67)																		_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  67)																		_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  67)																		_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																	}
            																}
            															}
            															else {
HXLINE(  67)																if (forceClear) {
HXLINE(  67)																	::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  67)																	int x = (dx - rectLeft);
HXDLIN(  67)																	int y = (dy - rectTop);
HXDLIN(  67)																	int index;
HXDLIN(  67)																	if (undoImage->useVirtualPos) {
HXLINE(  67)																		index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            																	}
            																	else {
HXLINE(  67)																		index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            																	}
HXDLIN(  67)																	bool _hx_tmp;
HXDLIN(  67)																	if ((index >= 0)) {
HXLINE(  67)																		_hx_tmp = (index < (this1->byteLength >> 2));
            																	}
            																	else {
HXLINE(  67)																		_hx_tmp = false;
            																	}
HXDLIN(  67)																	if (_hx_tmp) {
HXLINE(  67)																		::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  67)																		int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  67)																		_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  67)																		_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  67)																		_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  67)																		_this->b[(pos + 3)] = ( (unsigned char)(0) );
            																	}
            																}
            															}
            														}
            													}
            												}
            											}
            										}
            									}
HXDLIN(  67)									bool found = false;
HXDLIN(  67)									Float s = ((Float)0.);
HXDLIN(  67)									Float t = ((Float)0.);
HXDLIN(  67)									Float sxx = ((Float)0.);
HXDLIN(  67)									Float txx = ((Float)0.);
HXDLIN(  67)									{
HXLINE(  67)										int _g_min = xIter3->start;
HXDLIN(  67)										int _g_max = xIter3->max;
HXDLIN(  67)										while((_g_min < _g_max)){
HXLINE(  67)											_g_min = (_g_min + 1);
HXDLIN(  67)											int x = (_g_min - 1);
HXLINE(  61)											sxx = (sx * ( (Float)(x) ));
HXLINE(  62)											txx = (tx * ( (Float)(x) ));
HXLINE(  63)											found = false;
HXLINE(  67)											{
HXLINE(  67)												int _g_min1 = yIter3->start;
HXDLIN(  67)												int _g_max = yIter3->max;
HXDLIN(  67)												while((_g_min1 < _g_max)){
HXLINE(  67)													_g_min1 = (_g_min1 + 1);
HXDLIN(  67)													int y = (_g_min1 - 1);
HXLINE(  65)													s = ((s0 + sxx) + (sy * ( (Float)(y) )));
HXLINE(  66)													t = ((t0 + txx) + (ty * ( (Float)(y) )));
HXLINE(  67)													bool _hx_tmp;
HXDLIN(  67)													if (!((s <= 0))) {
HXLINE(  67)														_hx_tmp = (t <= 0);
            													}
            													else {
HXLINE(  67)														_hx_tmp = true;
            													}
HXDLIN(  67)													if (_hx_tmp) {
HXLINE(  67)														if (found) {
HXLINE(  67)															goto _hx_goto_54;
            														}
            													}
            													else {
HXLINE(  67)														if (((s + t) < A)) {
HXLINE(  67)															{
HXLINE(  67)																int this1 = color1;
HXDLIN(  67)																int c = this1;
HXDLIN(  67)																bool _hx_tmp;
HXDLIN(  67)																if ((((c >> 24) & 255) < 254)) {
HXLINE(  67)																	_hx_tmp = pixelshape1->transparent;
            																}
            																else {
HXLINE(  67)																	_hx_tmp = false;
            																}
HXDLIN(  67)																if (_hx_tmp) {
HXLINE(  67)																	int location;
HXDLIN(  67)																	if (pixelshape1->useVirtualPos) {
HXLINE(  67)																		location = ::Std_obj::_hx_int(((((( (Float)(y) ) - pixelshape1->virtualY) * ( (Float)(pixelshape1->width) )) + x) - pixelshape1->virtualX));
            																	}
            																	else {
HXLINE(  67)																		location = ::Std_obj::_hx_int(( (Float)(((y * pixelshape1->width) + x)) ));
            																	}
HXDLIN(  67)																	::haxe::io::ArrayBufferViewImpl this1 = pixelshape1->image;
HXDLIN(  67)																	::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  67)																	int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  67)																	int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  67)																	int this3 = this2;
HXDLIN(  67)																	int this4;
HXDLIN(  67)																	if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																		this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            																	}
            																	else {
HXLINE(  67)																		this4 = this3;
            																	}
HXDLIN(  67)																	Float a1;
HXDLIN(  67)																	int this5 = ((this4 >> 24) & 255);
HXDLIN(  67)																	if ((this5 == 0)) {
HXLINE(  67)																		a1 = ((Float)0.);
            																	}
            																	else {
HXLINE(  67)																		a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            																	}
HXDLIN(  67)																	Float r1;
HXDLIN(  67)																	int this6 = ((this4 >> 16) & 255);
HXDLIN(  67)																	if ((this6 == 0)) {
HXLINE(  67)																		r1 = ((Float)0.);
            																	}
            																	else {
HXLINE(  67)																		r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            																	}
HXDLIN(  67)																	Float g1;
HXDLIN(  67)																	int this7 = ((this4 >> 8) & 255);
HXDLIN(  67)																	if ((this7 == 0)) {
HXLINE(  67)																		g1 = ((Float)0.);
            																	}
            																	else {
HXLINE(  67)																		g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            																	}
HXDLIN(  67)																	Float b1;
HXDLIN(  67)																	int this8 = (this4 & 255);
HXDLIN(  67)																	if ((this8 == 0)) {
HXLINE(  67)																		b1 = ((Float)0.);
            																	}
            																	else {
HXLINE(  67)																		b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            																	}
HXDLIN(  67)																	Float a2;
HXDLIN(  67)																	int this9 = ((color1 >> 24) & 255);
HXDLIN(  67)																	if ((this9 == 0)) {
HXLINE(  67)																		a2 = ((Float)0.);
            																	}
            																	else {
HXLINE(  67)																		a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            																	}
HXDLIN(  67)																	Float r2;
HXDLIN(  67)																	int this10 = ((color1 >> 16) & 255);
HXDLIN(  67)																	if ((this10 == 0)) {
HXLINE(  67)																		r2 = ((Float)0.);
            																	}
            																	else {
HXLINE(  67)																		r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            																	}
HXDLIN(  67)																	Float g2;
HXDLIN(  67)																	int this11 = ((color1 >> 8) & 255);
HXDLIN(  67)																	if ((this11 == 0)) {
HXLINE(  67)																		g2 = ((Float)0.);
            																	}
            																	else {
HXLINE(  67)																		g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            																	}
HXDLIN(  67)																	Float b2;
HXDLIN(  67)																	int this12 = (color1 & 255);
HXDLIN(  67)																	if ((this12 == 0)) {
HXLINE(  67)																		b2 = ((Float)0.);
            																	}
            																	else {
HXLINE(  67)																		b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            																	}
HXDLIN(  67)																	Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  67)																	int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  67)																	int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  67)																	int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  67)																	int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  67)																	int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  67)																	{
HXLINE(  67)																		::haxe::io::ArrayBufferViewImpl this13 = pixelshape1->image;
HXDLIN(  67)																		int value;
HXDLIN(  67)																		if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																			value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																		}
            																		else {
HXLINE(  67)																			value = blended;
            																		}
HXDLIN(  67)																		bool _hx_tmp;
HXDLIN(  67)																		if ((location >= 0)) {
HXLINE(  67)																			_hx_tmp = (location < (this13->byteLength >> 2));
            																		}
            																		else {
HXLINE(  67)																			_hx_tmp = false;
            																		}
HXDLIN(  67)																		if (_hx_tmp) {
HXLINE(  67)																			::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  67)																			int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  67)																			_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  67)																			_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  67)																			_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  67)																			_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																		}
            																	}
            																}
            																else {
HXLINE(  67)																	::haxe::io::ArrayBufferViewImpl this1 = pixelshape1->image;
HXDLIN(  67)																	int index;
HXDLIN(  67)																	if (pixelshape1->useVirtualPos) {
HXLINE(  67)																		index = ::Std_obj::_hx_int(((((( (Float)(y) ) - pixelshape1->virtualY) * ( (Float)(pixelshape1->width) )) + x) - pixelshape1->virtualX));
            																	}
            																	else {
HXLINE(  67)																		index = ::Std_obj::_hx_int(( (Float)(((y * pixelshape1->width) + x)) ));
            																	}
HXDLIN(  67)																	int value;
HXDLIN(  67)																	if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)																		value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            																	}
            																	else {
HXLINE(  67)																		value = c;
            																	}
HXDLIN(  67)																	bool _hx_tmp;
HXDLIN(  67)																	if ((index >= 0)) {
HXLINE(  67)																		_hx_tmp = (index < (this1->byteLength >> 2));
            																	}
            																	else {
HXLINE(  67)																		_hx_tmp = false;
            																	}
HXDLIN(  67)																	if (_hx_tmp) {
HXLINE(  67)																		::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  67)																		int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  67)																		_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  67)																		_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  67)																		_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  67)																		_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																	}
            																}
            															}
HXLINE(  74)															found = true;
            														}
            														else {
HXLINE(  67)															if (found) {
HXLINE(  67)																goto _hx_goto_54;
            															}
            														}
            													}
            												}
            												_hx_goto_54:;
            											}
            										}
            									}
HXDLIN(  67)									if ((hasHit == true)) {
HXLINE(  67)										::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,farX1,lowerY1,bx,by,cx,cy,true);
HXDLIN(  67)										if (hasUndo) {
HXLINE(  67)											v->undoImage = undoImage;
HXDLIN(  67)											v->undoX = xIter3->start;
HXDLIN(  67)											v->undoY = yIter3->start;
            										}
            									}
            								}
            							}
            						}
HXLINE(  46)						lastX7 = nextX;
HXLINE(  47)						lastY7 = nextY;
            					}
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(SquareShape_obj,buildRounded,(void))


::hx::ObjectPtr< SquareShape_obj > SquareShape_obj::__new(::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< int >  __o_strokeColor,::hx::Null< Float >  __o_strokeWidth,::Array< ::String > strokeDashGapArray,::hx::Null< int >  __o_fill,::hx::Null< Float >  __o_left,::hx::Null< Float >  __o_top,::hx::Null< Float >  __o_diameter,::hx::Null< bool >  __o_rounded) {
	::hx::ObjectPtr< SquareShape_obj > __this = new SquareShape_obj();
	__this->__construct(__o_opacity,__o_visibility,__o_strokeColor,__o_strokeWidth,strokeDashGapArray,__o_fill,__o_left,__o_top,__o_diameter,__o_rounded);
	return __this;
}

::hx::ObjectPtr< SquareShape_obj > SquareShape_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< int >  __o_strokeColor,::hx::Null< Float >  __o_strokeWidth,::Array< ::String > strokeDashGapArray,::hx::Null< int >  __o_fill,::hx::Null< Float >  __o_left,::hx::Null< Float >  __o_top,::hx::Null< Float >  __o_diameter,::hx::Null< bool >  __o_rounded) {
	SquareShape_obj *__this = (SquareShape_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SquareShape_obj), true, "pixelimage.triangleGML.shape.SquareShape"));
	*(void **)__this = SquareShape_obj::_hx_vtable;
	__this->__construct(__o_opacity,__o_visibility,__o_strokeColor,__o_strokeWidth,strokeDashGapArray,__o_fill,__o_left,__o_top,__o_diameter,__o_rounded);
	return __this;
}

SquareShape_obj::SquareShape_obj()
{
}

::hx::Val SquareShape_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { return ::hx::Val( top ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { return ::hx::Val( left ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { return ::hx::Val( render_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"rounded") ) { return ::hx::Val( rounded ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"diameter") ) { return ::hx::Val( diameter ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"buildSquare") ) { return ::hx::Val( buildSquare_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setParameter") ) { return ::hx::Val( setParameter_dyn() ); }
		if (HX_FIELD_EQ(inName,"buildRounded") ) { return ::hx::Val( buildRounded_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val SquareShape_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { top=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { left=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"rounded") ) { rounded=inValue.Cast< bool >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"diameter") ) { diameter=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SquareShape_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("left",07,08,b0,47));
	outFields->push(HX_("top",95,66,58,00));
	outFields->push(HX_("diameter",cd,6e,68,34));
	outFields->push(HX_("rounded",2d,80,0f,8d));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo SquareShape_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(SquareShape_obj,left),HX_("left",07,08,b0,47)},
	{::hx::fsFloat,(int)offsetof(SquareShape_obj,top),HX_("top",95,66,58,00)},
	{::hx::fsFloat,(int)offsetof(SquareShape_obj,diameter),HX_("diameter",cd,6e,68,34)},
	{::hx::fsBool,(int)offsetof(SquareShape_obj,rounded),HX_("rounded",2d,80,0f,8d)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *SquareShape_obj_sStaticStorageInfo = 0;
#endif

static ::String SquareShape_obj_sMemberFields[] = {
	HX_("left",07,08,b0,47),
	HX_("top",95,66,58,00),
	HX_("diameter",cd,6e,68,34),
	HX_("rounded",2d,80,0f,8d),
	HX_("setParameter",a7,f5,ff,6c),
	HX_("render",56,6b,29,05),
	HX_("buildSquare",6b,e6,62,a9),
	HX_("buildRounded",9f,ae,67,9f),
	::String(null()) };

::hx::Class SquareShape_obj::__mClass;

void SquareShape_obj::__register()
{
	SquareShape_obj _hx_dummy;
	SquareShape_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pixelimage.triangleGML.shape.SquareShape",6e,18,74,42);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SquareShape_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SquareShape_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SquareShape_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SquareShape_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pixelimage
} // end namespace triangleGML
} // end namespace shape
