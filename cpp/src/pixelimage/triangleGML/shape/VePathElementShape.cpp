// Generated by Haxe 4.3.0-rc.1+
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_ArrayBufferViewImpl
#include <haxe/io/ArrayBufferViewImpl.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_justPath_ILinePathContext
#include <justPath/ILinePathContext.h>
#endif
#ifndef INCLUDED_justPath_SvgLinePath
#include <justPath/SvgLinePath.h>
#endif
#ifndef INCLUDED_pixelimage_ImageStruct
#include <pixelimage/ImageStruct.h>
#endif
#ifndef INCLUDED_pixelimage__Endian_Endian_Fields_
#include <pixelimage/_Endian/Endian_Fields_.h>
#endif
#ifndef INCLUDED_pixelimage_algo_HitQuad
#include <pixelimage/algo/HitQuad.h>
#endif
#ifndef INCLUDED_pixelimage_algo_IhitObj
#include <pixelimage/algo/IhitObj.h>
#endif
#ifndef INCLUDED_pixelimage_iter_IntIterStart
#include <pixelimage/iter/IntIterStart.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_BasicShape
#include <pixelimage/triangleGML/coreShape/BasicShape.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_FillShape
#include <pixelimage/triangleGML/coreShape/FillShape.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_GroupShape
#include <pixelimage/triangleGML/coreShape/GroupShape.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_ShapeInterface
#include <pixelimage/triangleGML/coreShape/ShapeInterface.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_shape_VePathElementShape
#include <pixelimage/triangleGML/shape/VePathElementShape.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_d7d37466074fc340_10_new,"pixelimage.triangleGML.shape.VePathElementShape","new",0xd1301fe1,"pixelimage.triangleGML.shape.VePathElementShape.new","pixelimage/triangleGML/shape/VePathElementShape.hx",10,0xd3eeaacc)
HX_LOCAL_STACK_FRAME(_hx_pos_d7d37466074fc340_50_setParameter,"pixelimage.triangleGML.shape.VePathElementShape","setParameter",0x81282e06,"pixelimage.triangleGML.shape.VePathElementShape.setParameter","pixelimage/triangleGML/shape/VePathElementShape.hx",50,0xd3eeaacc)
HX_LOCAL_STACK_FRAME(_hx_pos_d7d37466074fc340_71_render,"pixelimage.triangleGML.shape.VePathElementShape","render",0xb2ed0275,"pixelimage.triangleGML.shape.VePathElementShape.render","pixelimage/triangleGML/shape/VePathElementShape.hx",71,0xd3eeaacc)
HX_LOCAL_STACK_FRAME(_hx_pos_d7d37466074fc340_93_drawing,"pixelimage.triangleGML.shape.VePathElementShape","drawing",0x5948df5f,"pixelimage.triangleGML.shape.VePathElementShape.drawing","pixelimage/triangleGML/shape/VePathElementShape.hx",93,0xd3eeaacc)
HX_LOCAL_STACK_FRAME(_hx_pos_d7d37466074fc340_98_lineSegmentTo,"pixelimage.triangleGML.shape.VePathElementShape","lineSegmentTo",0xe670f03b,"pixelimage.triangleGML.shape.VePathElementShape.lineSegmentTo","pixelimage/triangleGML/shape/VePathElementShape.hx",98,0xd3eeaacc)
HX_LOCAL_STACK_FRAME(_hx_pos_d7d37466074fc340_118_lineTo,"pixelimage.triangleGML.shape.VePathElementShape","lineTo",0x9a63ddae,"pixelimage.triangleGML.shape.VePathElementShape.lineTo","pixelimage/triangleGML/shape/VePathElementShape.hx",118,0xd3eeaacc)
HX_LOCAL_STACK_FRAME(_hx_pos_d7d37466074fc340_131_moveTo,"pixelimage.triangleGML.shape.VePathElementShape","moveTo",0x7a706a0b,"pixelimage.triangleGML.shape.VePathElementShape.moveTo","pixelimage/triangleGML/shape/VePathElementShape.hx",131,0xd3eeaacc)
namespace pixelimage{
namespace triangleGML{
namespace shape{

void VePathElementShape_obj::__construct(::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::Array< int > strokeColors,::Array< Float > strokeWidths,::Array< ::String > strokeDashGapArray,::hx::Null< int >  __o_fill,::String __o_pathData,::hx::Null< Float >  __o_translateX,::hx::Null< Float >  __o_translateY,::hx::Null< Float >  __o_scaleX,::hx::Null< Float >  __o_scaleY){
            		Float opacity = __o_opacity.Default(((Float)1.));
            		bool visibility = __o_visibility.Default(true);
            		int fill = __o_fill.Default(0);
            		::String pathData = __o_pathData;
            		if (::hx::IsNull(__o_pathData)) pathData = HX_("",00,00,00,00);
            		Float translateX = __o_translateX.Default(((Float)0.));
            		Float translateY = __o_translateY.Default(((Float)0.));
            		Float scaleX = __o_scaleX.Default(((Float)1.));
            		Float scaleY = __o_scaleY.Default(((Float)1.));
            	HX_STACKFRAME(&_hx_pos_d7d37466074fc340_10_new)
HXLINE(  23)		this->toggleDraw = true;
HXLINE(  20)		this->y0 = ((Float)0.);
HXLINE(  19)		this->x0 = ((Float)0.);
HXLINE(  11)		this->pathData = HX_("",00,00,00,00);
HXLINE(  40)		super::__construct(opacity,visibility,0,1,strokeDashGapArray,fill);
HXLINE(  41)		this->strokeColors = strokeColors;
HXLINE(  42)		this->strokeWidths = strokeWidths;
HXLINE(  43)		this->pathData = pathData;
HXLINE(  44)		this->translateX = translateX;
HXLINE(  45)		this->translateY = translateY;
HXLINE(  46)		this->scaleX = scaleX;
HXLINE(  47)		this->scaleY = scaleY;
            	}

Dynamic VePathElementShape_obj::__CreateEmpty() { return new VePathElementShape_obj; }

void *VePathElementShape_obj::_hx_vtable = 0;

Dynamic VePathElementShape_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< VePathElementShape_obj > _hx_result = new VePathElementShape_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10]);
	return _hx_result;
}

bool VePathElementShape_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x24e92cfb) {
		if (inClassId<=(int)0x2091632c) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2091632c;
		} else {
			return inClassId==(int)0x24e92cfb;
		}
	} else {
		return inClassId==(int)0x389f4e25 || inClassId==(int)0x49dfbbd1;
	}
}

static ::justPath::ILinePathContext_obj _hx_pixelimage_triangleGML_shape_VePathElementShape__hx_justPath_ILinePathContext= {
	( void (::hx::Object::*)(Float,Float))&::pixelimage::triangleGML::shape::VePathElementShape_obj::moveTo,
	( void (::hx::Object::*)(Float,Float))&::pixelimage::triangleGML::shape::VePathElementShape_obj::lineTo,
	( void (::hx::Object::*)(Float,Float))&::pixelimage::triangleGML::shape::VePathElementShape_obj::lineSegmentTo,
};

void *VePathElementShape_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x4fa789de: return &_hx_pixelimage_triangleGML_shape_VePathElementShape__hx_justPath_ILinePathContext;
	}
	return super::_hx_getInterface(inHash);
}

void VePathElementShape_obj::setParameter(::String name,::String value){
            	HX_STACKFRAME(&_hx_pos_d7d37466074fc340_50_setParameter)
HXDLIN(  50)		::String _hx_switch_0 = name;
            		if (  (_hx_switch_0==HX_("pathData",6f,9e,02,38)) ){
HXLINE(  58)			this->pathData = value;
HXDLIN(  58)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("scaleX",8e,ea,25,3c)) ){
HXLINE(  64)			this->scaleX = ::Std_obj::parseFloat(value);
HXDLIN(  64)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("scaleY",8f,ea,25,3c)) ){
HXLINE(  66)			this->scaleY = ::Std_obj::parseFloat(value);
HXDLIN(  66)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("strokeColors",88,87,c5,50)) ){
HXLINE(  52)			value = value.split(HX_("[",5b,00,00,00))->__get(1).split(HX_("]",5d,00,00,00))->__get(0);
HXLINE(  53)			::Array< int > _g = ::Array_obj< int >::__new(0);
HXDLIN(  53)			{
HXLINE(  53)				int _g1 = 0;
HXDLIN(  53)				::Array< ::String > _g2 = value.split(HX_(",",2c,00,00,00));
HXDLIN(  53)				while((_g1 < _g2->length)){
HXLINE(  53)					::String n = _g2->__get(_g1);
HXDLIN(  53)					_g1 = (_g1 + 1);
HXDLIN(  53)					_g->push(::Std_obj::parseInt(n));
            				}
            			}
HXDLIN(  53)			this->strokeColors = _g;
HXLINE(  51)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("strokeWidths",85,51,3b,d6)) ){
HXLINE(  55)			value = value.split(HX_("[",5b,00,00,00))->__get(1).split(HX_("]",5d,00,00,00))->__get(0);
HXLINE(  56)			::Array< Float > _g = ::Array_obj< Float >::__new(0);
HXDLIN(  56)			{
HXLINE(  56)				int _g1 = 0;
HXDLIN(  56)				::Array< ::String > _g2 = value.split(HX_(",",2c,00,00,00));
HXDLIN(  56)				while((_g1 < _g2->length)){
HXLINE(  56)					::String n = _g2->__get(_g1);
HXDLIN(  56)					_g1 = (_g1 + 1);
HXDLIN(  56)					_g->push(::Std_obj::parseFloat(n));
            				}
            			}
HXDLIN(  56)			this->strokeWidths = _g;
HXLINE(  54)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("translateX",4a,8d,5c,06)) ){
HXLINE(  60)			this->translateX = ::Std_obj::parseFloat(value);
HXDLIN(  60)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("translateY",4b,8d,5c,06)) ){
HXLINE(  62)			this->translateY = ::Std_obj::parseFloat(value);
HXDLIN(  62)			goto _hx_goto_1;
            		}
            		/* default */{
HXLINE(  68)			this->super::setParameter(name,value);
            		}
            		_hx_goto_1:;
            	}


::pixelimage::ImageStruct VePathElementShape_obj::render(::pixelimage::ImageStruct pixelShape){
            	HX_GC_STACKFRAME(&_hx_pos_d7d37466074fc340_71_render)
HXLINE(  73)		int w = ::Math_obj::ceil(( (Float)(pixelShape->width) ));
HXDLIN(  73)		int h = ::Math_obj::ceil(( (Float)(pixelShape->height) ));
HXDLIN(  73)		int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN(  73)		::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  73)		::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN(  73)		::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN(  73)		::pixelimage::ImageStruct this4 = this3;
HXDLIN(  73)		this->temp = this4;
HXLINE(  74)		this->temp->transparent = true;
HXLINE(  75)		int lc = this->strokeColors->length;
HXLINE(  76)		int ls = this->strokeWidths->length;
HXLINE(  77)		int l = ::Std_obj::_hx_int(::Math_obj::min(( (Float)(lc) ),( (Float)(ls) )));
HXLINE(  78)		int i = (l - 1);
HXLINE(  79)		{
HXLINE(  79)			int _g = 0;
HXDLIN(  79)			int _g1 = l;
HXDLIN(  79)			while((_g < _g1)){
HXLINE(  79)				_g = (_g + 1);
HXDLIN(  79)				int k = (_g - 1);
HXLINE(  81)				this->strokeColor = this->strokeColors->__get(i);
HXLINE(  82)				this->strokeWidth = this->strokeWidths->__get(i);
HXLINE(  83)				i = (i - 1);
HXLINE(  84)				this->drawing();
            			}
            		}
HXLINE(  86)		{
HXLINE(  86)			::pixelimage::ImageStruct pixelImage = this->temp;
HXDLIN(  86)			int x = ::Std_obj::_hx_int(this->offX);
HXDLIN(  86)			int y = ::Std_obj::_hx_int(this->offY);
HXDLIN(  86)			bool forceClear = false;
HXDLIN(  86)			{
HXLINE(  86)				int _g2 = 0;
HXDLIN(  86)				int _g3 = pixelImage->height;
HXDLIN(  86)				while((_g2 < _g3)){
HXLINE(  86)					_g2 = (_g2 + 1);
HXDLIN(  86)					int dy = (_g2 - 1);
HXDLIN(  86)					{
HXLINE(  86)						int _g = 0;
HXDLIN(  86)						int _g1 = pixelImage->width;
HXDLIN(  86)						while((_g < _g1)){
HXLINE(  86)							_g = (_g + 1);
HXDLIN(  86)							int dx = (_g - 1);
HXDLIN(  86)							::haxe::io::ArrayBufferViewImpl this1 = pixelImage->image;
HXDLIN(  86)							int index;
HXDLIN(  86)							if (pixelImage->useVirtualPos) {
HXLINE(  86)								index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx) - pixelImage->virtualX));
            							}
            							else {
HXLINE(  86)								index = ::Std_obj::_hx_int(( (Float)(((dy * pixelImage->width) + dx)) ));
            							}
HXDLIN(  86)							::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  86)							int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  86)							int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  86)							int col;
HXDLIN(  86)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  86)								col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            							}
            							else {
HXLINE(  86)								col = c;
            							}
HXDLIN(  86)							bool _hx_tmp;
HXDLIN(  86)							if (pixelImage->useMask) {
HXLINE(  86)								_hx_tmp = ::hx::IsNotNull( pixelImage->mask );
            							}
            							else {
HXLINE(  86)								_hx_tmp = false;
            							}
HXDLIN(  86)							if (_hx_tmp) {
HXLINE(  86)								::pixelimage::ImageStruct this1 = pixelImage->mask;
HXDLIN(  86)								::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  86)								int index;
HXDLIN(  86)								if (this1->useVirtualPos) {
HXLINE(  86)									index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            								}
            								else {
HXLINE(  86)									index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            								}
HXDLIN(  86)								::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  86)								int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  86)								int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  86)								int v;
HXDLIN(  86)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  86)									v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            								}
            								else {
HXLINE(  86)									v = c;
            								}
HXDLIN(  86)								int this3 = v;
HXDLIN(  86)								int maskPixel = this3;
HXDLIN(  86)								int this4 = col;
HXDLIN(  86)								int this5 = this4;
HXDLIN(  86)								if ((maskPixel == 0)) {
HXLINE(  86)									int this1 = this5;
HXDLIN(  86)									col = this1;
            								}
            								else {
HXLINE(  86)									Float m0;
HXDLIN(  86)									int this1 = ((maskPixel >> 24) & 255);
HXDLIN(  86)									if ((this1 == 0)) {
HXLINE(  86)										m0 = ((Float)0.);
            									}
            									else {
HXLINE(  86)										m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            									}
HXDLIN(  86)									Float m1;
HXDLIN(  86)									int this2 = ((maskPixel >> 16) & 255);
HXDLIN(  86)									if ((this2 == 0)) {
HXLINE(  86)										m1 = ((Float)0.);
            									}
            									else {
HXLINE(  86)										m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            									}
HXDLIN(  86)									Float m2;
HXDLIN(  86)									int this3 = ((maskPixel >> 8) & 255);
HXDLIN(  86)									if ((this3 == 0)) {
HXLINE(  86)										m2 = ((Float)0.);
            									}
            									else {
HXLINE(  86)										m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            									}
HXDLIN(  86)									Float m3;
HXDLIN(  86)									int this4 = (maskPixel & 255);
HXDLIN(  86)									if ((this4 == 0)) {
HXLINE(  86)										m3 = ((Float)0.);
            									}
            									else {
HXLINE(  86)										m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            									}
HXDLIN(  86)									int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN(  86)									int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN(  86)									int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN(  86)									int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN(  86)									col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            								}
            							}
HXDLIN(  86)							if ((col != 0)) {
HXLINE(  86)								int x1 = (x + dx);
HXDLIN(  86)								int y1 = (y + dy);
HXDLIN(  86)								int this1 = col;
HXDLIN(  86)								int c = this1;
HXDLIN(  86)								bool _hx_tmp;
HXDLIN(  86)								if ((((c >> 24) & 255) < 254)) {
HXLINE(  86)									_hx_tmp = pixelShape->transparent;
            								}
            								else {
HXLINE(  86)									_hx_tmp = false;
            								}
HXDLIN(  86)								if (_hx_tmp) {
HXLINE(  86)									int location;
HXDLIN(  86)									if (pixelShape->useVirtualPos) {
HXLINE(  86)										location = ::Std_obj::_hx_int(((((( (Float)(y1) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x1) - pixelShape->virtualX));
            									}
            									else {
HXLINE(  86)										location = ::Std_obj::_hx_int(( (Float)(((y1 * pixelShape->width) + x1)) ));
            									}
HXDLIN(  86)									::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  86)									::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  86)									int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  86)									int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  86)									int this3 = this2;
HXDLIN(  86)									int this4;
HXDLIN(  86)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  86)										this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            									}
            									else {
HXLINE(  86)										this4 = this3;
            									}
HXDLIN(  86)									Float a1;
HXDLIN(  86)									int this5 = ((this4 >> 24) & 255);
HXDLIN(  86)									if ((this5 == 0)) {
HXLINE(  86)										a1 = ((Float)0.);
            									}
            									else {
HXLINE(  86)										a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            									}
HXDLIN(  86)									Float r1;
HXDLIN(  86)									int this6 = ((this4 >> 16) & 255);
HXDLIN(  86)									if ((this6 == 0)) {
HXLINE(  86)										r1 = ((Float)0.);
            									}
            									else {
HXLINE(  86)										r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            									}
HXDLIN(  86)									Float g1;
HXDLIN(  86)									int this7 = ((this4 >> 8) & 255);
HXDLIN(  86)									if ((this7 == 0)) {
HXLINE(  86)										g1 = ((Float)0.);
            									}
            									else {
HXLINE(  86)										g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            									}
HXDLIN(  86)									Float b1;
HXDLIN(  86)									int this8 = (this4 & 255);
HXDLIN(  86)									if ((this8 == 0)) {
HXLINE(  86)										b1 = ((Float)0.);
            									}
            									else {
HXLINE(  86)										b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            									}
HXDLIN(  86)									Float a2;
HXDLIN(  86)									int this9 = ((col >> 24) & 255);
HXDLIN(  86)									if ((this9 == 0)) {
HXLINE(  86)										a2 = ((Float)0.);
            									}
            									else {
HXLINE(  86)										a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            									}
HXDLIN(  86)									Float r2;
HXDLIN(  86)									int this10 = ((col >> 16) & 255);
HXDLIN(  86)									if ((this10 == 0)) {
HXLINE(  86)										r2 = ((Float)0.);
            									}
            									else {
HXLINE(  86)										r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            									}
HXDLIN(  86)									Float g2;
HXDLIN(  86)									int this11 = ((col >> 8) & 255);
HXDLIN(  86)									if ((this11 == 0)) {
HXLINE(  86)										g2 = ((Float)0.);
            									}
            									else {
HXLINE(  86)										g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            									}
HXDLIN(  86)									Float b2;
HXDLIN(  86)									int this12 = (col & 255);
HXDLIN(  86)									if ((this12 == 0)) {
HXLINE(  86)										b2 = ((Float)0.);
            									}
            									else {
HXLINE(  86)										b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            									}
HXDLIN(  86)									Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  86)									int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  86)									int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  86)									int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  86)									int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  86)									int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  86)									{
HXLINE(  86)										::haxe::io::ArrayBufferViewImpl this13 = pixelShape->image;
HXDLIN(  86)										int value;
HXDLIN(  86)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  86)											value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            										}
            										else {
HXLINE(  86)											value = blended;
            										}
HXDLIN(  86)										bool _hx_tmp;
HXDLIN(  86)										if ((location >= 0)) {
HXLINE(  86)											_hx_tmp = (location < (this13->byteLength >> 2));
            										}
            										else {
HXLINE(  86)											_hx_tmp = false;
            										}
HXDLIN(  86)										if (_hx_tmp) {
HXLINE(  86)											::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  86)											int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  86)											_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  86)											_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  86)											_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  86)											_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            										}
            									}
            								}
            								else {
HXLINE(  86)									::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  86)									int index;
HXDLIN(  86)									if (pixelShape->useVirtualPos) {
HXLINE(  86)										index = ::Std_obj::_hx_int(((((( (Float)(y1) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x1) - pixelShape->virtualX));
            									}
            									else {
HXLINE(  86)										index = ::Std_obj::_hx_int(( (Float)(((y1 * pixelShape->width) + x1)) ));
            									}
HXDLIN(  86)									int value;
HXDLIN(  86)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  86)										value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXLINE(  86)										value = c;
            									}
HXDLIN(  86)									bool _hx_tmp;
HXDLIN(  86)									if ((index >= 0)) {
HXLINE(  86)										_hx_tmp = (index < (this1->byteLength >> 2));
            									}
            									else {
HXLINE(  86)										_hx_tmp = false;
            									}
HXDLIN(  86)									if (_hx_tmp) {
HXLINE(  86)										::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  86)										int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  86)										_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  86)										_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  86)										_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  86)										_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            									}
            								}
            							}
            							else {
HXLINE(  86)								if (forceClear) {
HXLINE(  86)									::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  86)									int x1 = (x + dx);
HXDLIN(  86)									int y1 = (y + dy);
HXDLIN(  86)									int index;
HXDLIN(  86)									if (pixelShape->useVirtualPos) {
HXLINE(  86)										index = ::Std_obj::_hx_int(((((( (Float)(y1) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x1) - pixelShape->virtualX));
            									}
            									else {
HXLINE(  86)										index = ::Std_obj::_hx_int(( (Float)(((y1 * pixelShape->width) + x1)) ));
            									}
HXDLIN(  86)									bool _hx_tmp;
HXDLIN(  86)									if ((index >= 0)) {
HXLINE(  86)										_hx_tmp = (index < (this1->byteLength >> 2));
            									}
            									else {
HXLINE(  86)										_hx_tmp = false;
            									}
HXDLIN(  86)									if (_hx_tmp) {
HXLINE(  86)										::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  86)										int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  86)										_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  86)										_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  86)										_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  86)										_this->b[(pos + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(  87)		this->temp = null();
HXLINE(  90)		return this->super::render(pixelShape);
            	}


void VePathElementShape_obj::drawing(){
            	HX_GC_STACKFRAME(&_hx_pos_d7d37466074fc340_93_drawing)
HXLINE(  94)		if (::hx::IsNull( this->sp )) {
HXLINE(  94)			this->sp = ::justPath::SvgLinePath_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this));
            		}
HXLINE(  95)		if ((this->pathData != HX_("",00,00,00,00))) {
HXLINE(  95)			this->sp->parse(this->pathData);
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC0(VePathElementShape_obj,drawing,(void))

void VePathElementShape_obj::lineSegmentTo(Float x2,Float y2){
            	HX_GC_STACKFRAME(&_hx_pos_d7d37466074fc340_98_lineSegmentTo)
HXLINE(  99)		if (this->toggleDraw) {
HXLINE( 100)			 ::Dynamic oldInfo = this->info;
HXLINE( 101)			::pixelimage::ImageStruct this1 = this->temp;
HXDLIN( 101)			Float px = ((this->x0 * this->scaleX) + this->translateX);
HXDLIN( 101)			Float py = ((this->y0 * this->scaleY) + this->translateY);
HXDLIN( 101)			int color = this->strokeColor;
HXDLIN( 101)			Float o = (((y2 * this->scaleY) + this->translateY) - py);
HXDLIN( 101)			Float a = (((x2 * this->scaleX) + this->translateX) - px);
HXDLIN( 101)			Float h = ::Math_obj::pow(((o * o) + (a * a)),((Float)0.5));
HXDLIN( 101)			Float theta = ::Math_obj::atan2(o,a);
HXDLIN( 101)			 ::Dynamic debugCorners = false;
HXDLIN( 101)			if (::hx::IsNull( debugCorners )) {
HXLINE( 878)				debugCorners = false;
            			}
HXLINE( 101)			Float sin = ::Math_obj::sin(theta);
HXDLIN( 101)			Float cos = ::Math_obj::cos(theta);
HXDLIN( 101)			Float radius = (this->strokeWidth / ( (Float)(2) ));
HXDLIN( 101)			Float dx = ((Float)0.1);
HXDLIN( 101)			Float dy = radius;
HXDLIN( 101)			Float cx = h;
HXDLIN( 101)			Float cy = radius;
HXDLIN( 101)			Float bx = h;
HXDLIN( 101)			Float by = -(radius);
HXDLIN( 101)			Float ax = ((Float)0.1);
HXDLIN( 101)			Float ay = -(radius);
HXDLIN( 101)			Float temp = ((Float)0.);
HXLINE(  28)			temp = (px + ((ax * cos) - (ay * sin)));
HXLINE(  29)			ay = (py + ((ay * cos) + (ax * sin)));
HXLINE(  30)			ax = temp;
HXLINE(  32)			temp = (px + ((bx * cos) - (by * sin)));
HXLINE(  33)			by = (py + ((by * cos) + (bx * sin)));
HXLINE(  34)			bx = temp;
HXLINE(  36)			temp = (px + ((cx * cos) - (cy * sin)));
HXLINE(  37)			cy = (py + ((cy * cos) + (cx * sin)));
HXLINE(  38)			cx = temp;
HXLINE(  40)			temp = (px + ((dx * cos) - (dy * sin)));
HXLINE(  41)			dy = (py + ((dy * cos) + (dx * sin)));
HXLINE(  42)			dx = temp;
HXLINE( 101)			if (( (bool)(debugCorners) )) {
HXLINE( 101)				{
HXLINE( 101)					Float x = (ax - ((Float)6.));
HXDLIN( 101)					Float y = (ay - ((Float)6.));
HXDLIN( 101)					int p = ::Std_obj::_hx_int(x);
HXDLIN( 101)					int xx = p;
HXDLIN( 101)					int q = ::Std_obj::_hx_int(y);
HXDLIN( 101)					int maxX = ::Std_obj::_hx_int((x + 12));
HXDLIN( 101)					int maxY = ::Std_obj::_hx_int((y + 12));
HXDLIN( 101)					while(true){
HXLINE( 101)						{
HXLINE( 101)							p = (p + 1);
HXDLIN( 101)							int x = (p - 1);
HXDLIN( 101)							int this2 = -65536;
HXDLIN( 101)							int c = this2;
HXDLIN( 101)							bool _hx_tmp;
HXDLIN( 101)							if ((((c >> 24) & 255) < 254)) {
HXLINE( 101)								_hx_tmp = this1->transparent;
            							}
            							else {
HXLINE( 101)								_hx_tmp = false;
            							}
HXDLIN( 101)							if (_hx_tmp) {
HXLINE( 101)								int location;
HXDLIN( 101)								if (this1->useVirtualPos) {
HXLINE( 101)									location = ::Std_obj::_hx_int(((((( (Float)(q) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            								}
            								else {
HXLINE( 101)									location = ::Std_obj::_hx_int(( (Float)(((q * this1->width) + x)) ));
            								}
HXDLIN( 101)								::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 101)								::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 101)								int pos = ((location << 2) + this2->byteOffset);
HXDLIN( 101)								int this3 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 101)								int this4 = this3;
HXDLIN( 101)								int this5;
HXDLIN( 101)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 101)									this5 = ((((((this4 >> 24) & 255) << 24) | ((this4 & 255) << 16)) | (((this4 >> 8) & 255) << 8)) | ((this4 >> 16) & 255));
            								}
            								else {
HXLINE( 101)									this5 = this4;
            								}
HXDLIN( 101)								Float a1;
HXDLIN( 101)								int this6 = ((this5 >> 24) & 255);
HXDLIN( 101)								if ((this6 == 0)) {
HXLINE( 101)									a1 = ((Float)0.);
            								}
            								else {
HXLINE( 101)									a1 = (( (Float)(this6) ) / ( (Float)(255) ));
            								}
HXDLIN( 101)								Float r1;
HXDLIN( 101)								int this7 = ((this5 >> 16) & 255);
HXDLIN( 101)								if ((this7 == 0)) {
HXLINE( 101)									r1 = ((Float)0.);
            								}
            								else {
HXLINE( 101)									r1 = (( (Float)(this7) ) / ( (Float)(255) ));
            								}
HXDLIN( 101)								Float g1;
HXDLIN( 101)								int this8 = ((this5 >> 8) & 255);
HXDLIN( 101)								if ((this8 == 0)) {
HXLINE( 101)									g1 = ((Float)0.);
            								}
            								else {
HXLINE( 101)									g1 = (( (Float)(this8) ) / ( (Float)(255) ));
            								}
HXDLIN( 101)								Float b1;
HXDLIN( 101)								int this9 = (this5 & 255);
HXDLIN( 101)								if ((this9 == 0)) {
HXLINE( 101)									b1 = ((Float)0.);
            								}
            								else {
HXLINE( 101)									b1 = (( (Float)(this9) ) / ( (Float)(255) ));
            								}
HXDLIN( 101)								Float a2;
HXDLIN( 101)								int this10 = ((-65536 >> 24) & 255);
HXDLIN( 101)								if ((this10 == 0)) {
HXLINE( 101)									a2 = ((Float)0.);
            								}
            								else {
HXLINE( 101)									a2 = (( (Float)(this10) ) / ( (Float)(255) ));
            								}
HXDLIN( 101)								Float r2;
HXDLIN( 101)								int this11 = ((-65536 >> 16) & 255);
HXDLIN( 101)								if ((this11 == 0)) {
HXLINE( 101)									r2 = ((Float)0.);
            								}
            								else {
HXLINE( 101)									r2 = (( (Float)(this11) ) / ( (Float)(255) ));
            								}
HXDLIN( 101)								Float g2;
HXDLIN( 101)								int this12 = ((-65536 >> 8) & 255);
HXDLIN( 101)								if ((this12 == 0)) {
HXLINE( 101)									g2 = ((Float)0.);
            								}
            								else {
HXLINE( 101)									g2 = (( (Float)(this12) ) / ( (Float)(255) ));
            								}
HXDLIN( 101)								Float b2;
HXDLIN( 101)								int this13 = (-65536 & 255);
HXDLIN( 101)								if ((this13 == 0)) {
HXLINE( 101)									b2 = ((Float)0.);
            								}
            								else {
HXLINE( 101)									b2 = (( (Float)(this13) ) / ( (Float)(255) ));
            								}
HXDLIN( 101)								Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 101)								int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 101)								int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 101)								int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 101)								int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 101)								int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 101)								{
HXLINE( 101)									::haxe::io::ArrayBufferViewImpl this14 = this1->image;
HXDLIN( 101)									int value;
HXDLIN( 101)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 101)										value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            									}
            									else {
HXLINE( 101)										value = blended;
            									}
HXDLIN( 101)									bool _hx_tmp;
HXDLIN( 101)									if ((location >= 0)) {
HXLINE( 101)										_hx_tmp = (location < (this14->byteLength >> 2));
            									}
            									else {
HXLINE( 101)										_hx_tmp = false;
            									}
HXDLIN( 101)									if (_hx_tmp) {
HXLINE( 101)										::haxe::io::Bytes _this = this14->bytes;
HXDLIN( 101)										int pos = ((location << 2) + this14->byteOffset);
HXDLIN( 101)										_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 101)										_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 101)										_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 101)										_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            									}
            								}
            							}
            							else {
HXLINE( 101)								::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 101)								int index;
HXDLIN( 101)								if (this1->useVirtualPos) {
HXLINE( 101)									index = ::Std_obj::_hx_int(((((( (Float)(q) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            								}
            								else {
HXLINE( 101)									index = ::Std_obj::_hx_int(( (Float)(((q * this1->width) + x)) ));
            								}
HXDLIN( 101)								int value;
HXDLIN( 101)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 101)									value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            								}
            								else {
HXLINE( 101)									value = c;
            								}
HXDLIN( 101)								bool _hx_tmp;
HXDLIN( 101)								if ((index >= 0)) {
HXLINE( 101)									_hx_tmp = (index < (this2->byteLength >> 2));
            								}
            								else {
HXLINE( 101)									_hx_tmp = false;
            								}
HXDLIN( 101)								if (_hx_tmp) {
HXLINE( 101)									::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 101)									int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 101)									_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 101)									_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 101)									_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 101)									_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            								}
            							}
            						}
HXDLIN( 101)						if ((p > maxX)) {
HXLINE( 247)							p = xx;
HXLINE( 101)							q = (q + 1);
            						}
HXDLIN( 101)						if ((q > maxY)) {
HXLINE( 101)							goto _hx_goto_10;
            						}
            					}
            					_hx_goto_10:;
            				}
HXDLIN( 101)				{
HXLINE( 101)					Float x1 = (bx - ((Float)6.));
HXDLIN( 101)					Float y1 = (by - ((Float)6.));
HXDLIN( 101)					int p1 = ::Std_obj::_hx_int(x1);
HXDLIN( 101)					int xx1 = p1;
HXDLIN( 101)					int q1 = ::Std_obj::_hx_int(y1);
HXDLIN( 101)					int maxX1 = ::Std_obj::_hx_int((x1 + 12));
HXDLIN( 101)					int maxY1 = ::Std_obj::_hx_int((y1 + 12));
HXDLIN( 101)					while(true){
HXLINE( 101)						{
HXLINE( 101)							p1 = (p1 + 1);
HXDLIN( 101)							int x = (p1 - 1);
HXDLIN( 101)							int this2 = -16711936;
HXDLIN( 101)							int c = this2;
HXDLIN( 101)							bool _hx_tmp;
HXDLIN( 101)							if ((((c >> 24) & 255) < 254)) {
HXLINE( 101)								_hx_tmp = this1->transparent;
            							}
            							else {
HXLINE( 101)								_hx_tmp = false;
            							}
HXDLIN( 101)							if (_hx_tmp) {
HXLINE( 101)								int location;
HXDLIN( 101)								if (this1->useVirtualPos) {
HXLINE( 101)									location = ::Std_obj::_hx_int(((((( (Float)(q1) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            								}
            								else {
HXLINE( 101)									location = ::Std_obj::_hx_int(( (Float)(((q1 * this1->width) + x)) ));
            								}
HXDLIN( 101)								::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 101)								::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 101)								int pos = ((location << 2) + this2->byteOffset);
HXDLIN( 101)								int this3 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 101)								int this4 = this3;
HXDLIN( 101)								int this5;
HXDLIN( 101)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 101)									this5 = ((((((this4 >> 24) & 255) << 24) | ((this4 & 255) << 16)) | (((this4 >> 8) & 255) << 8)) | ((this4 >> 16) & 255));
            								}
            								else {
HXLINE( 101)									this5 = this4;
            								}
HXDLIN( 101)								Float a1;
HXDLIN( 101)								int this6 = ((this5 >> 24) & 255);
HXDLIN( 101)								if ((this6 == 0)) {
HXLINE( 101)									a1 = ((Float)0.);
            								}
            								else {
HXLINE( 101)									a1 = (( (Float)(this6) ) / ( (Float)(255) ));
            								}
HXDLIN( 101)								Float r1;
HXDLIN( 101)								int this7 = ((this5 >> 16) & 255);
HXDLIN( 101)								if ((this7 == 0)) {
HXLINE( 101)									r1 = ((Float)0.);
            								}
            								else {
HXLINE( 101)									r1 = (( (Float)(this7) ) / ( (Float)(255) ));
            								}
HXDLIN( 101)								Float g1;
HXDLIN( 101)								int this8 = ((this5 >> 8) & 255);
HXDLIN( 101)								if ((this8 == 0)) {
HXLINE( 101)									g1 = ((Float)0.);
            								}
            								else {
HXLINE( 101)									g1 = (( (Float)(this8) ) / ( (Float)(255) ));
            								}
HXDLIN( 101)								Float b1;
HXDLIN( 101)								int this9 = (this5 & 255);
HXDLIN( 101)								if ((this9 == 0)) {
HXLINE( 101)									b1 = ((Float)0.);
            								}
            								else {
HXLINE( 101)									b1 = (( (Float)(this9) ) / ( (Float)(255) ));
            								}
HXDLIN( 101)								Float a2;
HXDLIN( 101)								int this10 = ((-16711936 >> 24) & 255);
HXDLIN( 101)								if ((this10 == 0)) {
HXLINE( 101)									a2 = ((Float)0.);
            								}
            								else {
HXLINE( 101)									a2 = (( (Float)(this10) ) / ( (Float)(255) ));
            								}
HXDLIN( 101)								Float r2;
HXDLIN( 101)								int this11 = ((-16711936 >> 16) & 255);
HXDLIN( 101)								if ((this11 == 0)) {
HXLINE( 101)									r2 = ((Float)0.);
            								}
            								else {
HXLINE( 101)									r2 = (( (Float)(this11) ) / ( (Float)(255) ));
            								}
HXDLIN( 101)								Float g2;
HXDLIN( 101)								int this12 = ((-16711936 >> 8) & 255);
HXDLIN( 101)								if ((this12 == 0)) {
HXLINE( 101)									g2 = ((Float)0.);
            								}
            								else {
HXLINE( 101)									g2 = (( (Float)(this12) ) / ( (Float)(255) ));
            								}
HXDLIN( 101)								Float b2;
HXDLIN( 101)								int this13 = (-16711936 & 255);
HXDLIN( 101)								if ((this13 == 0)) {
HXLINE( 101)									b2 = ((Float)0.);
            								}
            								else {
HXLINE( 101)									b2 = (( (Float)(this13) ) / ( (Float)(255) ));
            								}
HXDLIN( 101)								Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 101)								int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 101)								int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 101)								int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 101)								int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 101)								int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 101)								{
HXLINE( 101)									::haxe::io::ArrayBufferViewImpl this14 = this1->image;
HXDLIN( 101)									int value;
HXDLIN( 101)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 101)										value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            									}
            									else {
HXLINE( 101)										value = blended;
            									}
HXDLIN( 101)									bool _hx_tmp;
HXDLIN( 101)									if ((location >= 0)) {
HXLINE( 101)										_hx_tmp = (location < (this14->byteLength >> 2));
            									}
            									else {
HXLINE( 101)										_hx_tmp = false;
            									}
HXDLIN( 101)									if (_hx_tmp) {
HXLINE( 101)										::haxe::io::Bytes _this = this14->bytes;
HXDLIN( 101)										int pos = ((location << 2) + this14->byteOffset);
HXDLIN( 101)										_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 101)										_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 101)										_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 101)										_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            									}
            								}
            							}
            							else {
HXLINE( 101)								::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 101)								int index;
HXDLIN( 101)								if (this1->useVirtualPos) {
HXLINE( 101)									index = ::Std_obj::_hx_int(((((( (Float)(q1) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            								}
            								else {
HXLINE( 101)									index = ::Std_obj::_hx_int(( (Float)(((q1 * this1->width) + x)) ));
            								}
HXDLIN( 101)								int value;
HXDLIN( 101)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 101)									value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            								}
            								else {
HXLINE( 101)									value = c;
            								}
HXDLIN( 101)								bool _hx_tmp;
HXDLIN( 101)								if ((index >= 0)) {
HXLINE( 101)									_hx_tmp = (index < (this2->byteLength >> 2));
            								}
            								else {
HXLINE( 101)									_hx_tmp = false;
            								}
HXDLIN( 101)								if (_hx_tmp) {
HXLINE( 101)									::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 101)									int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 101)									_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 101)									_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 101)									_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 101)									_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            								}
            							}
            						}
HXDLIN( 101)						if ((p1 > maxX1)) {
HXLINE( 247)							p1 = xx1;
HXLINE( 101)							q1 = (q1 + 1);
            						}
HXDLIN( 101)						if ((q1 > maxY1)) {
HXLINE( 101)							goto _hx_goto_11;
            						}
            					}
            					_hx_goto_11:;
            				}
HXDLIN( 101)				{
HXLINE( 101)					Float x2 = (cx - ((Float)6.));
HXDLIN( 101)					Float y2 = (cy - ((Float)6.));
HXDLIN( 101)					int p2 = ::Std_obj::_hx_int(x2);
HXDLIN( 101)					int xx2 = p2;
HXDLIN( 101)					int q2 = ::Std_obj::_hx_int(y2);
HXDLIN( 101)					int maxX2 = ::Std_obj::_hx_int((x2 + 12));
HXDLIN( 101)					int maxY2 = ::Std_obj::_hx_int((y2 + 12));
HXDLIN( 101)					while(true){
HXLINE( 101)						{
HXLINE( 101)							p2 = (p2 + 1);
HXDLIN( 101)							int x = (p2 - 1);
HXDLIN( 101)							int this2 = -16776961;
HXDLIN( 101)							int c = this2;
HXDLIN( 101)							bool _hx_tmp;
HXDLIN( 101)							if ((((c >> 24) & 255) < 254)) {
HXLINE( 101)								_hx_tmp = this1->transparent;
            							}
            							else {
HXLINE( 101)								_hx_tmp = false;
            							}
HXDLIN( 101)							if (_hx_tmp) {
HXLINE( 101)								int location;
HXDLIN( 101)								if (this1->useVirtualPos) {
HXLINE( 101)									location = ::Std_obj::_hx_int(((((( (Float)(q2) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            								}
            								else {
HXLINE( 101)									location = ::Std_obj::_hx_int(( (Float)(((q2 * this1->width) + x)) ));
            								}
HXDLIN( 101)								::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 101)								::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 101)								int pos = ((location << 2) + this2->byteOffset);
HXDLIN( 101)								int this3 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 101)								int this4 = this3;
HXDLIN( 101)								int this5;
HXDLIN( 101)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 101)									this5 = ((((((this4 >> 24) & 255) << 24) | ((this4 & 255) << 16)) | (((this4 >> 8) & 255) << 8)) | ((this4 >> 16) & 255));
            								}
            								else {
HXLINE( 101)									this5 = this4;
            								}
HXDLIN( 101)								Float a1;
HXDLIN( 101)								int this6 = ((this5 >> 24) & 255);
HXDLIN( 101)								if ((this6 == 0)) {
HXLINE( 101)									a1 = ((Float)0.);
            								}
            								else {
HXLINE( 101)									a1 = (( (Float)(this6) ) / ( (Float)(255) ));
            								}
HXDLIN( 101)								Float r1;
HXDLIN( 101)								int this7 = ((this5 >> 16) & 255);
HXDLIN( 101)								if ((this7 == 0)) {
HXLINE( 101)									r1 = ((Float)0.);
            								}
            								else {
HXLINE( 101)									r1 = (( (Float)(this7) ) / ( (Float)(255) ));
            								}
HXDLIN( 101)								Float g1;
HXDLIN( 101)								int this8 = ((this5 >> 8) & 255);
HXDLIN( 101)								if ((this8 == 0)) {
HXLINE( 101)									g1 = ((Float)0.);
            								}
            								else {
HXLINE( 101)									g1 = (( (Float)(this8) ) / ( (Float)(255) ));
            								}
HXDLIN( 101)								Float b1;
HXDLIN( 101)								int this9 = (this5 & 255);
HXDLIN( 101)								if ((this9 == 0)) {
HXLINE( 101)									b1 = ((Float)0.);
            								}
            								else {
HXLINE( 101)									b1 = (( (Float)(this9) ) / ( (Float)(255) ));
            								}
HXDLIN( 101)								Float a2;
HXDLIN( 101)								int this10 = ((-16776961 >> 24) & 255);
HXDLIN( 101)								if ((this10 == 0)) {
HXLINE( 101)									a2 = ((Float)0.);
            								}
            								else {
HXLINE( 101)									a2 = (( (Float)(this10) ) / ( (Float)(255) ));
            								}
HXDLIN( 101)								Float r2;
HXDLIN( 101)								int this11 = ((-16776961 >> 16) & 255);
HXDLIN( 101)								if ((this11 == 0)) {
HXLINE( 101)									r2 = ((Float)0.);
            								}
            								else {
HXLINE( 101)									r2 = (( (Float)(this11) ) / ( (Float)(255) ));
            								}
HXDLIN( 101)								Float g2;
HXDLIN( 101)								int this12 = ((-16776961 >> 8) & 255);
HXDLIN( 101)								if ((this12 == 0)) {
HXLINE( 101)									g2 = ((Float)0.);
            								}
            								else {
HXLINE( 101)									g2 = (( (Float)(this12) ) / ( (Float)(255) ));
            								}
HXDLIN( 101)								Float b2;
HXDLIN( 101)								int this13 = (-16776961 & 255);
HXDLIN( 101)								if ((this13 == 0)) {
HXLINE( 101)									b2 = ((Float)0.);
            								}
            								else {
HXLINE( 101)									b2 = (( (Float)(this13) ) / ( (Float)(255) ));
            								}
HXDLIN( 101)								Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 101)								int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 101)								int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 101)								int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 101)								int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 101)								int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 101)								{
HXLINE( 101)									::haxe::io::ArrayBufferViewImpl this14 = this1->image;
HXDLIN( 101)									int value;
HXDLIN( 101)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 101)										value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            									}
            									else {
HXLINE( 101)										value = blended;
            									}
HXDLIN( 101)									bool _hx_tmp;
HXDLIN( 101)									if ((location >= 0)) {
HXLINE( 101)										_hx_tmp = (location < (this14->byteLength >> 2));
            									}
            									else {
HXLINE( 101)										_hx_tmp = false;
            									}
HXDLIN( 101)									if (_hx_tmp) {
HXLINE( 101)										::haxe::io::Bytes _this = this14->bytes;
HXDLIN( 101)										int pos = ((location << 2) + this14->byteOffset);
HXDLIN( 101)										_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 101)										_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 101)										_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 101)										_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            									}
            								}
            							}
            							else {
HXLINE( 101)								::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 101)								int index;
HXDLIN( 101)								if (this1->useVirtualPos) {
HXLINE( 101)									index = ::Std_obj::_hx_int(((((( (Float)(q2) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            								}
            								else {
HXLINE( 101)									index = ::Std_obj::_hx_int(( (Float)(((q2 * this1->width) + x)) ));
            								}
HXDLIN( 101)								int value;
HXDLIN( 101)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 101)									value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            								}
            								else {
HXLINE( 101)									value = c;
            								}
HXDLIN( 101)								bool _hx_tmp;
HXDLIN( 101)								if ((index >= 0)) {
HXLINE( 101)									_hx_tmp = (index < (this2->byteLength >> 2));
            								}
            								else {
HXLINE( 101)									_hx_tmp = false;
            								}
HXDLIN( 101)								if (_hx_tmp) {
HXLINE( 101)									::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 101)									int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 101)									_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 101)									_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 101)									_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 101)									_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            								}
            							}
            						}
HXDLIN( 101)						if ((p2 > maxX2)) {
HXLINE( 247)							p2 = xx2;
HXLINE( 101)							q2 = (q2 + 1);
            						}
HXDLIN( 101)						if ((q2 > maxY2)) {
HXLINE( 101)							goto _hx_goto_12;
            						}
            					}
            					_hx_goto_12:;
            				}
HXDLIN( 101)				{
HXLINE( 101)					Float x3 = (dx - ((Float)6.));
HXDLIN( 101)					Float y3 = (dy - ((Float)6.));
HXDLIN( 101)					int p3 = ::Std_obj::_hx_int(x3);
HXDLIN( 101)					int xx3 = p3;
HXDLIN( 101)					int q3 = ::Std_obj::_hx_int(y3);
HXDLIN( 101)					int maxX3 = ::Std_obj::_hx_int((x3 + 12));
HXDLIN( 101)					int maxY3 = ::Std_obj::_hx_int((y3 + 12));
HXDLIN( 101)					while(true){
HXLINE( 101)						{
HXLINE( 101)							p3 = (p3 + 1);
HXDLIN( 101)							int x = (p3 - 1);
HXDLIN( 101)							int this2 = -1048336;
HXDLIN( 101)							int c = this2;
HXDLIN( 101)							bool _hx_tmp;
HXDLIN( 101)							if ((((c >> 24) & 255) < 254)) {
HXLINE( 101)								_hx_tmp = this1->transparent;
            							}
            							else {
HXLINE( 101)								_hx_tmp = false;
            							}
HXDLIN( 101)							if (_hx_tmp) {
HXLINE( 101)								int location;
HXDLIN( 101)								if (this1->useVirtualPos) {
HXLINE( 101)									location = ::Std_obj::_hx_int(((((( (Float)(q3) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            								}
            								else {
HXLINE( 101)									location = ::Std_obj::_hx_int(( (Float)(((q3 * this1->width) + x)) ));
            								}
HXDLIN( 101)								::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 101)								::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 101)								int pos = ((location << 2) + this2->byteOffset);
HXDLIN( 101)								int this3 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 101)								int this4 = this3;
HXDLIN( 101)								int this5;
HXDLIN( 101)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 101)									this5 = ((((((this4 >> 24) & 255) << 24) | ((this4 & 255) << 16)) | (((this4 >> 8) & 255) << 8)) | ((this4 >> 16) & 255));
            								}
            								else {
HXLINE( 101)									this5 = this4;
            								}
HXDLIN( 101)								Float a1;
HXDLIN( 101)								int this6 = ((this5 >> 24) & 255);
HXDLIN( 101)								if ((this6 == 0)) {
HXLINE( 101)									a1 = ((Float)0.);
            								}
            								else {
HXLINE( 101)									a1 = (( (Float)(this6) ) / ( (Float)(255) ));
            								}
HXDLIN( 101)								Float r1;
HXDLIN( 101)								int this7 = ((this5 >> 16) & 255);
HXDLIN( 101)								if ((this7 == 0)) {
HXLINE( 101)									r1 = ((Float)0.);
            								}
            								else {
HXLINE( 101)									r1 = (( (Float)(this7) ) / ( (Float)(255) ));
            								}
HXDLIN( 101)								Float g1;
HXDLIN( 101)								int this8 = ((this5 >> 8) & 255);
HXDLIN( 101)								if ((this8 == 0)) {
HXLINE( 101)									g1 = ((Float)0.);
            								}
            								else {
HXLINE( 101)									g1 = (( (Float)(this8) ) / ( (Float)(255) ));
            								}
HXDLIN( 101)								Float b1;
HXDLIN( 101)								int this9 = (this5 & 255);
HXDLIN( 101)								if ((this9 == 0)) {
HXLINE( 101)									b1 = ((Float)0.);
            								}
            								else {
HXLINE( 101)									b1 = (( (Float)(this9) ) / ( (Float)(255) ));
            								}
HXDLIN( 101)								Float a2;
HXDLIN( 101)								int this10 = ((-1048336 >> 24) & 255);
HXDLIN( 101)								if ((this10 == 0)) {
HXLINE( 101)									a2 = ((Float)0.);
            								}
            								else {
HXLINE( 101)									a2 = (( (Float)(this10) ) / ( (Float)(255) ));
            								}
HXDLIN( 101)								Float r2;
HXDLIN( 101)								int this11 = ((-1048336 >> 16) & 255);
HXDLIN( 101)								if ((this11 == 0)) {
HXLINE( 101)									r2 = ((Float)0.);
            								}
            								else {
HXLINE( 101)									r2 = (( (Float)(this11) ) / ( (Float)(255) ));
            								}
HXDLIN( 101)								Float g2;
HXDLIN( 101)								int this12 = ((-1048336 >> 8) & 255);
HXDLIN( 101)								if ((this12 == 0)) {
HXLINE( 101)									g2 = ((Float)0.);
            								}
            								else {
HXLINE( 101)									g2 = (( (Float)(this12) ) / ( (Float)(255) ));
            								}
HXDLIN( 101)								Float b2;
HXDLIN( 101)								int this13 = (-1048336 & 255);
HXDLIN( 101)								if ((this13 == 0)) {
HXLINE( 101)									b2 = ((Float)0.);
            								}
            								else {
HXLINE( 101)									b2 = (( (Float)(this13) ) / ( (Float)(255) ));
            								}
HXDLIN( 101)								Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 101)								int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 101)								int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 101)								int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 101)								int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 101)								int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 101)								{
HXLINE( 101)									::haxe::io::ArrayBufferViewImpl this14 = this1->image;
HXDLIN( 101)									int value;
HXDLIN( 101)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 101)										value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            									}
            									else {
HXLINE( 101)										value = blended;
            									}
HXDLIN( 101)									bool _hx_tmp;
HXDLIN( 101)									if ((location >= 0)) {
HXLINE( 101)										_hx_tmp = (location < (this14->byteLength >> 2));
            									}
            									else {
HXLINE( 101)										_hx_tmp = false;
            									}
HXDLIN( 101)									if (_hx_tmp) {
HXLINE( 101)										::haxe::io::Bytes _this = this14->bytes;
HXDLIN( 101)										int pos = ((location << 2) + this14->byteOffset);
HXDLIN( 101)										_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 101)										_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 101)										_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 101)										_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            									}
            								}
            							}
            							else {
HXLINE( 101)								::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 101)								int index;
HXDLIN( 101)								if (this1->useVirtualPos) {
HXLINE( 101)									index = ::Std_obj::_hx_int(((((( (Float)(q3) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            								}
            								else {
HXLINE( 101)									index = ::Std_obj::_hx_int(( (Float)(((q3 * this1->width) + x)) ));
            								}
HXDLIN( 101)								int value;
HXDLIN( 101)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 101)									value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            								}
            								else {
HXLINE( 101)									value = c;
            								}
HXDLIN( 101)								bool _hx_tmp;
HXDLIN( 101)								if ((index >= 0)) {
HXLINE( 101)									_hx_tmp = (index < (this2->byteLength >> 2));
            								}
            								else {
HXLINE( 101)									_hx_tmp = false;
            								}
HXDLIN( 101)								if (_hx_tmp) {
HXLINE( 101)									::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 101)									int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 101)									_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 101)									_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 101)									_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 101)									_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            								}
            							}
            						}
HXDLIN( 101)						if ((p3 > maxX3)) {
HXLINE( 247)							p3 = xx3;
HXLINE( 101)							q3 = (q3 + 1);
            						}
HXDLIN( 101)						if ((q3 > maxY3)) {
HXLINE( 101)							goto _hx_goto_13;
            						}
            					}
            					_hx_goto_13:;
            				}
            			}
HXDLIN( 101)			Float bx1 = bx;
HXDLIN( 101)			Float by1 = by;
HXDLIN( 101)			Float cx1 = dx;
HXDLIN( 101)			Float cy1 = dy;
HXDLIN( 101)			bool hasUndo = false;
HXDLIN( 101)			bool adjustWinding = (((((ax * by1) - (bx1 * ay)) + ((bx1 * cy1) - (cx1 * by1))) + ((cx1 * ay) - (ax * cy1))) > 0);
HXDLIN( 101)			if (!(adjustWinding)) {
HXLINE( 101)				Float bx_ = bx1;
HXDLIN( 101)				Float by_ = by1;
HXLINE(  26)				bx1 = cx1;
HXLINE(  27)				by1 = cy1;
HXLINE(  28)				cx1 = bx_;
HXLINE(  29)				cy1 = by_;
            			}
HXLINE( 101)			Float s0 = ((ay * cx1) - (ax * cy1));
HXDLIN( 101)			Float sx = (cy1 - ay);
HXDLIN( 101)			Float sy = (ax - cx1);
HXDLIN( 101)			Float t0 = ((ax * by1) - (ay * bx1));
HXDLIN( 101)			Float tx = (ay - by1);
HXDLIN( 101)			Float ty = (bx1 - ax);
HXDLIN( 101)			Float A = ((((-(by1) * cx1) + (ay * (-(bx1) + cx1))) + (ax * (by1 - cy1))) + (bx1 * cy1));
HXDLIN( 101)			::pixelimage::iter::IntIterStart xIter3;
HXDLIN( 101)			if ((ax > bx1)) {
HXLINE( 101)				if ((ax > cx1)) {
HXLINE( 101)					int min;
HXDLIN( 101)					if ((bx1 > cx1)) {
HXLINE( 101)						min = ::Math_obj::floor(cx1);
            					}
            					else {
HXLINE( 101)						min = ::Math_obj::floor(bx1);
            					}
HXDLIN( 101)					int ii_min = min;
HXDLIN( 101)					int ii_max = ::Math_obj::ceil(ax);
HXDLIN( 101)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 101)					xIter3 = this1;
            				}
            				else {
HXLINE( 101)					int ii_min = ::Math_obj::floor(bx1);
HXDLIN( 101)					int ii_max = ::Math_obj::ceil(cx1);
HXDLIN( 101)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 101)					xIter3 = this1;
            				}
            			}
            			else {
HXLINE( 101)				if ((bx1 > cx1)) {
HXLINE( 101)					int min;
HXDLIN( 101)					if ((ax > cx1)) {
HXLINE( 101)						min = ::Math_obj::floor(cx1);
            					}
            					else {
HXLINE( 101)						min = ::Math_obj::ceil(ax);
            					}
HXDLIN( 101)					int ii_min = min;
HXDLIN( 101)					int ii_max = ::Math_obj::ceil(bx1);
HXDLIN( 101)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 101)					xIter3 = this1;
            				}
            				else {
HXLINE( 101)					int ii_min = ::Math_obj::floor(ax);
HXDLIN( 101)					int ii_max = ::Math_obj::ceil(cx1);
HXDLIN( 101)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 101)					xIter3 = this1;
            				}
            			}
HXDLIN( 101)			::pixelimage::iter::IntIterStart yIter3;
HXDLIN( 101)			if ((ay > by1)) {
HXLINE( 101)				if ((ay > cy1)) {
HXLINE( 101)					int min;
HXDLIN( 101)					if ((by1 > cy1)) {
HXLINE( 101)						min = ::Math_obj::floor(cy1);
            					}
            					else {
HXLINE( 101)						min = ::Math_obj::floor(by1);
            					}
HXDLIN( 101)					int ii_min = min;
HXDLIN( 101)					int ii_max = ::Math_obj::ceil(ay);
HXDLIN( 101)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 101)					yIter3 = this1;
            				}
            				else {
HXLINE( 101)					int ii_min = ::Math_obj::floor(by1);
HXDLIN( 101)					int ii_max = ::Math_obj::ceil(cy1);
HXDLIN( 101)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 101)					yIter3 = this1;
            				}
            			}
            			else {
HXLINE( 101)				if ((by1 > cy1)) {
HXLINE( 101)					int min;
HXDLIN( 101)					if ((ay > cy1)) {
HXLINE( 101)						min = ::Math_obj::floor(cy1);
            					}
            					else {
HXLINE( 101)						min = ::Math_obj::ceil(ay);
            					}
HXDLIN( 101)					int ii_min = min;
HXDLIN( 101)					int ii_max = ::Math_obj::ceil(by1);
HXDLIN( 101)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 101)					yIter3 = this1;
            				}
            				else {
HXLINE( 101)					int ii_min = ::Math_obj::floor(ay);
HXDLIN( 101)					int ii_max = ::Math_obj::ceil(cy1);
HXDLIN( 101)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 101)					yIter3 = this1;
            				}
            			}
HXDLIN( 101)			::pixelimage::ImageStruct undoImage = null();
HXDLIN( 101)			if (hasUndo) {
HXLINE( 101)				int w = ((xIter3->max - xIter3->start) + 1);
HXDLIN( 101)				int h = ((yIter3->max - yIter3->start) + 1);
HXDLIN( 101)				int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN( 101)				::haxe::io::ArrayBufferViewImpl this2 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 101)				::haxe::io::ArrayBufferViewImpl this3 = this2;
HXDLIN( 101)				::pixelimage::ImageStruct this4 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this3);
HXDLIN( 101)				undoImage = this4;
HXDLIN( 101)				{
HXLINE( 101)					int rectLeft = xIter3->start;
HXDLIN( 101)					int rectTop = yIter3->start;
HXDLIN( 101)					int rectRight = xIter3->max;
HXDLIN( 101)					bool forceClear = false;
HXDLIN( 101)					{
HXLINE( 101)						int _g = rectTop;
HXDLIN( 101)						int _g1 = yIter3->max;
HXDLIN( 101)						while((_g < _g1)){
HXLINE( 101)							_g = (_g + 1);
HXDLIN( 101)							int dy = (_g - 1);
HXDLIN( 101)							{
HXLINE( 101)								int _g1 = rectLeft;
HXDLIN( 101)								int _g2 = rectRight;
HXDLIN( 101)								while((_g1 < _g2)){
HXLINE( 101)									_g1 = (_g1 + 1);
HXDLIN( 101)									int dx = (_g1 - 1);
HXDLIN( 101)									::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 101)									int index;
HXDLIN( 101)									if (this1->useVirtualPos) {
HXLINE( 101)										index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            									}
            									else {
HXLINE( 101)										index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            									}
HXDLIN( 101)									::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 101)									int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 101)									int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 101)									int col;
HXDLIN( 101)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 101)										col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXLINE( 101)										col = c;
            									}
HXDLIN( 101)									bool _hx_tmp;
HXDLIN( 101)									if (this1->useMask) {
HXLINE( 101)										_hx_tmp = ::hx::IsNotNull( this1->mask );
            									}
            									else {
HXLINE( 101)										_hx_tmp = false;
            									}
HXDLIN( 101)									if (_hx_tmp) {
HXLINE( 101)										::pixelimage::ImageStruct this2 = this1->mask;
HXDLIN( 101)										::haxe::io::ArrayBufferViewImpl this3 = this2->image;
HXDLIN( 101)										int index;
HXDLIN( 101)										if (this2->useVirtualPos) {
HXLINE( 101)											index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this2->virtualY) * ( (Float)(this2->width) )) + dx) - this2->virtualX));
            										}
            										else {
HXLINE( 101)											index = ::Std_obj::_hx_int(( (Float)(((dy * this2->width) + dx)) ));
            										}
HXDLIN( 101)										::haxe::io::Bytes _this = this3->bytes;
HXDLIN( 101)										int pos = ((index << 2) + this3->byteOffset);
HXDLIN( 101)										int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 101)										int v;
HXDLIN( 101)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 101)											v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            										}
            										else {
HXLINE( 101)											v = c;
            										}
HXDLIN( 101)										int this4 = v;
HXDLIN( 101)										int maskPixel = this4;
HXDLIN( 101)										int this5 = col;
HXDLIN( 101)										int this6 = this5;
HXDLIN( 101)										if ((maskPixel == 0)) {
HXLINE( 101)											int this1 = this6;
HXDLIN( 101)											col = this1;
            										}
            										else {
HXLINE( 101)											Float m0;
HXDLIN( 101)											int this1 = ((maskPixel >> 24) & 255);
HXDLIN( 101)											if ((this1 == 0)) {
HXLINE( 101)												m0 = ((Float)0.);
            											}
            											else {
HXLINE( 101)												m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            											}
HXDLIN( 101)											Float m1;
HXDLIN( 101)											int this2 = ((maskPixel >> 16) & 255);
HXDLIN( 101)											if ((this2 == 0)) {
HXLINE( 101)												m1 = ((Float)0.);
            											}
            											else {
HXLINE( 101)												m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            											}
HXDLIN( 101)											Float m2;
HXDLIN( 101)											int this3 = ((maskPixel >> 8) & 255);
HXDLIN( 101)											if ((this3 == 0)) {
HXLINE( 101)												m2 = ((Float)0.);
            											}
            											else {
HXLINE( 101)												m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            											}
HXDLIN( 101)											Float m3;
HXDLIN( 101)											int this4 = (maskPixel & 255);
HXDLIN( 101)											if ((this4 == 0)) {
HXLINE( 101)												m3 = ((Float)0.);
            											}
            											else {
HXLINE( 101)												m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            											}
HXDLIN( 101)											int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this6 >> 24) & 255)) )));
HXDLIN( 101)											int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this6 >> 16) & 255)) )));
HXDLIN( 101)											int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this6 >> 8) & 255)) )));
HXDLIN( 101)											int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this6 & 255)) )));
HXDLIN( 101)											col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN( 101)									if ((col != 0)) {
HXLINE( 101)										int x = (dx - rectLeft);
HXDLIN( 101)										int y = (dy - rectTop);
HXDLIN( 101)										int this1 = col;
HXDLIN( 101)										int c = this1;
HXDLIN( 101)										bool _hx_tmp;
HXDLIN( 101)										if ((((c >> 24) & 255) < 254)) {
HXLINE( 101)											_hx_tmp = undoImage->transparent;
            										}
            										else {
HXLINE( 101)											_hx_tmp = false;
            										}
HXDLIN( 101)										if (_hx_tmp) {
HXLINE( 101)											int location;
HXDLIN( 101)											if (undoImage->useVirtualPos) {
HXLINE( 101)												location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            											}
            											else {
HXLINE( 101)												location = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            											}
HXDLIN( 101)											::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN( 101)											::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 101)											int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 101)											int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 101)											int this3 = this2;
HXDLIN( 101)											int this4;
HXDLIN( 101)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 101)												this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            											}
            											else {
HXLINE( 101)												this4 = this3;
            											}
HXDLIN( 101)											Float a1;
HXDLIN( 101)											int this5 = ((this4 >> 24) & 255);
HXDLIN( 101)											if ((this5 == 0)) {
HXLINE( 101)												a1 = ((Float)0.);
            											}
            											else {
HXLINE( 101)												a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            											}
HXDLIN( 101)											Float r1;
HXDLIN( 101)											int this6 = ((this4 >> 16) & 255);
HXDLIN( 101)											if ((this6 == 0)) {
HXLINE( 101)												r1 = ((Float)0.);
            											}
            											else {
HXLINE( 101)												r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            											}
HXDLIN( 101)											Float g1;
HXDLIN( 101)											int this7 = ((this4 >> 8) & 255);
HXDLIN( 101)											if ((this7 == 0)) {
HXLINE( 101)												g1 = ((Float)0.);
            											}
            											else {
HXLINE( 101)												g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            											}
HXDLIN( 101)											Float b1;
HXDLIN( 101)											int this8 = (this4 & 255);
HXDLIN( 101)											if ((this8 == 0)) {
HXLINE( 101)												b1 = ((Float)0.);
            											}
            											else {
HXLINE( 101)												b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            											}
HXDLIN( 101)											Float a2;
HXDLIN( 101)											int this9 = ((col >> 24) & 255);
HXDLIN( 101)											if ((this9 == 0)) {
HXLINE( 101)												a2 = ((Float)0.);
            											}
            											else {
HXLINE( 101)												a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            											}
HXDLIN( 101)											Float r2;
HXDLIN( 101)											int this10 = ((col >> 16) & 255);
HXDLIN( 101)											if ((this10 == 0)) {
HXLINE( 101)												r2 = ((Float)0.);
            											}
            											else {
HXLINE( 101)												r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            											}
HXDLIN( 101)											Float g2;
HXDLIN( 101)											int this11 = ((col >> 8) & 255);
HXDLIN( 101)											if ((this11 == 0)) {
HXLINE( 101)												g2 = ((Float)0.);
            											}
            											else {
HXLINE( 101)												g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            											}
HXDLIN( 101)											Float b2;
HXDLIN( 101)											int this12 = (col & 255);
HXDLIN( 101)											if ((this12 == 0)) {
HXLINE( 101)												b2 = ((Float)0.);
            											}
            											else {
HXLINE( 101)												b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            											}
HXDLIN( 101)											Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 101)											int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 101)											int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 101)											int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 101)											int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 101)											int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 101)											{
HXLINE( 101)												::haxe::io::ArrayBufferViewImpl this13 = undoImage->image;
HXDLIN( 101)												int value;
HXDLIN( 101)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 101)													value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            												}
            												else {
HXLINE( 101)													value = blended;
            												}
HXDLIN( 101)												bool _hx_tmp;
HXDLIN( 101)												if ((location >= 0)) {
HXLINE( 101)													_hx_tmp = (location < (this13->byteLength >> 2));
            												}
            												else {
HXLINE( 101)													_hx_tmp = false;
            												}
HXDLIN( 101)												if (_hx_tmp) {
HXLINE( 101)													::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 101)													int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 101)													_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 101)													_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 101)													_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 101)													_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            												}
            											}
            										}
            										else {
HXLINE( 101)											::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN( 101)											int index;
HXDLIN( 101)											if (undoImage->useVirtualPos) {
HXLINE( 101)												index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            											}
            											else {
HXLINE( 101)												index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            											}
HXDLIN( 101)											int value;
HXDLIN( 101)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 101)												value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            											}
            											else {
HXLINE( 101)												value = c;
            											}
HXDLIN( 101)											bool _hx_tmp;
HXDLIN( 101)											if ((index >= 0)) {
HXLINE( 101)												_hx_tmp = (index < (this1->byteLength >> 2));
            											}
            											else {
HXLINE( 101)												_hx_tmp = false;
            											}
HXDLIN( 101)											if (_hx_tmp) {
HXLINE( 101)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 101)												int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 101)												_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 101)												_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 101)												_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 101)												_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            											}
            										}
            									}
            									else {
HXLINE( 101)										if (forceClear) {
HXLINE( 101)											::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN( 101)											int x = (dx - rectLeft);
HXDLIN( 101)											int y = (dy - rectTop);
HXDLIN( 101)											int index;
HXDLIN( 101)											if (undoImage->useVirtualPos) {
HXLINE( 101)												index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            											}
            											else {
HXLINE( 101)												index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            											}
HXDLIN( 101)											bool _hx_tmp;
HXDLIN( 101)											if ((index >= 0)) {
HXLINE( 101)												_hx_tmp = (index < (this1->byteLength >> 2));
            											}
            											else {
HXLINE( 101)												_hx_tmp = false;
            											}
HXDLIN( 101)											if (_hx_tmp) {
HXLINE( 101)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 101)												int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 101)												_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 101)												_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 101)												_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 101)												_this->b[(pos + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN( 101)			bool found = false;
HXDLIN( 101)			Float s = ((Float)0.);
HXDLIN( 101)			Float t = ((Float)0.);
HXDLIN( 101)			Float sxx = ((Float)0.);
HXDLIN( 101)			Float txx = ((Float)0.);
HXDLIN( 101)			int _g_min = xIter3->start;
HXDLIN( 101)			int _g_max = xIter3->max;
HXDLIN( 101)			while((_g_min < _g_max)){
HXLINE( 101)				_g_min = (_g_min + 1);
HXDLIN( 101)				int x = (_g_min - 1);
HXLINE(  61)				sxx = (sx * ( (Float)(x) ));
HXLINE(  62)				txx = (tx * ( (Float)(x) ));
HXLINE(  63)				found = false;
HXLINE( 101)				{
HXLINE( 101)					int _g_min1 = yIter3->start;
HXDLIN( 101)					int _g_max = yIter3->max;
HXDLIN( 101)					while((_g_min1 < _g_max)){
HXLINE( 101)						_g_min1 = (_g_min1 + 1);
HXDLIN( 101)						int y = (_g_min1 - 1);
HXLINE(  65)						s = ((s0 + sxx) + (sy * ( (Float)(y) )));
HXLINE(  66)						t = ((t0 + txx) + (ty * ( (Float)(y) )));
HXLINE( 101)						bool _hx_tmp;
HXDLIN( 101)						if (!((s <= 0))) {
HXLINE( 101)							_hx_tmp = (t <= 0);
            						}
            						else {
HXLINE( 101)							_hx_tmp = true;
            						}
HXDLIN( 101)						if (_hx_tmp) {
HXLINE( 101)							if (found) {
HXLINE( 101)								goto _hx_goto_17;
            							}
            						}
            						else {
HXLINE( 101)							if (((s + t) < A)) {
HXLINE( 101)								{
HXLINE( 101)									int this2 = color;
HXDLIN( 101)									int c = this2;
HXDLIN( 101)									bool _hx_tmp;
HXDLIN( 101)									if ((((c >> 24) & 255) < 254)) {
HXLINE( 101)										_hx_tmp = this1->transparent;
            									}
            									else {
HXLINE( 101)										_hx_tmp = false;
            									}
HXDLIN( 101)									if (_hx_tmp) {
HXLINE( 101)										int location;
HXDLIN( 101)										if (this1->useVirtualPos) {
HXLINE( 101)											location = ::Std_obj::_hx_int(((((( (Float)(y) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            										}
            										else {
HXLINE( 101)											location = ::Std_obj::_hx_int(( (Float)(((y * this1->width) + x)) ));
            										}
HXDLIN( 101)										::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 101)										::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 101)										int pos = ((location << 2) + this2->byteOffset);
HXDLIN( 101)										int this3 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 101)										int this4 = this3;
HXDLIN( 101)										int this5;
HXDLIN( 101)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 101)											this5 = ((((((this4 >> 24) & 255) << 24) | ((this4 & 255) << 16)) | (((this4 >> 8) & 255) << 8)) | ((this4 >> 16) & 255));
            										}
            										else {
HXLINE( 101)											this5 = this4;
            										}
HXDLIN( 101)										Float a1;
HXDLIN( 101)										int this6 = ((this5 >> 24) & 255);
HXDLIN( 101)										if ((this6 == 0)) {
HXLINE( 101)											a1 = ((Float)0.);
            										}
            										else {
HXLINE( 101)											a1 = (( (Float)(this6) ) / ( (Float)(255) ));
            										}
HXDLIN( 101)										Float r1;
HXDLIN( 101)										int this7 = ((this5 >> 16) & 255);
HXDLIN( 101)										if ((this7 == 0)) {
HXLINE( 101)											r1 = ((Float)0.);
            										}
            										else {
HXLINE( 101)											r1 = (( (Float)(this7) ) / ( (Float)(255) ));
            										}
HXDLIN( 101)										Float g1;
HXDLIN( 101)										int this8 = ((this5 >> 8) & 255);
HXDLIN( 101)										if ((this8 == 0)) {
HXLINE( 101)											g1 = ((Float)0.);
            										}
            										else {
HXLINE( 101)											g1 = (( (Float)(this8) ) / ( (Float)(255) ));
            										}
HXDLIN( 101)										Float b1;
HXDLIN( 101)										int this9 = (this5 & 255);
HXDLIN( 101)										if ((this9 == 0)) {
HXLINE( 101)											b1 = ((Float)0.);
            										}
            										else {
HXLINE( 101)											b1 = (( (Float)(this9) ) / ( (Float)(255) ));
            										}
HXDLIN( 101)										Float a2;
HXDLIN( 101)										int this10 = ((color >> 24) & 255);
HXDLIN( 101)										if ((this10 == 0)) {
HXLINE( 101)											a2 = ((Float)0.);
            										}
            										else {
HXLINE( 101)											a2 = (( (Float)(this10) ) / ( (Float)(255) ));
            										}
HXDLIN( 101)										Float r2;
HXDLIN( 101)										int this11 = ((color >> 16) & 255);
HXDLIN( 101)										if ((this11 == 0)) {
HXLINE( 101)											r2 = ((Float)0.);
            										}
            										else {
HXLINE( 101)											r2 = (( (Float)(this11) ) / ( (Float)(255) ));
            										}
HXDLIN( 101)										Float g2;
HXDLIN( 101)										int this12 = ((color >> 8) & 255);
HXDLIN( 101)										if ((this12 == 0)) {
HXLINE( 101)											g2 = ((Float)0.);
            										}
            										else {
HXLINE( 101)											g2 = (( (Float)(this12) ) / ( (Float)(255) ));
            										}
HXDLIN( 101)										Float b2;
HXDLIN( 101)										int this13 = (color & 255);
HXDLIN( 101)										if ((this13 == 0)) {
HXLINE( 101)											b2 = ((Float)0.);
            										}
            										else {
HXLINE( 101)											b2 = (( (Float)(this13) ) / ( (Float)(255) ));
            										}
HXDLIN( 101)										Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 101)										int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 101)										int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 101)										int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 101)										int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 101)										int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 101)										{
HXLINE( 101)											::haxe::io::ArrayBufferViewImpl this14 = this1->image;
HXDLIN( 101)											int value;
HXDLIN( 101)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 101)												value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            											}
            											else {
HXLINE( 101)												value = blended;
            											}
HXDLIN( 101)											bool _hx_tmp;
HXDLIN( 101)											if ((location >= 0)) {
HXLINE( 101)												_hx_tmp = (location < (this14->byteLength >> 2));
            											}
            											else {
HXLINE( 101)												_hx_tmp = false;
            											}
HXDLIN( 101)											if (_hx_tmp) {
HXLINE( 101)												::haxe::io::Bytes _this = this14->bytes;
HXDLIN( 101)												int pos = ((location << 2) + this14->byteOffset);
HXDLIN( 101)												_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 101)												_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 101)												_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 101)												_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            											}
            										}
            									}
            									else {
HXLINE( 101)										::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 101)										int index;
HXDLIN( 101)										if (this1->useVirtualPos) {
HXLINE( 101)											index = ::Std_obj::_hx_int(((((( (Float)(y) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            										}
            										else {
HXLINE( 101)											index = ::Std_obj::_hx_int(( (Float)(((y * this1->width) + x)) ));
            										}
HXDLIN( 101)										int value;
HXDLIN( 101)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 101)											value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            										}
            										else {
HXLINE( 101)											value = c;
            										}
HXDLIN( 101)										bool _hx_tmp;
HXDLIN( 101)										if ((index >= 0)) {
HXLINE( 101)											_hx_tmp = (index < (this2->byteLength >> 2));
            										}
            										else {
HXLINE( 101)											_hx_tmp = false;
            										}
HXDLIN( 101)										if (_hx_tmp) {
HXLINE( 101)											::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 101)											int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 101)											_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 101)											_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 101)											_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 101)											_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            										}
            									}
            								}
HXLINE(  74)								found = true;
            							}
            							else {
HXLINE( 101)								if (found) {
HXLINE( 101)									goto _hx_goto_17;
            								}
            							}
            						}
            					}
            					_hx_goto_17:;
            				}
            			}
HXDLIN( 101)			::pixelimage::iter::IntIterStart v_yIter3;
HXDLIN( 101)			::pixelimage::iter::IntIterStart v_xIter3;
HXDLIN( 101)			int v_undoY;
HXDLIN( 101)			int v_undoX;
HXDLIN( 101)			Float v_ty;
HXDLIN( 101)			Float v_tx;
HXDLIN( 101)			Float v_t0;
HXDLIN( 101)			Float v_sy;
HXDLIN( 101)			Float v_sx;
HXDLIN( 101)			Float v_s0;
HXDLIN( 101)			Float v_A;
HXDLIN( 101)			Float ax1 = ax;
HXDLIN( 101)			Float ay1 = ay;
HXDLIN( 101)			Float bx2 = bx1;
HXDLIN( 101)			Float by2 = by1;
HXDLIN( 101)			Float cx2 = cx1;
HXDLIN( 101)			Float cy2 = cy1;
HXDLIN( 101)			::pixelimage::ImageStruct v_undoImage = null();
HXDLIN( 101)			bool adjustWinding1 = (((((ax1 * by2) - (bx2 * ay1)) + ((bx2 * cy2) - (cx2 * by2))) + ((cx2 * ay1) - (ax1 * cy2))) > 0);
HXDLIN( 101)			if (!(adjustWinding1)) {
HXLINE( 101)				Float bx_ = bx2;
HXDLIN( 101)				Float by_ = by2;
HXLINE(  35)				bx2 = cx2;
HXLINE(  36)				by2 = cy2;
HXLINE(  37)				cx2 = bx_;
HXLINE(  38)				cy2 = by_;
            			}
HXLINE( 101)			Float v_ax = ax1;
HXDLIN( 101)			Float v_ay = ay1;
HXDLIN( 101)			Float v_bx = bx2;
HXDLIN( 101)			Float v_by = by2;
HXDLIN( 101)			Float v_cx = cx2;
HXDLIN( 101)			Float v_cy = cy2;
HXDLIN( 101)			bool v_preCalculated = true;
HXDLIN( 101)			{
HXLINE( 101)				v_s0 = ((v_ay * v_cx) - (v_ax * v_cy));
HXDLIN( 101)				v_sx = (v_cy - v_ay);
HXDLIN( 101)				v_sy = (v_ax - v_cx);
HXDLIN( 101)				v_t0 = ((v_ax * v_by) - (v_ay * v_bx));
HXDLIN( 101)				v_tx = (v_ay - v_by);
HXDLIN( 101)				v_ty = (v_bx - v_ax);
HXDLIN( 101)				v_A = ((((-(v_by) * v_cx) + (v_ay * (-(v_bx) + v_cx))) + (v_ax * (v_by - v_cy))) + (v_bx * v_cy));
HXDLIN( 101)				Float a1 = v_ax;
HXDLIN( 101)				Float b = v_bx;
HXDLIN( 101)				Float c = v_cx;
HXDLIN( 101)				if ((a1 > b)) {
HXLINE( 101)					if ((a1 > c)) {
HXLINE( 101)						int min;
HXDLIN( 101)						if ((b > c)) {
HXLINE( 101)							min = ::Math_obj::floor(c);
            						}
            						else {
HXLINE( 101)							min = ::Math_obj::floor(b);
            						}
HXDLIN( 101)						int ii_min = min;
HXDLIN( 101)						int ii_max = ::Math_obj::ceil(a1);
HXDLIN( 101)						::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 101)						v_xIter3 = this1;
            					}
            					else {
HXLINE( 101)						int ii_min = ::Math_obj::floor(b);
HXDLIN( 101)						int ii_max = ::Math_obj::ceil(c);
HXDLIN( 101)						::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 101)						v_xIter3 = this1;
            					}
            				}
            				else {
HXLINE( 101)					if ((b > c)) {
HXLINE( 101)						int min;
HXDLIN( 101)						if ((a1 > c)) {
HXLINE( 101)							min = ::Math_obj::floor(c);
            						}
            						else {
HXLINE( 101)							min = ::Math_obj::ceil(a1);
            						}
HXDLIN( 101)						int ii_min = min;
HXDLIN( 101)						int ii_max = ::Math_obj::ceil(b);
HXDLIN( 101)						::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 101)						v_xIter3 = this1;
            					}
            					else {
HXLINE( 101)						int ii_min = ::Math_obj::floor(a1);
HXDLIN( 101)						int ii_max = ::Math_obj::ceil(c);
HXDLIN( 101)						::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 101)						v_xIter3 = this1;
            					}
            				}
HXDLIN( 101)				Float a2 = v_ay;
HXDLIN( 101)				Float b1 = v_by;
HXDLIN( 101)				Float c1 = v_cy;
HXDLIN( 101)				if ((a2 > b1)) {
HXLINE( 101)					if ((a2 > c1)) {
HXLINE( 101)						int min;
HXDLIN( 101)						if ((b1 > c1)) {
HXLINE( 101)							min = ::Math_obj::floor(c1);
            						}
            						else {
HXLINE( 101)							min = ::Math_obj::floor(b1);
            						}
HXDLIN( 101)						int ii_min = min;
HXDLIN( 101)						int ii_max = ::Math_obj::ceil(a2);
HXDLIN( 101)						::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 101)						v_yIter3 = this1;
            					}
            					else {
HXLINE( 101)						int ii_min = ::Math_obj::floor(b1);
HXDLIN( 101)						int ii_max = ::Math_obj::ceil(c1);
HXDLIN( 101)						::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 101)						v_yIter3 = this1;
            					}
            				}
            				else {
HXLINE( 101)					if ((b1 > c1)) {
HXLINE( 101)						int min;
HXDLIN( 101)						if ((a2 > c1)) {
HXLINE( 101)							min = ::Math_obj::floor(c1);
            						}
            						else {
HXLINE( 101)							min = ::Math_obj::ceil(a2);
            						}
HXDLIN( 101)						int ii_min = min;
HXDLIN( 101)						int ii_max = ::Math_obj::ceil(b1);
HXDLIN( 101)						::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 101)						v_yIter3 = this1;
            					}
            					else {
HXLINE( 101)						int ii_min = ::Math_obj::floor(a2);
HXDLIN( 101)						int ii_max = ::Math_obj::ceil(c1);
HXDLIN( 101)						::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 101)						v_yIter3 = this1;
            					}
            				}
            			}
HXDLIN( 101)			if (hasUndo) {
HXLINE( 101)				v_undoImage = undoImage;
HXDLIN( 101)				v_undoX = xIter3->start;
HXDLIN( 101)				v_undoY = yIter3->start;
            			}
HXDLIN( 101)			Float bx3 = cx;
HXDLIN( 101)			Float by3 = cy;
HXDLIN( 101)			Float cx3 = dx;
HXDLIN( 101)			Float cy3 = dy;
HXDLIN( 101)			bool hasUndo1 = false;
HXDLIN( 101)			bool adjustWinding2 = (((((bx * by3) - (bx3 * by)) + ((bx3 * cy3) - (cx3 * by3))) + ((cx3 * by) - (bx * cy3))) > 0);
HXDLIN( 101)			if (!(adjustWinding2)) {
HXLINE( 101)				Float bx_ = bx3;
HXDLIN( 101)				Float by_ = by3;
HXLINE(  26)				bx3 = cx3;
HXLINE(  27)				by3 = cy3;
HXLINE(  28)				cx3 = bx_;
HXLINE(  29)				cy3 = by_;
            			}
HXLINE( 101)			Float s01 = ((by * cx3) - (bx * cy3));
HXDLIN( 101)			Float sx1 = (cy3 - by);
HXDLIN( 101)			Float sy1 = (bx - cx3);
HXDLIN( 101)			Float t01 = ((bx * by3) - (by * bx3));
HXDLIN( 101)			Float tx1 = (by - by3);
HXDLIN( 101)			Float ty1 = (bx3 - bx);
HXDLIN( 101)			Float A1 = ((((-(by3) * cx3) + (by * (-(bx3) + cx3))) + (bx * (by3 - cy3))) + (bx3 * cy3));
HXDLIN( 101)			::pixelimage::iter::IntIterStart xIter31;
HXDLIN( 101)			if ((bx > bx3)) {
HXLINE( 101)				if ((bx > cx3)) {
HXLINE( 101)					int min;
HXDLIN( 101)					if ((bx3 > cx3)) {
HXLINE( 101)						min = ::Math_obj::floor(cx3);
            					}
            					else {
HXLINE( 101)						min = ::Math_obj::floor(bx3);
            					}
HXDLIN( 101)					int ii_min = min;
HXDLIN( 101)					int ii_max = ::Math_obj::ceil(bx);
HXDLIN( 101)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 101)					xIter31 = this1;
            				}
            				else {
HXLINE( 101)					int ii_min = ::Math_obj::floor(bx3);
HXDLIN( 101)					int ii_max = ::Math_obj::ceil(cx3);
HXDLIN( 101)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 101)					xIter31 = this1;
            				}
            			}
            			else {
HXLINE( 101)				if ((bx3 > cx3)) {
HXLINE( 101)					int min;
HXDLIN( 101)					if ((bx > cx3)) {
HXLINE( 101)						min = ::Math_obj::floor(cx3);
            					}
            					else {
HXLINE( 101)						min = ::Math_obj::ceil(bx);
            					}
HXDLIN( 101)					int ii_min = min;
HXDLIN( 101)					int ii_max = ::Math_obj::ceil(bx3);
HXDLIN( 101)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 101)					xIter31 = this1;
            				}
            				else {
HXLINE( 101)					int ii_min = ::Math_obj::floor(bx);
HXDLIN( 101)					int ii_max = ::Math_obj::ceil(cx3);
HXDLIN( 101)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 101)					xIter31 = this1;
            				}
            			}
HXDLIN( 101)			::pixelimage::iter::IntIterStart yIter31;
HXDLIN( 101)			if ((by > by3)) {
HXLINE( 101)				if ((by > cy3)) {
HXLINE( 101)					int min;
HXDLIN( 101)					if ((by3 > cy3)) {
HXLINE( 101)						min = ::Math_obj::floor(cy3);
            					}
            					else {
HXLINE( 101)						min = ::Math_obj::floor(by3);
            					}
HXDLIN( 101)					int ii_min = min;
HXDLIN( 101)					int ii_max = ::Math_obj::ceil(by);
HXDLIN( 101)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 101)					yIter31 = this1;
            				}
            				else {
HXLINE( 101)					int ii_min = ::Math_obj::floor(by3);
HXDLIN( 101)					int ii_max = ::Math_obj::ceil(cy3);
HXDLIN( 101)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 101)					yIter31 = this1;
            				}
            			}
            			else {
HXLINE( 101)				if ((by3 > cy3)) {
HXLINE( 101)					int min;
HXDLIN( 101)					if ((by > cy3)) {
HXLINE( 101)						min = ::Math_obj::floor(cy3);
            					}
            					else {
HXLINE( 101)						min = ::Math_obj::ceil(by);
            					}
HXDLIN( 101)					int ii_min = min;
HXDLIN( 101)					int ii_max = ::Math_obj::ceil(by3);
HXDLIN( 101)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 101)					yIter31 = this1;
            				}
            				else {
HXLINE( 101)					int ii_min = ::Math_obj::floor(by);
HXDLIN( 101)					int ii_max = ::Math_obj::ceil(cy3);
HXDLIN( 101)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 101)					yIter31 = this1;
            				}
            			}
HXDLIN( 101)			::pixelimage::ImageStruct undoImage1 = null();
HXDLIN( 101)			if (hasUndo1) {
HXLINE( 101)				int w = ((xIter31->max - xIter31->start) + 1);
HXDLIN( 101)				int h = ((yIter31->max - yIter31->start) + 1);
HXDLIN( 101)				int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN( 101)				::haxe::io::ArrayBufferViewImpl this2 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 101)				::haxe::io::ArrayBufferViewImpl this3 = this2;
HXDLIN( 101)				::pixelimage::ImageStruct this4 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this3);
HXDLIN( 101)				undoImage1 = this4;
HXDLIN( 101)				{
HXLINE( 101)					int rectLeft = xIter31->start;
HXDLIN( 101)					int rectTop = yIter31->start;
HXDLIN( 101)					int rectRight = xIter31->max;
HXDLIN( 101)					bool forceClear = false;
HXDLIN( 101)					{
HXLINE( 101)						int _g = rectTop;
HXDLIN( 101)						int _g1 = yIter31->max;
HXDLIN( 101)						while((_g < _g1)){
HXLINE( 101)							_g = (_g + 1);
HXDLIN( 101)							int dy = (_g - 1);
HXDLIN( 101)							{
HXLINE( 101)								int _g1 = rectLeft;
HXDLIN( 101)								int _g2 = rectRight;
HXDLIN( 101)								while((_g1 < _g2)){
HXLINE( 101)									_g1 = (_g1 + 1);
HXDLIN( 101)									int dx = (_g1 - 1);
HXDLIN( 101)									::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 101)									int index;
HXDLIN( 101)									if (this1->useVirtualPos) {
HXLINE( 101)										index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            									}
            									else {
HXLINE( 101)										index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            									}
HXDLIN( 101)									::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 101)									int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 101)									int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 101)									int col;
HXDLIN( 101)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 101)										col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXLINE( 101)										col = c;
            									}
HXDLIN( 101)									bool _hx_tmp;
HXDLIN( 101)									if (this1->useMask) {
HXLINE( 101)										_hx_tmp = ::hx::IsNotNull( this1->mask );
            									}
            									else {
HXLINE( 101)										_hx_tmp = false;
            									}
HXDLIN( 101)									if (_hx_tmp) {
HXLINE( 101)										::pixelimage::ImageStruct this2 = this1->mask;
HXDLIN( 101)										::haxe::io::ArrayBufferViewImpl this3 = this2->image;
HXDLIN( 101)										int index;
HXDLIN( 101)										if (this2->useVirtualPos) {
HXLINE( 101)											index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this2->virtualY) * ( (Float)(this2->width) )) + dx) - this2->virtualX));
            										}
            										else {
HXLINE( 101)											index = ::Std_obj::_hx_int(( (Float)(((dy * this2->width) + dx)) ));
            										}
HXDLIN( 101)										::haxe::io::Bytes _this = this3->bytes;
HXDLIN( 101)										int pos = ((index << 2) + this3->byteOffset);
HXDLIN( 101)										int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 101)										int v;
HXDLIN( 101)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 101)											v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            										}
            										else {
HXLINE( 101)											v = c;
            										}
HXDLIN( 101)										int this4 = v;
HXDLIN( 101)										int maskPixel = this4;
HXDLIN( 101)										int this5 = col;
HXDLIN( 101)										int this6 = this5;
HXDLIN( 101)										if ((maskPixel == 0)) {
HXLINE( 101)											int this1 = this6;
HXDLIN( 101)											col = this1;
            										}
            										else {
HXLINE( 101)											Float m0;
HXDLIN( 101)											int this1 = ((maskPixel >> 24) & 255);
HXDLIN( 101)											if ((this1 == 0)) {
HXLINE( 101)												m0 = ((Float)0.);
            											}
            											else {
HXLINE( 101)												m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            											}
HXDLIN( 101)											Float m1;
HXDLIN( 101)											int this2 = ((maskPixel >> 16) & 255);
HXDLIN( 101)											if ((this2 == 0)) {
HXLINE( 101)												m1 = ((Float)0.);
            											}
            											else {
HXLINE( 101)												m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            											}
HXDLIN( 101)											Float m2;
HXDLIN( 101)											int this3 = ((maskPixel >> 8) & 255);
HXDLIN( 101)											if ((this3 == 0)) {
HXLINE( 101)												m2 = ((Float)0.);
            											}
            											else {
HXLINE( 101)												m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            											}
HXDLIN( 101)											Float m3;
HXDLIN( 101)											int this4 = (maskPixel & 255);
HXDLIN( 101)											if ((this4 == 0)) {
HXLINE( 101)												m3 = ((Float)0.);
            											}
            											else {
HXLINE( 101)												m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            											}
HXDLIN( 101)											int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this6 >> 24) & 255)) )));
HXDLIN( 101)											int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this6 >> 16) & 255)) )));
HXDLIN( 101)											int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this6 >> 8) & 255)) )));
HXDLIN( 101)											int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this6 & 255)) )));
HXDLIN( 101)											col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN( 101)									if ((col != 0)) {
HXLINE( 101)										int x = (dx - rectLeft);
HXDLIN( 101)										int y = (dy - rectTop);
HXDLIN( 101)										int this1 = col;
HXDLIN( 101)										int c = this1;
HXDLIN( 101)										bool _hx_tmp;
HXDLIN( 101)										if ((((c >> 24) & 255) < 254)) {
HXLINE( 101)											_hx_tmp = undoImage1->transparent;
            										}
            										else {
HXLINE( 101)											_hx_tmp = false;
            										}
HXDLIN( 101)										if (_hx_tmp) {
HXLINE( 101)											int location;
HXDLIN( 101)											if (undoImage1->useVirtualPos) {
HXLINE( 101)												location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            											}
            											else {
HXLINE( 101)												location = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            											}
HXDLIN( 101)											::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN( 101)											::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 101)											int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 101)											int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 101)											int this3 = this2;
HXDLIN( 101)											int this4;
HXDLIN( 101)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 101)												this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            											}
            											else {
HXLINE( 101)												this4 = this3;
            											}
HXDLIN( 101)											Float a1;
HXDLIN( 101)											int this5 = ((this4 >> 24) & 255);
HXDLIN( 101)											if ((this5 == 0)) {
HXLINE( 101)												a1 = ((Float)0.);
            											}
            											else {
HXLINE( 101)												a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            											}
HXDLIN( 101)											Float r1;
HXDLIN( 101)											int this6 = ((this4 >> 16) & 255);
HXDLIN( 101)											if ((this6 == 0)) {
HXLINE( 101)												r1 = ((Float)0.);
            											}
            											else {
HXLINE( 101)												r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            											}
HXDLIN( 101)											Float g1;
HXDLIN( 101)											int this7 = ((this4 >> 8) & 255);
HXDLIN( 101)											if ((this7 == 0)) {
HXLINE( 101)												g1 = ((Float)0.);
            											}
            											else {
HXLINE( 101)												g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            											}
HXDLIN( 101)											Float b1;
HXDLIN( 101)											int this8 = (this4 & 255);
HXDLIN( 101)											if ((this8 == 0)) {
HXLINE( 101)												b1 = ((Float)0.);
            											}
            											else {
HXLINE( 101)												b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            											}
HXDLIN( 101)											Float a2;
HXDLIN( 101)											int this9 = ((col >> 24) & 255);
HXDLIN( 101)											if ((this9 == 0)) {
HXLINE( 101)												a2 = ((Float)0.);
            											}
            											else {
HXLINE( 101)												a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            											}
HXDLIN( 101)											Float r2;
HXDLIN( 101)											int this10 = ((col >> 16) & 255);
HXDLIN( 101)											if ((this10 == 0)) {
HXLINE( 101)												r2 = ((Float)0.);
            											}
            											else {
HXLINE( 101)												r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            											}
HXDLIN( 101)											Float g2;
HXDLIN( 101)											int this11 = ((col >> 8) & 255);
HXDLIN( 101)											if ((this11 == 0)) {
HXLINE( 101)												g2 = ((Float)0.);
            											}
            											else {
HXLINE( 101)												g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            											}
HXDLIN( 101)											Float b2;
HXDLIN( 101)											int this12 = (col & 255);
HXDLIN( 101)											if ((this12 == 0)) {
HXLINE( 101)												b2 = ((Float)0.);
            											}
            											else {
HXLINE( 101)												b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            											}
HXDLIN( 101)											Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 101)											int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 101)											int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 101)											int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 101)											int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 101)											int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 101)											{
HXLINE( 101)												::haxe::io::ArrayBufferViewImpl this13 = undoImage1->image;
HXDLIN( 101)												int value;
HXDLIN( 101)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 101)													value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            												}
            												else {
HXLINE( 101)													value = blended;
            												}
HXDLIN( 101)												bool _hx_tmp;
HXDLIN( 101)												if ((location >= 0)) {
HXLINE( 101)													_hx_tmp = (location < (this13->byteLength >> 2));
            												}
            												else {
HXLINE( 101)													_hx_tmp = false;
            												}
HXDLIN( 101)												if (_hx_tmp) {
HXLINE( 101)													::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 101)													int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 101)													_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 101)													_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 101)													_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 101)													_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            												}
            											}
            										}
            										else {
HXLINE( 101)											::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN( 101)											int index;
HXDLIN( 101)											if (undoImage1->useVirtualPos) {
HXLINE( 101)												index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            											}
            											else {
HXLINE( 101)												index = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            											}
HXDLIN( 101)											int value;
HXDLIN( 101)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 101)												value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            											}
            											else {
HXLINE( 101)												value = c;
            											}
HXDLIN( 101)											bool _hx_tmp;
HXDLIN( 101)											if ((index >= 0)) {
HXLINE( 101)												_hx_tmp = (index < (this1->byteLength >> 2));
            											}
            											else {
HXLINE( 101)												_hx_tmp = false;
            											}
HXDLIN( 101)											if (_hx_tmp) {
HXLINE( 101)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 101)												int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 101)												_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 101)												_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 101)												_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 101)												_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            											}
            										}
            									}
            									else {
HXLINE( 101)										if (forceClear) {
HXLINE( 101)											::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN( 101)											int x = (dx - rectLeft);
HXDLIN( 101)											int y = (dy - rectTop);
HXDLIN( 101)											int index;
HXDLIN( 101)											if (undoImage1->useVirtualPos) {
HXLINE( 101)												index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            											}
            											else {
HXLINE( 101)												index = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            											}
HXDLIN( 101)											bool _hx_tmp;
HXDLIN( 101)											if ((index >= 0)) {
HXLINE( 101)												_hx_tmp = (index < (this1->byteLength >> 2));
            											}
            											else {
HXLINE( 101)												_hx_tmp = false;
            											}
HXDLIN( 101)											if (_hx_tmp) {
HXLINE( 101)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 101)												int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 101)												_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 101)												_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 101)												_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 101)												_this->b[(pos + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN( 101)			bool found1 = false;
HXDLIN( 101)			Float s1 = ((Float)0.);
HXDLIN( 101)			Float t1 = ((Float)0.);
HXDLIN( 101)			Float sxx1 = ((Float)0.);
HXDLIN( 101)			Float txx1 = ((Float)0.);
HXDLIN( 101)			int _g_min1 = xIter31->start;
HXDLIN( 101)			int _g_max1 = xIter31->max;
HXDLIN( 101)			while((_g_min1 < _g_max1)){
HXLINE( 101)				_g_min1 = (_g_min1 + 1);
HXDLIN( 101)				int x = (_g_min1 - 1);
HXLINE(  61)				sxx1 = (sx1 * ( (Float)(x) ));
HXLINE(  62)				txx1 = (tx1 * ( (Float)(x) ));
HXLINE(  63)				found1 = false;
HXLINE( 101)				{
HXLINE( 101)					int _g_min = yIter31->start;
HXDLIN( 101)					int _g_max = yIter31->max;
HXDLIN( 101)					while((_g_min < _g_max)){
HXLINE( 101)						_g_min = (_g_min + 1);
HXDLIN( 101)						int y = (_g_min - 1);
HXLINE(  65)						s1 = ((s01 + sxx1) + (sy1 * ( (Float)(y) )));
HXLINE(  66)						t1 = ((t01 + txx1) + (ty1 * ( (Float)(y) )));
HXLINE( 101)						bool _hx_tmp;
HXDLIN( 101)						if (!((s1 <= 0))) {
HXLINE( 101)							_hx_tmp = (t1 <= 0);
            						}
            						else {
HXLINE( 101)							_hx_tmp = true;
            						}
HXDLIN( 101)						if (_hx_tmp) {
HXLINE( 101)							if (found1) {
HXLINE( 101)								goto _hx_goto_21;
            							}
            						}
            						else {
HXLINE( 101)							if (((s1 + t1) < A1)) {
HXLINE( 101)								{
HXLINE( 101)									int this2 = color;
HXDLIN( 101)									int c = this2;
HXDLIN( 101)									bool _hx_tmp;
HXDLIN( 101)									if ((((c >> 24) & 255) < 254)) {
HXLINE( 101)										_hx_tmp = this1->transparent;
            									}
            									else {
HXLINE( 101)										_hx_tmp = false;
            									}
HXDLIN( 101)									if (_hx_tmp) {
HXLINE( 101)										int location;
HXDLIN( 101)										if (this1->useVirtualPos) {
HXLINE( 101)											location = ::Std_obj::_hx_int(((((( (Float)(y) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            										}
            										else {
HXLINE( 101)											location = ::Std_obj::_hx_int(( (Float)(((y * this1->width) + x)) ));
            										}
HXDLIN( 101)										::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 101)										::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 101)										int pos = ((location << 2) + this2->byteOffset);
HXDLIN( 101)										int this3 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 101)										int this4 = this3;
HXDLIN( 101)										int this5;
HXDLIN( 101)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 101)											this5 = ((((((this4 >> 24) & 255) << 24) | ((this4 & 255) << 16)) | (((this4 >> 8) & 255) << 8)) | ((this4 >> 16) & 255));
            										}
            										else {
HXLINE( 101)											this5 = this4;
            										}
HXDLIN( 101)										Float a1;
HXDLIN( 101)										int this6 = ((this5 >> 24) & 255);
HXDLIN( 101)										if ((this6 == 0)) {
HXLINE( 101)											a1 = ((Float)0.);
            										}
            										else {
HXLINE( 101)											a1 = (( (Float)(this6) ) / ( (Float)(255) ));
            										}
HXDLIN( 101)										Float r1;
HXDLIN( 101)										int this7 = ((this5 >> 16) & 255);
HXDLIN( 101)										if ((this7 == 0)) {
HXLINE( 101)											r1 = ((Float)0.);
            										}
            										else {
HXLINE( 101)											r1 = (( (Float)(this7) ) / ( (Float)(255) ));
            										}
HXDLIN( 101)										Float g1;
HXDLIN( 101)										int this8 = ((this5 >> 8) & 255);
HXDLIN( 101)										if ((this8 == 0)) {
HXLINE( 101)											g1 = ((Float)0.);
            										}
            										else {
HXLINE( 101)											g1 = (( (Float)(this8) ) / ( (Float)(255) ));
            										}
HXDLIN( 101)										Float b1;
HXDLIN( 101)										int this9 = (this5 & 255);
HXDLIN( 101)										if ((this9 == 0)) {
HXLINE( 101)											b1 = ((Float)0.);
            										}
            										else {
HXLINE( 101)											b1 = (( (Float)(this9) ) / ( (Float)(255) ));
            										}
HXDLIN( 101)										Float a2;
HXDLIN( 101)										int this10 = ((color >> 24) & 255);
HXDLIN( 101)										if ((this10 == 0)) {
HXLINE( 101)											a2 = ((Float)0.);
            										}
            										else {
HXLINE( 101)											a2 = (( (Float)(this10) ) / ( (Float)(255) ));
            										}
HXDLIN( 101)										Float r2;
HXDLIN( 101)										int this11 = ((color >> 16) & 255);
HXDLIN( 101)										if ((this11 == 0)) {
HXLINE( 101)											r2 = ((Float)0.);
            										}
            										else {
HXLINE( 101)											r2 = (( (Float)(this11) ) / ( (Float)(255) ));
            										}
HXDLIN( 101)										Float g2;
HXDLIN( 101)										int this12 = ((color >> 8) & 255);
HXDLIN( 101)										if ((this12 == 0)) {
HXLINE( 101)											g2 = ((Float)0.);
            										}
            										else {
HXLINE( 101)											g2 = (( (Float)(this12) ) / ( (Float)(255) ));
            										}
HXDLIN( 101)										Float b2;
HXDLIN( 101)										int this13 = (color & 255);
HXDLIN( 101)										if ((this13 == 0)) {
HXLINE( 101)											b2 = ((Float)0.);
            										}
            										else {
HXLINE( 101)											b2 = (( (Float)(this13) ) / ( (Float)(255) ));
            										}
HXDLIN( 101)										Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 101)										int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 101)										int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 101)										int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 101)										int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 101)										int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 101)										{
HXLINE( 101)											::haxe::io::ArrayBufferViewImpl this14 = this1->image;
HXDLIN( 101)											int value;
HXDLIN( 101)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 101)												value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            											}
            											else {
HXLINE( 101)												value = blended;
            											}
HXDLIN( 101)											bool _hx_tmp;
HXDLIN( 101)											if ((location >= 0)) {
HXLINE( 101)												_hx_tmp = (location < (this14->byteLength >> 2));
            											}
            											else {
HXLINE( 101)												_hx_tmp = false;
            											}
HXDLIN( 101)											if (_hx_tmp) {
HXLINE( 101)												::haxe::io::Bytes _this = this14->bytes;
HXDLIN( 101)												int pos = ((location << 2) + this14->byteOffset);
HXDLIN( 101)												_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 101)												_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 101)												_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 101)												_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            											}
            										}
            									}
            									else {
HXLINE( 101)										::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 101)										int index;
HXDLIN( 101)										if (this1->useVirtualPos) {
HXLINE( 101)											index = ::Std_obj::_hx_int(((((( (Float)(y) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            										}
            										else {
HXLINE( 101)											index = ::Std_obj::_hx_int(( (Float)(((y * this1->width) + x)) ));
            										}
HXDLIN( 101)										int value;
HXDLIN( 101)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 101)											value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            										}
            										else {
HXLINE( 101)											value = c;
            										}
HXDLIN( 101)										bool _hx_tmp;
HXDLIN( 101)										if ((index >= 0)) {
HXLINE( 101)											_hx_tmp = (index < (this2->byteLength >> 2));
            										}
            										else {
HXLINE( 101)											_hx_tmp = false;
            										}
HXDLIN( 101)										if (_hx_tmp) {
HXLINE( 101)											::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 101)											int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 101)											_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 101)											_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 101)											_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 101)											_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            										}
            									}
            								}
HXLINE(  74)								found1 = true;
            							}
            							else {
HXLINE( 101)								if (found1) {
HXLINE( 101)									goto _hx_goto_21;
            								}
            							}
            						}
            					}
            					_hx_goto_21:;
            				}
            			}
HXDLIN( 101)			::pixelimage::iter::IntIterStart v_yIter31;
HXDLIN( 101)			::pixelimage::iter::IntIterStart v_xIter31;
HXDLIN( 101)			int v_undoY1;
HXDLIN( 101)			int v_undoX1;
HXDLIN( 101)			Float v_ty1;
HXDLIN( 101)			Float v_tx1;
HXDLIN( 101)			Float v_t01;
HXDLIN( 101)			Float v_sy1;
HXDLIN( 101)			Float v_sx1;
HXDLIN( 101)			Float v_s01;
HXDLIN( 101)			Float v_A1;
HXDLIN( 101)			Float ax2 = bx;
HXDLIN( 101)			Float ay2 = by;
HXDLIN( 101)			Float bx4 = bx3;
HXDLIN( 101)			Float by4 = by3;
HXDLIN( 101)			Float cx4 = cx3;
HXDLIN( 101)			Float cy4 = cy3;
HXDLIN( 101)			::pixelimage::ImageStruct v_undoImage1 = null();
HXDLIN( 101)			bool adjustWinding3 = (((((ax2 * by4) - (bx4 * ay2)) + ((bx4 * cy4) - (cx4 * by4))) + ((cx4 * ay2) - (ax2 * cy4))) > 0);
HXDLIN( 101)			if (!(adjustWinding3)) {
HXLINE( 101)				Float bx_ = bx4;
HXDLIN( 101)				Float by_ = by4;
HXLINE(  35)				bx4 = cx4;
HXLINE(  36)				by4 = cy4;
HXLINE(  37)				cx4 = bx_;
HXLINE(  38)				cy4 = by_;
            			}
HXLINE( 101)			Float v_ax1 = ax2;
HXDLIN( 101)			Float v_ay1 = ay2;
HXDLIN( 101)			Float v_bx1 = bx4;
HXDLIN( 101)			Float v_by1 = by4;
HXDLIN( 101)			Float v_cx1 = cx4;
HXDLIN( 101)			Float v_cy1 = cy4;
HXDLIN( 101)			bool v_preCalculated1 = true;
HXDLIN( 101)			{
HXLINE( 101)				v_s01 = ((v_ay1 * v_cx1) - (v_ax1 * v_cy1));
HXDLIN( 101)				v_sx1 = (v_cy1 - v_ay1);
HXDLIN( 101)				v_sy1 = (v_ax1 - v_cx1);
HXDLIN( 101)				v_t01 = ((v_ax1 * v_by1) - (v_ay1 * v_bx1));
HXDLIN( 101)				v_tx1 = (v_ay1 - v_by1);
HXDLIN( 101)				v_ty1 = (v_bx1 - v_ax1);
HXDLIN( 101)				v_A1 = ((((-(v_by1) * v_cx1) + (v_ay1 * (-(v_bx1) + v_cx1))) + (v_ax1 * (v_by1 - v_cy1))) + (v_bx1 * v_cy1));
HXDLIN( 101)				Float a3 = v_ax1;
HXDLIN( 101)				Float b2 = v_bx1;
HXDLIN( 101)				Float c2 = v_cx1;
HXDLIN( 101)				if ((a3 > b2)) {
HXLINE( 101)					if ((a3 > c2)) {
HXLINE( 101)						int min;
HXDLIN( 101)						if ((b2 > c2)) {
HXLINE( 101)							min = ::Math_obj::floor(c2);
            						}
            						else {
HXLINE( 101)							min = ::Math_obj::floor(b2);
            						}
HXDLIN( 101)						int ii_min = min;
HXDLIN( 101)						int ii_max = ::Math_obj::ceil(a3);
HXDLIN( 101)						::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 101)						v_xIter31 = this1;
            					}
            					else {
HXLINE( 101)						int ii_min = ::Math_obj::floor(b2);
HXDLIN( 101)						int ii_max = ::Math_obj::ceil(c2);
HXDLIN( 101)						::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 101)						v_xIter31 = this1;
            					}
            				}
            				else {
HXLINE( 101)					if ((b2 > c2)) {
HXLINE( 101)						int min;
HXDLIN( 101)						if ((a3 > c2)) {
HXLINE( 101)							min = ::Math_obj::floor(c2);
            						}
            						else {
HXLINE( 101)							min = ::Math_obj::ceil(a3);
            						}
HXDLIN( 101)						int ii_min = min;
HXDLIN( 101)						int ii_max = ::Math_obj::ceil(b2);
HXDLIN( 101)						::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 101)						v_xIter31 = this1;
            					}
            					else {
HXLINE( 101)						int ii_min = ::Math_obj::floor(a3);
HXDLIN( 101)						int ii_max = ::Math_obj::ceil(c2);
HXDLIN( 101)						::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 101)						v_xIter31 = this1;
            					}
            				}
HXDLIN( 101)				Float a4 = v_ay1;
HXDLIN( 101)				Float b3 = v_by1;
HXDLIN( 101)				Float c3 = v_cy1;
HXDLIN( 101)				if ((a4 > b3)) {
HXLINE( 101)					if ((a4 > c3)) {
HXLINE( 101)						int min;
HXDLIN( 101)						if ((b3 > c3)) {
HXLINE( 101)							min = ::Math_obj::floor(c3);
            						}
            						else {
HXLINE( 101)							min = ::Math_obj::floor(b3);
            						}
HXDLIN( 101)						int ii_min = min;
HXDLIN( 101)						int ii_max = ::Math_obj::ceil(a4);
HXDLIN( 101)						::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 101)						v_yIter31 = this1;
            					}
            					else {
HXLINE( 101)						int ii_min = ::Math_obj::floor(b3);
HXDLIN( 101)						int ii_max = ::Math_obj::ceil(c3);
HXDLIN( 101)						::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 101)						v_yIter31 = this1;
            					}
            				}
            				else {
HXLINE( 101)					if ((b3 > c3)) {
HXLINE( 101)						int min;
HXDLIN( 101)						if ((a4 > c3)) {
HXLINE( 101)							min = ::Math_obj::floor(c3);
            						}
            						else {
HXLINE( 101)							min = ::Math_obj::ceil(a4);
            						}
HXDLIN( 101)						int ii_min = min;
HXDLIN( 101)						int ii_max = ::Math_obj::ceil(b3);
HXDLIN( 101)						::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 101)						v_yIter31 = this1;
            					}
            					else {
HXLINE( 101)						int ii_min = ::Math_obj::floor(a4);
HXDLIN( 101)						int ii_max = ::Math_obj::ceil(c3);
HXDLIN( 101)						::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 101)						v_yIter31 = this1;
            					}
            				}
            			}
HXDLIN( 101)			if (hasUndo1) {
HXLINE( 101)				v_undoImage1 = undoImage1;
HXDLIN( 101)				v_undoX1 = xIter31->start;
HXDLIN( 101)				v_undoY1 = yIter31->start;
            			}
HXDLIN( 101)			::pixelimage::algo::HitQuad v = ::pixelimage::algo::HitQuad_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,dx,dy,true);
HXDLIN( 101)			this->info = v;
HXLINE( 104)			bool _hx_tmp;
HXDLIN( 104)			if (::hx::IsNotNull( this->info )) {
HXLINE( 104)				_hx_tmp = ::hx::IsNotNull( oldInfo );
            			}
            			else {
HXLINE( 104)				_hx_tmp = false;
            			}
HXDLIN( 104)			if (_hx_tmp) {
HXLINE( 105)				::pixelimage::ImageStruct this1 = this->temp;
HXDLIN( 105)				Float ax = ((( (Float)(oldInfo->__Field(HX_("bx",d6,55,00,00),::hx::paccDynamic)) ) * this->scaleX) + this->translateX);
HXDLIN( 105)				Float ay = ((( (Float)(oldInfo->__Field(HX_("by",d7,55,00,00),::hx::paccDynamic)) ) * this->scaleY) + this->translateY);
HXDLIN( 105)				Float bx = ((( (Float)(this->info->__Field(HX_("ax",f7,54,00,00),::hx::paccDynamic)) ) * this->scaleX) + this->translateX);
HXDLIN( 105)				Float by = ((( (Float)(this->info->__Field(HX_("ay",f8,54,00,00),::hx::paccDynamic)) ) * this->scaleY) + this->translateY);
HXDLIN( 105)				Float cx = ((( (Float)(this->info->__Field(HX_("dx",94,57,00,00),::hx::paccDynamic)) ) * this->scaleX) + this->translateX);
HXDLIN( 105)				Float cy = ((( (Float)(this->info->__Field(HX_("dy",95,57,00,00),::hx::paccDynamic)) ) * this->scaleY) + this->translateY);
HXDLIN( 105)				Float dx = ((( (Float)(oldInfo->__Field(HX_("cx",b5,56,00,00),::hx::paccDynamic)) ) * this->scaleX) + this->translateX);
HXDLIN( 105)				Float dy = ((( (Float)(oldInfo->__Field(HX_("cy",b6,56,00,00),::hx::paccDynamic)) ) * this->scaleY) + this->translateY);
HXDLIN( 105)				int color = this->strokeColor;
HXDLIN( 105)				{
HXLINE( 105)					Float bx1 = bx;
HXDLIN( 105)					Float by1 = by;
HXDLIN( 105)					Float cx1 = dx;
HXDLIN( 105)					Float cy1 = dy;
HXDLIN( 105)					bool hasUndo = false;
HXDLIN( 105)					bool adjustWinding = (((((ax * by1) - (bx1 * ay)) + ((bx1 * cy1) - (cx1 * by1))) + ((cx1 * ay) - (ax * cy1))) > 0);
HXDLIN( 105)					if (!(adjustWinding)) {
HXLINE( 105)						Float bx_ = bx1;
HXDLIN( 105)						Float by_ = by1;
HXLINE(  26)						bx1 = cx1;
HXLINE(  27)						by1 = cy1;
HXLINE(  28)						cx1 = bx_;
HXLINE(  29)						cy1 = by_;
            					}
HXLINE( 105)					Float s0 = ((ay * cx1) - (ax * cy1));
HXDLIN( 105)					Float sx = (cy1 - ay);
HXDLIN( 105)					Float sy = (ax - cx1);
HXDLIN( 105)					Float t0 = ((ax * by1) - (ay * bx1));
HXDLIN( 105)					Float tx = (ay - by1);
HXDLIN( 105)					Float ty = (bx1 - ax);
HXDLIN( 105)					Float A = ((((-(by1) * cx1) + (ay * (-(bx1) + cx1))) + (ax * (by1 - cy1))) + (bx1 * cy1));
HXDLIN( 105)					::pixelimage::iter::IntIterStart xIter3;
HXDLIN( 105)					if ((ax > bx1)) {
HXLINE( 105)						if ((ax > cx1)) {
HXLINE( 105)							int min;
HXDLIN( 105)							if ((bx1 > cx1)) {
HXLINE( 105)								min = ::Math_obj::floor(cx1);
            							}
            							else {
HXLINE( 105)								min = ::Math_obj::floor(bx1);
            							}
HXDLIN( 105)							int ii_min = min;
HXDLIN( 105)							int ii_max = ::Math_obj::ceil(ax);
HXDLIN( 105)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 105)							xIter3 = this1;
            						}
            						else {
HXLINE( 105)							int ii_min = ::Math_obj::floor(bx1);
HXDLIN( 105)							int ii_max = ::Math_obj::ceil(cx1);
HXDLIN( 105)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 105)							xIter3 = this1;
            						}
            					}
            					else {
HXLINE( 105)						if ((bx1 > cx1)) {
HXLINE( 105)							int min;
HXDLIN( 105)							if ((ax > cx1)) {
HXLINE( 105)								min = ::Math_obj::floor(cx1);
            							}
            							else {
HXLINE( 105)								min = ::Math_obj::ceil(ax);
            							}
HXDLIN( 105)							int ii_min = min;
HXDLIN( 105)							int ii_max = ::Math_obj::ceil(bx1);
HXDLIN( 105)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 105)							xIter3 = this1;
            						}
            						else {
HXLINE( 105)							int ii_min = ::Math_obj::floor(ax);
HXDLIN( 105)							int ii_max = ::Math_obj::ceil(cx1);
HXDLIN( 105)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 105)							xIter3 = this1;
            						}
            					}
HXDLIN( 105)					::pixelimage::iter::IntIterStart yIter3;
HXDLIN( 105)					if ((ay > by1)) {
HXLINE( 105)						if ((ay > cy1)) {
HXLINE( 105)							int min;
HXDLIN( 105)							if ((by1 > cy1)) {
HXLINE( 105)								min = ::Math_obj::floor(cy1);
            							}
            							else {
HXLINE( 105)								min = ::Math_obj::floor(by1);
            							}
HXDLIN( 105)							int ii_min = min;
HXDLIN( 105)							int ii_max = ::Math_obj::ceil(ay);
HXDLIN( 105)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 105)							yIter3 = this1;
            						}
            						else {
HXLINE( 105)							int ii_min = ::Math_obj::floor(by1);
HXDLIN( 105)							int ii_max = ::Math_obj::ceil(cy1);
HXDLIN( 105)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 105)							yIter3 = this1;
            						}
            					}
            					else {
HXLINE( 105)						if ((by1 > cy1)) {
HXLINE( 105)							int min;
HXDLIN( 105)							if ((ay > cy1)) {
HXLINE( 105)								min = ::Math_obj::floor(cy1);
            							}
            							else {
HXLINE( 105)								min = ::Math_obj::ceil(ay);
            							}
HXDLIN( 105)							int ii_min = min;
HXDLIN( 105)							int ii_max = ::Math_obj::ceil(by1);
HXDLIN( 105)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 105)							yIter3 = this1;
            						}
            						else {
HXLINE( 105)							int ii_min = ::Math_obj::floor(ay);
HXDLIN( 105)							int ii_max = ::Math_obj::ceil(cy1);
HXDLIN( 105)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 105)							yIter3 = this1;
            						}
            					}
HXDLIN( 105)					::pixelimage::ImageStruct undoImage = null();
HXDLIN( 105)					if (hasUndo) {
HXLINE( 105)						int w = ((xIter3->max - xIter3->start) + 1);
HXDLIN( 105)						int h = ((yIter3->max - yIter3->start) + 1);
HXDLIN( 105)						int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN( 105)						::haxe::io::ArrayBufferViewImpl this2 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 105)						::haxe::io::ArrayBufferViewImpl this3 = this2;
HXDLIN( 105)						::pixelimage::ImageStruct this4 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this3);
HXDLIN( 105)						undoImage = this4;
HXDLIN( 105)						{
HXLINE( 105)							int rectLeft = xIter3->start;
HXDLIN( 105)							int rectTop = yIter3->start;
HXDLIN( 105)							int rectRight = xIter3->max;
HXDLIN( 105)							bool forceClear = false;
HXDLIN( 105)							{
HXLINE( 105)								int _g = rectTop;
HXDLIN( 105)								int _g1 = yIter3->max;
HXDLIN( 105)								while((_g < _g1)){
HXLINE( 105)									_g = (_g + 1);
HXDLIN( 105)									int dy = (_g - 1);
HXDLIN( 105)									{
HXLINE( 105)										int _g1 = rectLeft;
HXDLIN( 105)										int _g2 = rectRight;
HXDLIN( 105)										while((_g1 < _g2)){
HXLINE( 105)											_g1 = (_g1 + 1);
HXDLIN( 105)											int dx = (_g1 - 1);
HXDLIN( 105)											::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 105)											int index;
HXDLIN( 105)											if (this1->useVirtualPos) {
HXLINE( 105)												index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            											}
            											else {
HXLINE( 105)												index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            											}
HXDLIN( 105)											::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 105)											int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 105)											int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 105)											int col;
HXDLIN( 105)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 105)												col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            											}
            											else {
HXLINE( 105)												col = c;
            											}
HXDLIN( 105)											bool _hx_tmp;
HXDLIN( 105)											if (this1->useMask) {
HXLINE( 105)												_hx_tmp = ::hx::IsNotNull( this1->mask );
            											}
            											else {
HXLINE( 105)												_hx_tmp = false;
            											}
HXDLIN( 105)											if (_hx_tmp) {
HXLINE( 105)												::pixelimage::ImageStruct this2 = this1->mask;
HXDLIN( 105)												::haxe::io::ArrayBufferViewImpl this3 = this2->image;
HXDLIN( 105)												int index;
HXDLIN( 105)												if (this2->useVirtualPos) {
HXLINE( 105)													index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this2->virtualY) * ( (Float)(this2->width) )) + dx) - this2->virtualX));
            												}
            												else {
HXLINE( 105)													index = ::Std_obj::_hx_int(( (Float)(((dy * this2->width) + dx)) ));
            												}
HXDLIN( 105)												::haxe::io::Bytes _this = this3->bytes;
HXDLIN( 105)												int pos = ((index << 2) + this3->byteOffset);
HXDLIN( 105)												int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 105)												int v;
HXDLIN( 105)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 105)													v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE( 105)													v = c;
            												}
HXDLIN( 105)												int this4 = v;
HXDLIN( 105)												int maskPixel = this4;
HXDLIN( 105)												int this5 = col;
HXDLIN( 105)												int this6 = this5;
HXDLIN( 105)												if ((maskPixel == 0)) {
HXLINE( 105)													int this1 = this6;
HXDLIN( 105)													col = this1;
            												}
            												else {
HXLINE( 105)													Float m0;
HXDLIN( 105)													int this1 = ((maskPixel >> 24) & 255);
HXDLIN( 105)													if ((this1 == 0)) {
HXLINE( 105)														m0 = ((Float)0.);
            													}
            													else {
HXLINE( 105)														m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            													}
HXDLIN( 105)													Float m1;
HXDLIN( 105)													int this2 = ((maskPixel >> 16) & 255);
HXDLIN( 105)													if ((this2 == 0)) {
HXLINE( 105)														m1 = ((Float)0.);
            													}
            													else {
HXLINE( 105)														m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            													}
HXDLIN( 105)													Float m2;
HXDLIN( 105)													int this3 = ((maskPixel >> 8) & 255);
HXDLIN( 105)													if ((this3 == 0)) {
HXLINE( 105)														m2 = ((Float)0.);
            													}
            													else {
HXLINE( 105)														m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            													}
HXDLIN( 105)													Float m3;
HXDLIN( 105)													int this4 = (maskPixel & 255);
HXDLIN( 105)													if ((this4 == 0)) {
HXLINE( 105)														m3 = ((Float)0.);
            													}
            													else {
HXLINE( 105)														m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            													}
HXDLIN( 105)													int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this6 >> 24) & 255)) )));
HXDLIN( 105)													int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this6 >> 16) & 255)) )));
HXDLIN( 105)													int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this6 >> 8) & 255)) )));
HXDLIN( 105)													int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this6 & 255)) )));
HXDLIN( 105)													col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            												}
            											}
HXDLIN( 105)											if ((col != 0)) {
HXLINE( 105)												int x = (dx - rectLeft);
HXDLIN( 105)												int y = (dy - rectTop);
HXDLIN( 105)												int this1 = col;
HXDLIN( 105)												int c = this1;
HXDLIN( 105)												bool _hx_tmp;
HXDLIN( 105)												if ((((c >> 24) & 255) < 254)) {
HXLINE( 105)													_hx_tmp = undoImage->transparent;
            												}
            												else {
HXLINE( 105)													_hx_tmp = false;
            												}
HXDLIN( 105)												if (_hx_tmp) {
HXLINE( 105)													int location;
HXDLIN( 105)													if (undoImage->useVirtualPos) {
HXLINE( 105)														location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            													}
            													else {
HXLINE( 105)														location = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            													}
HXDLIN( 105)													::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN( 105)													::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 105)													int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 105)													int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 105)													int this3 = this2;
HXDLIN( 105)													int this4;
HXDLIN( 105)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 105)														this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            													}
            													else {
HXLINE( 105)														this4 = this3;
            													}
HXDLIN( 105)													Float a1;
HXDLIN( 105)													int this5 = ((this4 >> 24) & 255);
HXDLIN( 105)													if ((this5 == 0)) {
HXLINE( 105)														a1 = ((Float)0.);
            													}
            													else {
HXLINE( 105)														a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            													}
HXDLIN( 105)													Float r1;
HXDLIN( 105)													int this6 = ((this4 >> 16) & 255);
HXDLIN( 105)													if ((this6 == 0)) {
HXLINE( 105)														r1 = ((Float)0.);
            													}
            													else {
HXLINE( 105)														r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            													}
HXDLIN( 105)													Float g1;
HXDLIN( 105)													int this7 = ((this4 >> 8) & 255);
HXDLIN( 105)													if ((this7 == 0)) {
HXLINE( 105)														g1 = ((Float)0.);
            													}
            													else {
HXLINE( 105)														g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            													}
HXDLIN( 105)													Float b1;
HXDLIN( 105)													int this8 = (this4 & 255);
HXDLIN( 105)													if ((this8 == 0)) {
HXLINE( 105)														b1 = ((Float)0.);
            													}
            													else {
HXLINE( 105)														b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            													}
HXDLIN( 105)													Float a2;
HXDLIN( 105)													int this9 = ((col >> 24) & 255);
HXDLIN( 105)													if ((this9 == 0)) {
HXLINE( 105)														a2 = ((Float)0.);
            													}
            													else {
HXLINE( 105)														a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            													}
HXDLIN( 105)													Float r2;
HXDLIN( 105)													int this10 = ((col >> 16) & 255);
HXDLIN( 105)													if ((this10 == 0)) {
HXLINE( 105)														r2 = ((Float)0.);
            													}
            													else {
HXLINE( 105)														r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            													}
HXDLIN( 105)													Float g2;
HXDLIN( 105)													int this11 = ((col >> 8) & 255);
HXDLIN( 105)													if ((this11 == 0)) {
HXLINE( 105)														g2 = ((Float)0.);
            													}
            													else {
HXLINE( 105)														g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            													}
HXDLIN( 105)													Float b2;
HXDLIN( 105)													int this12 = (col & 255);
HXDLIN( 105)													if ((this12 == 0)) {
HXLINE( 105)														b2 = ((Float)0.);
            													}
            													else {
HXLINE( 105)														b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            													}
HXDLIN( 105)													Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 105)													int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 105)													int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 105)													int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 105)													int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 105)													int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 105)													{
HXLINE( 105)														::haxe::io::ArrayBufferViewImpl this13 = undoImage->image;
HXDLIN( 105)														int value;
HXDLIN( 105)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 105)															value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            														}
            														else {
HXLINE( 105)															value = blended;
            														}
HXDLIN( 105)														bool _hx_tmp;
HXDLIN( 105)														if ((location >= 0)) {
HXLINE( 105)															_hx_tmp = (location < (this13->byteLength >> 2));
            														}
            														else {
HXLINE( 105)															_hx_tmp = false;
            														}
HXDLIN( 105)														if (_hx_tmp) {
HXLINE( 105)															::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 105)															int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 105)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 105)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 105)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 105)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
            												else {
HXLINE( 105)													::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN( 105)													int index;
HXDLIN( 105)													if (undoImage->useVirtualPos) {
HXLINE( 105)														index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            													}
            													else {
HXLINE( 105)														index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            													}
HXDLIN( 105)													int value;
HXDLIN( 105)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 105)														value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE( 105)														value = c;
            													}
HXDLIN( 105)													bool _hx_tmp;
HXDLIN( 105)													if ((index >= 0)) {
HXLINE( 105)														_hx_tmp = (index < (this1->byteLength >> 2));
            													}
            													else {
HXLINE( 105)														_hx_tmp = false;
            													}
HXDLIN( 105)													if (_hx_tmp) {
HXLINE( 105)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 105)														int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 105)														_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 105)														_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 105)														_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 105)														_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            													}
            												}
            											}
            											else {
HXLINE( 105)												if (forceClear) {
HXLINE( 105)													::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN( 105)													int x = (dx - rectLeft);
HXDLIN( 105)													int y = (dy - rectTop);
HXDLIN( 105)													int index;
HXDLIN( 105)													if (undoImage->useVirtualPos) {
HXLINE( 105)														index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            													}
            													else {
HXLINE( 105)														index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            													}
HXDLIN( 105)													bool _hx_tmp;
HXDLIN( 105)													if ((index >= 0)) {
HXLINE( 105)														_hx_tmp = (index < (this1->byteLength >> 2));
            													}
            													else {
HXLINE( 105)														_hx_tmp = false;
            													}
HXDLIN( 105)													if (_hx_tmp) {
HXLINE( 105)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 105)														int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 105)														_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 105)														_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 105)														_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 105)														_this->b[(pos + 3)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 105)					bool found = false;
HXDLIN( 105)					Float s = ((Float)0.);
HXDLIN( 105)					Float t = ((Float)0.);
HXDLIN( 105)					Float sxx = ((Float)0.);
HXDLIN( 105)					Float txx = ((Float)0.);
HXDLIN( 105)					{
HXLINE( 105)						int _g_min = xIter3->start;
HXDLIN( 105)						int _g_max = xIter3->max;
HXDLIN( 105)						while((_g_min < _g_max)){
HXLINE( 105)							_g_min = (_g_min + 1);
HXDLIN( 105)							int x = (_g_min - 1);
HXLINE(  61)							sxx = (sx * ( (Float)(x) ));
HXLINE(  62)							txx = (tx * ( (Float)(x) ));
HXLINE(  63)							found = false;
HXLINE( 105)							{
HXLINE( 105)								int _g_min1 = yIter3->start;
HXDLIN( 105)								int _g_max = yIter3->max;
HXDLIN( 105)								while((_g_min1 < _g_max)){
HXLINE( 105)									_g_min1 = (_g_min1 + 1);
HXDLIN( 105)									int y = (_g_min1 - 1);
HXLINE(  65)									s = ((s0 + sxx) + (sy * ( (Float)(y) )));
HXLINE(  66)									t = ((t0 + txx) + (ty * ( (Float)(y) )));
HXLINE( 105)									bool _hx_tmp;
HXDLIN( 105)									if (!((s <= 0))) {
HXLINE( 105)										_hx_tmp = (t <= 0);
            									}
            									else {
HXLINE( 105)										_hx_tmp = true;
            									}
HXDLIN( 105)									if (_hx_tmp) {
HXLINE( 105)										if (found) {
HXLINE( 105)											goto _hx_goto_25;
            										}
            									}
            									else {
HXLINE( 105)										if (((s + t) < A)) {
HXLINE( 105)											{
HXLINE( 105)												int this2 = color;
HXDLIN( 105)												int c = this2;
HXDLIN( 105)												bool _hx_tmp;
HXDLIN( 105)												if ((((c >> 24) & 255) < 254)) {
HXLINE( 105)													_hx_tmp = this1->transparent;
            												}
            												else {
HXLINE( 105)													_hx_tmp = false;
            												}
HXDLIN( 105)												if (_hx_tmp) {
HXLINE( 105)													int location;
HXDLIN( 105)													if (this1->useVirtualPos) {
HXLINE( 105)														location = ::Std_obj::_hx_int(((((( (Float)(y) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            													}
            													else {
HXLINE( 105)														location = ::Std_obj::_hx_int(( (Float)(((y * this1->width) + x)) ));
            													}
HXDLIN( 105)													::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 105)													::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 105)													int pos = ((location << 2) + this2->byteOffset);
HXDLIN( 105)													int this3 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 105)													int this4 = this3;
HXDLIN( 105)													int this5;
HXDLIN( 105)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 105)														this5 = ((((((this4 >> 24) & 255) << 24) | ((this4 & 255) << 16)) | (((this4 >> 8) & 255) << 8)) | ((this4 >> 16) & 255));
            													}
            													else {
HXLINE( 105)														this5 = this4;
            													}
HXDLIN( 105)													Float a1;
HXDLIN( 105)													int this6 = ((this5 >> 24) & 255);
HXDLIN( 105)													if ((this6 == 0)) {
HXLINE( 105)														a1 = ((Float)0.);
            													}
            													else {
HXLINE( 105)														a1 = (( (Float)(this6) ) / ( (Float)(255) ));
            													}
HXDLIN( 105)													Float r1;
HXDLIN( 105)													int this7 = ((this5 >> 16) & 255);
HXDLIN( 105)													if ((this7 == 0)) {
HXLINE( 105)														r1 = ((Float)0.);
            													}
            													else {
HXLINE( 105)														r1 = (( (Float)(this7) ) / ( (Float)(255) ));
            													}
HXDLIN( 105)													Float g1;
HXDLIN( 105)													int this8 = ((this5 >> 8) & 255);
HXDLIN( 105)													if ((this8 == 0)) {
HXLINE( 105)														g1 = ((Float)0.);
            													}
            													else {
HXLINE( 105)														g1 = (( (Float)(this8) ) / ( (Float)(255) ));
            													}
HXDLIN( 105)													Float b1;
HXDLIN( 105)													int this9 = (this5 & 255);
HXDLIN( 105)													if ((this9 == 0)) {
HXLINE( 105)														b1 = ((Float)0.);
            													}
            													else {
HXLINE( 105)														b1 = (( (Float)(this9) ) / ( (Float)(255) ));
            													}
HXDLIN( 105)													Float a2;
HXDLIN( 105)													int this10 = ((color >> 24) & 255);
HXDLIN( 105)													if ((this10 == 0)) {
HXLINE( 105)														a2 = ((Float)0.);
            													}
            													else {
HXLINE( 105)														a2 = (( (Float)(this10) ) / ( (Float)(255) ));
            													}
HXDLIN( 105)													Float r2;
HXDLIN( 105)													int this11 = ((color >> 16) & 255);
HXDLIN( 105)													if ((this11 == 0)) {
HXLINE( 105)														r2 = ((Float)0.);
            													}
            													else {
HXLINE( 105)														r2 = (( (Float)(this11) ) / ( (Float)(255) ));
            													}
HXDLIN( 105)													Float g2;
HXDLIN( 105)													int this12 = ((color >> 8) & 255);
HXDLIN( 105)													if ((this12 == 0)) {
HXLINE( 105)														g2 = ((Float)0.);
            													}
            													else {
HXLINE( 105)														g2 = (( (Float)(this12) ) / ( (Float)(255) ));
            													}
HXDLIN( 105)													Float b2;
HXDLIN( 105)													int this13 = (color & 255);
HXDLIN( 105)													if ((this13 == 0)) {
HXLINE( 105)														b2 = ((Float)0.);
            													}
            													else {
HXLINE( 105)														b2 = (( (Float)(this13) ) / ( (Float)(255) ));
            													}
HXDLIN( 105)													Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 105)													int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 105)													int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 105)													int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 105)													int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 105)													int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 105)													{
HXLINE( 105)														::haxe::io::ArrayBufferViewImpl this14 = this1->image;
HXDLIN( 105)														int value;
HXDLIN( 105)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 105)															value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            														}
            														else {
HXLINE( 105)															value = blended;
            														}
HXDLIN( 105)														bool _hx_tmp;
HXDLIN( 105)														if ((location >= 0)) {
HXLINE( 105)															_hx_tmp = (location < (this14->byteLength >> 2));
            														}
            														else {
HXLINE( 105)															_hx_tmp = false;
            														}
HXDLIN( 105)														if (_hx_tmp) {
HXLINE( 105)															::haxe::io::Bytes _this = this14->bytes;
HXDLIN( 105)															int pos = ((location << 2) + this14->byteOffset);
HXDLIN( 105)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 105)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 105)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 105)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
            												else {
HXLINE( 105)													::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 105)													int index;
HXDLIN( 105)													if (this1->useVirtualPos) {
HXLINE( 105)														index = ::Std_obj::_hx_int(((((( (Float)(y) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            													}
            													else {
HXLINE( 105)														index = ::Std_obj::_hx_int(( (Float)(((y * this1->width) + x)) ));
            													}
HXDLIN( 105)													int value;
HXDLIN( 105)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 105)														value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE( 105)														value = c;
            													}
HXDLIN( 105)													bool _hx_tmp;
HXDLIN( 105)													if ((index >= 0)) {
HXLINE( 105)														_hx_tmp = (index < (this2->byteLength >> 2));
            													}
            													else {
HXLINE( 105)														_hx_tmp = false;
            													}
HXDLIN( 105)													if (_hx_tmp) {
HXLINE( 105)														::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 105)														int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 105)														_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 105)														_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 105)														_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 105)														_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            													}
            												}
            											}
HXLINE(  74)											found = true;
            										}
            										else {
HXLINE( 105)											if (found) {
HXLINE( 105)												goto _hx_goto_25;
            											}
            										}
            									}
            								}
            								_hx_goto_25:;
            							}
            						}
            					}
HXDLIN( 105)					::pixelimage::iter::IntIterStart v_yIter3;
HXDLIN( 105)					::pixelimage::iter::IntIterStart v_xIter3;
HXDLIN( 105)					int v_undoY;
HXDLIN( 105)					int v_undoX;
HXDLIN( 105)					Float v_ty;
HXDLIN( 105)					Float v_tx;
HXDLIN( 105)					Float v_t0;
HXDLIN( 105)					Float v_sy;
HXDLIN( 105)					Float v_sx;
HXDLIN( 105)					Float v_s0;
HXDLIN( 105)					Float v_A;
HXDLIN( 105)					Float ax1 = ax;
HXDLIN( 105)					Float ay1 = ay;
HXDLIN( 105)					Float bx2 = bx1;
HXDLIN( 105)					Float by2 = by1;
HXDLIN( 105)					Float cx2 = cx1;
HXDLIN( 105)					Float cy2 = cy1;
HXDLIN( 105)					::pixelimage::ImageStruct v_undoImage = null();
HXDLIN( 105)					bool adjustWinding1 = (((((ax1 * by2) - (bx2 * ay1)) + ((bx2 * cy2) - (cx2 * by2))) + ((cx2 * ay1) - (ax1 * cy2))) > 0);
HXDLIN( 105)					if (!(adjustWinding1)) {
HXLINE( 105)						Float bx_ = bx2;
HXDLIN( 105)						Float by_ = by2;
HXLINE(  35)						bx2 = cx2;
HXLINE(  36)						by2 = cy2;
HXLINE(  37)						cx2 = bx_;
HXLINE(  38)						cy2 = by_;
            					}
HXLINE( 105)					Float v_ax = ax1;
HXDLIN( 105)					Float v_ay = ay1;
HXDLIN( 105)					Float v_bx = bx2;
HXDLIN( 105)					Float v_by = by2;
HXDLIN( 105)					Float v_cx = cx2;
HXDLIN( 105)					Float v_cy = cy2;
HXDLIN( 105)					bool v_preCalculated = true;
HXDLIN( 105)					{
HXLINE( 105)						v_s0 = ((v_ay * v_cx) - (v_ax * v_cy));
HXDLIN( 105)						v_sx = (v_cy - v_ay);
HXDLIN( 105)						v_sy = (v_ax - v_cx);
HXDLIN( 105)						v_t0 = ((v_ax * v_by) - (v_ay * v_bx));
HXDLIN( 105)						v_tx = (v_ay - v_by);
HXDLIN( 105)						v_ty = (v_bx - v_ax);
HXDLIN( 105)						v_A = ((((-(v_by) * v_cx) + (v_ay * (-(v_bx) + v_cx))) + (v_ax * (v_by - v_cy))) + (v_bx * v_cy));
HXDLIN( 105)						Float a = v_ax;
HXDLIN( 105)						Float b = v_bx;
HXDLIN( 105)						Float c = v_cx;
HXDLIN( 105)						if ((a > b)) {
HXLINE( 105)							if ((a > c)) {
HXLINE( 105)								int min;
HXDLIN( 105)								if ((b > c)) {
HXLINE( 105)									min = ::Math_obj::floor(c);
            								}
            								else {
HXLINE( 105)									min = ::Math_obj::floor(b);
            								}
HXDLIN( 105)								int ii_min = min;
HXDLIN( 105)								int ii_max = ::Math_obj::ceil(a);
HXDLIN( 105)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 105)								v_xIter3 = this1;
            							}
            							else {
HXLINE( 105)								int ii_min = ::Math_obj::floor(b);
HXDLIN( 105)								int ii_max = ::Math_obj::ceil(c);
HXDLIN( 105)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 105)								v_xIter3 = this1;
            							}
            						}
            						else {
HXLINE( 105)							if ((b > c)) {
HXLINE( 105)								int min;
HXDLIN( 105)								if ((a > c)) {
HXLINE( 105)									min = ::Math_obj::floor(c);
            								}
            								else {
HXLINE( 105)									min = ::Math_obj::ceil(a);
            								}
HXDLIN( 105)								int ii_min = min;
HXDLIN( 105)								int ii_max = ::Math_obj::ceil(b);
HXDLIN( 105)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 105)								v_xIter3 = this1;
            							}
            							else {
HXLINE( 105)								int ii_min = ::Math_obj::floor(a);
HXDLIN( 105)								int ii_max = ::Math_obj::ceil(c);
HXDLIN( 105)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 105)								v_xIter3 = this1;
            							}
            						}
HXDLIN( 105)						Float a1 = v_ay;
HXDLIN( 105)						Float b1 = v_by;
HXDLIN( 105)						Float c1 = v_cy;
HXDLIN( 105)						if ((a1 > b1)) {
HXLINE( 105)							if ((a1 > c1)) {
HXLINE( 105)								int min;
HXDLIN( 105)								if ((b1 > c1)) {
HXLINE( 105)									min = ::Math_obj::floor(c1);
            								}
            								else {
HXLINE( 105)									min = ::Math_obj::floor(b1);
            								}
HXDLIN( 105)								int ii_min = min;
HXDLIN( 105)								int ii_max = ::Math_obj::ceil(a1);
HXDLIN( 105)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 105)								v_yIter3 = this1;
            							}
            							else {
HXLINE( 105)								int ii_min = ::Math_obj::floor(b1);
HXDLIN( 105)								int ii_max = ::Math_obj::ceil(c1);
HXDLIN( 105)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 105)								v_yIter3 = this1;
            							}
            						}
            						else {
HXLINE( 105)							if ((b1 > c1)) {
HXLINE( 105)								int min;
HXDLIN( 105)								if ((a1 > c1)) {
HXLINE( 105)									min = ::Math_obj::floor(c1);
            								}
            								else {
HXLINE( 105)									min = ::Math_obj::ceil(a1);
            								}
HXDLIN( 105)								int ii_min = min;
HXDLIN( 105)								int ii_max = ::Math_obj::ceil(b1);
HXDLIN( 105)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 105)								v_yIter3 = this1;
            							}
            							else {
HXLINE( 105)								int ii_min = ::Math_obj::floor(a1);
HXDLIN( 105)								int ii_max = ::Math_obj::ceil(c1);
HXDLIN( 105)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 105)								v_yIter3 = this1;
            							}
            						}
            					}
HXDLIN( 105)					if (hasUndo) {
HXLINE( 105)						v_undoImage = undoImage;
HXDLIN( 105)						v_undoX = xIter3->start;
HXDLIN( 105)						v_undoY = yIter3->start;
            					}
HXDLIN( 105)					Float bx3 = cx;
HXDLIN( 105)					Float by3 = cy;
HXDLIN( 105)					Float cx3 = dx;
HXDLIN( 105)					Float cy3 = dy;
HXDLIN( 105)					bool hasUndo1 = false;
HXDLIN( 105)					bool adjustWinding2 = (((((bx * by3) - (bx3 * by)) + ((bx3 * cy3) - (cx3 * by3))) + ((cx3 * by) - (bx * cy3))) > 0);
HXDLIN( 105)					if (!(adjustWinding2)) {
HXLINE( 105)						Float bx_ = bx3;
HXDLIN( 105)						Float by_ = by3;
HXLINE(  26)						bx3 = cx3;
HXLINE(  27)						by3 = cy3;
HXLINE(  28)						cx3 = bx_;
HXLINE(  29)						cy3 = by_;
            					}
HXLINE( 105)					Float s01 = ((by * cx3) - (bx * cy3));
HXDLIN( 105)					Float sx1 = (cy3 - by);
HXDLIN( 105)					Float sy1 = (bx - cx3);
HXDLIN( 105)					Float t01 = ((bx * by3) - (by * bx3));
HXDLIN( 105)					Float tx1 = (by - by3);
HXDLIN( 105)					Float ty1 = (bx3 - bx);
HXDLIN( 105)					Float A1 = ((((-(by3) * cx3) + (by * (-(bx3) + cx3))) + (bx * (by3 - cy3))) + (bx3 * cy3));
HXDLIN( 105)					::pixelimage::iter::IntIterStart xIter31;
HXDLIN( 105)					if ((bx > bx3)) {
HXLINE( 105)						if ((bx > cx3)) {
HXLINE( 105)							int min;
HXDLIN( 105)							if ((bx3 > cx3)) {
HXLINE( 105)								min = ::Math_obj::floor(cx3);
            							}
            							else {
HXLINE( 105)								min = ::Math_obj::floor(bx3);
            							}
HXDLIN( 105)							int ii_min = min;
HXDLIN( 105)							int ii_max = ::Math_obj::ceil(bx);
HXDLIN( 105)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 105)							xIter31 = this1;
            						}
            						else {
HXLINE( 105)							int ii_min = ::Math_obj::floor(bx3);
HXDLIN( 105)							int ii_max = ::Math_obj::ceil(cx3);
HXDLIN( 105)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 105)							xIter31 = this1;
            						}
            					}
            					else {
HXLINE( 105)						if ((bx3 > cx3)) {
HXLINE( 105)							int min;
HXDLIN( 105)							if ((bx > cx3)) {
HXLINE( 105)								min = ::Math_obj::floor(cx3);
            							}
            							else {
HXLINE( 105)								min = ::Math_obj::ceil(bx);
            							}
HXDLIN( 105)							int ii_min = min;
HXDLIN( 105)							int ii_max = ::Math_obj::ceil(bx3);
HXDLIN( 105)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 105)							xIter31 = this1;
            						}
            						else {
HXLINE( 105)							int ii_min = ::Math_obj::floor(bx);
HXDLIN( 105)							int ii_max = ::Math_obj::ceil(cx3);
HXDLIN( 105)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 105)							xIter31 = this1;
            						}
            					}
HXDLIN( 105)					::pixelimage::iter::IntIterStart yIter31;
HXDLIN( 105)					if ((by > by3)) {
HXLINE( 105)						if ((by > cy3)) {
HXLINE( 105)							int min;
HXDLIN( 105)							if ((by3 > cy3)) {
HXLINE( 105)								min = ::Math_obj::floor(cy3);
            							}
            							else {
HXLINE( 105)								min = ::Math_obj::floor(by3);
            							}
HXDLIN( 105)							int ii_min = min;
HXDLIN( 105)							int ii_max = ::Math_obj::ceil(by);
HXDLIN( 105)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 105)							yIter31 = this1;
            						}
            						else {
HXLINE( 105)							int ii_min = ::Math_obj::floor(by3);
HXDLIN( 105)							int ii_max = ::Math_obj::ceil(cy3);
HXDLIN( 105)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 105)							yIter31 = this1;
            						}
            					}
            					else {
HXLINE( 105)						if ((by3 > cy3)) {
HXLINE( 105)							int min;
HXDLIN( 105)							if ((by > cy3)) {
HXLINE( 105)								min = ::Math_obj::floor(cy3);
            							}
            							else {
HXLINE( 105)								min = ::Math_obj::ceil(by);
            							}
HXDLIN( 105)							int ii_min = min;
HXDLIN( 105)							int ii_max = ::Math_obj::ceil(by3);
HXDLIN( 105)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 105)							yIter31 = this1;
            						}
            						else {
HXLINE( 105)							int ii_min = ::Math_obj::floor(by);
HXDLIN( 105)							int ii_max = ::Math_obj::ceil(cy3);
HXDLIN( 105)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 105)							yIter31 = this1;
            						}
            					}
HXDLIN( 105)					::pixelimage::ImageStruct undoImage1 = null();
HXDLIN( 105)					if (hasUndo1) {
HXLINE( 105)						int w = ((xIter31->max - xIter31->start) + 1);
HXDLIN( 105)						int h = ((yIter31->max - yIter31->start) + 1);
HXDLIN( 105)						int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN( 105)						::haxe::io::ArrayBufferViewImpl this2 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 105)						::haxe::io::ArrayBufferViewImpl this3 = this2;
HXDLIN( 105)						::pixelimage::ImageStruct this4 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this3);
HXDLIN( 105)						undoImage1 = this4;
HXDLIN( 105)						{
HXLINE( 105)							int rectLeft = xIter31->start;
HXDLIN( 105)							int rectTop = yIter31->start;
HXDLIN( 105)							int rectRight = xIter31->max;
HXDLIN( 105)							bool forceClear = false;
HXDLIN( 105)							{
HXLINE( 105)								int _g = rectTop;
HXDLIN( 105)								int _g1 = yIter31->max;
HXDLIN( 105)								while((_g < _g1)){
HXLINE( 105)									_g = (_g + 1);
HXDLIN( 105)									int dy = (_g - 1);
HXDLIN( 105)									{
HXLINE( 105)										int _g1 = rectLeft;
HXDLIN( 105)										int _g2 = rectRight;
HXDLIN( 105)										while((_g1 < _g2)){
HXLINE( 105)											_g1 = (_g1 + 1);
HXDLIN( 105)											int dx = (_g1 - 1);
HXDLIN( 105)											::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 105)											int index;
HXDLIN( 105)											if (this1->useVirtualPos) {
HXLINE( 105)												index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            											}
            											else {
HXLINE( 105)												index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            											}
HXDLIN( 105)											::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 105)											int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 105)											int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 105)											int col;
HXDLIN( 105)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 105)												col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            											}
            											else {
HXLINE( 105)												col = c;
            											}
HXDLIN( 105)											bool _hx_tmp;
HXDLIN( 105)											if (this1->useMask) {
HXLINE( 105)												_hx_tmp = ::hx::IsNotNull( this1->mask );
            											}
            											else {
HXLINE( 105)												_hx_tmp = false;
            											}
HXDLIN( 105)											if (_hx_tmp) {
HXLINE( 105)												::pixelimage::ImageStruct this2 = this1->mask;
HXDLIN( 105)												::haxe::io::ArrayBufferViewImpl this3 = this2->image;
HXDLIN( 105)												int index;
HXDLIN( 105)												if (this2->useVirtualPos) {
HXLINE( 105)													index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this2->virtualY) * ( (Float)(this2->width) )) + dx) - this2->virtualX));
            												}
            												else {
HXLINE( 105)													index = ::Std_obj::_hx_int(( (Float)(((dy * this2->width) + dx)) ));
            												}
HXDLIN( 105)												::haxe::io::Bytes _this = this3->bytes;
HXDLIN( 105)												int pos = ((index << 2) + this3->byteOffset);
HXDLIN( 105)												int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 105)												int v;
HXDLIN( 105)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 105)													v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE( 105)													v = c;
            												}
HXDLIN( 105)												int this4 = v;
HXDLIN( 105)												int maskPixel = this4;
HXDLIN( 105)												int this5 = col;
HXDLIN( 105)												int this6 = this5;
HXDLIN( 105)												if ((maskPixel == 0)) {
HXLINE( 105)													int this1 = this6;
HXDLIN( 105)													col = this1;
            												}
            												else {
HXLINE( 105)													Float m0;
HXDLIN( 105)													int this1 = ((maskPixel >> 24) & 255);
HXDLIN( 105)													if ((this1 == 0)) {
HXLINE( 105)														m0 = ((Float)0.);
            													}
            													else {
HXLINE( 105)														m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            													}
HXDLIN( 105)													Float m1;
HXDLIN( 105)													int this2 = ((maskPixel >> 16) & 255);
HXDLIN( 105)													if ((this2 == 0)) {
HXLINE( 105)														m1 = ((Float)0.);
            													}
            													else {
HXLINE( 105)														m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            													}
HXDLIN( 105)													Float m2;
HXDLIN( 105)													int this3 = ((maskPixel >> 8) & 255);
HXDLIN( 105)													if ((this3 == 0)) {
HXLINE( 105)														m2 = ((Float)0.);
            													}
            													else {
HXLINE( 105)														m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            													}
HXDLIN( 105)													Float m3;
HXDLIN( 105)													int this4 = (maskPixel & 255);
HXDLIN( 105)													if ((this4 == 0)) {
HXLINE( 105)														m3 = ((Float)0.);
            													}
            													else {
HXLINE( 105)														m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            													}
HXDLIN( 105)													int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this6 >> 24) & 255)) )));
HXDLIN( 105)													int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this6 >> 16) & 255)) )));
HXDLIN( 105)													int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this6 >> 8) & 255)) )));
HXDLIN( 105)													int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this6 & 255)) )));
HXDLIN( 105)													col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            												}
            											}
HXDLIN( 105)											if ((col != 0)) {
HXLINE( 105)												int x = (dx - rectLeft);
HXDLIN( 105)												int y = (dy - rectTop);
HXDLIN( 105)												int this1 = col;
HXDLIN( 105)												int c = this1;
HXDLIN( 105)												bool _hx_tmp;
HXDLIN( 105)												if ((((c >> 24) & 255) < 254)) {
HXLINE( 105)													_hx_tmp = undoImage1->transparent;
            												}
            												else {
HXLINE( 105)													_hx_tmp = false;
            												}
HXDLIN( 105)												if (_hx_tmp) {
HXLINE( 105)													int location;
HXDLIN( 105)													if (undoImage1->useVirtualPos) {
HXLINE( 105)														location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            													}
            													else {
HXLINE( 105)														location = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            													}
HXDLIN( 105)													::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN( 105)													::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 105)													int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 105)													int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 105)													int this3 = this2;
HXDLIN( 105)													int this4;
HXDLIN( 105)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 105)														this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            													}
            													else {
HXLINE( 105)														this4 = this3;
            													}
HXDLIN( 105)													Float a1;
HXDLIN( 105)													int this5 = ((this4 >> 24) & 255);
HXDLIN( 105)													if ((this5 == 0)) {
HXLINE( 105)														a1 = ((Float)0.);
            													}
            													else {
HXLINE( 105)														a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            													}
HXDLIN( 105)													Float r1;
HXDLIN( 105)													int this6 = ((this4 >> 16) & 255);
HXDLIN( 105)													if ((this6 == 0)) {
HXLINE( 105)														r1 = ((Float)0.);
            													}
            													else {
HXLINE( 105)														r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            													}
HXDLIN( 105)													Float g1;
HXDLIN( 105)													int this7 = ((this4 >> 8) & 255);
HXDLIN( 105)													if ((this7 == 0)) {
HXLINE( 105)														g1 = ((Float)0.);
            													}
            													else {
HXLINE( 105)														g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            													}
HXDLIN( 105)													Float b1;
HXDLIN( 105)													int this8 = (this4 & 255);
HXDLIN( 105)													if ((this8 == 0)) {
HXLINE( 105)														b1 = ((Float)0.);
            													}
            													else {
HXLINE( 105)														b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            													}
HXDLIN( 105)													Float a2;
HXDLIN( 105)													int this9 = ((col >> 24) & 255);
HXDLIN( 105)													if ((this9 == 0)) {
HXLINE( 105)														a2 = ((Float)0.);
            													}
            													else {
HXLINE( 105)														a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            													}
HXDLIN( 105)													Float r2;
HXDLIN( 105)													int this10 = ((col >> 16) & 255);
HXDLIN( 105)													if ((this10 == 0)) {
HXLINE( 105)														r2 = ((Float)0.);
            													}
            													else {
HXLINE( 105)														r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            													}
HXDLIN( 105)													Float g2;
HXDLIN( 105)													int this11 = ((col >> 8) & 255);
HXDLIN( 105)													if ((this11 == 0)) {
HXLINE( 105)														g2 = ((Float)0.);
            													}
            													else {
HXLINE( 105)														g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            													}
HXDLIN( 105)													Float b2;
HXDLIN( 105)													int this12 = (col & 255);
HXDLIN( 105)													if ((this12 == 0)) {
HXLINE( 105)														b2 = ((Float)0.);
            													}
            													else {
HXLINE( 105)														b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            													}
HXDLIN( 105)													Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 105)													int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 105)													int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 105)													int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 105)													int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 105)													int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 105)													{
HXLINE( 105)														::haxe::io::ArrayBufferViewImpl this13 = undoImage1->image;
HXDLIN( 105)														int value;
HXDLIN( 105)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 105)															value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            														}
            														else {
HXLINE( 105)															value = blended;
            														}
HXDLIN( 105)														bool _hx_tmp;
HXDLIN( 105)														if ((location >= 0)) {
HXLINE( 105)															_hx_tmp = (location < (this13->byteLength >> 2));
            														}
            														else {
HXLINE( 105)															_hx_tmp = false;
            														}
HXDLIN( 105)														if (_hx_tmp) {
HXLINE( 105)															::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 105)															int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 105)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 105)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 105)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 105)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
            												else {
HXLINE( 105)													::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN( 105)													int index;
HXDLIN( 105)													if (undoImage1->useVirtualPos) {
HXLINE( 105)														index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            													}
            													else {
HXLINE( 105)														index = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            													}
HXDLIN( 105)													int value;
HXDLIN( 105)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 105)														value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE( 105)														value = c;
            													}
HXDLIN( 105)													bool _hx_tmp;
HXDLIN( 105)													if ((index >= 0)) {
HXLINE( 105)														_hx_tmp = (index < (this1->byteLength >> 2));
            													}
            													else {
HXLINE( 105)														_hx_tmp = false;
            													}
HXDLIN( 105)													if (_hx_tmp) {
HXLINE( 105)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 105)														int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 105)														_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 105)														_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 105)														_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 105)														_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            													}
            												}
            											}
            											else {
HXLINE( 105)												if (forceClear) {
HXLINE( 105)													::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN( 105)													int x = (dx - rectLeft);
HXDLIN( 105)													int y = (dy - rectTop);
HXDLIN( 105)													int index;
HXDLIN( 105)													if (undoImage1->useVirtualPos) {
HXLINE( 105)														index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            													}
            													else {
HXLINE( 105)														index = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            													}
HXDLIN( 105)													bool _hx_tmp;
HXDLIN( 105)													if ((index >= 0)) {
HXLINE( 105)														_hx_tmp = (index < (this1->byteLength >> 2));
            													}
            													else {
HXLINE( 105)														_hx_tmp = false;
            													}
HXDLIN( 105)													if (_hx_tmp) {
HXLINE( 105)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 105)														int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 105)														_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 105)														_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 105)														_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 105)														_this->b[(pos + 3)] = ( (unsigned char)(0) );
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
HXDLIN( 105)					bool found1 = false;
HXDLIN( 105)					Float s1 = ((Float)0.);
HXDLIN( 105)					Float t1 = ((Float)0.);
HXDLIN( 105)					Float sxx1 = ((Float)0.);
HXDLIN( 105)					Float txx1 = ((Float)0.);
HXDLIN( 105)					{
HXLINE( 105)						int _g_min1 = xIter31->start;
HXDLIN( 105)						int _g_max1 = xIter31->max;
HXDLIN( 105)						while((_g_min1 < _g_max1)){
HXLINE( 105)							_g_min1 = (_g_min1 + 1);
HXDLIN( 105)							int x = (_g_min1 - 1);
HXLINE(  61)							sxx1 = (sx1 * ( (Float)(x) ));
HXLINE(  62)							txx1 = (tx1 * ( (Float)(x) ));
HXLINE(  63)							found1 = false;
HXLINE( 105)							{
HXLINE( 105)								int _g_min = yIter31->start;
HXDLIN( 105)								int _g_max = yIter31->max;
HXDLIN( 105)								while((_g_min < _g_max)){
HXLINE( 105)									_g_min = (_g_min + 1);
HXDLIN( 105)									int y = (_g_min - 1);
HXLINE(  65)									s1 = ((s01 + sxx1) + (sy1 * ( (Float)(y) )));
HXLINE(  66)									t1 = ((t01 + txx1) + (ty1 * ( (Float)(y) )));
HXLINE( 105)									bool _hx_tmp;
HXDLIN( 105)									if (!((s1 <= 0))) {
HXLINE( 105)										_hx_tmp = (t1 <= 0);
            									}
            									else {
HXLINE( 105)										_hx_tmp = true;
            									}
HXDLIN( 105)									if (_hx_tmp) {
HXLINE( 105)										if (found1) {
HXLINE( 105)											goto _hx_goto_29;
            										}
            									}
            									else {
HXLINE( 105)										if (((s1 + t1) < A1)) {
HXLINE( 105)											{
HXLINE( 105)												int this2 = color;
HXDLIN( 105)												int c = this2;
HXDLIN( 105)												bool _hx_tmp;
HXDLIN( 105)												if ((((c >> 24) & 255) < 254)) {
HXLINE( 105)													_hx_tmp = this1->transparent;
            												}
            												else {
HXLINE( 105)													_hx_tmp = false;
            												}
HXDLIN( 105)												if (_hx_tmp) {
HXLINE( 105)													int location;
HXDLIN( 105)													if (this1->useVirtualPos) {
HXLINE( 105)														location = ::Std_obj::_hx_int(((((( (Float)(y) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            													}
            													else {
HXLINE( 105)														location = ::Std_obj::_hx_int(( (Float)(((y * this1->width) + x)) ));
            													}
HXDLIN( 105)													::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 105)													::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 105)													int pos = ((location << 2) + this2->byteOffset);
HXDLIN( 105)													int this3 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 105)													int this4 = this3;
HXDLIN( 105)													int this5;
HXDLIN( 105)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 105)														this5 = ((((((this4 >> 24) & 255) << 24) | ((this4 & 255) << 16)) | (((this4 >> 8) & 255) << 8)) | ((this4 >> 16) & 255));
            													}
            													else {
HXLINE( 105)														this5 = this4;
            													}
HXDLIN( 105)													Float a1;
HXDLIN( 105)													int this6 = ((this5 >> 24) & 255);
HXDLIN( 105)													if ((this6 == 0)) {
HXLINE( 105)														a1 = ((Float)0.);
            													}
            													else {
HXLINE( 105)														a1 = (( (Float)(this6) ) / ( (Float)(255) ));
            													}
HXDLIN( 105)													Float r1;
HXDLIN( 105)													int this7 = ((this5 >> 16) & 255);
HXDLIN( 105)													if ((this7 == 0)) {
HXLINE( 105)														r1 = ((Float)0.);
            													}
            													else {
HXLINE( 105)														r1 = (( (Float)(this7) ) / ( (Float)(255) ));
            													}
HXDLIN( 105)													Float g1;
HXDLIN( 105)													int this8 = ((this5 >> 8) & 255);
HXDLIN( 105)													if ((this8 == 0)) {
HXLINE( 105)														g1 = ((Float)0.);
            													}
            													else {
HXLINE( 105)														g1 = (( (Float)(this8) ) / ( (Float)(255) ));
            													}
HXDLIN( 105)													Float b1;
HXDLIN( 105)													int this9 = (this5 & 255);
HXDLIN( 105)													if ((this9 == 0)) {
HXLINE( 105)														b1 = ((Float)0.);
            													}
            													else {
HXLINE( 105)														b1 = (( (Float)(this9) ) / ( (Float)(255) ));
            													}
HXDLIN( 105)													Float a2;
HXDLIN( 105)													int this10 = ((color >> 24) & 255);
HXDLIN( 105)													if ((this10 == 0)) {
HXLINE( 105)														a2 = ((Float)0.);
            													}
            													else {
HXLINE( 105)														a2 = (( (Float)(this10) ) / ( (Float)(255) ));
            													}
HXDLIN( 105)													Float r2;
HXDLIN( 105)													int this11 = ((color >> 16) & 255);
HXDLIN( 105)													if ((this11 == 0)) {
HXLINE( 105)														r2 = ((Float)0.);
            													}
            													else {
HXLINE( 105)														r2 = (( (Float)(this11) ) / ( (Float)(255) ));
            													}
HXDLIN( 105)													Float g2;
HXDLIN( 105)													int this12 = ((color >> 8) & 255);
HXDLIN( 105)													if ((this12 == 0)) {
HXLINE( 105)														g2 = ((Float)0.);
            													}
            													else {
HXLINE( 105)														g2 = (( (Float)(this12) ) / ( (Float)(255) ));
            													}
HXDLIN( 105)													Float b2;
HXDLIN( 105)													int this13 = (color & 255);
HXDLIN( 105)													if ((this13 == 0)) {
HXLINE( 105)														b2 = ((Float)0.);
            													}
            													else {
HXLINE( 105)														b2 = (( (Float)(this13) ) / ( (Float)(255) ));
            													}
HXDLIN( 105)													Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 105)													int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 105)													int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 105)													int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 105)													int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 105)													int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 105)													{
HXLINE( 105)														::haxe::io::ArrayBufferViewImpl this14 = this1->image;
HXDLIN( 105)														int value;
HXDLIN( 105)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 105)															value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            														}
            														else {
HXLINE( 105)															value = blended;
            														}
HXDLIN( 105)														bool _hx_tmp;
HXDLIN( 105)														if ((location >= 0)) {
HXLINE( 105)															_hx_tmp = (location < (this14->byteLength >> 2));
            														}
            														else {
HXLINE( 105)															_hx_tmp = false;
            														}
HXDLIN( 105)														if (_hx_tmp) {
HXLINE( 105)															::haxe::io::Bytes _this = this14->bytes;
HXDLIN( 105)															int pos = ((location << 2) + this14->byteOffset);
HXDLIN( 105)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 105)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 105)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 105)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
            												else {
HXLINE( 105)													::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 105)													int index;
HXDLIN( 105)													if (this1->useVirtualPos) {
HXLINE( 105)														index = ::Std_obj::_hx_int(((((( (Float)(y) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            													}
            													else {
HXLINE( 105)														index = ::Std_obj::_hx_int(( (Float)(((y * this1->width) + x)) ));
            													}
HXDLIN( 105)													int value;
HXDLIN( 105)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 105)														value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE( 105)														value = c;
            													}
HXDLIN( 105)													bool _hx_tmp;
HXDLIN( 105)													if ((index >= 0)) {
HXLINE( 105)														_hx_tmp = (index < (this2->byteLength >> 2));
            													}
            													else {
HXLINE( 105)														_hx_tmp = false;
            													}
HXDLIN( 105)													if (_hx_tmp) {
HXLINE( 105)														::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 105)														int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 105)														_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 105)														_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 105)														_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 105)														_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            													}
            												}
            											}
HXLINE(  74)											found1 = true;
            										}
            										else {
HXLINE( 105)											if (found1) {
HXLINE( 105)												goto _hx_goto_29;
            											}
            										}
            									}
            								}
            								_hx_goto_29:;
            							}
            						}
            					}
HXDLIN( 105)					::pixelimage::iter::IntIterStart v_yIter31;
HXDLIN( 105)					::pixelimage::iter::IntIterStart v_xIter31;
HXDLIN( 105)					int v_undoY1;
HXDLIN( 105)					int v_undoX1;
HXDLIN( 105)					Float v_ty1;
HXDLIN( 105)					Float v_tx1;
HXDLIN( 105)					Float v_t01;
HXDLIN( 105)					Float v_sy1;
HXDLIN( 105)					Float v_sx1;
HXDLIN( 105)					Float v_s01;
HXDLIN( 105)					Float v_A1;
HXDLIN( 105)					Float ax2 = bx;
HXDLIN( 105)					Float ay2 = by;
HXDLIN( 105)					Float bx4 = bx3;
HXDLIN( 105)					Float by4 = by3;
HXDLIN( 105)					Float cx4 = cx3;
HXDLIN( 105)					Float cy4 = cy3;
HXDLIN( 105)					::pixelimage::ImageStruct v_undoImage1 = null();
HXDLIN( 105)					bool adjustWinding3 = (((((ax2 * by4) - (bx4 * ay2)) + ((bx4 * cy4) - (cx4 * by4))) + ((cx4 * ay2) - (ax2 * cy4))) > 0);
HXDLIN( 105)					if (!(adjustWinding3)) {
HXLINE( 105)						Float bx_ = bx4;
HXDLIN( 105)						Float by_ = by4;
HXLINE(  35)						bx4 = cx4;
HXLINE(  36)						by4 = cy4;
HXLINE(  37)						cx4 = bx_;
HXLINE(  38)						cy4 = by_;
            					}
HXLINE( 105)					Float v_ax1 = ax2;
HXDLIN( 105)					Float v_ay1 = ay2;
HXDLIN( 105)					Float v_bx1 = bx4;
HXDLIN( 105)					Float v_by1 = by4;
HXDLIN( 105)					Float v_cx1 = cx4;
HXDLIN( 105)					Float v_cy1 = cy4;
HXDLIN( 105)					bool v_preCalculated1 = true;
HXDLIN( 105)					{
HXLINE( 105)						v_s01 = ((v_ay1 * v_cx1) - (v_ax1 * v_cy1));
HXDLIN( 105)						v_sx1 = (v_cy1 - v_ay1);
HXDLIN( 105)						v_sy1 = (v_ax1 - v_cx1);
HXDLIN( 105)						v_t01 = ((v_ax1 * v_by1) - (v_ay1 * v_bx1));
HXDLIN( 105)						v_tx1 = (v_ay1 - v_by1);
HXDLIN( 105)						v_ty1 = (v_bx1 - v_ax1);
HXDLIN( 105)						v_A1 = ((((-(v_by1) * v_cx1) + (v_ay1 * (-(v_bx1) + v_cx1))) + (v_ax1 * (v_by1 - v_cy1))) + (v_bx1 * v_cy1));
HXDLIN( 105)						Float a2 = v_ax1;
HXDLIN( 105)						Float b2 = v_bx1;
HXDLIN( 105)						Float c2 = v_cx1;
HXDLIN( 105)						if ((a2 > b2)) {
HXLINE( 105)							if ((a2 > c2)) {
HXLINE( 105)								int min;
HXDLIN( 105)								if ((b2 > c2)) {
HXLINE( 105)									min = ::Math_obj::floor(c2);
            								}
            								else {
HXLINE( 105)									min = ::Math_obj::floor(b2);
            								}
HXDLIN( 105)								int ii_min = min;
HXDLIN( 105)								int ii_max = ::Math_obj::ceil(a2);
HXDLIN( 105)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 105)								v_xIter31 = this1;
            							}
            							else {
HXLINE( 105)								int ii_min = ::Math_obj::floor(b2);
HXDLIN( 105)								int ii_max = ::Math_obj::ceil(c2);
HXDLIN( 105)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 105)								v_xIter31 = this1;
            							}
            						}
            						else {
HXLINE( 105)							if ((b2 > c2)) {
HXLINE( 105)								int min;
HXDLIN( 105)								if ((a2 > c2)) {
HXLINE( 105)									min = ::Math_obj::floor(c2);
            								}
            								else {
HXLINE( 105)									min = ::Math_obj::ceil(a2);
            								}
HXDLIN( 105)								int ii_min = min;
HXDLIN( 105)								int ii_max = ::Math_obj::ceil(b2);
HXDLIN( 105)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 105)								v_xIter31 = this1;
            							}
            							else {
HXLINE( 105)								int ii_min = ::Math_obj::floor(a2);
HXDLIN( 105)								int ii_max = ::Math_obj::ceil(c2);
HXDLIN( 105)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 105)								v_xIter31 = this1;
            							}
            						}
HXDLIN( 105)						Float a3 = v_ay1;
HXDLIN( 105)						Float b3 = v_by1;
HXDLIN( 105)						Float c3 = v_cy1;
HXDLIN( 105)						if ((a3 > b3)) {
HXLINE( 105)							if ((a3 > c3)) {
HXLINE( 105)								int min;
HXDLIN( 105)								if ((b3 > c3)) {
HXLINE( 105)									min = ::Math_obj::floor(c3);
            								}
            								else {
HXLINE( 105)									min = ::Math_obj::floor(b3);
            								}
HXDLIN( 105)								int ii_min = min;
HXDLIN( 105)								int ii_max = ::Math_obj::ceil(a3);
HXDLIN( 105)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 105)								v_yIter31 = this1;
            							}
            							else {
HXLINE( 105)								int ii_min = ::Math_obj::floor(b3);
HXDLIN( 105)								int ii_max = ::Math_obj::ceil(c3);
HXDLIN( 105)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 105)								v_yIter31 = this1;
            							}
            						}
            						else {
HXLINE( 105)							if ((b3 > c3)) {
HXLINE( 105)								int min;
HXDLIN( 105)								if ((a3 > c3)) {
HXLINE( 105)									min = ::Math_obj::floor(c3);
            								}
            								else {
HXLINE( 105)									min = ::Math_obj::ceil(a3);
            								}
HXDLIN( 105)								int ii_min = min;
HXDLIN( 105)								int ii_max = ::Math_obj::ceil(b3);
HXDLIN( 105)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 105)								v_yIter31 = this1;
            							}
            							else {
HXLINE( 105)								int ii_min = ::Math_obj::floor(a3);
HXDLIN( 105)								int ii_max = ::Math_obj::ceil(c3);
HXDLIN( 105)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 105)								v_yIter31 = this1;
            							}
            						}
            					}
HXDLIN( 105)					if (hasUndo1) {
HXLINE( 105)						v_undoImage1 = undoImage1;
HXDLIN( 105)						v_undoX1 = xIter31->start;
HXDLIN( 105)						v_undoY1 = yIter31->start;
            					}
HXDLIN( 105)					::pixelimage::algo::HitQuad v = ::pixelimage::algo::HitQuad_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,dx,dy,true);
            				}
            			}
            		}
HXLINE( 113)		this->toggleDraw = !(this->toggleDraw);
HXLINE( 114)		this->x0 = x2;
HXLINE( 115)		this->y0 = y2;
            	}


HX_DEFINE_DYNAMIC_FUNC2(VePathElementShape_obj,lineSegmentTo,(void))

void VePathElementShape_obj::lineTo(Float x2,Float y2){
            	HX_GC_STACKFRAME(&_hx_pos_d7d37466074fc340_118_lineTo)
HXLINE( 119)		 ::Dynamic oldInfo = this->info;
HXLINE( 120)		::pixelimage::ImageStruct this1 = this->temp;
HXDLIN( 120)		Float px = ((this->x0 * this->scaleX) + this->translateX);
HXDLIN( 120)		Float py = ((this->y0 * this->scaleY) + this->translateY);
HXDLIN( 120)		int color = this->strokeColor;
HXDLIN( 120)		Float o = (((y2 * this->scaleY) + this->translateY) - py);
HXDLIN( 120)		Float a = (((x2 * this->scaleX) + this->translateX) - px);
HXDLIN( 120)		Float h = ::Math_obj::pow(((o * o) + (a * a)),((Float)0.5));
HXDLIN( 120)		Float theta = ::Math_obj::atan2(o,a);
HXDLIN( 120)		 ::Dynamic debugCorners = false;
HXDLIN( 120)		if (::hx::IsNull( debugCorners )) {
HXLINE( 878)			debugCorners = false;
            		}
HXLINE( 120)		Float sin = ::Math_obj::sin(theta);
HXDLIN( 120)		Float cos = ::Math_obj::cos(theta);
HXDLIN( 120)		Float radius = (this->strokeWidth / ( (Float)(2) ));
HXDLIN( 120)		Float dx = ((Float)0.1);
HXDLIN( 120)		Float dy = radius;
HXDLIN( 120)		Float cx = h;
HXDLIN( 120)		Float cy = radius;
HXDLIN( 120)		Float bx = h;
HXDLIN( 120)		Float by = -(radius);
HXDLIN( 120)		Float ax = ((Float)0.1);
HXDLIN( 120)		Float ay = -(radius);
HXDLIN( 120)		Float temp = ((Float)0.);
HXLINE(  28)		temp = (px + ((ax * cos) - (ay * sin)));
HXLINE(  29)		ay = (py + ((ay * cos) + (ax * sin)));
HXLINE(  30)		ax = temp;
HXLINE(  32)		temp = (px + ((bx * cos) - (by * sin)));
HXLINE(  33)		by = (py + ((by * cos) + (bx * sin)));
HXLINE(  34)		bx = temp;
HXLINE(  36)		temp = (px + ((cx * cos) - (cy * sin)));
HXLINE(  37)		cy = (py + ((cy * cos) + (cx * sin)));
HXLINE(  38)		cx = temp;
HXLINE(  40)		temp = (px + ((dx * cos) - (dy * sin)));
HXLINE(  41)		dy = (py + ((dy * cos) + (dx * sin)));
HXLINE(  42)		dx = temp;
HXLINE( 120)		if (( (bool)(debugCorners) )) {
HXLINE( 120)			{
HXLINE( 120)				Float x = (ax - ((Float)6.));
HXDLIN( 120)				Float y = (ay - ((Float)6.));
HXDLIN( 120)				int p = ::Std_obj::_hx_int(x);
HXDLIN( 120)				int xx = p;
HXDLIN( 120)				int q = ::Std_obj::_hx_int(y);
HXDLIN( 120)				int maxX = ::Std_obj::_hx_int((x + 12));
HXDLIN( 120)				int maxY = ::Std_obj::_hx_int((y + 12));
HXDLIN( 120)				while(true){
HXLINE( 120)					{
HXLINE( 120)						p = (p + 1);
HXDLIN( 120)						int x = (p - 1);
HXDLIN( 120)						int this2 = -65536;
HXDLIN( 120)						int c = this2;
HXDLIN( 120)						bool _hx_tmp;
HXDLIN( 120)						if ((((c >> 24) & 255) < 254)) {
HXLINE( 120)							_hx_tmp = this1->transparent;
            						}
            						else {
HXLINE( 120)							_hx_tmp = false;
            						}
HXDLIN( 120)						if (_hx_tmp) {
HXLINE( 120)							int location;
HXDLIN( 120)							if (this1->useVirtualPos) {
HXLINE( 120)								location = ::Std_obj::_hx_int(((((( (Float)(q) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            							}
            							else {
HXLINE( 120)								location = ::Std_obj::_hx_int(( (Float)(((q * this1->width) + x)) ));
            							}
HXDLIN( 120)							::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 120)							::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 120)							int pos = ((location << 2) + this2->byteOffset);
HXDLIN( 120)							int this3 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 120)							int this4 = this3;
HXDLIN( 120)							int this5;
HXDLIN( 120)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)								this5 = ((((((this4 >> 24) & 255) << 24) | ((this4 & 255) << 16)) | (((this4 >> 8) & 255) << 8)) | ((this4 >> 16) & 255));
            							}
            							else {
HXLINE( 120)								this5 = this4;
            							}
HXDLIN( 120)							Float a1;
HXDLIN( 120)							int this6 = ((this5 >> 24) & 255);
HXDLIN( 120)							if ((this6 == 0)) {
HXLINE( 120)								a1 = ((Float)0.);
            							}
            							else {
HXLINE( 120)								a1 = (( (Float)(this6) ) / ( (Float)(255) ));
            							}
HXDLIN( 120)							Float r1;
HXDLIN( 120)							int this7 = ((this5 >> 16) & 255);
HXDLIN( 120)							if ((this7 == 0)) {
HXLINE( 120)								r1 = ((Float)0.);
            							}
            							else {
HXLINE( 120)								r1 = (( (Float)(this7) ) / ( (Float)(255) ));
            							}
HXDLIN( 120)							Float g1;
HXDLIN( 120)							int this8 = ((this5 >> 8) & 255);
HXDLIN( 120)							if ((this8 == 0)) {
HXLINE( 120)								g1 = ((Float)0.);
            							}
            							else {
HXLINE( 120)								g1 = (( (Float)(this8) ) / ( (Float)(255) ));
            							}
HXDLIN( 120)							Float b1;
HXDLIN( 120)							int this9 = (this5 & 255);
HXDLIN( 120)							if ((this9 == 0)) {
HXLINE( 120)								b1 = ((Float)0.);
            							}
            							else {
HXLINE( 120)								b1 = (( (Float)(this9) ) / ( (Float)(255) ));
            							}
HXDLIN( 120)							Float a2;
HXDLIN( 120)							int this10 = ((-65536 >> 24) & 255);
HXDLIN( 120)							if ((this10 == 0)) {
HXLINE( 120)								a2 = ((Float)0.);
            							}
            							else {
HXLINE( 120)								a2 = (( (Float)(this10) ) / ( (Float)(255) ));
            							}
HXDLIN( 120)							Float r2;
HXDLIN( 120)							int this11 = ((-65536 >> 16) & 255);
HXDLIN( 120)							if ((this11 == 0)) {
HXLINE( 120)								r2 = ((Float)0.);
            							}
            							else {
HXLINE( 120)								r2 = (( (Float)(this11) ) / ( (Float)(255) ));
            							}
HXDLIN( 120)							Float g2;
HXDLIN( 120)							int this12 = ((-65536 >> 8) & 255);
HXDLIN( 120)							if ((this12 == 0)) {
HXLINE( 120)								g2 = ((Float)0.);
            							}
            							else {
HXLINE( 120)								g2 = (( (Float)(this12) ) / ( (Float)(255) ));
            							}
HXDLIN( 120)							Float b2;
HXDLIN( 120)							int this13 = (-65536 & 255);
HXDLIN( 120)							if ((this13 == 0)) {
HXLINE( 120)								b2 = ((Float)0.);
            							}
            							else {
HXLINE( 120)								b2 = (( (Float)(this13) ) / ( (Float)(255) ));
            							}
HXDLIN( 120)							Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 120)							int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 120)							int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 120)							int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 120)							int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 120)							int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 120)							{
HXLINE( 120)								::haxe::io::ArrayBufferViewImpl this14 = this1->image;
HXDLIN( 120)								int value;
HXDLIN( 120)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)									value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            								}
            								else {
HXLINE( 120)									value = blended;
            								}
HXDLIN( 120)								bool _hx_tmp;
HXDLIN( 120)								if ((location >= 0)) {
HXLINE( 120)									_hx_tmp = (location < (this14->byteLength >> 2));
            								}
            								else {
HXLINE( 120)									_hx_tmp = false;
            								}
HXDLIN( 120)								if (_hx_tmp) {
HXLINE( 120)									::haxe::io::Bytes _this = this14->bytes;
HXDLIN( 120)									int pos = ((location << 2) + this14->byteOffset);
HXDLIN( 120)									_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 120)									_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 120)									_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 120)									_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            								}
            							}
            						}
            						else {
HXLINE( 120)							::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 120)							int index;
HXDLIN( 120)							if (this1->useVirtualPos) {
HXLINE( 120)								index = ::Std_obj::_hx_int(((((( (Float)(q) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            							}
            							else {
HXLINE( 120)								index = ::Std_obj::_hx_int(( (Float)(((q * this1->width) + x)) ));
            							}
HXDLIN( 120)							int value;
HXDLIN( 120)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)								value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            							}
            							else {
HXLINE( 120)								value = c;
            							}
HXDLIN( 120)							bool _hx_tmp;
HXDLIN( 120)							if ((index >= 0)) {
HXLINE( 120)								_hx_tmp = (index < (this2->byteLength >> 2));
            							}
            							else {
HXLINE( 120)								_hx_tmp = false;
            							}
HXDLIN( 120)							if (_hx_tmp) {
HXLINE( 120)								::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 120)								int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 120)								_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 120)								_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 120)								_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 120)								_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            							}
            						}
            					}
HXDLIN( 120)					if ((p > maxX)) {
HXLINE( 247)						p = xx;
HXLINE( 120)						q = (q + 1);
            					}
HXDLIN( 120)					if ((q > maxY)) {
HXLINE( 120)						goto _hx_goto_31;
            					}
            				}
            				_hx_goto_31:;
            			}
HXDLIN( 120)			{
HXLINE( 120)				Float x1 = (bx - ((Float)6.));
HXDLIN( 120)				Float y1 = (by - ((Float)6.));
HXDLIN( 120)				int p1 = ::Std_obj::_hx_int(x1);
HXDLIN( 120)				int xx1 = p1;
HXDLIN( 120)				int q1 = ::Std_obj::_hx_int(y1);
HXDLIN( 120)				int maxX1 = ::Std_obj::_hx_int((x1 + 12));
HXDLIN( 120)				int maxY1 = ::Std_obj::_hx_int((y1 + 12));
HXDLIN( 120)				while(true){
HXLINE( 120)					{
HXLINE( 120)						p1 = (p1 + 1);
HXDLIN( 120)						int x = (p1 - 1);
HXDLIN( 120)						int this2 = -16711936;
HXDLIN( 120)						int c = this2;
HXDLIN( 120)						bool _hx_tmp;
HXDLIN( 120)						if ((((c >> 24) & 255) < 254)) {
HXLINE( 120)							_hx_tmp = this1->transparent;
            						}
            						else {
HXLINE( 120)							_hx_tmp = false;
            						}
HXDLIN( 120)						if (_hx_tmp) {
HXLINE( 120)							int location;
HXDLIN( 120)							if (this1->useVirtualPos) {
HXLINE( 120)								location = ::Std_obj::_hx_int(((((( (Float)(q1) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            							}
            							else {
HXLINE( 120)								location = ::Std_obj::_hx_int(( (Float)(((q1 * this1->width) + x)) ));
            							}
HXDLIN( 120)							::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 120)							::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 120)							int pos = ((location << 2) + this2->byteOffset);
HXDLIN( 120)							int this3 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 120)							int this4 = this3;
HXDLIN( 120)							int this5;
HXDLIN( 120)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)								this5 = ((((((this4 >> 24) & 255) << 24) | ((this4 & 255) << 16)) | (((this4 >> 8) & 255) << 8)) | ((this4 >> 16) & 255));
            							}
            							else {
HXLINE( 120)								this5 = this4;
            							}
HXDLIN( 120)							Float a1;
HXDLIN( 120)							int this6 = ((this5 >> 24) & 255);
HXDLIN( 120)							if ((this6 == 0)) {
HXLINE( 120)								a1 = ((Float)0.);
            							}
            							else {
HXLINE( 120)								a1 = (( (Float)(this6) ) / ( (Float)(255) ));
            							}
HXDLIN( 120)							Float r1;
HXDLIN( 120)							int this7 = ((this5 >> 16) & 255);
HXDLIN( 120)							if ((this7 == 0)) {
HXLINE( 120)								r1 = ((Float)0.);
            							}
            							else {
HXLINE( 120)								r1 = (( (Float)(this7) ) / ( (Float)(255) ));
            							}
HXDLIN( 120)							Float g1;
HXDLIN( 120)							int this8 = ((this5 >> 8) & 255);
HXDLIN( 120)							if ((this8 == 0)) {
HXLINE( 120)								g1 = ((Float)0.);
            							}
            							else {
HXLINE( 120)								g1 = (( (Float)(this8) ) / ( (Float)(255) ));
            							}
HXDLIN( 120)							Float b1;
HXDLIN( 120)							int this9 = (this5 & 255);
HXDLIN( 120)							if ((this9 == 0)) {
HXLINE( 120)								b1 = ((Float)0.);
            							}
            							else {
HXLINE( 120)								b1 = (( (Float)(this9) ) / ( (Float)(255) ));
            							}
HXDLIN( 120)							Float a2;
HXDLIN( 120)							int this10 = ((-16711936 >> 24) & 255);
HXDLIN( 120)							if ((this10 == 0)) {
HXLINE( 120)								a2 = ((Float)0.);
            							}
            							else {
HXLINE( 120)								a2 = (( (Float)(this10) ) / ( (Float)(255) ));
            							}
HXDLIN( 120)							Float r2;
HXDLIN( 120)							int this11 = ((-16711936 >> 16) & 255);
HXDLIN( 120)							if ((this11 == 0)) {
HXLINE( 120)								r2 = ((Float)0.);
            							}
            							else {
HXLINE( 120)								r2 = (( (Float)(this11) ) / ( (Float)(255) ));
            							}
HXDLIN( 120)							Float g2;
HXDLIN( 120)							int this12 = ((-16711936 >> 8) & 255);
HXDLIN( 120)							if ((this12 == 0)) {
HXLINE( 120)								g2 = ((Float)0.);
            							}
            							else {
HXLINE( 120)								g2 = (( (Float)(this12) ) / ( (Float)(255) ));
            							}
HXDLIN( 120)							Float b2;
HXDLIN( 120)							int this13 = (-16711936 & 255);
HXDLIN( 120)							if ((this13 == 0)) {
HXLINE( 120)								b2 = ((Float)0.);
            							}
            							else {
HXLINE( 120)								b2 = (( (Float)(this13) ) / ( (Float)(255) ));
            							}
HXDLIN( 120)							Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 120)							int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 120)							int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 120)							int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 120)							int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 120)							int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 120)							{
HXLINE( 120)								::haxe::io::ArrayBufferViewImpl this14 = this1->image;
HXDLIN( 120)								int value;
HXDLIN( 120)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)									value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            								}
            								else {
HXLINE( 120)									value = blended;
            								}
HXDLIN( 120)								bool _hx_tmp;
HXDLIN( 120)								if ((location >= 0)) {
HXLINE( 120)									_hx_tmp = (location < (this14->byteLength >> 2));
            								}
            								else {
HXLINE( 120)									_hx_tmp = false;
            								}
HXDLIN( 120)								if (_hx_tmp) {
HXLINE( 120)									::haxe::io::Bytes _this = this14->bytes;
HXDLIN( 120)									int pos = ((location << 2) + this14->byteOffset);
HXDLIN( 120)									_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 120)									_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 120)									_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 120)									_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            								}
            							}
            						}
            						else {
HXLINE( 120)							::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 120)							int index;
HXDLIN( 120)							if (this1->useVirtualPos) {
HXLINE( 120)								index = ::Std_obj::_hx_int(((((( (Float)(q1) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            							}
            							else {
HXLINE( 120)								index = ::Std_obj::_hx_int(( (Float)(((q1 * this1->width) + x)) ));
            							}
HXDLIN( 120)							int value;
HXDLIN( 120)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)								value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            							}
            							else {
HXLINE( 120)								value = c;
            							}
HXDLIN( 120)							bool _hx_tmp;
HXDLIN( 120)							if ((index >= 0)) {
HXLINE( 120)								_hx_tmp = (index < (this2->byteLength >> 2));
            							}
            							else {
HXLINE( 120)								_hx_tmp = false;
            							}
HXDLIN( 120)							if (_hx_tmp) {
HXLINE( 120)								::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 120)								int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 120)								_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 120)								_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 120)								_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 120)								_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            							}
            						}
            					}
HXDLIN( 120)					if ((p1 > maxX1)) {
HXLINE( 247)						p1 = xx1;
HXLINE( 120)						q1 = (q1 + 1);
            					}
HXDLIN( 120)					if ((q1 > maxY1)) {
HXLINE( 120)						goto _hx_goto_32;
            					}
            				}
            				_hx_goto_32:;
            			}
HXDLIN( 120)			{
HXLINE( 120)				Float x2 = (cx - ((Float)6.));
HXDLIN( 120)				Float y2 = (cy - ((Float)6.));
HXDLIN( 120)				int p2 = ::Std_obj::_hx_int(x2);
HXDLIN( 120)				int xx2 = p2;
HXDLIN( 120)				int q2 = ::Std_obj::_hx_int(y2);
HXDLIN( 120)				int maxX2 = ::Std_obj::_hx_int((x2 + 12));
HXDLIN( 120)				int maxY2 = ::Std_obj::_hx_int((y2 + 12));
HXDLIN( 120)				while(true){
HXLINE( 120)					{
HXLINE( 120)						p2 = (p2 + 1);
HXDLIN( 120)						int x = (p2 - 1);
HXDLIN( 120)						int this2 = -16776961;
HXDLIN( 120)						int c = this2;
HXDLIN( 120)						bool _hx_tmp;
HXDLIN( 120)						if ((((c >> 24) & 255) < 254)) {
HXLINE( 120)							_hx_tmp = this1->transparent;
            						}
            						else {
HXLINE( 120)							_hx_tmp = false;
            						}
HXDLIN( 120)						if (_hx_tmp) {
HXLINE( 120)							int location;
HXDLIN( 120)							if (this1->useVirtualPos) {
HXLINE( 120)								location = ::Std_obj::_hx_int(((((( (Float)(q2) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            							}
            							else {
HXLINE( 120)								location = ::Std_obj::_hx_int(( (Float)(((q2 * this1->width) + x)) ));
            							}
HXDLIN( 120)							::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 120)							::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 120)							int pos = ((location << 2) + this2->byteOffset);
HXDLIN( 120)							int this3 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 120)							int this4 = this3;
HXDLIN( 120)							int this5;
HXDLIN( 120)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)								this5 = ((((((this4 >> 24) & 255) << 24) | ((this4 & 255) << 16)) | (((this4 >> 8) & 255) << 8)) | ((this4 >> 16) & 255));
            							}
            							else {
HXLINE( 120)								this5 = this4;
            							}
HXDLIN( 120)							Float a1;
HXDLIN( 120)							int this6 = ((this5 >> 24) & 255);
HXDLIN( 120)							if ((this6 == 0)) {
HXLINE( 120)								a1 = ((Float)0.);
            							}
            							else {
HXLINE( 120)								a1 = (( (Float)(this6) ) / ( (Float)(255) ));
            							}
HXDLIN( 120)							Float r1;
HXDLIN( 120)							int this7 = ((this5 >> 16) & 255);
HXDLIN( 120)							if ((this7 == 0)) {
HXLINE( 120)								r1 = ((Float)0.);
            							}
            							else {
HXLINE( 120)								r1 = (( (Float)(this7) ) / ( (Float)(255) ));
            							}
HXDLIN( 120)							Float g1;
HXDLIN( 120)							int this8 = ((this5 >> 8) & 255);
HXDLIN( 120)							if ((this8 == 0)) {
HXLINE( 120)								g1 = ((Float)0.);
            							}
            							else {
HXLINE( 120)								g1 = (( (Float)(this8) ) / ( (Float)(255) ));
            							}
HXDLIN( 120)							Float b1;
HXDLIN( 120)							int this9 = (this5 & 255);
HXDLIN( 120)							if ((this9 == 0)) {
HXLINE( 120)								b1 = ((Float)0.);
            							}
            							else {
HXLINE( 120)								b1 = (( (Float)(this9) ) / ( (Float)(255) ));
            							}
HXDLIN( 120)							Float a2;
HXDLIN( 120)							int this10 = ((-16776961 >> 24) & 255);
HXDLIN( 120)							if ((this10 == 0)) {
HXLINE( 120)								a2 = ((Float)0.);
            							}
            							else {
HXLINE( 120)								a2 = (( (Float)(this10) ) / ( (Float)(255) ));
            							}
HXDLIN( 120)							Float r2;
HXDLIN( 120)							int this11 = ((-16776961 >> 16) & 255);
HXDLIN( 120)							if ((this11 == 0)) {
HXLINE( 120)								r2 = ((Float)0.);
            							}
            							else {
HXLINE( 120)								r2 = (( (Float)(this11) ) / ( (Float)(255) ));
            							}
HXDLIN( 120)							Float g2;
HXDLIN( 120)							int this12 = ((-16776961 >> 8) & 255);
HXDLIN( 120)							if ((this12 == 0)) {
HXLINE( 120)								g2 = ((Float)0.);
            							}
            							else {
HXLINE( 120)								g2 = (( (Float)(this12) ) / ( (Float)(255) ));
            							}
HXDLIN( 120)							Float b2;
HXDLIN( 120)							int this13 = (-16776961 & 255);
HXDLIN( 120)							if ((this13 == 0)) {
HXLINE( 120)								b2 = ((Float)0.);
            							}
            							else {
HXLINE( 120)								b2 = (( (Float)(this13) ) / ( (Float)(255) ));
            							}
HXDLIN( 120)							Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 120)							int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 120)							int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 120)							int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 120)							int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 120)							int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 120)							{
HXLINE( 120)								::haxe::io::ArrayBufferViewImpl this14 = this1->image;
HXDLIN( 120)								int value;
HXDLIN( 120)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)									value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            								}
            								else {
HXLINE( 120)									value = blended;
            								}
HXDLIN( 120)								bool _hx_tmp;
HXDLIN( 120)								if ((location >= 0)) {
HXLINE( 120)									_hx_tmp = (location < (this14->byteLength >> 2));
            								}
            								else {
HXLINE( 120)									_hx_tmp = false;
            								}
HXDLIN( 120)								if (_hx_tmp) {
HXLINE( 120)									::haxe::io::Bytes _this = this14->bytes;
HXDLIN( 120)									int pos = ((location << 2) + this14->byteOffset);
HXDLIN( 120)									_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 120)									_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 120)									_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 120)									_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            								}
            							}
            						}
            						else {
HXLINE( 120)							::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 120)							int index;
HXDLIN( 120)							if (this1->useVirtualPos) {
HXLINE( 120)								index = ::Std_obj::_hx_int(((((( (Float)(q2) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            							}
            							else {
HXLINE( 120)								index = ::Std_obj::_hx_int(( (Float)(((q2 * this1->width) + x)) ));
            							}
HXDLIN( 120)							int value;
HXDLIN( 120)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)								value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            							}
            							else {
HXLINE( 120)								value = c;
            							}
HXDLIN( 120)							bool _hx_tmp;
HXDLIN( 120)							if ((index >= 0)) {
HXLINE( 120)								_hx_tmp = (index < (this2->byteLength >> 2));
            							}
            							else {
HXLINE( 120)								_hx_tmp = false;
            							}
HXDLIN( 120)							if (_hx_tmp) {
HXLINE( 120)								::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 120)								int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 120)								_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 120)								_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 120)								_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 120)								_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            							}
            						}
            					}
HXDLIN( 120)					if ((p2 > maxX2)) {
HXLINE( 247)						p2 = xx2;
HXLINE( 120)						q2 = (q2 + 1);
            					}
HXDLIN( 120)					if ((q2 > maxY2)) {
HXLINE( 120)						goto _hx_goto_33;
            					}
            				}
            				_hx_goto_33:;
            			}
HXDLIN( 120)			{
HXLINE( 120)				Float x3 = (dx - ((Float)6.));
HXDLIN( 120)				Float y3 = (dy - ((Float)6.));
HXDLIN( 120)				int p3 = ::Std_obj::_hx_int(x3);
HXDLIN( 120)				int xx3 = p3;
HXDLIN( 120)				int q3 = ::Std_obj::_hx_int(y3);
HXDLIN( 120)				int maxX3 = ::Std_obj::_hx_int((x3 + 12));
HXDLIN( 120)				int maxY3 = ::Std_obj::_hx_int((y3 + 12));
HXDLIN( 120)				while(true){
HXLINE( 120)					{
HXLINE( 120)						p3 = (p3 + 1);
HXDLIN( 120)						int x = (p3 - 1);
HXDLIN( 120)						int this2 = -1048336;
HXDLIN( 120)						int c = this2;
HXDLIN( 120)						bool _hx_tmp;
HXDLIN( 120)						if ((((c >> 24) & 255) < 254)) {
HXLINE( 120)							_hx_tmp = this1->transparent;
            						}
            						else {
HXLINE( 120)							_hx_tmp = false;
            						}
HXDLIN( 120)						if (_hx_tmp) {
HXLINE( 120)							int location;
HXDLIN( 120)							if (this1->useVirtualPos) {
HXLINE( 120)								location = ::Std_obj::_hx_int(((((( (Float)(q3) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            							}
            							else {
HXLINE( 120)								location = ::Std_obj::_hx_int(( (Float)(((q3 * this1->width) + x)) ));
            							}
HXDLIN( 120)							::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 120)							::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 120)							int pos = ((location << 2) + this2->byteOffset);
HXDLIN( 120)							int this3 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 120)							int this4 = this3;
HXDLIN( 120)							int this5;
HXDLIN( 120)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)								this5 = ((((((this4 >> 24) & 255) << 24) | ((this4 & 255) << 16)) | (((this4 >> 8) & 255) << 8)) | ((this4 >> 16) & 255));
            							}
            							else {
HXLINE( 120)								this5 = this4;
            							}
HXDLIN( 120)							Float a1;
HXDLIN( 120)							int this6 = ((this5 >> 24) & 255);
HXDLIN( 120)							if ((this6 == 0)) {
HXLINE( 120)								a1 = ((Float)0.);
            							}
            							else {
HXLINE( 120)								a1 = (( (Float)(this6) ) / ( (Float)(255) ));
            							}
HXDLIN( 120)							Float r1;
HXDLIN( 120)							int this7 = ((this5 >> 16) & 255);
HXDLIN( 120)							if ((this7 == 0)) {
HXLINE( 120)								r1 = ((Float)0.);
            							}
            							else {
HXLINE( 120)								r1 = (( (Float)(this7) ) / ( (Float)(255) ));
            							}
HXDLIN( 120)							Float g1;
HXDLIN( 120)							int this8 = ((this5 >> 8) & 255);
HXDLIN( 120)							if ((this8 == 0)) {
HXLINE( 120)								g1 = ((Float)0.);
            							}
            							else {
HXLINE( 120)								g1 = (( (Float)(this8) ) / ( (Float)(255) ));
            							}
HXDLIN( 120)							Float b1;
HXDLIN( 120)							int this9 = (this5 & 255);
HXDLIN( 120)							if ((this9 == 0)) {
HXLINE( 120)								b1 = ((Float)0.);
            							}
            							else {
HXLINE( 120)								b1 = (( (Float)(this9) ) / ( (Float)(255) ));
            							}
HXDLIN( 120)							Float a2;
HXDLIN( 120)							int this10 = ((-1048336 >> 24) & 255);
HXDLIN( 120)							if ((this10 == 0)) {
HXLINE( 120)								a2 = ((Float)0.);
            							}
            							else {
HXLINE( 120)								a2 = (( (Float)(this10) ) / ( (Float)(255) ));
            							}
HXDLIN( 120)							Float r2;
HXDLIN( 120)							int this11 = ((-1048336 >> 16) & 255);
HXDLIN( 120)							if ((this11 == 0)) {
HXLINE( 120)								r2 = ((Float)0.);
            							}
            							else {
HXLINE( 120)								r2 = (( (Float)(this11) ) / ( (Float)(255) ));
            							}
HXDLIN( 120)							Float g2;
HXDLIN( 120)							int this12 = ((-1048336 >> 8) & 255);
HXDLIN( 120)							if ((this12 == 0)) {
HXLINE( 120)								g2 = ((Float)0.);
            							}
            							else {
HXLINE( 120)								g2 = (( (Float)(this12) ) / ( (Float)(255) ));
            							}
HXDLIN( 120)							Float b2;
HXDLIN( 120)							int this13 = (-1048336 & 255);
HXDLIN( 120)							if ((this13 == 0)) {
HXLINE( 120)								b2 = ((Float)0.);
            							}
            							else {
HXLINE( 120)								b2 = (( (Float)(this13) ) / ( (Float)(255) ));
            							}
HXDLIN( 120)							Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 120)							int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 120)							int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 120)							int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 120)							int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 120)							int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 120)							{
HXLINE( 120)								::haxe::io::ArrayBufferViewImpl this14 = this1->image;
HXDLIN( 120)								int value;
HXDLIN( 120)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)									value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            								}
            								else {
HXLINE( 120)									value = blended;
            								}
HXDLIN( 120)								bool _hx_tmp;
HXDLIN( 120)								if ((location >= 0)) {
HXLINE( 120)									_hx_tmp = (location < (this14->byteLength >> 2));
            								}
            								else {
HXLINE( 120)									_hx_tmp = false;
            								}
HXDLIN( 120)								if (_hx_tmp) {
HXLINE( 120)									::haxe::io::Bytes _this = this14->bytes;
HXDLIN( 120)									int pos = ((location << 2) + this14->byteOffset);
HXDLIN( 120)									_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 120)									_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 120)									_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 120)									_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            								}
            							}
            						}
            						else {
HXLINE( 120)							::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 120)							int index;
HXDLIN( 120)							if (this1->useVirtualPos) {
HXLINE( 120)								index = ::Std_obj::_hx_int(((((( (Float)(q3) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            							}
            							else {
HXLINE( 120)								index = ::Std_obj::_hx_int(( (Float)(((q3 * this1->width) + x)) ));
            							}
HXDLIN( 120)							int value;
HXDLIN( 120)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)								value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            							}
            							else {
HXLINE( 120)								value = c;
            							}
HXDLIN( 120)							bool _hx_tmp;
HXDLIN( 120)							if ((index >= 0)) {
HXLINE( 120)								_hx_tmp = (index < (this2->byteLength >> 2));
            							}
            							else {
HXLINE( 120)								_hx_tmp = false;
            							}
HXDLIN( 120)							if (_hx_tmp) {
HXLINE( 120)								::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 120)								int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 120)								_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 120)								_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 120)								_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 120)								_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            							}
            						}
            					}
HXDLIN( 120)					if ((p3 > maxX3)) {
HXLINE( 247)						p3 = xx3;
HXLINE( 120)						q3 = (q3 + 1);
            					}
HXDLIN( 120)					if ((q3 > maxY3)) {
HXLINE( 120)						goto _hx_goto_34;
            					}
            				}
            				_hx_goto_34:;
            			}
            		}
HXDLIN( 120)		Float bx1 = bx;
HXDLIN( 120)		Float by1 = by;
HXDLIN( 120)		Float cx1 = dx;
HXDLIN( 120)		Float cy1 = dy;
HXDLIN( 120)		bool hasUndo = false;
HXDLIN( 120)		bool adjustWinding = (((((ax * by1) - (bx1 * ay)) + ((bx1 * cy1) - (cx1 * by1))) + ((cx1 * ay) - (ax * cy1))) > 0);
HXDLIN( 120)		if (!(adjustWinding)) {
HXLINE( 120)			Float bx_ = bx1;
HXDLIN( 120)			Float by_ = by1;
HXLINE(  26)			bx1 = cx1;
HXLINE(  27)			by1 = cy1;
HXLINE(  28)			cx1 = bx_;
HXLINE(  29)			cy1 = by_;
            		}
HXLINE( 120)		Float s0 = ((ay * cx1) - (ax * cy1));
HXDLIN( 120)		Float sx = (cy1 - ay);
HXDLIN( 120)		Float sy = (ax - cx1);
HXDLIN( 120)		Float t0 = ((ax * by1) - (ay * bx1));
HXDLIN( 120)		Float tx = (ay - by1);
HXDLIN( 120)		Float ty = (bx1 - ax);
HXDLIN( 120)		Float A = ((((-(by1) * cx1) + (ay * (-(bx1) + cx1))) + (ax * (by1 - cy1))) + (bx1 * cy1));
HXDLIN( 120)		::pixelimage::iter::IntIterStart xIter3;
HXDLIN( 120)		if ((ax > bx1)) {
HXLINE( 120)			if ((ax > cx1)) {
HXLINE( 120)				int min;
HXDLIN( 120)				if ((bx1 > cx1)) {
HXLINE( 120)					min = ::Math_obj::floor(cx1);
            				}
            				else {
HXLINE( 120)					min = ::Math_obj::floor(bx1);
            				}
HXDLIN( 120)				int ii_min = min;
HXDLIN( 120)				int ii_max = ::Math_obj::ceil(ax);
HXDLIN( 120)				::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 120)				xIter3 = this1;
            			}
            			else {
HXLINE( 120)				int ii_min = ::Math_obj::floor(bx1);
HXDLIN( 120)				int ii_max = ::Math_obj::ceil(cx1);
HXDLIN( 120)				::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 120)				xIter3 = this1;
            			}
            		}
            		else {
HXLINE( 120)			if ((bx1 > cx1)) {
HXLINE( 120)				int min;
HXDLIN( 120)				if ((ax > cx1)) {
HXLINE( 120)					min = ::Math_obj::floor(cx1);
            				}
            				else {
HXLINE( 120)					min = ::Math_obj::ceil(ax);
            				}
HXDLIN( 120)				int ii_min = min;
HXDLIN( 120)				int ii_max = ::Math_obj::ceil(bx1);
HXDLIN( 120)				::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 120)				xIter3 = this1;
            			}
            			else {
HXLINE( 120)				int ii_min = ::Math_obj::floor(ax);
HXDLIN( 120)				int ii_max = ::Math_obj::ceil(cx1);
HXDLIN( 120)				::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 120)				xIter3 = this1;
            			}
            		}
HXDLIN( 120)		::pixelimage::iter::IntIterStart yIter3;
HXDLIN( 120)		if ((ay > by1)) {
HXLINE( 120)			if ((ay > cy1)) {
HXLINE( 120)				int min;
HXDLIN( 120)				if ((by1 > cy1)) {
HXLINE( 120)					min = ::Math_obj::floor(cy1);
            				}
            				else {
HXLINE( 120)					min = ::Math_obj::floor(by1);
            				}
HXDLIN( 120)				int ii_min = min;
HXDLIN( 120)				int ii_max = ::Math_obj::ceil(ay);
HXDLIN( 120)				::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 120)				yIter3 = this1;
            			}
            			else {
HXLINE( 120)				int ii_min = ::Math_obj::floor(by1);
HXDLIN( 120)				int ii_max = ::Math_obj::ceil(cy1);
HXDLIN( 120)				::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 120)				yIter3 = this1;
            			}
            		}
            		else {
HXLINE( 120)			if ((by1 > cy1)) {
HXLINE( 120)				int min;
HXDLIN( 120)				if ((ay > cy1)) {
HXLINE( 120)					min = ::Math_obj::floor(cy1);
            				}
            				else {
HXLINE( 120)					min = ::Math_obj::ceil(ay);
            				}
HXDLIN( 120)				int ii_min = min;
HXDLIN( 120)				int ii_max = ::Math_obj::ceil(by1);
HXDLIN( 120)				::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 120)				yIter3 = this1;
            			}
            			else {
HXLINE( 120)				int ii_min = ::Math_obj::floor(ay);
HXDLIN( 120)				int ii_max = ::Math_obj::ceil(cy1);
HXDLIN( 120)				::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 120)				yIter3 = this1;
            			}
            		}
HXDLIN( 120)		::pixelimage::ImageStruct undoImage = null();
HXDLIN( 120)		if (hasUndo) {
HXLINE( 120)			int w = ((xIter3->max - xIter3->start) + 1);
HXDLIN( 120)			int h = ((yIter3->max - yIter3->start) + 1);
HXDLIN( 120)			int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN( 120)			::haxe::io::ArrayBufferViewImpl this2 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 120)			::haxe::io::ArrayBufferViewImpl this3 = this2;
HXDLIN( 120)			::pixelimage::ImageStruct this4 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this3);
HXDLIN( 120)			undoImage = this4;
HXDLIN( 120)			{
HXLINE( 120)				int rectLeft = xIter3->start;
HXDLIN( 120)				int rectTop = yIter3->start;
HXDLIN( 120)				int rectRight = xIter3->max;
HXDLIN( 120)				bool forceClear = false;
HXDLIN( 120)				{
HXLINE( 120)					int _g = rectTop;
HXDLIN( 120)					int _g1 = yIter3->max;
HXDLIN( 120)					while((_g < _g1)){
HXLINE( 120)						_g = (_g + 1);
HXDLIN( 120)						int dy = (_g - 1);
HXDLIN( 120)						{
HXLINE( 120)							int _g1 = rectLeft;
HXDLIN( 120)							int _g2 = rectRight;
HXDLIN( 120)							while((_g1 < _g2)){
HXLINE( 120)								_g1 = (_g1 + 1);
HXDLIN( 120)								int dx = (_g1 - 1);
HXDLIN( 120)								::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 120)								int index;
HXDLIN( 120)								if (this1->useVirtualPos) {
HXLINE( 120)									index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            								}
            								else {
HXLINE( 120)									index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            								}
HXDLIN( 120)								::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 120)								int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 120)								int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 120)								int col;
HXDLIN( 120)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)									col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            								}
            								else {
HXLINE( 120)									col = c;
            								}
HXDLIN( 120)								bool _hx_tmp;
HXDLIN( 120)								if (this1->useMask) {
HXLINE( 120)									_hx_tmp = ::hx::IsNotNull( this1->mask );
            								}
            								else {
HXLINE( 120)									_hx_tmp = false;
            								}
HXDLIN( 120)								if (_hx_tmp) {
HXLINE( 120)									::pixelimage::ImageStruct this2 = this1->mask;
HXDLIN( 120)									::haxe::io::ArrayBufferViewImpl this3 = this2->image;
HXDLIN( 120)									int index;
HXDLIN( 120)									if (this2->useVirtualPos) {
HXLINE( 120)										index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this2->virtualY) * ( (Float)(this2->width) )) + dx) - this2->virtualX));
            									}
            									else {
HXLINE( 120)										index = ::Std_obj::_hx_int(( (Float)(((dy * this2->width) + dx)) ));
            									}
HXDLIN( 120)									::haxe::io::Bytes _this = this3->bytes;
HXDLIN( 120)									int pos = ((index << 2) + this3->byteOffset);
HXDLIN( 120)									int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 120)									int v;
HXDLIN( 120)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)										v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXLINE( 120)										v = c;
            									}
HXDLIN( 120)									int this4 = v;
HXDLIN( 120)									int maskPixel = this4;
HXDLIN( 120)									int this5 = col;
HXDLIN( 120)									int this6 = this5;
HXDLIN( 120)									if ((maskPixel == 0)) {
HXLINE( 120)										int this1 = this6;
HXDLIN( 120)										col = this1;
            									}
            									else {
HXLINE( 120)										Float m0;
HXDLIN( 120)										int this1 = ((maskPixel >> 24) & 255);
HXDLIN( 120)										if ((this1 == 0)) {
HXLINE( 120)											m0 = ((Float)0.);
            										}
            										else {
HXLINE( 120)											m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            										}
HXDLIN( 120)										Float m1;
HXDLIN( 120)										int this2 = ((maskPixel >> 16) & 255);
HXDLIN( 120)										if ((this2 == 0)) {
HXLINE( 120)											m1 = ((Float)0.);
            										}
            										else {
HXLINE( 120)											m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            										}
HXDLIN( 120)										Float m2;
HXDLIN( 120)										int this3 = ((maskPixel >> 8) & 255);
HXDLIN( 120)										if ((this3 == 0)) {
HXLINE( 120)											m2 = ((Float)0.);
            										}
            										else {
HXLINE( 120)											m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            										}
HXDLIN( 120)										Float m3;
HXDLIN( 120)										int this4 = (maskPixel & 255);
HXDLIN( 120)										if ((this4 == 0)) {
HXLINE( 120)											m3 = ((Float)0.);
            										}
            										else {
HXLINE( 120)											m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            										}
HXDLIN( 120)										int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this6 >> 24) & 255)) )));
HXDLIN( 120)										int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this6 >> 16) & 255)) )));
HXDLIN( 120)										int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this6 >> 8) & 255)) )));
HXDLIN( 120)										int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this6 & 255)) )));
HXDLIN( 120)										col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN( 120)								if ((col != 0)) {
HXLINE( 120)									int x = (dx - rectLeft);
HXDLIN( 120)									int y = (dy - rectTop);
HXDLIN( 120)									int this1 = col;
HXDLIN( 120)									int c = this1;
HXDLIN( 120)									bool _hx_tmp;
HXDLIN( 120)									if ((((c >> 24) & 255) < 254)) {
HXLINE( 120)										_hx_tmp = undoImage->transparent;
            									}
            									else {
HXLINE( 120)										_hx_tmp = false;
            									}
HXDLIN( 120)									if (_hx_tmp) {
HXLINE( 120)										int location;
HXDLIN( 120)										if (undoImage->useVirtualPos) {
HXLINE( 120)											location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            										}
            										else {
HXLINE( 120)											location = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            										}
HXDLIN( 120)										::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN( 120)										::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 120)										int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 120)										int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 120)										int this3 = this2;
HXDLIN( 120)										int this4;
HXDLIN( 120)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)											this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            										}
            										else {
HXLINE( 120)											this4 = this3;
            										}
HXDLIN( 120)										Float a1;
HXDLIN( 120)										int this5 = ((this4 >> 24) & 255);
HXDLIN( 120)										if ((this5 == 0)) {
HXLINE( 120)											a1 = ((Float)0.);
            										}
            										else {
HXLINE( 120)											a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            										}
HXDLIN( 120)										Float r1;
HXDLIN( 120)										int this6 = ((this4 >> 16) & 255);
HXDLIN( 120)										if ((this6 == 0)) {
HXLINE( 120)											r1 = ((Float)0.);
            										}
            										else {
HXLINE( 120)											r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            										}
HXDLIN( 120)										Float g1;
HXDLIN( 120)										int this7 = ((this4 >> 8) & 255);
HXDLIN( 120)										if ((this7 == 0)) {
HXLINE( 120)											g1 = ((Float)0.);
            										}
            										else {
HXLINE( 120)											g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            										}
HXDLIN( 120)										Float b1;
HXDLIN( 120)										int this8 = (this4 & 255);
HXDLIN( 120)										if ((this8 == 0)) {
HXLINE( 120)											b1 = ((Float)0.);
            										}
            										else {
HXLINE( 120)											b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            										}
HXDLIN( 120)										Float a2;
HXDLIN( 120)										int this9 = ((col >> 24) & 255);
HXDLIN( 120)										if ((this9 == 0)) {
HXLINE( 120)											a2 = ((Float)0.);
            										}
            										else {
HXLINE( 120)											a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            										}
HXDLIN( 120)										Float r2;
HXDLIN( 120)										int this10 = ((col >> 16) & 255);
HXDLIN( 120)										if ((this10 == 0)) {
HXLINE( 120)											r2 = ((Float)0.);
            										}
            										else {
HXLINE( 120)											r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            										}
HXDLIN( 120)										Float g2;
HXDLIN( 120)										int this11 = ((col >> 8) & 255);
HXDLIN( 120)										if ((this11 == 0)) {
HXLINE( 120)											g2 = ((Float)0.);
            										}
            										else {
HXLINE( 120)											g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            										}
HXDLIN( 120)										Float b2;
HXDLIN( 120)										int this12 = (col & 255);
HXDLIN( 120)										if ((this12 == 0)) {
HXLINE( 120)											b2 = ((Float)0.);
            										}
            										else {
HXLINE( 120)											b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            										}
HXDLIN( 120)										Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 120)										int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 120)										int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 120)										int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 120)										int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 120)										int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 120)										{
HXLINE( 120)											::haxe::io::ArrayBufferViewImpl this13 = undoImage->image;
HXDLIN( 120)											int value;
HXDLIN( 120)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)												value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            											}
            											else {
HXLINE( 120)												value = blended;
            											}
HXDLIN( 120)											bool _hx_tmp;
HXDLIN( 120)											if ((location >= 0)) {
HXLINE( 120)												_hx_tmp = (location < (this13->byteLength >> 2));
            											}
            											else {
HXLINE( 120)												_hx_tmp = false;
            											}
HXDLIN( 120)											if (_hx_tmp) {
HXLINE( 120)												::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 120)												int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 120)												_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 120)												_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 120)												_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 120)												_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            											}
            										}
            									}
            									else {
HXLINE( 120)										::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN( 120)										int index;
HXDLIN( 120)										if (undoImage->useVirtualPos) {
HXLINE( 120)											index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            										}
            										else {
HXLINE( 120)											index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            										}
HXDLIN( 120)										int value;
HXDLIN( 120)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)											value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            										}
            										else {
HXLINE( 120)											value = c;
            										}
HXDLIN( 120)										bool _hx_tmp;
HXDLIN( 120)										if ((index >= 0)) {
HXLINE( 120)											_hx_tmp = (index < (this1->byteLength >> 2));
            										}
            										else {
HXLINE( 120)											_hx_tmp = false;
            										}
HXDLIN( 120)										if (_hx_tmp) {
HXLINE( 120)											::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 120)											int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 120)											_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 120)											_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 120)											_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 120)											_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            										}
            									}
            								}
            								else {
HXLINE( 120)									if (forceClear) {
HXLINE( 120)										::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN( 120)										int x = (dx - rectLeft);
HXDLIN( 120)										int y = (dy - rectTop);
HXDLIN( 120)										int index;
HXDLIN( 120)										if (undoImage->useVirtualPos) {
HXLINE( 120)											index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            										}
            										else {
HXLINE( 120)											index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            										}
HXDLIN( 120)										bool _hx_tmp;
HXDLIN( 120)										if ((index >= 0)) {
HXLINE( 120)											_hx_tmp = (index < (this1->byteLength >> 2));
            										}
            										else {
HXLINE( 120)											_hx_tmp = false;
            										}
HXDLIN( 120)										if (_hx_tmp) {
HXLINE( 120)											::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 120)											int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 120)											_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 120)											_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 120)											_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 120)											_this->b[(pos + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 120)		bool found = false;
HXDLIN( 120)		Float s = ((Float)0.);
HXDLIN( 120)		Float t = ((Float)0.);
HXDLIN( 120)		Float sxx = ((Float)0.);
HXDLIN( 120)		Float txx = ((Float)0.);
HXDLIN( 120)		int _g_min = xIter3->start;
HXDLIN( 120)		int _g_max = xIter3->max;
HXDLIN( 120)		while((_g_min < _g_max)){
HXLINE( 120)			_g_min = (_g_min + 1);
HXDLIN( 120)			int x = (_g_min - 1);
HXLINE(  61)			sxx = (sx * ( (Float)(x) ));
HXLINE(  62)			txx = (tx * ( (Float)(x) ));
HXLINE(  63)			found = false;
HXLINE( 120)			{
HXLINE( 120)				int _g_min1 = yIter3->start;
HXDLIN( 120)				int _g_max = yIter3->max;
HXDLIN( 120)				while((_g_min1 < _g_max)){
HXLINE( 120)					_g_min1 = (_g_min1 + 1);
HXDLIN( 120)					int y = (_g_min1 - 1);
HXLINE(  65)					s = ((s0 + sxx) + (sy * ( (Float)(y) )));
HXLINE(  66)					t = ((t0 + txx) + (ty * ( (Float)(y) )));
HXLINE( 120)					bool _hx_tmp;
HXDLIN( 120)					if (!((s <= 0))) {
HXLINE( 120)						_hx_tmp = (t <= 0);
            					}
            					else {
HXLINE( 120)						_hx_tmp = true;
            					}
HXDLIN( 120)					if (_hx_tmp) {
HXLINE( 120)						if (found) {
HXLINE( 120)							goto _hx_goto_38;
            						}
            					}
            					else {
HXLINE( 120)						if (((s + t) < A)) {
HXLINE( 120)							{
HXLINE( 120)								int this2 = color;
HXDLIN( 120)								int c = this2;
HXDLIN( 120)								bool _hx_tmp;
HXDLIN( 120)								if ((((c >> 24) & 255) < 254)) {
HXLINE( 120)									_hx_tmp = this1->transparent;
            								}
            								else {
HXLINE( 120)									_hx_tmp = false;
            								}
HXDLIN( 120)								if (_hx_tmp) {
HXLINE( 120)									int location;
HXDLIN( 120)									if (this1->useVirtualPos) {
HXLINE( 120)										location = ::Std_obj::_hx_int(((((( (Float)(y) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            									}
            									else {
HXLINE( 120)										location = ::Std_obj::_hx_int(( (Float)(((y * this1->width) + x)) ));
            									}
HXDLIN( 120)									::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 120)									::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 120)									int pos = ((location << 2) + this2->byteOffset);
HXDLIN( 120)									int this3 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 120)									int this4 = this3;
HXDLIN( 120)									int this5;
HXDLIN( 120)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)										this5 = ((((((this4 >> 24) & 255) << 24) | ((this4 & 255) << 16)) | (((this4 >> 8) & 255) << 8)) | ((this4 >> 16) & 255));
            									}
            									else {
HXLINE( 120)										this5 = this4;
            									}
HXDLIN( 120)									Float a1;
HXDLIN( 120)									int this6 = ((this5 >> 24) & 255);
HXDLIN( 120)									if ((this6 == 0)) {
HXLINE( 120)										a1 = ((Float)0.);
            									}
            									else {
HXLINE( 120)										a1 = (( (Float)(this6) ) / ( (Float)(255) ));
            									}
HXDLIN( 120)									Float r1;
HXDLIN( 120)									int this7 = ((this5 >> 16) & 255);
HXDLIN( 120)									if ((this7 == 0)) {
HXLINE( 120)										r1 = ((Float)0.);
            									}
            									else {
HXLINE( 120)										r1 = (( (Float)(this7) ) / ( (Float)(255) ));
            									}
HXDLIN( 120)									Float g1;
HXDLIN( 120)									int this8 = ((this5 >> 8) & 255);
HXDLIN( 120)									if ((this8 == 0)) {
HXLINE( 120)										g1 = ((Float)0.);
            									}
            									else {
HXLINE( 120)										g1 = (( (Float)(this8) ) / ( (Float)(255) ));
            									}
HXDLIN( 120)									Float b1;
HXDLIN( 120)									int this9 = (this5 & 255);
HXDLIN( 120)									if ((this9 == 0)) {
HXLINE( 120)										b1 = ((Float)0.);
            									}
            									else {
HXLINE( 120)										b1 = (( (Float)(this9) ) / ( (Float)(255) ));
            									}
HXDLIN( 120)									Float a2;
HXDLIN( 120)									int this10 = ((color >> 24) & 255);
HXDLIN( 120)									if ((this10 == 0)) {
HXLINE( 120)										a2 = ((Float)0.);
            									}
            									else {
HXLINE( 120)										a2 = (( (Float)(this10) ) / ( (Float)(255) ));
            									}
HXDLIN( 120)									Float r2;
HXDLIN( 120)									int this11 = ((color >> 16) & 255);
HXDLIN( 120)									if ((this11 == 0)) {
HXLINE( 120)										r2 = ((Float)0.);
            									}
            									else {
HXLINE( 120)										r2 = (( (Float)(this11) ) / ( (Float)(255) ));
            									}
HXDLIN( 120)									Float g2;
HXDLIN( 120)									int this12 = ((color >> 8) & 255);
HXDLIN( 120)									if ((this12 == 0)) {
HXLINE( 120)										g2 = ((Float)0.);
            									}
            									else {
HXLINE( 120)										g2 = (( (Float)(this12) ) / ( (Float)(255) ));
            									}
HXDLIN( 120)									Float b2;
HXDLIN( 120)									int this13 = (color & 255);
HXDLIN( 120)									if ((this13 == 0)) {
HXLINE( 120)										b2 = ((Float)0.);
            									}
            									else {
HXLINE( 120)										b2 = (( (Float)(this13) ) / ( (Float)(255) ));
            									}
HXDLIN( 120)									Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 120)									int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 120)									int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 120)									int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 120)									int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 120)									int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 120)									{
HXLINE( 120)										::haxe::io::ArrayBufferViewImpl this14 = this1->image;
HXDLIN( 120)										int value;
HXDLIN( 120)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)											value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            										}
            										else {
HXLINE( 120)											value = blended;
            										}
HXDLIN( 120)										bool _hx_tmp;
HXDLIN( 120)										if ((location >= 0)) {
HXLINE( 120)											_hx_tmp = (location < (this14->byteLength >> 2));
            										}
            										else {
HXLINE( 120)											_hx_tmp = false;
            										}
HXDLIN( 120)										if (_hx_tmp) {
HXLINE( 120)											::haxe::io::Bytes _this = this14->bytes;
HXDLIN( 120)											int pos = ((location << 2) + this14->byteOffset);
HXDLIN( 120)											_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 120)											_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 120)											_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 120)											_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            										}
            									}
            								}
            								else {
HXLINE( 120)									::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 120)									int index;
HXDLIN( 120)									if (this1->useVirtualPos) {
HXLINE( 120)										index = ::Std_obj::_hx_int(((((( (Float)(y) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            									}
            									else {
HXLINE( 120)										index = ::Std_obj::_hx_int(( (Float)(((y * this1->width) + x)) ));
            									}
HXDLIN( 120)									int value;
HXDLIN( 120)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)										value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXLINE( 120)										value = c;
            									}
HXDLIN( 120)									bool _hx_tmp;
HXDLIN( 120)									if ((index >= 0)) {
HXLINE( 120)										_hx_tmp = (index < (this2->byteLength >> 2));
            									}
            									else {
HXLINE( 120)										_hx_tmp = false;
            									}
HXDLIN( 120)									if (_hx_tmp) {
HXLINE( 120)										::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 120)										int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 120)										_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 120)										_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 120)										_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 120)										_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            									}
            								}
            							}
HXLINE(  74)							found = true;
            						}
            						else {
HXLINE( 120)							if (found) {
HXLINE( 120)								goto _hx_goto_38;
            							}
            						}
            					}
            				}
            				_hx_goto_38:;
            			}
            		}
HXDLIN( 120)		::pixelimage::iter::IntIterStart v_yIter3;
HXDLIN( 120)		::pixelimage::iter::IntIterStart v_xIter3;
HXDLIN( 120)		int v_undoY;
HXDLIN( 120)		int v_undoX;
HXDLIN( 120)		Float v_ty;
HXDLIN( 120)		Float v_tx;
HXDLIN( 120)		Float v_t0;
HXDLIN( 120)		Float v_sy;
HXDLIN( 120)		Float v_sx;
HXDLIN( 120)		Float v_s0;
HXDLIN( 120)		Float v_A;
HXDLIN( 120)		Float ax1 = ax;
HXDLIN( 120)		Float ay1 = ay;
HXDLIN( 120)		Float bx2 = bx1;
HXDLIN( 120)		Float by2 = by1;
HXDLIN( 120)		Float cx2 = cx1;
HXDLIN( 120)		Float cy2 = cy1;
HXDLIN( 120)		::pixelimage::ImageStruct v_undoImage = null();
HXDLIN( 120)		bool adjustWinding1 = (((((ax1 * by2) - (bx2 * ay1)) + ((bx2 * cy2) - (cx2 * by2))) + ((cx2 * ay1) - (ax1 * cy2))) > 0);
HXDLIN( 120)		if (!(adjustWinding1)) {
HXLINE( 120)			Float bx_ = bx2;
HXDLIN( 120)			Float by_ = by2;
HXLINE(  35)			bx2 = cx2;
HXLINE(  36)			by2 = cy2;
HXLINE(  37)			cx2 = bx_;
HXLINE(  38)			cy2 = by_;
            		}
HXLINE( 120)		Float v_ax = ax1;
HXDLIN( 120)		Float v_ay = ay1;
HXDLIN( 120)		Float v_bx = bx2;
HXDLIN( 120)		Float v_by = by2;
HXDLIN( 120)		Float v_cx = cx2;
HXDLIN( 120)		Float v_cy = cy2;
HXDLIN( 120)		bool v_preCalculated = true;
HXDLIN( 120)		{
HXLINE( 120)			v_s0 = ((v_ay * v_cx) - (v_ax * v_cy));
HXDLIN( 120)			v_sx = (v_cy - v_ay);
HXDLIN( 120)			v_sy = (v_ax - v_cx);
HXDLIN( 120)			v_t0 = ((v_ax * v_by) - (v_ay * v_bx));
HXDLIN( 120)			v_tx = (v_ay - v_by);
HXDLIN( 120)			v_ty = (v_bx - v_ax);
HXDLIN( 120)			v_A = ((((-(v_by) * v_cx) + (v_ay * (-(v_bx) + v_cx))) + (v_ax * (v_by - v_cy))) + (v_bx * v_cy));
HXDLIN( 120)			Float a1 = v_ax;
HXDLIN( 120)			Float b = v_bx;
HXDLIN( 120)			Float c = v_cx;
HXDLIN( 120)			if ((a1 > b)) {
HXLINE( 120)				if ((a1 > c)) {
HXLINE( 120)					int min;
HXDLIN( 120)					if ((b > c)) {
HXLINE( 120)						min = ::Math_obj::floor(c);
            					}
            					else {
HXLINE( 120)						min = ::Math_obj::floor(b);
            					}
HXDLIN( 120)					int ii_min = min;
HXDLIN( 120)					int ii_max = ::Math_obj::ceil(a1);
HXDLIN( 120)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 120)					v_xIter3 = this1;
            				}
            				else {
HXLINE( 120)					int ii_min = ::Math_obj::floor(b);
HXDLIN( 120)					int ii_max = ::Math_obj::ceil(c);
HXDLIN( 120)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 120)					v_xIter3 = this1;
            				}
            			}
            			else {
HXLINE( 120)				if ((b > c)) {
HXLINE( 120)					int min;
HXDLIN( 120)					if ((a1 > c)) {
HXLINE( 120)						min = ::Math_obj::floor(c);
            					}
            					else {
HXLINE( 120)						min = ::Math_obj::ceil(a1);
            					}
HXDLIN( 120)					int ii_min = min;
HXDLIN( 120)					int ii_max = ::Math_obj::ceil(b);
HXDLIN( 120)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 120)					v_xIter3 = this1;
            				}
            				else {
HXLINE( 120)					int ii_min = ::Math_obj::floor(a1);
HXDLIN( 120)					int ii_max = ::Math_obj::ceil(c);
HXDLIN( 120)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 120)					v_xIter3 = this1;
            				}
            			}
HXDLIN( 120)			Float a2 = v_ay;
HXDLIN( 120)			Float b1 = v_by;
HXDLIN( 120)			Float c1 = v_cy;
HXDLIN( 120)			if ((a2 > b1)) {
HXLINE( 120)				if ((a2 > c1)) {
HXLINE( 120)					int min;
HXDLIN( 120)					if ((b1 > c1)) {
HXLINE( 120)						min = ::Math_obj::floor(c1);
            					}
            					else {
HXLINE( 120)						min = ::Math_obj::floor(b1);
            					}
HXDLIN( 120)					int ii_min = min;
HXDLIN( 120)					int ii_max = ::Math_obj::ceil(a2);
HXDLIN( 120)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 120)					v_yIter3 = this1;
            				}
            				else {
HXLINE( 120)					int ii_min = ::Math_obj::floor(b1);
HXDLIN( 120)					int ii_max = ::Math_obj::ceil(c1);
HXDLIN( 120)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 120)					v_yIter3 = this1;
            				}
            			}
            			else {
HXLINE( 120)				if ((b1 > c1)) {
HXLINE( 120)					int min;
HXDLIN( 120)					if ((a2 > c1)) {
HXLINE( 120)						min = ::Math_obj::floor(c1);
            					}
            					else {
HXLINE( 120)						min = ::Math_obj::ceil(a2);
            					}
HXDLIN( 120)					int ii_min = min;
HXDLIN( 120)					int ii_max = ::Math_obj::ceil(b1);
HXDLIN( 120)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 120)					v_yIter3 = this1;
            				}
            				else {
HXLINE( 120)					int ii_min = ::Math_obj::floor(a2);
HXDLIN( 120)					int ii_max = ::Math_obj::ceil(c1);
HXDLIN( 120)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 120)					v_yIter3 = this1;
            				}
            			}
            		}
HXDLIN( 120)		if (hasUndo) {
HXLINE( 120)			v_undoImage = undoImage;
HXDLIN( 120)			v_undoX = xIter3->start;
HXDLIN( 120)			v_undoY = yIter3->start;
            		}
HXDLIN( 120)		Float bx3 = cx;
HXDLIN( 120)		Float by3 = cy;
HXDLIN( 120)		Float cx3 = dx;
HXDLIN( 120)		Float cy3 = dy;
HXDLIN( 120)		bool hasUndo1 = false;
HXDLIN( 120)		bool adjustWinding2 = (((((bx * by3) - (bx3 * by)) + ((bx3 * cy3) - (cx3 * by3))) + ((cx3 * by) - (bx * cy3))) > 0);
HXDLIN( 120)		if (!(adjustWinding2)) {
HXLINE( 120)			Float bx_ = bx3;
HXDLIN( 120)			Float by_ = by3;
HXLINE(  26)			bx3 = cx3;
HXLINE(  27)			by3 = cy3;
HXLINE(  28)			cx3 = bx_;
HXLINE(  29)			cy3 = by_;
            		}
HXLINE( 120)		Float s01 = ((by * cx3) - (bx * cy3));
HXDLIN( 120)		Float sx1 = (cy3 - by);
HXDLIN( 120)		Float sy1 = (bx - cx3);
HXDLIN( 120)		Float t01 = ((bx * by3) - (by * bx3));
HXDLIN( 120)		Float tx1 = (by - by3);
HXDLIN( 120)		Float ty1 = (bx3 - bx);
HXDLIN( 120)		Float A1 = ((((-(by3) * cx3) + (by * (-(bx3) + cx3))) + (bx * (by3 - cy3))) + (bx3 * cy3));
HXDLIN( 120)		::pixelimage::iter::IntIterStart xIter31;
HXDLIN( 120)		if ((bx > bx3)) {
HXLINE( 120)			if ((bx > cx3)) {
HXLINE( 120)				int min;
HXDLIN( 120)				if ((bx3 > cx3)) {
HXLINE( 120)					min = ::Math_obj::floor(cx3);
            				}
            				else {
HXLINE( 120)					min = ::Math_obj::floor(bx3);
            				}
HXDLIN( 120)				int ii_min = min;
HXDLIN( 120)				int ii_max = ::Math_obj::ceil(bx);
HXDLIN( 120)				::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 120)				xIter31 = this1;
            			}
            			else {
HXLINE( 120)				int ii_min = ::Math_obj::floor(bx3);
HXDLIN( 120)				int ii_max = ::Math_obj::ceil(cx3);
HXDLIN( 120)				::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 120)				xIter31 = this1;
            			}
            		}
            		else {
HXLINE( 120)			if ((bx3 > cx3)) {
HXLINE( 120)				int min;
HXDLIN( 120)				if ((bx > cx3)) {
HXLINE( 120)					min = ::Math_obj::floor(cx3);
            				}
            				else {
HXLINE( 120)					min = ::Math_obj::ceil(bx);
            				}
HXDLIN( 120)				int ii_min = min;
HXDLIN( 120)				int ii_max = ::Math_obj::ceil(bx3);
HXDLIN( 120)				::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 120)				xIter31 = this1;
            			}
            			else {
HXLINE( 120)				int ii_min = ::Math_obj::floor(bx);
HXDLIN( 120)				int ii_max = ::Math_obj::ceil(cx3);
HXDLIN( 120)				::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 120)				xIter31 = this1;
            			}
            		}
HXDLIN( 120)		::pixelimage::iter::IntIterStart yIter31;
HXDLIN( 120)		if ((by > by3)) {
HXLINE( 120)			if ((by > cy3)) {
HXLINE( 120)				int min;
HXDLIN( 120)				if ((by3 > cy3)) {
HXLINE( 120)					min = ::Math_obj::floor(cy3);
            				}
            				else {
HXLINE( 120)					min = ::Math_obj::floor(by3);
            				}
HXDLIN( 120)				int ii_min = min;
HXDLIN( 120)				int ii_max = ::Math_obj::ceil(by);
HXDLIN( 120)				::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 120)				yIter31 = this1;
            			}
            			else {
HXLINE( 120)				int ii_min = ::Math_obj::floor(by3);
HXDLIN( 120)				int ii_max = ::Math_obj::ceil(cy3);
HXDLIN( 120)				::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 120)				yIter31 = this1;
            			}
            		}
            		else {
HXLINE( 120)			if ((by3 > cy3)) {
HXLINE( 120)				int min;
HXDLIN( 120)				if ((by > cy3)) {
HXLINE( 120)					min = ::Math_obj::floor(cy3);
            				}
            				else {
HXLINE( 120)					min = ::Math_obj::ceil(by);
            				}
HXDLIN( 120)				int ii_min = min;
HXDLIN( 120)				int ii_max = ::Math_obj::ceil(by3);
HXDLIN( 120)				::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 120)				yIter31 = this1;
            			}
            			else {
HXLINE( 120)				int ii_min = ::Math_obj::floor(by);
HXDLIN( 120)				int ii_max = ::Math_obj::ceil(cy3);
HXDLIN( 120)				::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 120)				yIter31 = this1;
            			}
            		}
HXDLIN( 120)		::pixelimage::ImageStruct undoImage1 = null();
HXDLIN( 120)		if (hasUndo1) {
HXLINE( 120)			int w = ((xIter31->max - xIter31->start) + 1);
HXDLIN( 120)			int h = ((yIter31->max - yIter31->start) + 1);
HXDLIN( 120)			int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN( 120)			::haxe::io::ArrayBufferViewImpl this2 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 120)			::haxe::io::ArrayBufferViewImpl this3 = this2;
HXDLIN( 120)			::pixelimage::ImageStruct this4 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this3);
HXDLIN( 120)			undoImage1 = this4;
HXDLIN( 120)			{
HXLINE( 120)				int rectLeft = xIter31->start;
HXDLIN( 120)				int rectTop = yIter31->start;
HXDLIN( 120)				int rectRight = xIter31->max;
HXDLIN( 120)				bool forceClear = false;
HXDLIN( 120)				{
HXLINE( 120)					int _g = rectTop;
HXDLIN( 120)					int _g1 = yIter31->max;
HXDLIN( 120)					while((_g < _g1)){
HXLINE( 120)						_g = (_g + 1);
HXDLIN( 120)						int dy = (_g - 1);
HXDLIN( 120)						{
HXLINE( 120)							int _g1 = rectLeft;
HXDLIN( 120)							int _g2 = rectRight;
HXDLIN( 120)							while((_g1 < _g2)){
HXLINE( 120)								_g1 = (_g1 + 1);
HXDLIN( 120)								int dx = (_g1 - 1);
HXDLIN( 120)								::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 120)								int index;
HXDLIN( 120)								if (this1->useVirtualPos) {
HXLINE( 120)									index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            								}
            								else {
HXLINE( 120)									index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            								}
HXDLIN( 120)								::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 120)								int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 120)								int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 120)								int col;
HXDLIN( 120)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)									col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            								}
            								else {
HXLINE( 120)									col = c;
            								}
HXDLIN( 120)								bool _hx_tmp;
HXDLIN( 120)								if (this1->useMask) {
HXLINE( 120)									_hx_tmp = ::hx::IsNotNull( this1->mask );
            								}
            								else {
HXLINE( 120)									_hx_tmp = false;
            								}
HXDLIN( 120)								if (_hx_tmp) {
HXLINE( 120)									::pixelimage::ImageStruct this2 = this1->mask;
HXDLIN( 120)									::haxe::io::ArrayBufferViewImpl this3 = this2->image;
HXDLIN( 120)									int index;
HXDLIN( 120)									if (this2->useVirtualPos) {
HXLINE( 120)										index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this2->virtualY) * ( (Float)(this2->width) )) + dx) - this2->virtualX));
            									}
            									else {
HXLINE( 120)										index = ::Std_obj::_hx_int(( (Float)(((dy * this2->width) + dx)) ));
            									}
HXDLIN( 120)									::haxe::io::Bytes _this = this3->bytes;
HXDLIN( 120)									int pos = ((index << 2) + this3->byteOffset);
HXDLIN( 120)									int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 120)									int v;
HXDLIN( 120)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)										v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXLINE( 120)										v = c;
            									}
HXDLIN( 120)									int this4 = v;
HXDLIN( 120)									int maskPixel = this4;
HXDLIN( 120)									int this5 = col;
HXDLIN( 120)									int this6 = this5;
HXDLIN( 120)									if ((maskPixel == 0)) {
HXLINE( 120)										int this1 = this6;
HXDLIN( 120)										col = this1;
            									}
            									else {
HXLINE( 120)										Float m0;
HXDLIN( 120)										int this1 = ((maskPixel >> 24) & 255);
HXDLIN( 120)										if ((this1 == 0)) {
HXLINE( 120)											m0 = ((Float)0.);
            										}
            										else {
HXLINE( 120)											m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            										}
HXDLIN( 120)										Float m1;
HXDLIN( 120)										int this2 = ((maskPixel >> 16) & 255);
HXDLIN( 120)										if ((this2 == 0)) {
HXLINE( 120)											m1 = ((Float)0.);
            										}
            										else {
HXLINE( 120)											m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            										}
HXDLIN( 120)										Float m2;
HXDLIN( 120)										int this3 = ((maskPixel >> 8) & 255);
HXDLIN( 120)										if ((this3 == 0)) {
HXLINE( 120)											m2 = ((Float)0.);
            										}
            										else {
HXLINE( 120)											m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            										}
HXDLIN( 120)										Float m3;
HXDLIN( 120)										int this4 = (maskPixel & 255);
HXDLIN( 120)										if ((this4 == 0)) {
HXLINE( 120)											m3 = ((Float)0.);
            										}
            										else {
HXLINE( 120)											m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            										}
HXDLIN( 120)										int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this6 >> 24) & 255)) )));
HXDLIN( 120)										int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this6 >> 16) & 255)) )));
HXDLIN( 120)										int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this6 >> 8) & 255)) )));
HXDLIN( 120)										int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this6 & 255)) )));
HXDLIN( 120)										col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN( 120)								if ((col != 0)) {
HXLINE( 120)									int x = (dx - rectLeft);
HXDLIN( 120)									int y = (dy - rectTop);
HXDLIN( 120)									int this1 = col;
HXDLIN( 120)									int c = this1;
HXDLIN( 120)									bool _hx_tmp;
HXDLIN( 120)									if ((((c >> 24) & 255) < 254)) {
HXLINE( 120)										_hx_tmp = undoImage1->transparent;
            									}
            									else {
HXLINE( 120)										_hx_tmp = false;
            									}
HXDLIN( 120)									if (_hx_tmp) {
HXLINE( 120)										int location;
HXDLIN( 120)										if (undoImage1->useVirtualPos) {
HXLINE( 120)											location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            										}
            										else {
HXLINE( 120)											location = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            										}
HXDLIN( 120)										::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN( 120)										::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 120)										int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 120)										int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 120)										int this3 = this2;
HXDLIN( 120)										int this4;
HXDLIN( 120)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)											this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            										}
            										else {
HXLINE( 120)											this4 = this3;
            										}
HXDLIN( 120)										Float a1;
HXDLIN( 120)										int this5 = ((this4 >> 24) & 255);
HXDLIN( 120)										if ((this5 == 0)) {
HXLINE( 120)											a1 = ((Float)0.);
            										}
            										else {
HXLINE( 120)											a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            										}
HXDLIN( 120)										Float r1;
HXDLIN( 120)										int this6 = ((this4 >> 16) & 255);
HXDLIN( 120)										if ((this6 == 0)) {
HXLINE( 120)											r1 = ((Float)0.);
            										}
            										else {
HXLINE( 120)											r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            										}
HXDLIN( 120)										Float g1;
HXDLIN( 120)										int this7 = ((this4 >> 8) & 255);
HXDLIN( 120)										if ((this7 == 0)) {
HXLINE( 120)											g1 = ((Float)0.);
            										}
            										else {
HXLINE( 120)											g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            										}
HXDLIN( 120)										Float b1;
HXDLIN( 120)										int this8 = (this4 & 255);
HXDLIN( 120)										if ((this8 == 0)) {
HXLINE( 120)											b1 = ((Float)0.);
            										}
            										else {
HXLINE( 120)											b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            										}
HXDLIN( 120)										Float a2;
HXDLIN( 120)										int this9 = ((col >> 24) & 255);
HXDLIN( 120)										if ((this9 == 0)) {
HXLINE( 120)											a2 = ((Float)0.);
            										}
            										else {
HXLINE( 120)											a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            										}
HXDLIN( 120)										Float r2;
HXDLIN( 120)										int this10 = ((col >> 16) & 255);
HXDLIN( 120)										if ((this10 == 0)) {
HXLINE( 120)											r2 = ((Float)0.);
            										}
            										else {
HXLINE( 120)											r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            										}
HXDLIN( 120)										Float g2;
HXDLIN( 120)										int this11 = ((col >> 8) & 255);
HXDLIN( 120)										if ((this11 == 0)) {
HXLINE( 120)											g2 = ((Float)0.);
            										}
            										else {
HXLINE( 120)											g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            										}
HXDLIN( 120)										Float b2;
HXDLIN( 120)										int this12 = (col & 255);
HXDLIN( 120)										if ((this12 == 0)) {
HXLINE( 120)											b2 = ((Float)0.);
            										}
            										else {
HXLINE( 120)											b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            										}
HXDLIN( 120)										Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 120)										int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 120)										int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 120)										int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 120)										int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 120)										int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 120)										{
HXLINE( 120)											::haxe::io::ArrayBufferViewImpl this13 = undoImage1->image;
HXDLIN( 120)											int value;
HXDLIN( 120)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)												value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            											}
            											else {
HXLINE( 120)												value = blended;
            											}
HXDLIN( 120)											bool _hx_tmp;
HXDLIN( 120)											if ((location >= 0)) {
HXLINE( 120)												_hx_tmp = (location < (this13->byteLength >> 2));
            											}
            											else {
HXLINE( 120)												_hx_tmp = false;
            											}
HXDLIN( 120)											if (_hx_tmp) {
HXLINE( 120)												::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 120)												int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 120)												_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 120)												_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 120)												_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 120)												_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            											}
            										}
            									}
            									else {
HXLINE( 120)										::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN( 120)										int index;
HXDLIN( 120)										if (undoImage1->useVirtualPos) {
HXLINE( 120)											index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            										}
            										else {
HXLINE( 120)											index = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            										}
HXDLIN( 120)										int value;
HXDLIN( 120)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)											value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            										}
            										else {
HXLINE( 120)											value = c;
            										}
HXDLIN( 120)										bool _hx_tmp;
HXDLIN( 120)										if ((index >= 0)) {
HXLINE( 120)											_hx_tmp = (index < (this1->byteLength >> 2));
            										}
            										else {
HXLINE( 120)											_hx_tmp = false;
            										}
HXDLIN( 120)										if (_hx_tmp) {
HXLINE( 120)											::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 120)											int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 120)											_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 120)											_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 120)											_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 120)											_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            										}
            									}
            								}
            								else {
HXLINE( 120)									if (forceClear) {
HXLINE( 120)										::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN( 120)										int x = (dx - rectLeft);
HXDLIN( 120)										int y = (dy - rectTop);
HXDLIN( 120)										int index;
HXDLIN( 120)										if (undoImage1->useVirtualPos) {
HXLINE( 120)											index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            										}
            										else {
HXLINE( 120)											index = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            										}
HXDLIN( 120)										bool _hx_tmp;
HXDLIN( 120)										if ((index >= 0)) {
HXLINE( 120)											_hx_tmp = (index < (this1->byteLength >> 2));
            										}
            										else {
HXLINE( 120)											_hx_tmp = false;
            										}
HXDLIN( 120)										if (_hx_tmp) {
HXLINE( 120)											::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 120)											int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 120)											_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 120)											_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 120)											_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 120)											_this->b[(pos + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 120)		bool found1 = false;
HXDLIN( 120)		Float s1 = ((Float)0.);
HXDLIN( 120)		Float t1 = ((Float)0.);
HXDLIN( 120)		Float sxx1 = ((Float)0.);
HXDLIN( 120)		Float txx1 = ((Float)0.);
HXDLIN( 120)		int _g_min1 = xIter31->start;
HXDLIN( 120)		int _g_max1 = xIter31->max;
HXDLIN( 120)		while((_g_min1 < _g_max1)){
HXLINE( 120)			_g_min1 = (_g_min1 + 1);
HXDLIN( 120)			int x = (_g_min1 - 1);
HXLINE(  61)			sxx1 = (sx1 * ( (Float)(x) ));
HXLINE(  62)			txx1 = (tx1 * ( (Float)(x) ));
HXLINE(  63)			found1 = false;
HXLINE( 120)			{
HXLINE( 120)				int _g_min = yIter31->start;
HXDLIN( 120)				int _g_max = yIter31->max;
HXDLIN( 120)				while((_g_min < _g_max)){
HXLINE( 120)					_g_min = (_g_min + 1);
HXDLIN( 120)					int y = (_g_min - 1);
HXLINE(  65)					s1 = ((s01 + sxx1) + (sy1 * ( (Float)(y) )));
HXLINE(  66)					t1 = ((t01 + txx1) + (ty1 * ( (Float)(y) )));
HXLINE( 120)					bool _hx_tmp;
HXDLIN( 120)					if (!((s1 <= 0))) {
HXLINE( 120)						_hx_tmp = (t1 <= 0);
            					}
            					else {
HXLINE( 120)						_hx_tmp = true;
            					}
HXDLIN( 120)					if (_hx_tmp) {
HXLINE( 120)						if (found1) {
HXLINE( 120)							goto _hx_goto_42;
            						}
            					}
            					else {
HXLINE( 120)						if (((s1 + t1) < A1)) {
HXLINE( 120)							{
HXLINE( 120)								int this2 = color;
HXDLIN( 120)								int c = this2;
HXDLIN( 120)								bool _hx_tmp;
HXDLIN( 120)								if ((((c >> 24) & 255) < 254)) {
HXLINE( 120)									_hx_tmp = this1->transparent;
            								}
            								else {
HXLINE( 120)									_hx_tmp = false;
            								}
HXDLIN( 120)								if (_hx_tmp) {
HXLINE( 120)									int location;
HXDLIN( 120)									if (this1->useVirtualPos) {
HXLINE( 120)										location = ::Std_obj::_hx_int(((((( (Float)(y) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            									}
            									else {
HXLINE( 120)										location = ::Std_obj::_hx_int(( (Float)(((y * this1->width) + x)) ));
            									}
HXDLIN( 120)									::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 120)									::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 120)									int pos = ((location << 2) + this2->byteOffset);
HXDLIN( 120)									int this3 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 120)									int this4 = this3;
HXDLIN( 120)									int this5;
HXDLIN( 120)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)										this5 = ((((((this4 >> 24) & 255) << 24) | ((this4 & 255) << 16)) | (((this4 >> 8) & 255) << 8)) | ((this4 >> 16) & 255));
            									}
            									else {
HXLINE( 120)										this5 = this4;
            									}
HXDLIN( 120)									Float a1;
HXDLIN( 120)									int this6 = ((this5 >> 24) & 255);
HXDLIN( 120)									if ((this6 == 0)) {
HXLINE( 120)										a1 = ((Float)0.);
            									}
            									else {
HXLINE( 120)										a1 = (( (Float)(this6) ) / ( (Float)(255) ));
            									}
HXDLIN( 120)									Float r1;
HXDLIN( 120)									int this7 = ((this5 >> 16) & 255);
HXDLIN( 120)									if ((this7 == 0)) {
HXLINE( 120)										r1 = ((Float)0.);
            									}
            									else {
HXLINE( 120)										r1 = (( (Float)(this7) ) / ( (Float)(255) ));
            									}
HXDLIN( 120)									Float g1;
HXDLIN( 120)									int this8 = ((this5 >> 8) & 255);
HXDLIN( 120)									if ((this8 == 0)) {
HXLINE( 120)										g1 = ((Float)0.);
            									}
            									else {
HXLINE( 120)										g1 = (( (Float)(this8) ) / ( (Float)(255) ));
            									}
HXDLIN( 120)									Float b1;
HXDLIN( 120)									int this9 = (this5 & 255);
HXDLIN( 120)									if ((this9 == 0)) {
HXLINE( 120)										b1 = ((Float)0.);
            									}
            									else {
HXLINE( 120)										b1 = (( (Float)(this9) ) / ( (Float)(255) ));
            									}
HXDLIN( 120)									Float a2;
HXDLIN( 120)									int this10 = ((color >> 24) & 255);
HXDLIN( 120)									if ((this10 == 0)) {
HXLINE( 120)										a2 = ((Float)0.);
            									}
            									else {
HXLINE( 120)										a2 = (( (Float)(this10) ) / ( (Float)(255) ));
            									}
HXDLIN( 120)									Float r2;
HXDLIN( 120)									int this11 = ((color >> 16) & 255);
HXDLIN( 120)									if ((this11 == 0)) {
HXLINE( 120)										r2 = ((Float)0.);
            									}
            									else {
HXLINE( 120)										r2 = (( (Float)(this11) ) / ( (Float)(255) ));
            									}
HXDLIN( 120)									Float g2;
HXDLIN( 120)									int this12 = ((color >> 8) & 255);
HXDLIN( 120)									if ((this12 == 0)) {
HXLINE( 120)										g2 = ((Float)0.);
            									}
            									else {
HXLINE( 120)										g2 = (( (Float)(this12) ) / ( (Float)(255) ));
            									}
HXDLIN( 120)									Float b2;
HXDLIN( 120)									int this13 = (color & 255);
HXDLIN( 120)									if ((this13 == 0)) {
HXLINE( 120)										b2 = ((Float)0.);
            									}
            									else {
HXLINE( 120)										b2 = (( (Float)(this13) ) / ( (Float)(255) ));
            									}
HXDLIN( 120)									Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 120)									int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 120)									int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 120)									int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 120)									int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 120)									int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 120)									{
HXLINE( 120)										::haxe::io::ArrayBufferViewImpl this14 = this1->image;
HXDLIN( 120)										int value;
HXDLIN( 120)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)											value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            										}
            										else {
HXLINE( 120)											value = blended;
            										}
HXDLIN( 120)										bool _hx_tmp;
HXDLIN( 120)										if ((location >= 0)) {
HXLINE( 120)											_hx_tmp = (location < (this14->byteLength >> 2));
            										}
            										else {
HXLINE( 120)											_hx_tmp = false;
            										}
HXDLIN( 120)										if (_hx_tmp) {
HXLINE( 120)											::haxe::io::Bytes _this = this14->bytes;
HXDLIN( 120)											int pos = ((location << 2) + this14->byteOffset);
HXDLIN( 120)											_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 120)											_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 120)											_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 120)											_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            										}
            									}
            								}
            								else {
HXLINE( 120)									::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 120)									int index;
HXDLIN( 120)									if (this1->useVirtualPos) {
HXLINE( 120)										index = ::Std_obj::_hx_int(((((( (Float)(y) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            									}
            									else {
HXLINE( 120)										index = ::Std_obj::_hx_int(( (Float)(((y * this1->width) + x)) ));
            									}
HXDLIN( 120)									int value;
HXDLIN( 120)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 120)										value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXLINE( 120)										value = c;
            									}
HXDLIN( 120)									bool _hx_tmp;
HXDLIN( 120)									if ((index >= 0)) {
HXLINE( 120)										_hx_tmp = (index < (this2->byteLength >> 2));
            									}
            									else {
HXLINE( 120)										_hx_tmp = false;
            									}
HXDLIN( 120)									if (_hx_tmp) {
HXLINE( 120)										::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 120)										int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 120)										_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 120)										_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 120)										_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 120)										_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            									}
            								}
            							}
HXLINE(  74)							found1 = true;
            						}
            						else {
HXLINE( 120)							if (found1) {
HXLINE( 120)								goto _hx_goto_42;
            							}
            						}
            					}
            				}
            				_hx_goto_42:;
            			}
            		}
HXDLIN( 120)		::pixelimage::iter::IntIterStart v_yIter31;
HXDLIN( 120)		::pixelimage::iter::IntIterStart v_xIter31;
HXDLIN( 120)		int v_undoY1;
HXDLIN( 120)		int v_undoX1;
HXDLIN( 120)		Float v_ty1;
HXDLIN( 120)		Float v_tx1;
HXDLIN( 120)		Float v_t01;
HXDLIN( 120)		Float v_sy1;
HXDLIN( 120)		Float v_sx1;
HXDLIN( 120)		Float v_s01;
HXDLIN( 120)		Float v_A1;
HXDLIN( 120)		Float ax2 = bx;
HXDLIN( 120)		Float ay2 = by;
HXDLIN( 120)		Float bx4 = bx3;
HXDLIN( 120)		Float by4 = by3;
HXDLIN( 120)		Float cx4 = cx3;
HXDLIN( 120)		Float cy4 = cy3;
HXDLIN( 120)		::pixelimage::ImageStruct v_undoImage1 = null();
HXDLIN( 120)		bool adjustWinding3 = (((((ax2 * by4) - (bx4 * ay2)) + ((bx4 * cy4) - (cx4 * by4))) + ((cx4 * ay2) - (ax2 * cy4))) > 0);
HXDLIN( 120)		if (!(adjustWinding3)) {
HXLINE( 120)			Float bx_ = bx4;
HXDLIN( 120)			Float by_ = by4;
HXLINE(  35)			bx4 = cx4;
HXLINE(  36)			by4 = cy4;
HXLINE(  37)			cx4 = bx_;
HXLINE(  38)			cy4 = by_;
            		}
HXLINE( 120)		Float v_ax1 = ax2;
HXDLIN( 120)		Float v_ay1 = ay2;
HXDLIN( 120)		Float v_bx1 = bx4;
HXDLIN( 120)		Float v_by1 = by4;
HXDLIN( 120)		Float v_cx1 = cx4;
HXDLIN( 120)		Float v_cy1 = cy4;
HXDLIN( 120)		bool v_preCalculated1 = true;
HXDLIN( 120)		{
HXLINE( 120)			v_s01 = ((v_ay1 * v_cx1) - (v_ax1 * v_cy1));
HXDLIN( 120)			v_sx1 = (v_cy1 - v_ay1);
HXDLIN( 120)			v_sy1 = (v_ax1 - v_cx1);
HXDLIN( 120)			v_t01 = ((v_ax1 * v_by1) - (v_ay1 * v_bx1));
HXDLIN( 120)			v_tx1 = (v_ay1 - v_by1);
HXDLIN( 120)			v_ty1 = (v_bx1 - v_ax1);
HXDLIN( 120)			v_A1 = ((((-(v_by1) * v_cx1) + (v_ay1 * (-(v_bx1) + v_cx1))) + (v_ax1 * (v_by1 - v_cy1))) + (v_bx1 * v_cy1));
HXDLIN( 120)			Float a3 = v_ax1;
HXDLIN( 120)			Float b2 = v_bx1;
HXDLIN( 120)			Float c2 = v_cx1;
HXDLIN( 120)			if ((a3 > b2)) {
HXLINE( 120)				if ((a3 > c2)) {
HXLINE( 120)					int min;
HXDLIN( 120)					if ((b2 > c2)) {
HXLINE( 120)						min = ::Math_obj::floor(c2);
            					}
            					else {
HXLINE( 120)						min = ::Math_obj::floor(b2);
            					}
HXDLIN( 120)					int ii_min = min;
HXDLIN( 120)					int ii_max = ::Math_obj::ceil(a3);
HXDLIN( 120)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 120)					v_xIter31 = this1;
            				}
            				else {
HXLINE( 120)					int ii_min = ::Math_obj::floor(b2);
HXDLIN( 120)					int ii_max = ::Math_obj::ceil(c2);
HXDLIN( 120)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 120)					v_xIter31 = this1;
            				}
            			}
            			else {
HXLINE( 120)				if ((b2 > c2)) {
HXLINE( 120)					int min;
HXDLIN( 120)					if ((a3 > c2)) {
HXLINE( 120)						min = ::Math_obj::floor(c2);
            					}
            					else {
HXLINE( 120)						min = ::Math_obj::ceil(a3);
            					}
HXDLIN( 120)					int ii_min = min;
HXDLIN( 120)					int ii_max = ::Math_obj::ceil(b2);
HXDLIN( 120)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 120)					v_xIter31 = this1;
            				}
            				else {
HXLINE( 120)					int ii_min = ::Math_obj::floor(a3);
HXDLIN( 120)					int ii_max = ::Math_obj::ceil(c2);
HXDLIN( 120)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 120)					v_xIter31 = this1;
            				}
            			}
HXDLIN( 120)			Float a4 = v_ay1;
HXDLIN( 120)			Float b3 = v_by1;
HXDLIN( 120)			Float c3 = v_cy1;
HXDLIN( 120)			if ((a4 > b3)) {
HXLINE( 120)				if ((a4 > c3)) {
HXLINE( 120)					int min;
HXDLIN( 120)					if ((b3 > c3)) {
HXLINE( 120)						min = ::Math_obj::floor(c3);
            					}
            					else {
HXLINE( 120)						min = ::Math_obj::floor(b3);
            					}
HXDLIN( 120)					int ii_min = min;
HXDLIN( 120)					int ii_max = ::Math_obj::ceil(a4);
HXDLIN( 120)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 120)					v_yIter31 = this1;
            				}
            				else {
HXLINE( 120)					int ii_min = ::Math_obj::floor(b3);
HXDLIN( 120)					int ii_max = ::Math_obj::ceil(c3);
HXDLIN( 120)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 120)					v_yIter31 = this1;
            				}
            			}
            			else {
HXLINE( 120)				if ((b3 > c3)) {
HXLINE( 120)					int min;
HXDLIN( 120)					if ((a4 > c3)) {
HXLINE( 120)						min = ::Math_obj::floor(c3);
            					}
            					else {
HXLINE( 120)						min = ::Math_obj::ceil(a4);
            					}
HXDLIN( 120)					int ii_min = min;
HXDLIN( 120)					int ii_max = ::Math_obj::ceil(b3);
HXDLIN( 120)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 120)					v_yIter31 = this1;
            				}
            				else {
HXLINE( 120)					int ii_min = ::Math_obj::floor(a4);
HXDLIN( 120)					int ii_max = ::Math_obj::ceil(c3);
HXDLIN( 120)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 120)					v_yIter31 = this1;
            				}
            			}
            		}
HXDLIN( 120)		if (hasUndo1) {
HXLINE( 120)			v_undoImage1 = undoImage1;
HXDLIN( 120)			v_undoX1 = xIter31->start;
HXDLIN( 120)			v_undoY1 = yIter31->start;
            		}
HXDLIN( 120)		::pixelimage::algo::HitQuad v = ::pixelimage::algo::HitQuad_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,dx,dy,true);
HXDLIN( 120)		this->info = v;
HXLINE( 123)		bool _hx_tmp;
HXDLIN( 123)		if (::hx::IsNotNull( this->info )) {
HXLINE( 123)			_hx_tmp = ::hx::IsNotNull( oldInfo );
            		}
            		else {
HXLINE( 123)			_hx_tmp = false;
            		}
HXDLIN( 123)		if (_hx_tmp) {
HXLINE( 124)			::pixelimage::ImageStruct this1 = this->temp;
HXDLIN( 124)			Float ax = ((( (Float)(oldInfo->__Field(HX_("bx",d6,55,00,00),::hx::paccDynamic)) ) * this->scaleX) + this->translateX);
HXDLIN( 124)			Float ay = ((( (Float)(oldInfo->__Field(HX_("by",d7,55,00,00),::hx::paccDynamic)) ) * this->scaleY) + this->translateY);
HXDLIN( 124)			Float bx = ((( (Float)(this->info->__Field(HX_("ax",f7,54,00,00),::hx::paccDynamic)) ) * this->scaleX) + this->translateX);
HXDLIN( 124)			Float by = ((( (Float)(this->info->__Field(HX_("ay",f8,54,00,00),::hx::paccDynamic)) ) * this->scaleY) + this->translateY);
HXDLIN( 124)			Float cx = ((( (Float)(this->info->__Field(HX_("dx",94,57,00,00),::hx::paccDynamic)) ) * this->scaleX) + this->translateX);
HXDLIN( 124)			Float cy = ((( (Float)(this->info->__Field(HX_("dy",95,57,00,00),::hx::paccDynamic)) ) * this->scaleY) + this->translateY);
HXDLIN( 124)			Float dx = ((( (Float)(oldInfo->__Field(HX_("cx",b5,56,00,00),::hx::paccDynamic)) ) * this->scaleX) + this->translateX);
HXDLIN( 124)			Float dy = ((( (Float)(oldInfo->__Field(HX_("cy",b6,56,00,00),::hx::paccDynamic)) ) * this->scaleY) + this->translateY);
HXDLIN( 124)			int color = this->strokeColor;
HXDLIN( 124)			{
HXLINE( 124)				Float bx1 = bx;
HXDLIN( 124)				Float by1 = by;
HXDLIN( 124)				Float cx1 = dx;
HXDLIN( 124)				Float cy1 = dy;
HXDLIN( 124)				bool hasUndo = false;
HXDLIN( 124)				bool adjustWinding = (((((ax * by1) - (bx1 * ay)) + ((bx1 * cy1) - (cx1 * by1))) + ((cx1 * ay) - (ax * cy1))) > 0);
HXDLIN( 124)				if (!(adjustWinding)) {
HXLINE( 124)					Float bx_ = bx1;
HXDLIN( 124)					Float by_ = by1;
HXLINE(  26)					bx1 = cx1;
HXLINE(  27)					by1 = cy1;
HXLINE(  28)					cx1 = bx_;
HXLINE(  29)					cy1 = by_;
            				}
HXLINE( 124)				Float s0 = ((ay * cx1) - (ax * cy1));
HXDLIN( 124)				Float sx = (cy1 - ay);
HXDLIN( 124)				Float sy = (ax - cx1);
HXDLIN( 124)				Float t0 = ((ax * by1) - (ay * bx1));
HXDLIN( 124)				Float tx = (ay - by1);
HXDLIN( 124)				Float ty = (bx1 - ax);
HXDLIN( 124)				Float A = ((((-(by1) * cx1) + (ay * (-(bx1) + cx1))) + (ax * (by1 - cy1))) + (bx1 * cy1));
HXDLIN( 124)				::pixelimage::iter::IntIterStart xIter3;
HXDLIN( 124)				if ((ax > bx1)) {
HXLINE( 124)					if ((ax > cx1)) {
HXLINE( 124)						int min;
HXDLIN( 124)						if ((bx1 > cx1)) {
HXLINE( 124)							min = ::Math_obj::floor(cx1);
            						}
            						else {
HXLINE( 124)							min = ::Math_obj::floor(bx1);
            						}
HXDLIN( 124)						int ii_min = min;
HXDLIN( 124)						int ii_max = ::Math_obj::ceil(ax);
HXDLIN( 124)						::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 124)						xIter3 = this1;
            					}
            					else {
HXLINE( 124)						int ii_min = ::Math_obj::floor(bx1);
HXDLIN( 124)						int ii_max = ::Math_obj::ceil(cx1);
HXDLIN( 124)						::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 124)						xIter3 = this1;
            					}
            				}
            				else {
HXLINE( 124)					if ((bx1 > cx1)) {
HXLINE( 124)						int min;
HXDLIN( 124)						if ((ax > cx1)) {
HXLINE( 124)							min = ::Math_obj::floor(cx1);
            						}
            						else {
HXLINE( 124)							min = ::Math_obj::ceil(ax);
            						}
HXDLIN( 124)						int ii_min = min;
HXDLIN( 124)						int ii_max = ::Math_obj::ceil(bx1);
HXDLIN( 124)						::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 124)						xIter3 = this1;
            					}
            					else {
HXLINE( 124)						int ii_min = ::Math_obj::floor(ax);
HXDLIN( 124)						int ii_max = ::Math_obj::ceil(cx1);
HXDLIN( 124)						::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 124)						xIter3 = this1;
            					}
            				}
HXDLIN( 124)				::pixelimage::iter::IntIterStart yIter3;
HXDLIN( 124)				if ((ay > by1)) {
HXLINE( 124)					if ((ay > cy1)) {
HXLINE( 124)						int min;
HXDLIN( 124)						if ((by1 > cy1)) {
HXLINE( 124)							min = ::Math_obj::floor(cy1);
            						}
            						else {
HXLINE( 124)							min = ::Math_obj::floor(by1);
            						}
HXDLIN( 124)						int ii_min = min;
HXDLIN( 124)						int ii_max = ::Math_obj::ceil(ay);
HXDLIN( 124)						::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 124)						yIter3 = this1;
            					}
            					else {
HXLINE( 124)						int ii_min = ::Math_obj::floor(by1);
HXDLIN( 124)						int ii_max = ::Math_obj::ceil(cy1);
HXDLIN( 124)						::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 124)						yIter3 = this1;
            					}
            				}
            				else {
HXLINE( 124)					if ((by1 > cy1)) {
HXLINE( 124)						int min;
HXDLIN( 124)						if ((ay > cy1)) {
HXLINE( 124)							min = ::Math_obj::floor(cy1);
            						}
            						else {
HXLINE( 124)							min = ::Math_obj::ceil(ay);
            						}
HXDLIN( 124)						int ii_min = min;
HXDLIN( 124)						int ii_max = ::Math_obj::ceil(by1);
HXDLIN( 124)						::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 124)						yIter3 = this1;
            					}
            					else {
HXLINE( 124)						int ii_min = ::Math_obj::floor(ay);
HXDLIN( 124)						int ii_max = ::Math_obj::ceil(cy1);
HXDLIN( 124)						::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 124)						yIter3 = this1;
            					}
            				}
HXDLIN( 124)				::pixelimage::ImageStruct undoImage = null();
HXDLIN( 124)				if (hasUndo) {
HXLINE( 124)					int w = ((xIter3->max - xIter3->start) + 1);
HXDLIN( 124)					int h = ((yIter3->max - yIter3->start) + 1);
HXDLIN( 124)					int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN( 124)					::haxe::io::ArrayBufferViewImpl this2 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 124)					::haxe::io::ArrayBufferViewImpl this3 = this2;
HXDLIN( 124)					::pixelimage::ImageStruct this4 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this3);
HXDLIN( 124)					undoImage = this4;
HXDLIN( 124)					{
HXLINE( 124)						int rectLeft = xIter3->start;
HXDLIN( 124)						int rectTop = yIter3->start;
HXDLIN( 124)						int rectRight = xIter3->max;
HXDLIN( 124)						bool forceClear = false;
HXDLIN( 124)						{
HXLINE( 124)							int _g = rectTop;
HXDLIN( 124)							int _g1 = yIter3->max;
HXDLIN( 124)							while((_g < _g1)){
HXLINE( 124)								_g = (_g + 1);
HXDLIN( 124)								int dy = (_g - 1);
HXDLIN( 124)								{
HXLINE( 124)									int _g1 = rectLeft;
HXDLIN( 124)									int _g2 = rectRight;
HXDLIN( 124)									while((_g1 < _g2)){
HXLINE( 124)										_g1 = (_g1 + 1);
HXDLIN( 124)										int dx = (_g1 - 1);
HXDLIN( 124)										::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 124)										int index;
HXDLIN( 124)										if (this1->useVirtualPos) {
HXLINE( 124)											index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            										}
            										else {
HXLINE( 124)											index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            										}
HXDLIN( 124)										::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 124)										int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 124)										int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 124)										int col;
HXDLIN( 124)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 124)											col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            										}
            										else {
HXLINE( 124)											col = c;
            										}
HXDLIN( 124)										bool _hx_tmp;
HXDLIN( 124)										if (this1->useMask) {
HXLINE( 124)											_hx_tmp = ::hx::IsNotNull( this1->mask );
            										}
            										else {
HXLINE( 124)											_hx_tmp = false;
            										}
HXDLIN( 124)										if (_hx_tmp) {
HXLINE( 124)											::pixelimage::ImageStruct this2 = this1->mask;
HXDLIN( 124)											::haxe::io::ArrayBufferViewImpl this3 = this2->image;
HXDLIN( 124)											int index;
HXDLIN( 124)											if (this2->useVirtualPos) {
HXLINE( 124)												index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this2->virtualY) * ( (Float)(this2->width) )) + dx) - this2->virtualX));
            											}
            											else {
HXLINE( 124)												index = ::Std_obj::_hx_int(( (Float)(((dy * this2->width) + dx)) ));
            											}
HXDLIN( 124)											::haxe::io::Bytes _this = this3->bytes;
HXDLIN( 124)											int pos = ((index << 2) + this3->byteOffset);
HXDLIN( 124)											int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 124)											int v;
HXDLIN( 124)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 124)												v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            											}
            											else {
HXLINE( 124)												v = c;
            											}
HXDLIN( 124)											int this4 = v;
HXDLIN( 124)											int maskPixel = this4;
HXDLIN( 124)											int this5 = col;
HXDLIN( 124)											int this6 = this5;
HXDLIN( 124)											if ((maskPixel == 0)) {
HXLINE( 124)												int this1 = this6;
HXDLIN( 124)												col = this1;
            											}
            											else {
HXLINE( 124)												Float m0;
HXDLIN( 124)												int this1 = ((maskPixel >> 24) & 255);
HXDLIN( 124)												if ((this1 == 0)) {
HXLINE( 124)													m0 = ((Float)0.);
            												}
            												else {
HXLINE( 124)													m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            												}
HXDLIN( 124)												Float m1;
HXDLIN( 124)												int this2 = ((maskPixel >> 16) & 255);
HXDLIN( 124)												if ((this2 == 0)) {
HXLINE( 124)													m1 = ((Float)0.);
            												}
            												else {
HXLINE( 124)													m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            												}
HXDLIN( 124)												Float m2;
HXDLIN( 124)												int this3 = ((maskPixel >> 8) & 255);
HXDLIN( 124)												if ((this3 == 0)) {
HXLINE( 124)													m2 = ((Float)0.);
            												}
            												else {
HXLINE( 124)													m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            												}
HXDLIN( 124)												Float m3;
HXDLIN( 124)												int this4 = (maskPixel & 255);
HXDLIN( 124)												if ((this4 == 0)) {
HXLINE( 124)													m3 = ((Float)0.);
            												}
            												else {
HXLINE( 124)													m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            												}
HXDLIN( 124)												int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this6 >> 24) & 255)) )));
HXDLIN( 124)												int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this6 >> 16) & 255)) )));
HXDLIN( 124)												int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this6 >> 8) & 255)) )));
HXDLIN( 124)												int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this6 & 255)) )));
HXDLIN( 124)												col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN( 124)										if ((col != 0)) {
HXLINE( 124)											int x = (dx - rectLeft);
HXDLIN( 124)											int y = (dy - rectTop);
HXDLIN( 124)											int this1 = col;
HXDLIN( 124)											int c = this1;
HXDLIN( 124)											bool _hx_tmp;
HXDLIN( 124)											if ((((c >> 24) & 255) < 254)) {
HXLINE( 124)												_hx_tmp = undoImage->transparent;
            											}
            											else {
HXLINE( 124)												_hx_tmp = false;
            											}
HXDLIN( 124)											if (_hx_tmp) {
HXLINE( 124)												int location;
HXDLIN( 124)												if (undoImage->useVirtualPos) {
HXLINE( 124)													location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            												}
            												else {
HXLINE( 124)													location = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            												}
HXDLIN( 124)												::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN( 124)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 124)												int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 124)												int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 124)												int this3 = this2;
HXDLIN( 124)												int this4;
HXDLIN( 124)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 124)													this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            												}
            												else {
HXLINE( 124)													this4 = this3;
            												}
HXDLIN( 124)												Float a1;
HXDLIN( 124)												int this5 = ((this4 >> 24) & 255);
HXDLIN( 124)												if ((this5 == 0)) {
HXLINE( 124)													a1 = ((Float)0.);
            												}
            												else {
HXLINE( 124)													a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            												}
HXDLIN( 124)												Float r1;
HXDLIN( 124)												int this6 = ((this4 >> 16) & 255);
HXDLIN( 124)												if ((this6 == 0)) {
HXLINE( 124)													r1 = ((Float)0.);
            												}
            												else {
HXLINE( 124)													r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            												}
HXDLIN( 124)												Float g1;
HXDLIN( 124)												int this7 = ((this4 >> 8) & 255);
HXDLIN( 124)												if ((this7 == 0)) {
HXLINE( 124)													g1 = ((Float)0.);
            												}
            												else {
HXLINE( 124)													g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            												}
HXDLIN( 124)												Float b1;
HXDLIN( 124)												int this8 = (this4 & 255);
HXDLIN( 124)												if ((this8 == 0)) {
HXLINE( 124)													b1 = ((Float)0.);
            												}
            												else {
HXLINE( 124)													b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            												}
HXDLIN( 124)												Float a2;
HXDLIN( 124)												int this9 = ((col >> 24) & 255);
HXDLIN( 124)												if ((this9 == 0)) {
HXLINE( 124)													a2 = ((Float)0.);
            												}
            												else {
HXLINE( 124)													a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            												}
HXDLIN( 124)												Float r2;
HXDLIN( 124)												int this10 = ((col >> 16) & 255);
HXDLIN( 124)												if ((this10 == 0)) {
HXLINE( 124)													r2 = ((Float)0.);
            												}
            												else {
HXLINE( 124)													r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            												}
HXDLIN( 124)												Float g2;
HXDLIN( 124)												int this11 = ((col >> 8) & 255);
HXDLIN( 124)												if ((this11 == 0)) {
HXLINE( 124)													g2 = ((Float)0.);
            												}
            												else {
HXLINE( 124)													g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            												}
HXDLIN( 124)												Float b2;
HXDLIN( 124)												int this12 = (col & 255);
HXDLIN( 124)												if ((this12 == 0)) {
HXLINE( 124)													b2 = ((Float)0.);
            												}
            												else {
HXLINE( 124)													b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            												}
HXDLIN( 124)												Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 124)												int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 124)												int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 124)												int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 124)												int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 124)												int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 124)												{
HXLINE( 124)													::haxe::io::ArrayBufferViewImpl this13 = undoImage->image;
HXDLIN( 124)													int value;
HXDLIN( 124)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 124)														value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            													}
            													else {
HXLINE( 124)														value = blended;
            													}
HXDLIN( 124)													bool _hx_tmp;
HXDLIN( 124)													if ((location >= 0)) {
HXLINE( 124)														_hx_tmp = (location < (this13->byteLength >> 2));
            													}
            													else {
HXLINE( 124)														_hx_tmp = false;
            													}
HXDLIN( 124)													if (_hx_tmp) {
HXLINE( 124)														::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 124)														int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 124)														_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 124)														_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 124)														_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 124)														_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            													}
            												}
            											}
            											else {
HXLINE( 124)												::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN( 124)												int index;
HXDLIN( 124)												if (undoImage->useVirtualPos) {
HXLINE( 124)													index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            												}
            												else {
HXLINE( 124)													index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            												}
HXDLIN( 124)												int value;
HXDLIN( 124)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 124)													value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE( 124)													value = c;
            												}
HXDLIN( 124)												bool _hx_tmp;
HXDLIN( 124)												if ((index >= 0)) {
HXLINE( 124)													_hx_tmp = (index < (this1->byteLength >> 2));
            												}
            												else {
HXLINE( 124)													_hx_tmp = false;
            												}
HXDLIN( 124)												if (_hx_tmp) {
HXLINE( 124)													::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 124)													int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 124)													_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 124)													_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 124)													_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 124)													_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            												}
            											}
            										}
            										else {
HXLINE( 124)											if (forceClear) {
HXLINE( 124)												::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN( 124)												int x = (dx - rectLeft);
HXDLIN( 124)												int y = (dy - rectTop);
HXDLIN( 124)												int index;
HXDLIN( 124)												if (undoImage->useVirtualPos) {
HXLINE( 124)													index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            												}
            												else {
HXLINE( 124)													index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            												}
HXDLIN( 124)												bool _hx_tmp;
HXDLIN( 124)												if ((index >= 0)) {
HXLINE( 124)													_hx_tmp = (index < (this1->byteLength >> 2));
            												}
            												else {
HXLINE( 124)													_hx_tmp = false;
            												}
HXDLIN( 124)												if (_hx_tmp) {
HXLINE( 124)													::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 124)													int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 124)													_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 124)													_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 124)													_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 124)													_this->b[(pos + 3)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 124)				bool found = false;
HXDLIN( 124)				Float s = ((Float)0.);
HXDLIN( 124)				Float t = ((Float)0.);
HXDLIN( 124)				Float sxx = ((Float)0.);
HXDLIN( 124)				Float txx = ((Float)0.);
HXDLIN( 124)				{
HXLINE( 124)					int _g_min = xIter3->start;
HXDLIN( 124)					int _g_max = xIter3->max;
HXDLIN( 124)					while((_g_min < _g_max)){
HXLINE( 124)						_g_min = (_g_min + 1);
HXDLIN( 124)						int x = (_g_min - 1);
HXLINE(  61)						sxx = (sx * ( (Float)(x) ));
HXLINE(  62)						txx = (tx * ( (Float)(x) ));
HXLINE(  63)						found = false;
HXLINE( 124)						{
HXLINE( 124)							int _g_min1 = yIter3->start;
HXDLIN( 124)							int _g_max = yIter3->max;
HXDLIN( 124)							while((_g_min1 < _g_max)){
HXLINE( 124)								_g_min1 = (_g_min1 + 1);
HXDLIN( 124)								int y = (_g_min1 - 1);
HXLINE(  65)								s = ((s0 + sxx) + (sy * ( (Float)(y) )));
HXLINE(  66)								t = ((t0 + txx) + (ty * ( (Float)(y) )));
HXLINE( 124)								bool _hx_tmp;
HXDLIN( 124)								if (!((s <= 0))) {
HXLINE( 124)									_hx_tmp = (t <= 0);
            								}
            								else {
HXLINE( 124)									_hx_tmp = true;
            								}
HXDLIN( 124)								if (_hx_tmp) {
HXLINE( 124)									if (found) {
HXLINE( 124)										goto _hx_goto_46;
            									}
            								}
            								else {
HXLINE( 124)									if (((s + t) < A)) {
HXLINE( 124)										{
HXLINE( 124)											int this2 = color;
HXDLIN( 124)											int c = this2;
HXDLIN( 124)											bool _hx_tmp;
HXDLIN( 124)											if ((((c >> 24) & 255) < 254)) {
HXLINE( 124)												_hx_tmp = this1->transparent;
            											}
            											else {
HXLINE( 124)												_hx_tmp = false;
            											}
HXDLIN( 124)											if (_hx_tmp) {
HXLINE( 124)												int location;
HXDLIN( 124)												if (this1->useVirtualPos) {
HXLINE( 124)													location = ::Std_obj::_hx_int(((((( (Float)(y) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            												}
            												else {
HXLINE( 124)													location = ::Std_obj::_hx_int(( (Float)(((y * this1->width) + x)) ));
            												}
HXDLIN( 124)												::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 124)												::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 124)												int pos = ((location << 2) + this2->byteOffset);
HXDLIN( 124)												int this3 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 124)												int this4 = this3;
HXDLIN( 124)												int this5;
HXDLIN( 124)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 124)													this5 = ((((((this4 >> 24) & 255) << 24) | ((this4 & 255) << 16)) | (((this4 >> 8) & 255) << 8)) | ((this4 >> 16) & 255));
            												}
            												else {
HXLINE( 124)													this5 = this4;
            												}
HXDLIN( 124)												Float a1;
HXDLIN( 124)												int this6 = ((this5 >> 24) & 255);
HXDLIN( 124)												if ((this6 == 0)) {
HXLINE( 124)													a1 = ((Float)0.);
            												}
            												else {
HXLINE( 124)													a1 = (( (Float)(this6) ) / ( (Float)(255) ));
            												}
HXDLIN( 124)												Float r1;
HXDLIN( 124)												int this7 = ((this5 >> 16) & 255);
HXDLIN( 124)												if ((this7 == 0)) {
HXLINE( 124)													r1 = ((Float)0.);
            												}
            												else {
HXLINE( 124)													r1 = (( (Float)(this7) ) / ( (Float)(255) ));
            												}
HXDLIN( 124)												Float g1;
HXDLIN( 124)												int this8 = ((this5 >> 8) & 255);
HXDLIN( 124)												if ((this8 == 0)) {
HXLINE( 124)													g1 = ((Float)0.);
            												}
            												else {
HXLINE( 124)													g1 = (( (Float)(this8) ) / ( (Float)(255) ));
            												}
HXDLIN( 124)												Float b1;
HXDLIN( 124)												int this9 = (this5 & 255);
HXDLIN( 124)												if ((this9 == 0)) {
HXLINE( 124)													b1 = ((Float)0.);
            												}
            												else {
HXLINE( 124)													b1 = (( (Float)(this9) ) / ( (Float)(255) ));
            												}
HXDLIN( 124)												Float a2;
HXDLIN( 124)												int this10 = ((color >> 24) & 255);
HXDLIN( 124)												if ((this10 == 0)) {
HXLINE( 124)													a2 = ((Float)0.);
            												}
            												else {
HXLINE( 124)													a2 = (( (Float)(this10) ) / ( (Float)(255) ));
            												}
HXDLIN( 124)												Float r2;
HXDLIN( 124)												int this11 = ((color >> 16) & 255);
HXDLIN( 124)												if ((this11 == 0)) {
HXLINE( 124)													r2 = ((Float)0.);
            												}
            												else {
HXLINE( 124)													r2 = (( (Float)(this11) ) / ( (Float)(255) ));
            												}
HXDLIN( 124)												Float g2;
HXDLIN( 124)												int this12 = ((color >> 8) & 255);
HXDLIN( 124)												if ((this12 == 0)) {
HXLINE( 124)													g2 = ((Float)0.);
            												}
            												else {
HXLINE( 124)													g2 = (( (Float)(this12) ) / ( (Float)(255) ));
            												}
HXDLIN( 124)												Float b2;
HXDLIN( 124)												int this13 = (color & 255);
HXDLIN( 124)												if ((this13 == 0)) {
HXLINE( 124)													b2 = ((Float)0.);
            												}
            												else {
HXLINE( 124)													b2 = (( (Float)(this13) ) / ( (Float)(255) ));
            												}
HXDLIN( 124)												Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 124)												int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 124)												int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 124)												int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 124)												int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 124)												int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 124)												{
HXLINE( 124)													::haxe::io::ArrayBufferViewImpl this14 = this1->image;
HXDLIN( 124)													int value;
HXDLIN( 124)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 124)														value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            													}
            													else {
HXLINE( 124)														value = blended;
            													}
HXDLIN( 124)													bool _hx_tmp;
HXDLIN( 124)													if ((location >= 0)) {
HXLINE( 124)														_hx_tmp = (location < (this14->byteLength >> 2));
            													}
            													else {
HXLINE( 124)														_hx_tmp = false;
            													}
HXDLIN( 124)													if (_hx_tmp) {
HXLINE( 124)														::haxe::io::Bytes _this = this14->bytes;
HXDLIN( 124)														int pos = ((location << 2) + this14->byteOffset);
HXDLIN( 124)														_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 124)														_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 124)														_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 124)														_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            													}
            												}
            											}
            											else {
HXLINE( 124)												::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 124)												int index;
HXDLIN( 124)												if (this1->useVirtualPos) {
HXLINE( 124)													index = ::Std_obj::_hx_int(((((( (Float)(y) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            												}
            												else {
HXLINE( 124)													index = ::Std_obj::_hx_int(( (Float)(((y * this1->width) + x)) ));
            												}
HXDLIN( 124)												int value;
HXDLIN( 124)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 124)													value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE( 124)													value = c;
            												}
HXDLIN( 124)												bool _hx_tmp;
HXDLIN( 124)												if ((index >= 0)) {
HXLINE( 124)													_hx_tmp = (index < (this2->byteLength >> 2));
            												}
            												else {
HXLINE( 124)													_hx_tmp = false;
            												}
HXDLIN( 124)												if (_hx_tmp) {
HXLINE( 124)													::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 124)													int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 124)													_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 124)													_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 124)													_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 124)													_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            												}
            											}
            										}
HXLINE(  74)										found = true;
            									}
            									else {
HXLINE( 124)										if (found) {
HXLINE( 124)											goto _hx_goto_46;
            										}
            									}
            								}
            							}
            							_hx_goto_46:;
            						}
            					}
            				}
HXDLIN( 124)				::pixelimage::iter::IntIterStart v_yIter3;
HXDLIN( 124)				::pixelimage::iter::IntIterStart v_xIter3;
HXDLIN( 124)				int v_undoY;
HXDLIN( 124)				int v_undoX;
HXDLIN( 124)				Float v_ty;
HXDLIN( 124)				Float v_tx;
HXDLIN( 124)				Float v_t0;
HXDLIN( 124)				Float v_sy;
HXDLIN( 124)				Float v_sx;
HXDLIN( 124)				Float v_s0;
HXDLIN( 124)				Float v_A;
HXDLIN( 124)				Float ax1 = ax;
HXDLIN( 124)				Float ay1 = ay;
HXDLIN( 124)				Float bx2 = bx1;
HXDLIN( 124)				Float by2 = by1;
HXDLIN( 124)				Float cx2 = cx1;
HXDLIN( 124)				Float cy2 = cy1;
HXDLIN( 124)				::pixelimage::ImageStruct v_undoImage = null();
HXDLIN( 124)				bool adjustWinding1 = (((((ax1 * by2) - (bx2 * ay1)) + ((bx2 * cy2) - (cx2 * by2))) + ((cx2 * ay1) - (ax1 * cy2))) > 0);
HXDLIN( 124)				if (!(adjustWinding1)) {
HXLINE( 124)					Float bx_ = bx2;
HXDLIN( 124)					Float by_ = by2;
HXLINE(  35)					bx2 = cx2;
HXLINE(  36)					by2 = cy2;
HXLINE(  37)					cx2 = bx_;
HXLINE(  38)					cy2 = by_;
            				}
HXLINE( 124)				Float v_ax = ax1;
HXDLIN( 124)				Float v_ay = ay1;
HXDLIN( 124)				Float v_bx = bx2;
HXDLIN( 124)				Float v_by = by2;
HXDLIN( 124)				Float v_cx = cx2;
HXDLIN( 124)				Float v_cy = cy2;
HXDLIN( 124)				bool v_preCalculated = true;
HXDLIN( 124)				{
HXLINE( 124)					v_s0 = ((v_ay * v_cx) - (v_ax * v_cy));
HXDLIN( 124)					v_sx = (v_cy - v_ay);
HXDLIN( 124)					v_sy = (v_ax - v_cx);
HXDLIN( 124)					v_t0 = ((v_ax * v_by) - (v_ay * v_bx));
HXDLIN( 124)					v_tx = (v_ay - v_by);
HXDLIN( 124)					v_ty = (v_bx - v_ax);
HXDLIN( 124)					v_A = ((((-(v_by) * v_cx) + (v_ay * (-(v_bx) + v_cx))) + (v_ax * (v_by - v_cy))) + (v_bx * v_cy));
HXDLIN( 124)					Float a = v_ax;
HXDLIN( 124)					Float b = v_bx;
HXDLIN( 124)					Float c = v_cx;
HXDLIN( 124)					if ((a > b)) {
HXLINE( 124)						if ((a > c)) {
HXLINE( 124)							int min;
HXDLIN( 124)							if ((b > c)) {
HXLINE( 124)								min = ::Math_obj::floor(c);
            							}
            							else {
HXLINE( 124)								min = ::Math_obj::floor(b);
            							}
HXDLIN( 124)							int ii_min = min;
HXDLIN( 124)							int ii_max = ::Math_obj::ceil(a);
HXDLIN( 124)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 124)							v_xIter3 = this1;
            						}
            						else {
HXLINE( 124)							int ii_min = ::Math_obj::floor(b);
HXDLIN( 124)							int ii_max = ::Math_obj::ceil(c);
HXDLIN( 124)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 124)							v_xIter3 = this1;
            						}
            					}
            					else {
HXLINE( 124)						if ((b > c)) {
HXLINE( 124)							int min;
HXDLIN( 124)							if ((a > c)) {
HXLINE( 124)								min = ::Math_obj::floor(c);
            							}
            							else {
HXLINE( 124)								min = ::Math_obj::ceil(a);
            							}
HXDLIN( 124)							int ii_min = min;
HXDLIN( 124)							int ii_max = ::Math_obj::ceil(b);
HXDLIN( 124)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 124)							v_xIter3 = this1;
            						}
            						else {
HXLINE( 124)							int ii_min = ::Math_obj::floor(a);
HXDLIN( 124)							int ii_max = ::Math_obj::ceil(c);
HXDLIN( 124)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 124)							v_xIter3 = this1;
            						}
            					}
HXDLIN( 124)					Float a1 = v_ay;
HXDLIN( 124)					Float b1 = v_by;
HXDLIN( 124)					Float c1 = v_cy;
HXDLIN( 124)					if ((a1 > b1)) {
HXLINE( 124)						if ((a1 > c1)) {
HXLINE( 124)							int min;
HXDLIN( 124)							if ((b1 > c1)) {
HXLINE( 124)								min = ::Math_obj::floor(c1);
            							}
            							else {
HXLINE( 124)								min = ::Math_obj::floor(b1);
            							}
HXDLIN( 124)							int ii_min = min;
HXDLIN( 124)							int ii_max = ::Math_obj::ceil(a1);
HXDLIN( 124)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 124)							v_yIter3 = this1;
            						}
            						else {
HXLINE( 124)							int ii_min = ::Math_obj::floor(b1);
HXDLIN( 124)							int ii_max = ::Math_obj::ceil(c1);
HXDLIN( 124)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 124)							v_yIter3 = this1;
            						}
            					}
            					else {
HXLINE( 124)						if ((b1 > c1)) {
HXLINE( 124)							int min;
HXDLIN( 124)							if ((a1 > c1)) {
HXLINE( 124)								min = ::Math_obj::floor(c1);
            							}
            							else {
HXLINE( 124)								min = ::Math_obj::ceil(a1);
            							}
HXDLIN( 124)							int ii_min = min;
HXDLIN( 124)							int ii_max = ::Math_obj::ceil(b1);
HXDLIN( 124)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 124)							v_yIter3 = this1;
            						}
            						else {
HXLINE( 124)							int ii_min = ::Math_obj::floor(a1);
HXDLIN( 124)							int ii_max = ::Math_obj::ceil(c1);
HXDLIN( 124)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 124)							v_yIter3 = this1;
            						}
            					}
            				}
HXDLIN( 124)				if (hasUndo) {
HXLINE( 124)					v_undoImage = undoImage;
HXDLIN( 124)					v_undoX = xIter3->start;
HXDLIN( 124)					v_undoY = yIter3->start;
            				}
HXDLIN( 124)				Float bx3 = cx;
HXDLIN( 124)				Float by3 = cy;
HXDLIN( 124)				Float cx3 = dx;
HXDLIN( 124)				Float cy3 = dy;
HXDLIN( 124)				bool hasUndo1 = false;
HXDLIN( 124)				bool adjustWinding2 = (((((bx * by3) - (bx3 * by)) + ((bx3 * cy3) - (cx3 * by3))) + ((cx3 * by) - (bx * cy3))) > 0);
HXDLIN( 124)				if (!(adjustWinding2)) {
HXLINE( 124)					Float bx_ = bx3;
HXDLIN( 124)					Float by_ = by3;
HXLINE(  26)					bx3 = cx3;
HXLINE(  27)					by3 = cy3;
HXLINE(  28)					cx3 = bx_;
HXLINE(  29)					cy3 = by_;
            				}
HXLINE( 124)				Float s01 = ((by * cx3) - (bx * cy3));
HXDLIN( 124)				Float sx1 = (cy3 - by);
HXDLIN( 124)				Float sy1 = (bx - cx3);
HXDLIN( 124)				Float t01 = ((bx * by3) - (by * bx3));
HXDLIN( 124)				Float tx1 = (by - by3);
HXDLIN( 124)				Float ty1 = (bx3 - bx);
HXDLIN( 124)				Float A1 = ((((-(by3) * cx3) + (by * (-(bx3) + cx3))) + (bx * (by3 - cy3))) + (bx3 * cy3));
HXDLIN( 124)				::pixelimage::iter::IntIterStart xIter31;
HXDLIN( 124)				if ((bx > bx3)) {
HXLINE( 124)					if ((bx > cx3)) {
HXLINE( 124)						int min;
HXDLIN( 124)						if ((bx3 > cx3)) {
HXLINE( 124)							min = ::Math_obj::floor(cx3);
            						}
            						else {
HXLINE( 124)							min = ::Math_obj::floor(bx3);
            						}
HXDLIN( 124)						int ii_min = min;
HXDLIN( 124)						int ii_max = ::Math_obj::ceil(bx);
HXDLIN( 124)						::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 124)						xIter31 = this1;
            					}
            					else {
HXLINE( 124)						int ii_min = ::Math_obj::floor(bx3);
HXDLIN( 124)						int ii_max = ::Math_obj::ceil(cx3);
HXDLIN( 124)						::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 124)						xIter31 = this1;
            					}
            				}
            				else {
HXLINE( 124)					if ((bx3 > cx3)) {
HXLINE( 124)						int min;
HXDLIN( 124)						if ((bx > cx3)) {
HXLINE( 124)							min = ::Math_obj::floor(cx3);
            						}
            						else {
HXLINE( 124)							min = ::Math_obj::ceil(bx);
            						}
HXDLIN( 124)						int ii_min = min;
HXDLIN( 124)						int ii_max = ::Math_obj::ceil(bx3);
HXDLIN( 124)						::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 124)						xIter31 = this1;
            					}
            					else {
HXLINE( 124)						int ii_min = ::Math_obj::floor(bx);
HXDLIN( 124)						int ii_max = ::Math_obj::ceil(cx3);
HXDLIN( 124)						::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 124)						xIter31 = this1;
            					}
            				}
HXDLIN( 124)				::pixelimage::iter::IntIterStart yIter31;
HXDLIN( 124)				if ((by > by3)) {
HXLINE( 124)					if ((by > cy3)) {
HXLINE( 124)						int min;
HXDLIN( 124)						if ((by3 > cy3)) {
HXLINE( 124)							min = ::Math_obj::floor(cy3);
            						}
            						else {
HXLINE( 124)							min = ::Math_obj::floor(by3);
            						}
HXDLIN( 124)						int ii_min = min;
HXDLIN( 124)						int ii_max = ::Math_obj::ceil(by);
HXDLIN( 124)						::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 124)						yIter31 = this1;
            					}
            					else {
HXLINE( 124)						int ii_min = ::Math_obj::floor(by3);
HXDLIN( 124)						int ii_max = ::Math_obj::ceil(cy3);
HXDLIN( 124)						::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 124)						yIter31 = this1;
            					}
            				}
            				else {
HXLINE( 124)					if ((by3 > cy3)) {
HXLINE( 124)						int min;
HXDLIN( 124)						if ((by > cy3)) {
HXLINE( 124)							min = ::Math_obj::floor(cy3);
            						}
            						else {
HXLINE( 124)							min = ::Math_obj::ceil(by);
            						}
HXDLIN( 124)						int ii_min = min;
HXDLIN( 124)						int ii_max = ::Math_obj::ceil(by3);
HXDLIN( 124)						::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 124)						yIter31 = this1;
            					}
            					else {
HXLINE( 124)						int ii_min = ::Math_obj::floor(by);
HXDLIN( 124)						int ii_max = ::Math_obj::ceil(cy3);
HXDLIN( 124)						::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 124)						yIter31 = this1;
            					}
            				}
HXDLIN( 124)				::pixelimage::ImageStruct undoImage1 = null();
HXDLIN( 124)				if (hasUndo1) {
HXLINE( 124)					int w = ((xIter31->max - xIter31->start) + 1);
HXDLIN( 124)					int h = ((yIter31->max - yIter31->start) + 1);
HXDLIN( 124)					int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN( 124)					::haxe::io::ArrayBufferViewImpl this2 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 124)					::haxe::io::ArrayBufferViewImpl this3 = this2;
HXDLIN( 124)					::pixelimage::ImageStruct this4 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this3);
HXDLIN( 124)					undoImage1 = this4;
HXDLIN( 124)					{
HXLINE( 124)						int rectLeft = xIter31->start;
HXDLIN( 124)						int rectTop = yIter31->start;
HXDLIN( 124)						int rectRight = xIter31->max;
HXDLIN( 124)						bool forceClear = false;
HXDLIN( 124)						{
HXLINE( 124)							int _g = rectTop;
HXDLIN( 124)							int _g1 = yIter31->max;
HXDLIN( 124)							while((_g < _g1)){
HXLINE( 124)								_g = (_g + 1);
HXDLIN( 124)								int dy = (_g - 1);
HXDLIN( 124)								{
HXLINE( 124)									int _g1 = rectLeft;
HXDLIN( 124)									int _g2 = rectRight;
HXDLIN( 124)									while((_g1 < _g2)){
HXLINE( 124)										_g1 = (_g1 + 1);
HXDLIN( 124)										int dx = (_g1 - 1);
HXDLIN( 124)										::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 124)										int index;
HXDLIN( 124)										if (this1->useVirtualPos) {
HXLINE( 124)											index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            										}
            										else {
HXLINE( 124)											index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            										}
HXDLIN( 124)										::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 124)										int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 124)										int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 124)										int col;
HXDLIN( 124)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 124)											col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            										}
            										else {
HXLINE( 124)											col = c;
            										}
HXDLIN( 124)										bool _hx_tmp;
HXDLIN( 124)										if (this1->useMask) {
HXLINE( 124)											_hx_tmp = ::hx::IsNotNull( this1->mask );
            										}
            										else {
HXLINE( 124)											_hx_tmp = false;
            										}
HXDLIN( 124)										if (_hx_tmp) {
HXLINE( 124)											::pixelimage::ImageStruct this2 = this1->mask;
HXDLIN( 124)											::haxe::io::ArrayBufferViewImpl this3 = this2->image;
HXDLIN( 124)											int index;
HXDLIN( 124)											if (this2->useVirtualPos) {
HXLINE( 124)												index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this2->virtualY) * ( (Float)(this2->width) )) + dx) - this2->virtualX));
            											}
            											else {
HXLINE( 124)												index = ::Std_obj::_hx_int(( (Float)(((dy * this2->width) + dx)) ));
            											}
HXDLIN( 124)											::haxe::io::Bytes _this = this3->bytes;
HXDLIN( 124)											int pos = ((index << 2) + this3->byteOffset);
HXDLIN( 124)											int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 124)											int v;
HXDLIN( 124)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 124)												v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            											}
            											else {
HXLINE( 124)												v = c;
            											}
HXDLIN( 124)											int this4 = v;
HXDLIN( 124)											int maskPixel = this4;
HXDLIN( 124)											int this5 = col;
HXDLIN( 124)											int this6 = this5;
HXDLIN( 124)											if ((maskPixel == 0)) {
HXLINE( 124)												int this1 = this6;
HXDLIN( 124)												col = this1;
            											}
            											else {
HXLINE( 124)												Float m0;
HXDLIN( 124)												int this1 = ((maskPixel >> 24) & 255);
HXDLIN( 124)												if ((this1 == 0)) {
HXLINE( 124)													m0 = ((Float)0.);
            												}
            												else {
HXLINE( 124)													m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            												}
HXDLIN( 124)												Float m1;
HXDLIN( 124)												int this2 = ((maskPixel >> 16) & 255);
HXDLIN( 124)												if ((this2 == 0)) {
HXLINE( 124)													m1 = ((Float)0.);
            												}
            												else {
HXLINE( 124)													m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            												}
HXDLIN( 124)												Float m2;
HXDLIN( 124)												int this3 = ((maskPixel >> 8) & 255);
HXDLIN( 124)												if ((this3 == 0)) {
HXLINE( 124)													m2 = ((Float)0.);
            												}
            												else {
HXLINE( 124)													m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            												}
HXDLIN( 124)												Float m3;
HXDLIN( 124)												int this4 = (maskPixel & 255);
HXDLIN( 124)												if ((this4 == 0)) {
HXLINE( 124)													m3 = ((Float)0.);
            												}
            												else {
HXLINE( 124)													m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            												}
HXDLIN( 124)												int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this6 >> 24) & 255)) )));
HXDLIN( 124)												int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this6 >> 16) & 255)) )));
HXDLIN( 124)												int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this6 >> 8) & 255)) )));
HXDLIN( 124)												int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this6 & 255)) )));
HXDLIN( 124)												col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            											}
            										}
HXDLIN( 124)										if ((col != 0)) {
HXLINE( 124)											int x = (dx - rectLeft);
HXDLIN( 124)											int y = (dy - rectTop);
HXDLIN( 124)											int this1 = col;
HXDLIN( 124)											int c = this1;
HXDLIN( 124)											bool _hx_tmp;
HXDLIN( 124)											if ((((c >> 24) & 255) < 254)) {
HXLINE( 124)												_hx_tmp = undoImage1->transparent;
            											}
            											else {
HXLINE( 124)												_hx_tmp = false;
            											}
HXDLIN( 124)											if (_hx_tmp) {
HXLINE( 124)												int location;
HXDLIN( 124)												if (undoImage1->useVirtualPos) {
HXLINE( 124)													location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            												}
            												else {
HXLINE( 124)													location = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            												}
HXDLIN( 124)												::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN( 124)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 124)												int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 124)												int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 124)												int this3 = this2;
HXDLIN( 124)												int this4;
HXDLIN( 124)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 124)													this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            												}
            												else {
HXLINE( 124)													this4 = this3;
            												}
HXDLIN( 124)												Float a1;
HXDLIN( 124)												int this5 = ((this4 >> 24) & 255);
HXDLIN( 124)												if ((this5 == 0)) {
HXLINE( 124)													a1 = ((Float)0.);
            												}
            												else {
HXLINE( 124)													a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            												}
HXDLIN( 124)												Float r1;
HXDLIN( 124)												int this6 = ((this4 >> 16) & 255);
HXDLIN( 124)												if ((this6 == 0)) {
HXLINE( 124)													r1 = ((Float)0.);
            												}
            												else {
HXLINE( 124)													r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            												}
HXDLIN( 124)												Float g1;
HXDLIN( 124)												int this7 = ((this4 >> 8) & 255);
HXDLIN( 124)												if ((this7 == 0)) {
HXLINE( 124)													g1 = ((Float)0.);
            												}
            												else {
HXLINE( 124)													g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            												}
HXDLIN( 124)												Float b1;
HXDLIN( 124)												int this8 = (this4 & 255);
HXDLIN( 124)												if ((this8 == 0)) {
HXLINE( 124)													b1 = ((Float)0.);
            												}
            												else {
HXLINE( 124)													b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            												}
HXDLIN( 124)												Float a2;
HXDLIN( 124)												int this9 = ((col >> 24) & 255);
HXDLIN( 124)												if ((this9 == 0)) {
HXLINE( 124)													a2 = ((Float)0.);
            												}
            												else {
HXLINE( 124)													a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            												}
HXDLIN( 124)												Float r2;
HXDLIN( 124)												int this10 = ((col >> 16) & 255);
HXDLIN( 124)												if ((this10 == 0)) {
HXLINE( 124)													r2 = ((Float)0.);
            												}
            												else {
HXLINE( 124)													r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            												}
HXDLIN( 124)												Float g2;
HXDLIN( 124)												int this11 = ((col >> 8) & 255);
HXDLIN( 124)												if ((this11 == 0)) {
HXLINE( 124)													g2 = ((Float)0.);
            												}
            												else {
HXLINE( 124)													g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            												}
HXDLIN( 124)												Float b2;
HXDLIN( 124)												int this12 = (col & 255);
HXDLIN( 124)												if ((this12 == 0)) {
HXLINE( 124)													b2 = ((Float)0.);
            												}
            												else {
HXLINE( 124)													b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            												}
HXDLIN( 124)												Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 124)												int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 124)												int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 124)												int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 124)												int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 124)												int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 124)												{
HXLINE( 124)													::haxe::io::ArrayBufferViewImpl this13 = undoImage1->image;
HXDLIN( 124)													int value;
HXDLIN( 124)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 124)														value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            													}
            													else {
HXLINE( 124)														value = blended;
            													}
HXDLIN( 124)													bool _hx_tmp;
HXDLIN( 124)													if ((location >= 0)) {
HXLINE( 124)														_hx_tmp = (location < (this13->byteLength >> 2));
            													}
            													else {
HXLINE( 124)														_hx_tmp = false;
            													}
HXDLIN( 124)													if (_hx_tmp) {
HXLINE( 124)														::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 124)														int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 124)														_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 124)														_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 124)														_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 124)														_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            													}
            												}
            											}
            											else {
HXLINE( 124)												::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN( 124)												int index;
HXDLIN( 124)												if (undoImage1->useVirtualPos) {
HXLINE( 124)													index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            												}
            												else {
HXLINE( 124)													index = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            												}
HXDLIN( 124)												int value;
HXDLIN( 124)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 124)													value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE( 124)													value = c;
            												}
HXDLIN( 124)												bool _hx_tmp;
HXDLIN( 124)												if ((index >= 0)) {
HXLINE( 124)													_hx_tmp = (index < (this1->byteLength >> 2));
            												}
            												else {
HXLINE( 124)													_hx_tmp = false;
            												}
HXDLIN( 124)												if (_hx_tmp) {
HXLINE( 124)													::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 124)													int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 124)													_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 124)													_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 124)													_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 124)													_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            												}
            											}
            										}
            										else {
HXLINE( 124)											if (forceClear) {
HXLINE( 124)												::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN( 124)												int x = (dx - rectLeft);
HXDLIN( 124)												int y = (dy - rectTop);
HXDLIN( 124)												int index;
HXDLIN( 124)												if (undoImage1->useVirtualPos) {
HXLINE( 124)													index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            												}
            												else {
HXLINE( 124)													index = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            												}
HXDLIN( 124)												bool _hx_tmp;
HXDLIN( 124)												if ((index >= 0)) {
HXLINE( 124)													_hx_tmp = (index < (this1->byteLength >> 2));
            												}
            												else {
HXLINE( 124)													_hx_tmp = false;
            												}
HXDLIN( 124)												if (_hx_tmp) {
HXLINE( 124)													::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 124)													int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 124)													_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 124)													_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 124)													_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 124)													_this->b[(pos + 3)] = ( (unsigned char)(0) );
            												}
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
HXDLIN( 124)				bool found1 = false;
HXDLIN( 124)				Float s1 = ((Float)0.);
HXDLIN( 124)				Float t1 = ((Float)0.);
HXDLIN( 124)				Float sxx1 = ((Float)0.);
HXDLIN( 124)				Float txx1 = ((Float)0.);
HXDLIN( 124)				{
HXLINE( 124)					int _g_min1 = xIter31->start;
HXDLIN( 124)					int _g_max1 = xIter31->max;
HXDLIN( 124)					while((_g_min1 < _g_max1)){
HXLINE( 124)						_g_min1 = (_g_min1 + 1);
HXDLIN( 124)						int x = (_g_min1 - 1);
HXLINE(  61)						sxx1 = (sx1 * ( (Float)(x) ));
HXLINE(  62)						txx1 = (tx1 * ( (Float)(x) ));
HXLINE(  63)						found1 = false;
HXLINE( 124)						{
HXLINE( 124)							int _g_min = yIter31->start;
HXDLIN( 124)							int _g_max = yIter31->max;
HXDLIN( 124)							while((_g_min < _g_max)){
HXLINE( 124)								_g_min = (_g_min + 1);
HXDLIN( 124)								int y = (_g_min - 1);
HXLINE(  65)								s1 = ((s01 + sxx1) + (sy1 * ( (Float)(y) )));
HXLINE(  66)								t1 = ((t01 + txx1) + (ty1 * ( (Float)(y) )));
HXLINE( 124)								bool _hx_tmp;
HXDLIN( 124)								if (!((s1 <= 0))) {
HXLINE( 124)									_hx_tmp = (t1 <= 0);
            								}
            								else {
HXLINE( 124)									_hx_tmp = true;
            								}
HXDLIN( 124)								if (_hx_tmp) {
HXLINE( 124)									if (found1) {
HXLINE( 124)										goto _hx_goto_50;
            									}
            								}
            								else {
HXLINE( 124)									if (((s1 + t1) < A1)) {
HXLINE( 124)										{
HXLINE( 124)											int this2 = color;
HXDLIN( 124)											int c = this2;
HXDLIN( 124)											bool _hx_tmp;
HXDLIN( 124)											if ((((c >> 24) & 255) < 254)) {
HXLINE( 124)												_hx_tmp = this1->transparent;
            											}
            											else {
HXLINE( 124)												_hx_tmp = false;
            											}
HXDLIN( 124)											if (_hx_tmp) {
HXLINE( 124)												int location;
HXDLIN( 124)												if (this1->useVirtualPos) {
HXLINE( 124)													location = ::Std_obj::_hx_int(((((( (Float)(y) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            												}
            												else {
HXLINE( 124)													location = ::Std_obj::_hx_int(( (Float)(((y * this1->width) + x)) ));
            												}
HXDLIN( 124)												::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 124)												::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 124)												int pos = ((location << 2) + this2->byteOffset);
HXDLIN( 124)												int this3 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 124)												int this4 = this3;
HXDLIN( 124)												int this5;
HXDLIN( 124)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 124)													this5 = ((((((this4 >> 24) & 255) << 24) | ((this4 & 255) << 16)) | (((this4 >> 8) & 255) << 8)) | ((this4 >> 16) & 255));
            												}
            												else {
HXLINE( 124)													this5 = this4;
            												}
HXDLIN( 124)												Float a1;
HXDLIN( 124)												int this6 = ((this5 >> 24) & 255);
HXDLIN( 124)												if ((this6 == 0)) {
HXLINE( 124)													a1 = ((Float)0.);
            												}
            												else {
HXLINE( 124)													a1 = (( (Float)(this6) ) / ( (Float)(255) ));
            												}
HXDLIN( 124)												Float r1;
HXDLIN( 124)												int this7 = ((this5 >> 16) & 255);
HXDLIN( 124)												if ((this7 == 0)) {
HXLINE( 124)													r1 = ((Float)0.);
            												}
            												else {
HXLINE( 124)													r1 = (( (Float)(this7) ) / ( (Float)(255) ));
            												}
HXDLIN( 124)												Float g1;
HXDLIN( 124)												int this8 = ((this5 >> 8) & 255);
HXDLIN( 124)												if ((this8 == 0)) {
HXLINE( 124)													g1 = ((Float)0.);
            												}
            												else {
HXLINE( 124)													g1 = (( (Float)(this8) ) / ( (Float)(255) ));
            												}
HXDLIN( 124)												Float b1;
HXDLIN( 124)												int this9 = (this5 & 255);
HXDLIN( 124)												if ((this9 == 0)) {
HXLINE( 124)													b1 = ((Float)0.);
            												}
            												else {
HXLINE( 124)													b1 = (( (Float)(this9) ) / ( (Float)(255) ));
            												}
HXDLIN( 124)												Float a2;
HXDLIN( 124)												int this10 = ((color >> 24) & 255);
HXDLIN( 124)												if ((this10 == 0)) {
HXLINE( 124)													a2 = ((Float)0.);
            												}
            												else {
HXLINE( 124)													a2 = (( (Float)(this10) ) / ( (Float)(255) ));
            												}
HXDLIN( 124)												Float r2;
HXDLIN( 124)												int this11 = ((color >> 16) & 255);
HXDLIN( 124)												if ((this11 == 0)) {
HXLINE( 124)													r2 = ((Float)0.);
            												}
            												else {
HXLINE( 124)													r2 = (( (Float)(this11) ) / ( (Float)(255) ));
            												}
HXDLIN( 124)												Float g2;
HXDLIN( 124)												int this12 = ((color >> 8) & 255);
HXDLIN( 124)												if ((this12 == 0)) {
HXLINE( 124)													g2 = ((Float)0.);
            												}
            												else {
HXLINE( 124)													g2 = (( (Float)(this12) ) / ( (Float)(255) ));
            												}
HXDLIN( 124)												Float b2;
HXDLIN( 124)												int this13 = (color & 255);
HXDLIN( 124)												if ((this13 == 0)) {
HXLINE( 124)													b2 = ((Float)0.);
            												}
            												else {
HXLINE( 124)													b2 = (( (Float)(this13) ) / ( (Float)(255) ));
            												}
HXDLIN( 124)												Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 124)												int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 124)												int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 124)												int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 124)												int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 124)												int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 124)												{
HXLINE( 124)													::haxe::io::ArrayBufferViewImpl this14 = this1->image;
HXDLIN( 124)													int value;
HXDLIN( 124)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 124)														value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            													}
            													else {
HXLINE( 124)														value = blended;
            													}
HXDLIN( 124)													bool _hx_tmp;
HXDLIN( 124)													if ((location >= 0)) {
HXLINE( 124)														_hx_tmp = (location < (this14->byteLength >> 2));
            													}
            													else {
HXLINE( 124)														_hx_tmp = false;
            													}
HXDLIN( 124)													if (_hx_tmp) {
HXLINE( 124)														::haxe::io::Bytes _this = this14->bytes;
HXDLIN( 124)														int pos = ((location << 2) + this14->byteOffset);
HXDLIN( 124)														_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 124)														_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 124)														_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 124)														_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            													}
            												}
            											}
            											else {
HXLINE( 124)												::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 124)												int index;
HXDLIN( 124)												if (this1->useVirtualPos) {
HXLINE( 124)													index = ::Std_obj::_hx_int(((((( (Float)(y) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            												}
            												else {
HXLINE( 124)													index = ::Std_obj::_hx_int(( (Float)(((y * this1->width) + x)) ));
            												}
HXDLIN( 124)												int value;
HXDLIN( 124)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 124)													value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE( 124)													value = c;
            												}
HXDLIN( 124)												bool _hx_tmp;
HXDLIN( 124)												if ((index >= 0)) {
HXLINE( 124)													_hx_tmp = (index < (this2->byteLength >> 2));
            												}
            												else {
HXLINE( 124)													_hx_tmp = false;
            												}
HXDLIN( 124)												if (_hx_tmp) {
HXLINE( 124)													::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 124)													int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 124)													_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 124)													_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 124)													_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 124)													_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            												}
            											}
            										}
HXLINE(  74)										found1 = true;
            									}
            									else {
HXLINE( 124)										if (found1) {
HXLINE( 124)											goto _hx_goto_50;
            										}
            									}
            								}
            							}
            							_hx_goto_50:;
            						}
            					}
            				}
HXDLIN( 124)				::pixelimage::iter::IntIterStart v_yIter31;
HXDLIN( 124)				::pixelimage::iter::IntIterStart v_xIter31;
HXDLIN( 124)				int v_undoY1;
HXDLIN( 124)				int v_undoX1;
HXDLIN( 124)				Float v_ty1;
HXDLIN( 124)				Float v_tx1;
HXDLIN( 124)				Float v_t01;
HXDLIN( 124)				Float v_sy1;
HXDLIN( 124)				Float v_sx1;
HXDLIN( 124)				Float v_s01;
HXDLIN( 124)				Float v_A1;
HXDLIN( 124)				Float ax2 = bx;
HXDLIN( 124)				Float ay2 = by;
HXDLIN( 124)				Float bx4 = bx3;
HXDLIN( 124)				Float by4 = by3;
HXDLIN( 124)				Float cx4 = cx3;
HXDLIN( 124)				Float cy4 = cy3;
HXDLIN( 124)				::pixelimage::ImageStruct v_undoImage1 = null();
HXDLIN( 124)				bool adjustWinding3 = (((((ax2 * by4) - (bx4 * ay2)) + ((bx4 * cy4) - (cx4 * by4))) + ((cx4 * ay2) - (ax2 * cy4))) > 0);
HXDLIN( 124)				if (!(adjustWinding3)) {
HXLINE( 124)					Float bx_ = bx4;
HXDLIN( 124)					Float by_ = by4;
HXLINE(  35)					bx4 = cx4;
HXLINE(  36)					by4 = cy4;
HXLINE(  37)					cx4 = bx_;
HXLINE(  38)					cy4 = by_;
            				}
HXLINE( 124)				Float v_ax1 = ax2;
HXDLIN( 124)				Float v_ay1 = ay2;
HXDLIN( 124)				Float v_bx1 = bx4;
HXDLIN( 124)				Float v_by1 = by4;
HXDLIN( 124)				Float v_cx1 = cx4;
HXDLIN( 124)				Float v_cy1 = cy4;
HXDLIN( 124)				bool v_preCalculated1 = true;
HXDLIN( 124)				{
HXLINE( 124)					v_s01 = ((v_ay1 * v_cx1) - (v_ax1 * v_cy1));
HXDLIN( 124)					v_sx1 = (v_cy1 - v_ay1);
HXDLIN( 124)					v_sy1 = (v_ax1 - v_cx1);
HXDLIN( 124)					v_t01 = ((v_ax1 * v_by1) - (v_ay1 * v_bx1));
HXDLIN( 124)					v_tx1 = (v_ay1 - v_by1);
HXDLIN( 124)					v_ty1 = (v_bx1 - v_ax1);
HXDLIN( 124)					v_A1 = ((((-(v_by1) * v_cx1) + (v_ay1 * (-(v_bx1) + v_cx1))) + (v_ax1 * (v_by1 - v_cy1))) + (v_bx1 * v_cy1));
HXDLIN( 124)					Float a2 = v_ax1;
HXDLIN( 124)					Float b2 = v_bx1;
HXDLIN( 124)					Float c2 = v_cx1;
HXDLIN( 124)					if ((a2 > b2)) {
HXLINE( 124)						if ((a2 > c2)) {
HXLINE( 124)							int min;
HXDLIN( 124)							if ((b2 > c2)) {
HXLINE( 124)								min = ::Math_obj::floor(c2);
            							}
            							else {
HXLINE( 124)								min = ::Math_obj::floor(b2);
            							}
HXDLIN( 124)							int ii_min = min;
HXDLIN( 124)							int ii_max = ::Math_obj::ceil(a2);
HXDLIN( 124)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 124)							v_xIter31 = this1;
            						}
            						else {
HXLINE( 124)							int ii_min = ::Math_obj::floor(b2);
HXDLIN( 124)							int ii_max = ::Math_obj::ceil(c2);
HXDLIN( 124)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 124)							v_xIter31 = this1;
            						}
            					}
            					else {
HXLINE( 124)						if ((b2 > c2)) {
HXLINE( 124)							int min;
HXDLIN( 124)							if ((a2 > c2)) {
HXLINE( 124)								min = ::Math_obj::floor(c2);
            							}
            							else {
HXLINE( 124)								min = ::Math_obj::ceil(a2);
            							}
HXDLIN( 124)							int ii_min = min;
HXDLIN( 124)							int ii_max = ::Math_obj::ceil(b2);
HXDLIN( 124)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 124)							v_xIter31 = this1;
            						}
            						else {
HXLINE( 124)							int ii_min = ::Math_obj::floor(a2);
HXDLIN( 124)							int ii_max = ::Math_obj::ceil(c2);
HXDLIN( 124)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 124)							v_xIter31 = this1;
            						}
            					}
HXDLIN( 124)					Float a3 = v_ay1;
HXDLIN( 124)					Float b3 = v_by1;
HXDLIN( 124)					Float c3 = v_cy1;
HXDLIN( 124)					if ((a3 > b3)) {
HXLINE( 124)						if ((a3 > c3)) {
HXLINE( 124)							int min;
HXDLIN( 124)							if ((b3 > c3)) {
HXLINE( 124)								min = ::Math_obj::floor(c3);
            							}
            							else {
HXLINE( 124)								min = ::Math_obj::floor(b3);
            							}
HXDLIN( 124)							int ii_min = min;
HXDLIN( 124)							int ii_max = ::Math_obj::ceil(a3);
HXDLIN( 124)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 124)							v_yIter31 = this1;
            						}
            						else {
HXLINE( 124)							int ii_min = ::Math_obj::floor(b3);
HXDLIN( 124)							int ii_max = ::Math_obj::ceil(c3);
HXDLIN( 124)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 124)							v_yIter31 = this1;
            						}
            					}
            					else {
HXLINE( 124)						if ((b3 > c3)) {
HXLINE( 124)							int min;
HXDLIN( 124)							if ((a3 > c3)) {
HXLINE( 124)								min = ::Math_obj::floor(c3);
            							}
            							else {
HXLINE( 124)								min = ::Math_obj::ceil(a3);
            							}
HXDLIN( 124)							int ii_min = min;
HXDLIN( 124)							int ii_max = ::Math_obj::ceil(b3);
HXDLIN( 124)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 124)							v_yIter31 = this1;
            						}
            						else {
HXLINE( 124)							int ii_min = ::Math_obj::floor(a3);
HXDLIN( 124)							int ii_max = ::Math_obj::ceil(c3);
HXDLIN( 124)							::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 124)							v_yIter31 = this1;
            						}
            					}
            				}
HXDLIN( 124)				if (hasUndo1) {
HXLINE( 124)					v_undoImage1 = undoImage1;
HXDLIN( 124)					v_undoX1 = xIter31->start;
HXDLIN( 124)					v_undoY1 = yIter31->start;
            				}
HXDLIN( 124)				::pixelimage::algo::HitQuad v = ::pixelimage::algo::HitQuad_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,dx,dy,true);
            			}
            		}
HXLINE( 126)		this->x0 = x2;
HXLINE( 127)		this->y0 = y2;
HXLINE( 128)		this->toggleDraw = true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(VePathElementShape_obj,lineTo,(void))

void VePathElementShape_obj::moveTo(Float x1,Float y1){
            	HX_STACKFRAME(&_hx_pos_d7d37466074fc340_131_moveTo)
HXLINE( 132)		this->x0 = x1;
HXLINE( 133)		this->y0 = y1;
HXLINE( 134)		this->info = null();
HXLINE( 135)		this->toggleDraw = true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(VePathElementShape_obj,moveTo,(void))


::hx::ObjectPtr< VePathElementShape_obj > VePathElementShape_obj::__new(::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::Array< int > strokeColors,::Array< Float > strokeWidths,::Array< ::String > strokeDashGapArray,::hx::Null< int >  __o_fill,::String __o_pathData,::hx::Null< Float >  __o_translateX,::hx::Null< Float >  __o_translateY,::hx::Null< Float >  __o_scaleX,::hx::Null< Float >  __o_scaleY) {
	::hx::ObjectPtr< VePathElementShape_obj > __this = new VePathElementShape_obj();
	__this->__construct(__o_opacity,__o_visibility,strokeColors,strokeWidths,strokeDashGapArray,__o_fill,__o_pathData,__o_translateX,__o_translateY,__o_scaleX,__o_scaleY);
	return __this;
}

::hx::ObjectPtr< VePathElementShape_obj > VePathElementShape_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::Array< int > strokeColors,::Array< Float > strokeWidths,::Array< ::String > strokeDashGapArray,::hx::Null< int >  __o_fill,::String __o_pathData,::hx::Null< Float >  __o_translateX,::hx::Null< Float >  __o_translateY,::hx::Null< Float >  __o_scaleX,::hx::Null< Float >  __o_scaleY) {
	VePathElementShape_obj *__this = (VePathElementShape_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(VePathElementShape_obj), true, "pixelimage.triangleGML.shape.VePathElementShape"));
	*(void **)__this = VePathElementShape_obj::_hx_vtable;
	__this->__construct(__o_opacity,__o_visibility,strokeColors,strokeWidths,strokeDashGapArray,__o_fill,__o_pathData,__o_translateX,__o_translateY,__o_scaleX,__o_scaleY);
	return __this;
}

VePathElementShape_obj::VePathElementShape_obj()
{
}

void VePathElementShape_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(VePathElementShape);
	HX_MARK_MEMBER_NAME(pathData,"pathData");
	HX_MARK_MEMBER_NAME(strokeColors,"strokeColors");
	HX_MARK_MEMBER_NAME(strokeWidths,"strokeWidths");
	HX_MARK_MEMBER_NAME(translateX,"translateX");
	HX_MARK_MEMBER_NAME(translateY,"translateY");
	HX_MARK_MEMBER_NAME(scaleX,"scaleX");
	HX_MARK_MEMBER_NAME(scaleY,"scaleY");
	HX_MARK_MEMBER_NAME(sp,"sp");
	HX_MARK_MEMBER_NAME(x0,"x0");
	HX_MARK_MEMBER_NAME(y0,"y0");
	HX_MARK_MEMBER_NAME(temp,"temp");
	HX_MARK_MEMBER_NAME(toggleDraw,"toggleDraw");
	HX_MARK_MEMBER_NAME(info,"info");
	::pixelimage::triangleGML::coreShape::BasicShape_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void VePathElementShape_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(pathData,"pathData");
	HX_VISIT_MEMBER_NAME(strokeColors,"strokeColors");
	HX_VISIT_MEMBER_NAME(strokeWidths,"strokeWidths");
	HX_VISIT_MEMBER_NAME(translateX,"translateX");
	HX_VISIT_MEMBER_NAME(translateY,"translateY");
	HX_VISIT_MEMBER_NAME(scaleX,"scaleX");
	HX_VISIT_MEMBER_NAME(scaleY,"scaleY");
	HX_VISIT_MEMBER_NAME(sp,"sp");
	HX_VISIT_MEMBER_NAME(x0,"x0");
	HX_VISIT_MEMBER_NAME(y0,"y0");
	HX_VISIT_MEMBER_NAME(temp,"temp");
	HX_VISIT_MEMBER_NAME(toggleDraw,"toggleDraw");
	HX_VISIT_MEMBER_NAME(info,"info");
	::pixelimage::triangleGML::coreShape::BasicShape_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val VePathElementShape_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"sp") ) { return ::hx::Val( sp ); }
		if (HX_FIELD_EQ(inName,"x0") ) { return ::hx::Val( x0 ); }
		if (HX_FIELD_EQ(inName,"y0") ) { return ::hx::Val( y0 ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"temp") ) { return ::hx::Val( temp ); }
		if (HX_FIELD_EQ(inName,"info") ) { return ::hx::Val( info ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"scaleX") ) { return ::hx::Val( scaleX ); }
		if (HX_FIELD_EQ(inName,"scaleY") ) { return ::hx::Val( scaleY ); }
		if (HX_FIELD_EQ(inName,"render") ) { return ::hx::Val( render_dyn() ); }
		if (HX_FIELD_EQ(inName,"lineTo") ) { return ::hx::Val( lineTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveTo") ) { return ::hx::Val( moveTo_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"drawing") ) { return ::hx::Val( drawing_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"pathData") ) { return ::hx::Val( pathData ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"translateX") ) { return ::hx::Val( translateX ); }
		if (HX_FIELD_EQ(inName,"translateY") ) { return ::hx::Val( translateY ); }
		if (HX_FIELD_EQ(inName,"toggleDraw") ) { return ::hx::Val( toggleDraw ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"strokeColors") ) { return ::hx::Val( strokeColors ); }
		if (HX_FIELD_EQ(inName,"strokeWidths") ) { return ::hx::Val( strokeWidths ); }
		if (HX_FIELD_EQ(inName,"setParameter") ) { return ::hx::Val( setParameter_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"lineSegmentTo") ) { return ::hx::Val( lineSegmentTo_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val VePathElementShape_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"sp") ) { sp=inValue.Cast< ::justPath::SvgLinePath >(); return inValue; }
		if (HX_FIELD_EQ(inName,"x0") ) { x0=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y0") ) { y0=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"temp") ) { temp=inValue.Cast< ::pixelimage::ImageStruct >(); return inValue; }
		if (HX_FIELD_EQ(inName,"info") ) { info=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"scaleX") ) { scaleX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scaleY") ) { scaleY=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"pathData") ) { pathData=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"translateX") ) { translateX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"translateY") ) { translateY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"toggleDraw") ) { toggleDraw=inValue.Cast< bool >(); return inValue; }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"strokeColors") ) { strokeColors=inValue.Cast< ::Array< int > >(); return inValue; }
		if (HX_FIELD_EQ(inName,"strokeWidths") ) { strokeWidths=inValue.Cast< ::Array< Float > >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void VePathElementShape_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("pathData",6f,9e,02,38));
	outFields->push(HX_("strokeColors",88,87,c5,50));
	outFields->push(HX_("strokeWidths",85,51,3b,d6));
	outFields->push(HX_("translateX",4a,8d,5c,06));
	outFields->push(HX_("translateY",4b,8d,5c,06));
	outFields->push(HX_("scaleX",8e,ea,25,3c));
	outFields->push(HX_("scaleY",8f,ea,25,3c));
	outFields->push(HX_("sp",9d,64,00,00));
	outFields->push(HX_("x0",b8,68,00,00));
	outFields->push(HX_("y0",97,69,00,00));
	outFields->push(HX_("temp",14,c3,f9,4c));
	outFields->push(HX_("toggleDraw",b8,71,26,da));
	outFields->push(HX_("info",6e,38,bb,45));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo VePathElementShape_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(VePathElementShape_obj,pathData),HX_("pathData",6f,9e,02,38)},
	{::hx::fsObject /* ::Array< int > */ ,(int)offsetof(VePathElementShape_obj,strokeColors),HX_("strokeColors",88,87,c5,50)},
	{::hx::fsObject /* ::Array< Float > */ ,(int)offsetof(VePathElementShape_obj,strokeWidths),HX_("strokeWidths",85,51,3b,d6)},
	{::hx::fsFloat,(int)offsetof(VePathElementShape_obj,translateX),HX_("translateX",4a,8d,5c,06)},
	{::hx::fsFloat,(int)offsetof(VePathElementShape_obj,translateY),HX_("translateY",4b,8d,5c,06)},
	{::hx::fsFloat,(int)offsetof(VePathElementShape_obj,scaleX),HX_("scaleX",8e,ea,25,3c)},
	{::hx::fsFloat,(int)offsetof(VePathElementShape_obj,scaleY),HX_("scaleY",8f,ea,25,3c)},
	{::hx::fsObject /* ::justPath::SvgLinePath */ ,(int)offsetof(VePathElementShape_obj,sp),HX_("sp",9d,64,00,00)},
	{::hx::fsFloat,(int)offsetof(VePathElementShape_obj,x0),HX_("x0",b8,68,00,00)},
	{::hx::fsFloat,(int)offsetof(VePathElementShape_obj,y0),HX_("y0",97,69,00,00)},
	{::hx::fsObject /* ::pixelimage::ImageStruct */ ,(int)offsetof(VePathElementShape_obj,temp),HX_("temp",14,c3,f9,4c)},
	{::hx::fsBool,(int)offsetof(VePathElementShape_obj,toggleDraw),HX_("toggleDraw",b8,71,26,da)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(VePathElementShape_obj,info),HX_("info",6e,38,bb,45)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *VePathElementShape_obj_sStaticStorageInfo = 0;
#endif

static ::String VePathElementShape_obj_sMemberFields[] = {
	HX_("pathData",6f,9e,02,38),
	HX_("strokeColors",88,87,c5,50),
	HX_("strokeWidths",85,51,3b,d6),
	HX_("translateX",4a,8d,5c,06),
	HX_("translateY",4b,8d,5c,06),
	HX_("scaleX",8e,ea,25,3c),
	HX_("scaleY",8f,ea,25,3c),
	HX_("sp",9d,64,00,00),
	HX_("x0",b8,68,00,00),
	HX_("y0",97,69,00,00),
	HX_("temp",14,c3,f9,4c),
	HX_("toggleDraw",b8,71,26,da),
	HX_("info",6e,38,bb,45),
	HX_("setParameter",a7,f5,ff,6c),
	HX_("render",56,6b,29,05),
	HX_("drawing",5e,3b,e8,fb),
	HX_("lineSegmentTo",7a,d5,67,57),
	HX_("lineTo",8f,46,a0,ec),
	HX_("moveTo",ec,d2,ac,cc),
	::String(null()) };

::hx::Class VePathElementShape_obj::__mClass;

void VePathElementShape_obj::__register()
{
	VePathElementShape_obj _hx_dummy;
	VePathElementShape_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pixelimage.triangleGML.shape.VePathElementShape",6f,9b,10,e5);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(VePathElementShape_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< VePathElementShape_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = VePathElementShape_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = VePathElementShape_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pixelimage
} // end namespace triangleGML
} // end namespace shape
