// Generated by Haxe 4.3.0-rc.1+
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_ArrayBufferViewImpl
#include <haxe/io/ArrayBufferViewImpl.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_pixelimage_ImageStruct
#include <pixelimage/ImageStruct.h>
#endif
#ifndef INCLUDED_pixelimage__Endian_Endian_Fields_
#include <pixelimage/_Endian/Endian_Fields_.h>
#endif
#ifndef INCLUDED_pixelimage_algo_HitQuad
#include <pixelimage/algo/HitQuad.h>
#endif
#ifndef INCLUDED_pixelimage_algo_HitTri
#include <pixelimage/algo/HitTri.h>
#endif
#ifndef INCLUDED_pixelimage_algo_IhitObj
#include <pixelimage/algo/IhitObj.h>
#endif
#ifndef INCLUDED_pixelimage_iter_IntIterStart
#include <pixelimage/iter/IntIterStart.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_BasicShape
#include <pixelimage/triangleGML/coreShape/BasicShape.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_GroupShape
#include <pixelimage/triangleGML/coreShape/GroupShape.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_PatternShape
#include <pixelimage/triangleGML/coreShape/PatternShape.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_ShapeInterface
#include <pixelimage/triangleGML/coreShape/ShapeInterface.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_patternShape_SquarePattern
#include <pixelimage/triangleGML/patternShape/SquarePattern.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_a856430c2279995e_39_new,"pixelimage.triangleGML.patternShape.SquarePattern","new",0x78273211,"pixelimage.triangleGML.patternShape.SquarePattern.new","pixelimage/triangleGML/patternShape/SquarePattern.hx",39,0x3604e1be)
HX_LOCAL_STACK_FRAME(_hx_pos_a856430c2279995e_49_setParameter,"pixelimage.triangleGML.patternShape.SquarePattern","setParameter",0x0db555d6,"pixelimage.triangleGML.patternShape.SquarePattern.setParameter","pixelimage/triangleGML/patternShape/SquarePattern.hx",49,0x3604e1be)
HX_LOCAL_STACK_FRAME(_hx_pos_a856430c2279995e_60_render,"pixelimage.triangleGML.patternShape.SquarePattern","render",0x85e76e45,"pixelimage.triangleGML.patternShape.SquarePattern.render","pixelimage/triangleGML/patternShape/SquarePattern.hx",60,0x3604e1be)
HX_LOCAL_STACK_FRAME(_hx_pos_a856430c2279995e_71_buildSquare,"pixelimage.triangleGML.patternShape.SquarePattern","buildSquare",0xfde8e11c,"pixelimage.triangleGML.patternShape.SquarePattern.buildSquare","pixelimage/triangleGML/patternShape/SquarePattern.hx",71,0x3604e1be)
namespace pixelimage{
namespace triangleGML{
namespace patternShape{

void SquarePattern_obj::__construct(::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< int >  __o_strokeColor,::hx::Null< Float >  __o_strokeWidth,::Array< ::String > strokeDashGapArray,::hx::Null< int >  __o_strokeColor0,::hx::Null< int >  __o_strokeColor1,::hx::Null< int >  __o_fillColor0,::hx::Null< int >  __o_fillColor1,::Array< bool > strokePatternFill, ::Dynamic strokePatternWidth, ::Dynamic strokePatternHeight,::hx::Null< bool >  __o_strokePatternAcross,::hx::Null< int >  __o_strokePatternScale,::Array< bool > fillPatternFill,::hx::Null< int >  __o_fillPatternWidth,::hx::Null< int >  __o_fillPatternHeight,::hx::Null< bool >  __o_fillPatternAcross,::hx::Null< int >  __o_fillPatternScale,::hx::Null< Float >  __o_left,::hx::Null< Float >  __o_top,::hx::Null< Float >  __o_diameter){
            		Float opacity = __o_opacity.Default(((Float)1.));
            		bool visibility = __o_visibility.Default(true);
            		int strokeColor = __o_strokeColor.Default(0);
            		Float strokeWidth = __o_strokeWidth.Default(((Float)1.));
            		int strokeColor0 = __o_strokeColor0.Default(0);
            		int strokeColor1 = __o_strokeColor1.Default(0);
            		int fillColor0 = __o_fillColor0.Default(0);
            		int fillColor1 = __o_fillColor1.Default(0);
            		bool strokePatternAcross = __o_strokePatternAcross.Default(true);
            		int strokePatternScale = __o_strokePatternScale.Default(1);
            		int fillPatternWidth = __o_fillPatternWidth.Default(16);
            		int fillPatternHeight = __o_fillPatternHeight.Default(16);
            		bool fillPatternAcross = __o_fillPatternAcross.Default(true);
            		int fillPatternScale = __o_fillPatternScale.Default(1);
            		Float left = __o_left.Default(((Float)0.));
            		Float top = __o_top.Default(((Float)0.));
            		Float diameter = __o_diameter.Default(((Float)1.));
            	HX_STACKFRAME(&_hx_pos_a856430c2279995e_39_new)
HXLINE(  40)		super::__construct(opacity,visibility,strokeColor,strokeWidth,strokeDashGapArray,strokeColor0,strokeColor1,fillColor0,fillColor1,strokePatternFill,strokePatternWidth,strokePatternHeight,strokePatternAcross,strokePatternScale,fillPatternFill,fillPatternWidth,fillPatternHeight,fillPatternAcross,fillPatternScale);
HXLINE(  44)		this->left = left;
HXLINE(  45)		this->top = top;
HXLINE(  46)		this->diameter = diameter;
            	}

Dynamic SquarePattern_obj::__CreateEmpty() { return new SquarePattern_obj; }

void *SquarePattern_obj::_hx_vtable = 0;

Dynamic SquarePattern_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SquarePattern_obj > _hx_result = new SquarePattern_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10],inArgs[11],inArgs[12],inArgs[13],inArgs[14],inArgs[15],inArgs[16],inArgs[17],inArgs[18],inArgs[19],inArgs[20],inArgs[21]);
	return _hx_result;
}

bool SquarePattern_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x24e92cfb) {
		if (inClassId<=(int)0x2091632c) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x2091632c;
		} else {
			return inClassId==(int)0x24e92cfb;
		}
	} else {
		return inClassId==(int)0x2e077a79 || inClassId==(int)0x6e596dee;
	}
}

void SquarePattern_obj::setParameter(::String name,::String value){
            	HX_STACKFRAME(&_hx_pos_a856430c2279995e_49_setParameter)
HXDLIN(  49)		::String _hx_switch_0 = name;
            		if (  (_hx_switch_0==HX_("diameter",cd,6e,68,34)) ){
HXLINE(  55)			this->diameter = ::Std_obj::parseFloat(value);
HXDLIN(  55)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("left",07,08,b0,47)) ){
HXLINE(  51)			this->left = ::Std_obj::parseFloat(value);
HXDLIN(  51)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("top",95,66,58,00)) ){
HXLINE(  53)			this->top = ::Std_obj::parseFloat(value);
HXDLIN(  53)			goto _hx_goto_1;
            		}
            		/* default */{
HXLINE(  57)			this->super::setParameter(name,value);
            		}
            		_hx_goto_1:;
            	}


::pixelimage::ImageStruct SquarePattern_obj::render(::pixelimage::ImageStruct pixelShape){
            	HX_GC_STACKFRAME(&_hx_pos_a856430c2279995e_60_render)
HXLINE(  61)		int w = ::Math_obj::ceil(this->diameter);
HXDLIN(  61)		int h = ::Math_obj::ceil(this->diameter);
HXDLIN(  61)		int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN(  61)		::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  61)		::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN(  61)		::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN(  61)		::pixelimage::ImageStruct this4 = this3;
HXDLIN(  61)		::pixelimage::ImageStruct temp = this4;
HXLINE(  62)		temp->transparent = false;
HXLINE(  64)		this->buildPatternTemplates();
HXLINE(  65)		this->buildSquare(temp);
HXLINE(  67)		{
HXLINE(  67)			int x = ::Std_obj::_hx_int((this->left + this->offX));
HXDLIN(  67)			int y = ::Std_obj::_hx_int((this->top + this->offY));
HXDLIN(  67)			bool forceClear = false;
HXDLIN(  67)			{
HXLINE(  67)				int _g = 0;
HXDLIN(  67)				int _g1 = temp->height;
HXDLIN(  67)				while((_g < _g1)){
HXLINE(  67)					_g = (_g + 1);
HXDLIN(  67)					int dy = (_g - 1);
HXDLIN(  67)					{
HXLINE(  67)						int _g1 = 0;
HXDLIN(  67)						int _g2 = temp->width;
HXDLIN(  67)						while((_g1 < _g2)){
HXLINE(  67)							_g1 = (_g1 + 1);
HXDLIN(  67)							int dx = (_g1 - 1);
HXDLIN(  67)							::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN(  67)							int index;
HXDLIN(  67)							if (temp->useVirtualPos) {
HXLINE(  67)								index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - temp->virtualY) * ( (Float)(temp->width) )) + dx) - temp->virtualX));
            							}
            							else {
HXLINE(  67)								index = ::Std_obj::_hx_int(( (Float)(((dy * temp->width) + dx)) ));
            							}
HXDLIN(  67)							::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  67)							int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  67)							int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  67)							int col;
HXDLIN(  67)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)								col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            							}
            							else {
HXLINE(  67)								col = c;
            							}
HXDLIN(  67)							bool _hx_tmp;
HXDLIN(  67)							if (temp->useMask) {
HXLINE(  67)								_hx_tmp = ::hx::IsNotNull( temp->mask );
            							}
            							else {
HXLINE(  67)								_hx_tmp = false;
            							}
HXDLIN(  67)							if (_hx_tmp) {
HXLINE(  67)								::pixelimage::ImageStruct this1 = temp->mask;
HXDLIN(  67)								::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  67)								int index;
HXDLIN(  67)								if (this1->useVirtualPos) {
HXLINE(  67)									index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            								}
            								else {
HXLINE(  67)									index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            								}
HXDLIN(  67)								::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  67)								int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  67)								int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  67)								int v;
HXDLIN(  67)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)									v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            								}
            								else {
HXLINE(  67)									v = c;
            								}
HXDLIN(  67)								int this3 = v;
HXDLIN(  67)								int maskPixel = this3;
HXDLIN(  67)								int this4 = col;
HXDLIN(  67)								int this5 = this4;
HXDLIN(  67)								if ((maskPixel == 0)) {
HXLINE(  67)									int this1 = this5;
HXDLIN(  67)									col = this1;
            								}
            								else {
HXLINE(  67)									Float m0;
HXDLIN(  67)									int this1 = ((maskPixel >> 24) & 255);
HXDLIN(  67)									if ((this1 == 0)) {
HXLINE(  67)										m0 = ((Float)0.);
            									}
            									else {
HXLINE(  67)										m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            									}
HXDLIN(  67)									Float m1;
HXDLIN(  67)									int this2 = ((maskPixel >> 16) & 255);
HXDLIN(  67)									if ((this2 == 0)) {
HXLINE(  67)										m1 = ((Float)0.);
            									}
            									else {
HXLINE(  67)										m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            									}
HXDLIN(  67)									Float m2;
HXDLIN(  67)									int this3 = ((maskPixel >> 8) & 255);
HXDLIN(  67)									if ((this3 == 0)) {
HXLINE(  67)										m2 = ((Float)0.);
            									}
            									else {
HXLINE(  67)										m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            									}
HXDLIN(  67)									Float m3;
HXDLIN(  67)									int this4 = (maskPixel & 255);
HXDLIN(  67)									if ((this4 == 0)) {
HXLINE(  67)										m3 = ((Float)0.);
            									}
            									else {
HXLINE(  67)										m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            									}
HXDLIN(  67)									int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN(  67)									int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN(  67)									int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN(  67)									int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN(  67)									col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            								}
            							}
HXDLIN(  67)							if ((col != 0)) {
HXLINE(  67)								int x1 = (x + dx);
HXDLIN(  67)								int y1 = (y + dy);
HXDLIN(  67)								int this1 = col;
HXDLIN(  67)								int c = this1;
HXDLIN(  67)								bool _hx_tmp;
HXDLIN(  67)								if ((((c >> 24) & 255) < 254)) {
HXLINE(  67)									_hx_tmp = pixelShape->transparent;
            								}
            								else {
HXLINE(  67)									_hx_tmp = false;
            								}
HXDLIN(  67)								if (_hx_tmp) {
HXLINE(  67)									int location;
HXDLIN(  67)									if (pixelShape->useVirtualPos) {
HXLINE(  67)										location = ::Std_obj::_hx_int(((((( (Float)(y1) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x1) - pixelShape->virtualX));
            									}
            									else {
HXLINE(  67)										location = ::Std_obj::_hx_int(( (Float)(((y1 * pixelShape->width) + x1)) ));
            									}
HXDLIN(  67)									::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  67)									::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  67)									int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  67)									int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  67)									int this3 = this2;
HXDLIN(  67)									int this4;
HXDLIN(  67)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)										this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            									}
            									else {
HXLINE(  67)										this4 = this3;
            									}
HXDLIN(  67)									Float a1;
HXDLIN(  67)									int this5 = ((this4 >> 24) & 255);
HXDLIN(  67)									if ((this5 == 0)) {
HXLINE(  67)										a1 = ((Float)0.);
            									}
            									else {
HXLINE(  67)										a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            									}
HXDLIN(  67)									Float r1;
HXDLIN(  67)									int this6 = ((this4 >> 16) & 255);
HXDLIN(  67)									if ((this6 == 0)) {
HXLINE(  67)										r1 = ((Float)0.);
            									}
            									else {
HXLINE(  67)										r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            									}
HXDLIN(  67)									Float g1;
HXDLIN(  67)									int this7 = ((this4 >> 8) & 255);
HXDLIN(  67)									if ((this7 == 0)) {
HXLINE(  67)										g1 = ((Float)0.);
            									}
            									else {
HXLINE(  67)										g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            									}
HXDLIN(  67)									Float b1;
HXDLIN(  67)									int this8 = (this4 & 255);
HXDLIN(  67)									if ((this8 == 0)) {
HXLINE(  67)										b1 = ((Float)0.);
            									}
            									else {
HXLINE(  67)										b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            									}
HXDLIN(  67)									Float a2;
HXDLIN(  67)									int this9 = ((col >> 24) & 255);
HXDLIN(  67)									if ((this9 == 0)) {
HXLINE(  67)										a2 = ((Float)0.);
            									}
            									else {
HXLINE(  67)										a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            									}
HXDLIN(  67)									Float r2;
HXDLIN(  67)									int this10 = ((col >> 16) & 255);
HXDLIN(  67)									if ((this10 == 0)) {
HXLINE(  67)										r2 = ((Float)0.);
            									}
            									else {
HXLINE(  67)										r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            									}
HXDLIN(  67)									Float g2;
HXDLIN(  67)									int this11 = ((col >> 8) & 255);
HXDLIN(  67)									if ((this11 == 0)) {
HXLINE(  67)										g2 = ((Float)0.);
            									}
            									else {
HXLINE(  67)										g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            									}
HXDLIN(  67)									Float b2;
HXDLIN(  67)									int this12 = (col & 255);
HXDLIN(  67)									if ((this12 == 0)) {
HXLINE(  67)										b2 = ((Float)0.);
            									}
            									else {
HXLINE(  67)										b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            									}
HXDLIN(  67)									Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  67)									int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  67)									int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  67)									int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  67)									int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  67)									int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  67)									{
HXLINE(  67)										::haxe::io::ArrayBufferViewImpl this13 = pixelShape->image;
HXDLIN(  67)										int value;
HXDLIN(  67)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)											value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            										}
            										else {
HXLINE(  67)											value = blended;
            										}
HXDLIN(  67)										bool _hx_tmp;
HXDLIN(  67)										if ((location >= 0)) {
HXLINE(  67)											_hx_tmp = (location < (this13->byteLength >> 2));
            										}
            										else {
HXLINE(  67)											_hx_tmp = false;
            										}
HXDLIN(  67)										if (_hx_tmp) {
HXLINE(  67)											::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  67)											int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  67)											_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  67)											_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  67)											_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  67)											_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            										}
            									}
            								}
            								else {
HXLINE(  67)									::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  67)									int index;
HXDLIN(  67)									if (pixelShape->useVirtualPos) {
HXLINE(  67)										index = ::Std_obj::_hx_int(((((( (Float)(y1) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x1) - pixelShape->virtualX));
            									}
            									else {
HXLINE(  67)										index = ::Std_obj::_hx_int(( (Float)(((y1 * pixelShape->width) + x1)) ));
            									}
HXDLIN(  67)									int value;
HXDLIN(  67)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  67)										value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXLINE(  67)										value = c;
            									}
HXDLIN(  67)									bool _hx_tmp;
HXDLIN(  67)									if ((index >= 0)) {
HXLINE(  67)										_hx_tmp = (index < (this1->byteLength >> 2));
            									}
            									else {
HXLINE(  67)										_hx_tmp = false;
            									}
HXDLIN(  67)									if (_hx_tmp) {
HXLINE(  67)										::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  67)										int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  67)										_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  67)										_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  67)										_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  67)										_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            									}
            								}
            							}
            							else {
HXLINE(  67)								if (forceClear) {
HXLINE(  67)									::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  67)									int x1 = (x + dx);
HXDLIN(  67)									int y1 = (y + dy);
HXDLIN(  67)									int index;
HXDLIN(  67)									if (pixelShape->useVirtualPos) {
HXLINE(  67)										index = ::Std_obj::_hx_int(((((( (Float)(y1) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x1) - pixelShape->virtualX));
            									}
            									else {
HXLINE(  67)										index = ::Std_obj::_hx_int(( (Float)(((y1 * pixelShape->width) + x1)) ));
            									}
HXDLIN(  67)									bool _hx_tmp;
HXDLIN(  67)									if ((index >= 0)) {
HXLINE(  67)										_hx_tmp = (index < (this1->byteLength >> 2));
            									}
            									else {
HXLINE(  67)										_hx_tmp = false;
            									}
HXDLIN(  67)									if (_hx_tmp) {
HXLINE(  67)										::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  67)										int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  67)										_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  67)										_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  67)										_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  67)										_this->b[(pos + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(  68)		temp = null();
HXLINE(  69)		return this->super::render(pixelShape);
            	}


void SquarePattern_obj::buildSquare(::pixelimage::ImageStruct temp){
            	HX_GC_STACKFRAME(&_hx_pos_a856430c2279995e_71_buildSquare)
HXLINE(  72)		{
HXLINE(  72)			::pixelimage::ImageStruct tileImage = this->tileImageStroke;
HXDLIN(  72)			bool hasHit = false;
HXDLIN(  72)			Float bx = this->diameter;
HXDLIN(  72)			Float cy = this->diameter;
HXDLIN(  72)			{
HXLINE(  72)				{
HXLINE(  72)					Float bx1 = bx;
HXDLIN(  72)					Float by = ((Float)0.);
HXDLIN(  72)					Float cx = ((Float)0.);
HXDLIN(  72)					Float cy1 = cy;
HXDLIN(  72)					bool adjustWinding = (((((((Float)0.) * by) - (bx1 * ((Float)0.))) + ((bx1 * cy1) - (cx * by))) + ((cx * ((Float)0.)) - (((Float)0.) * cy1))) > 0);
HXDLIN(  72)					if (!(adjustWinding)) {
HXLINE(  72)						Float bx_ = bx1;
HXDLIN(  72)						Float by_ = by;
HXLINE( 188)						bx1 = cx;
HXLINE( 189)						by = cy1;
HXLINE( 190)						cx = bx_;
HXLINE( 191)						cy1 = by_;
            					}
HXLINE(  72)					{
HXLINE(  72)						bool hasUndo = false;
HXDLIN(  72)						Float s0 = ((((Float)0.) * cx) - (((Float)0.) * cy1));
HXDLIN(  72)						Float sx = cy1;
HXDLIN(  72)						Float sy = (((Float)0.) - cx);
HXDLIN(  72)						Float t0 = ((((Float)0.) * by) - (((Float)0.) * bx1));
HXDLIN(  72)						Float tx = (((Float)0.) - by);
HXDLIN(  72)						Float ty = bx1;
HXDLIN(  72)						Float A = ((((-(by) * cx) + (((Float)0.) * (-(bx1) + cx))) + (((Float)0.) * (by - cy1))) + (bx1 * cy1));
HXDLIN(  72)						::pixelimage::iter::IntIterStart xIter3;
HXDLIN(  72)						if ((((Float)0.) > bx1)) {
HXLINE(  72)							if ((((Float)0.) > cx)) {
HXLINE(  72)								int min;
HXDLIN(  72)								if ((bx1 > cx)) {
HXLINE(  72)									min = ::Math_obj::floor(cx);
            								}
            								else {
HXLINE(  72)									min = ::Math_obj::floor(bx1);
            								}
HXDLIN(  72)								int ii_min = min;
HXDLIN(  72)								int ii_max = 0;
HXDLIN(  72)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  72)								xIter3 = this1;
            							}
            							else {
HXLINE(  72)								int ii_min = ::Math_obj::floor(bx1);
HXDLIN(  72)								int ii_max = ::Math_obj::ceil(cx);
HXDLIN(  72)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  72)								xIter3 = this1;
            							}
            						}
            						else {
HXLINE(  72)							if ((bx1 > cx)) {
HXLINE(  72)								int min;
HXDLIN(  72)								if ((((Float)0.) > cx)) {
HXLINE(  72)									min = ::Math_obj::floor(cx);
            								}
            								else {
HXLINE(  72)									min = 0;
            								}
HXDLIN(  72)								int ii_min = min;
HXDLIN(  72)								int ii_max = ::Math_obj::ceil(bx1);
HXDLIN(  72)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  72)								xIter3 = this1;
            							}
            							else {
HXLINE(  72)								int ii_min = 0;
HXDLIN(  72)								int ii_max = ::Math_obj::ceil(cx);
HXDLIN(  72)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  72)								xIter3 = this1;
            							}
            						}
HXDLIN(  72)						::pixelimage::iter::IntIterStart yIter3;
HXDLIN(  72)						if ((((Float)0.) > by)) {
HXLINE(  72)							if ((((Float)0.) > cy1)) {
HXLINE(  72)								int min;
HXDLIN(  72)								if ((by > cy1)) {
HXLINE(  72)									min = ::Math_obj::floor(cy1);
            								}
            								else {
HXLINE(  72)									min = ::Math_obj::floor(by);
            								}
HXDLIN(  72)								int ii_min = min;
HXDLIN(  72)								int ii_max = 0;
HXDLIN(  72)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  72)								yIter3 = this1;
            							}
            							else {
HXLINE(  72)								int ii_min = ::Math_obj::floor(by);
HXDLIN(  72)								int ii_max = ::Math_obj::ceil(cy1);
HXDLIN(  72)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  72)								yIter3 = this1;
            							}
            						}
            						else {
HXLINE(  72)							if ((by > cy1)) {
HXLINE(  72)								int min;
HXDLIN(  72)								if ((((Float)0.) > cy1)) {
HXLINE(  72)									min = ::Math_obj::floor(cy1);
            								}
            								else {
HXLINE(  72)									min = 0;
            								}
HXDLIN(  72)								int ii_min = min;
HXDLIN(  72)								int ii_max = ::Math_obj::ceil(by);
HXDLIN(  72)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  72)								yIter3 = this1;
            							}
            							else {
HXLINE(  72)								int ii_min = 0;
HXDLIN(  72)								int ii_max = ::Math_obj::ceil(cy1);
HXDLIN(  72)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  72)								yIter3 = this1;
            							}
            						}
HXDLIN(  72)						::pixelimage::ImageStruct undoImage = null();
HXDLIN(  72)						if (hasUndo) {
HXLINE(  72)							int w = ((xIter3->max - xIter3->start) + 1);
HXDLIN(  72)							int h = ((yIter3->max - yIter3->start) + 1);
HXDLIN(  72)							int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN(  72)							::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  72)							::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN(  72)							::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN(  72)							undoImage = this3;
HXDLIN(  72)							{
HXLINE(  72)								int rectLeft = xIter3->start;
HXDLIN(  72)								int rectTop = yIter3->start;
HXDLIN(  72)								int rectRight = xIter3->max;
HXDLIN(  72)								bool forceClear = false;
HXDLIN(  72)								{
HXLINE(  72)									int _g = rectTop;
HXDLIN(  72)									int _g1 = yIter3->max;
HXDLIN(  72)									while((_g < _g1)){
HXLINE(  72)										_g = (_g + 1);
HXDLIN(  72)										int dy = (_g - 1);
HXDLIN(  72)										{
HXLINE(  72)											int _g1 = rectLeft;
HXDLIN(  72)											int _g2 = rectRight;
HXDLIN(  72)											while((_g1 < _g2)){
HXLINE(  72)												_g1 = (_g1 + 1);
HXDLIN(  72)												int dx = (_g1 - 1);
HXDLIN(  72)												::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN(  72)												int index;
HXDLIN(  72)												if (temp->useVirtualPos) {
HXLINE(  72)													index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - temp->virtualY) * ( (Float)(temp->width) )) + dx) - temp->virtualX));
            												}
            												else {
HXLINE(  72)													index = ::Std_obj::_hx_int(( (Float)(((dy * temp->width) + dx)) ));
            												}
HXDLIN(  72)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  72)												int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  72)												int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  72)												int col;
HXDLIN(  72)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  72)													col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE(  72)													col = c;
            												}
HXDLIN(  72)												bool _hx_tmp;
HXDLIN(  72)												if (temp->useMask) {
HXLINE(  72)													_hx_tmp = ::hx::IsNotNull( temp->mask );
            												}
            												else {
HXLINE(  72)													_hx_tmp = false;
            												}
HXDLIN(  72)												if (_hx_tmp) {
HXLINE(  72)													::pixelimage::ImageStruct this1 = temp->mask;
HXDLIN(  72)													::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  72)													int index;
HXDLIN(  72)													if (this1->useVirtualPos) {
HXLINE(  72)														index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            													}
            													else {
HXLINE(  72)														index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            													}
HXDLIN(  72)													::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  72)													int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  72)													int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  72)													int v;
HXDLIN(  72)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  72)														v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE(  72)														v = c;
            													}
HXDLIN(  72)													int this3 = v;
HXDLIN(  72)													int maskPixel = this3;
HXDLIN(  72)													int this4 = col;
HXDLIN(  72)													int this5 = this4;
HXDLIN(  72)													if ((maskPixel == 0)) {
HXLINE(  72)														int this1 = this5;
HXDLIN(  72)														col = this1;
            													}
            													else {
HXLINE(  72)														Float m0;
HXDLIN(  72)														int this1 = ((maskPixel >> 24) & 255);
HXDLIN(  72)														if ((this1 == 0)) {
HXLINE(  72)															m0 = ((Float)0.);
            														}
            														else {
HXLINE(  72)															m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            														}
HXDLIN(  72)														Float m1;
HXDLIN(  72)														int this2 = ((maskPixel >> 16) & 255);
HXDLIN(  72)														if ((this2 == 0)) {
HXLINE(  72)															m1 = ((Float)0.);
            														}
            														else {
HXLINE(  72)															m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            														}
HXDLIN(  72)														Float m2;
HXDLIN(  72)														int this3 = ((maskPixel >> 8) & 255);
HXDLIN(  72)														if ((this3 == 0)) {
HXLINE(  72)															m2 = ((Float)0.);
            														}
            														else {
HXLINE(  72)															m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            														}
HXDLIN(  72)														Float m3;
HXDLIN(  72)														int this4 = (maskPixel & 255);
HXDLIN(  72)														if ((this4 == 0)) {
HXLINE(  72)															m3 = ((Float)0.);
            														}
            														else {
HXLINE(  72)															m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            														}
HXDLIN(  72)														int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN(  72)														int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN(  72)														int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN(  72)														int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN(  72)														col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            													}
            												}
HXDLIN(  72)												if ((col != 0)) {
HXLINE(  72)													int x = (dx - rectLeft);
HXDLIN(  72)													int y = (dy - rectTop);
HXDLIN(  72)													int this1 = col;
HXDLIN(  72)													int c = this1;
HXDLIN(  72)													bool _hx_tmp;
HXDLIN(  72)													if ((((c >> 24) & 255) < 254)) {
HXLINE(  72)														_hx_tmp = undoImage->transparent;
            													}
            													else {
HXLINE(  72)														_hx_tmp = false;
            													}
HXDLIN(  72)													if (_hx_tmp) {
HXLINE(  72)														int location;
HXDLIN(  72)														if (undoImage->useVirtualPos) {
HXLINE(  72)															location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            														}
            														else {
HXLINE(  72)															location = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            														}
HXDLIN(  72)														::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  72)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  72)														int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  72)														int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  72)														int this3 = this2;
HXDLIN(  72)														int this4;
HXDLIN(  72)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  72)															this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            														}
            														else {
HXLINE(  72)															this4 = this3;
            														}
HXDLIN(  72)														Float a1;
HXDLIN(  72)														int this5 = ((this4 >> 24) & 255);
HXDLIN(  72)														if ((this5 == 0)) {
HXLINE(  72)															a1 = ((Float)0.);
            														}
            														else {
HXLINE(  72)															a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            														}
HXDLIN(  72)														Float r1;
HXDLIN(  72)														int this6 = ((this4 >> 16) & 255);
HXDLIN(  72)														if ((this6 == 0)) {
HXLINE(  72)															r1 = ((Float)0.);
            														}
            														else {
HXLINE(  72)															r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            														}
HXDLIN(  72)														Float g1;
HXDLIN(  72)														int this7 = ((this4 >> 8) & 255);
HXDLIN(  72)														if ((this7 == 0)) {
HXLINE(  72)															g1 = ((Float)0.);
            														}
            														else {
HXLINE(  72)															g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            														}
HXDLIN(  72)														Float b1;
HXDLIN(  72)														int this8 = (this4 & 255);
HXDLIN(  72)														if ((this8 == 0)) {
HXLINE(  72)															b1 = ((Float)0.);
            														}
            														else {
HXLINE(  72)															b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            														}
HXDLIN(  72)														Float a2;
HXDLIN(  72)														int this9 = ((col >> 24) & 255);
HXDLIN(  72)														if ((this9 == 0)) {
HXLINE(  72)															a2 = ((Float)0.);
            														}
            														else {
HXLINE(  72)															a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            														}
HXDLIN(  72)														Float r2;
HXDLIN(  72)														int this10 = ((col >> 16) & 255);
HXDLIN(  72)														if ((this10 == 0)) {
HXLINE(  72)															r2 = ((Float)0.);
            														}
            														else {
HXLINE(  72)															r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            														}
HXDLIN(  72)														Float g2;
HXDLIN(  72)														int this11 = ((col >> 8) & 255);
HXDLIN(  72)														if ((this11 == 0)) {
HXLINE(  72)															g2 = ((Float)0.);
            														}
            														else {
HXLINE(  72)															g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            														}
HXDLIN(  72)														Float b2;
HXDLIN(  72)														int this12 = (col & 255);
HXDLIN(  72)														if ((this12 == 0)) {
HXLINE(  72)															b2 = ((Float)0.);
            														}
            														else {
HXLINE(  72)															b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            														}
HXDLIN(  72)														Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  72)														int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  72)														int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  72)														int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  72)														int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  72)														int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  72)														{
HXLINE(  72)															::haxe::io::ArrayBufferViewImpl this13 = undoImage->image;
HXDLIN(  72)															int value;
HXDLIN(  72)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  72)																value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            															}
            															else {
HXLINE(  72)																value = blended;
            															}
HXDLIN(  72)															bool _hx_tmp;
HXDLIN(  72)															if ((location >= 0)) {
HXLINE(  72)																_hx_tmp = (location < (this13->byteLength >> 2));
            															}
            															else {
HXLINE(  72)																_hx_tmp = false;
            															}
HXDLIN(  72)															if (_hx_tmp) {
HXLINE(  72)																::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  72)																int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  72)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  72)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  72)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  72)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
            													else {
HXLINE(  72)														::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  72)														int index;
HXDLIN(  72)														if (undoImage->useVirtualPos) {
HXLINE(  72)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            														}
            														else {
HXLINE(  72)															index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            														}
HXDLIN(  72)														int value;
HXDLIN(  72)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  72)															value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            														}
            														else {
HXLINE(  72)															value = c;
            														}
HXDLIN(  72)														bool _hx_tmp;
HXDLIN(  72)														if ((index >= 0)) {
HXLINE(  72)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE(  72)															_hx_tmp = false;
            														}
HXDLIN(  72)														if (_hx_tmp) {
HXLINE(  72)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  72)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  72)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  72)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  72)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  72)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
            												else {
HXLINE(  72)													if (forceClear) {
HXLINE(  72)														::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  72)														int x = (dx - rectLeft);
HXDLIN(  72)														int y = (dy - rectTop);
HXDLIN(  72)														int index;
HXDLIN(  72)														if (undoImage->useVirtualPos) {
HXLINE(  72)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            														}
            														else {
HXLINE(  72)															index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            														}
HXDLIN(  72)														bool _hx_tmp;
HXDLIN(  72)														if ((index >= 0)) {
HXLINE(  72)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE(  72)															_hx_tmp = false;
            														}
HXDLIN(  72)														if (_hx_tmp) {
HXLINE(  72)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  72)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  72)															_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  72)															_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  72)															_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  72)															_this->b[(pos + 3)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  72)						bool foundY = false;
HXDLIN(  72)						Float s = ((Float)0.);
HXDLIN(  72)						Float t = ((Float)0.);
HXDLIN(  72)						Float sxx = ((Float)0.);
HXDLIN(  72)						Float txx = ((Float)0.);
HXDLIN(  72)						{
HXLINE(  72)							int _g_min = xIter3->start;
HXDLIN(  72)							int _g_max = xIter3->max;
HXDLIN(  72)							while((_g_min < _g_max)){
HXLINE(  72)								_g_min = (_g_min + 1);
HXDLIN(  72)								int x = (_g_min - 1);
HXLINE( 223)								sxx = (sx * ( (Float)(x) ));
HXLINE( 224)								txx = (tx * ( (Float)(x) ));
HXLINE( 225)								foundY = false;
HXLINE(  72)								{
HXLINE(  72)									int _g_min1 = yIter3->start;
HXDLIN(  72)									int _g_max = yIter3->max;
HXDLIN(  72)									while((_g_min1 < _g_max)){
HXLINE(  72)										_g_min1 = (_g_min1 + 1);
HXDLIN(  72)										int y = (_g_min1 - 1);
HXLINE( 227)										s = ((s0 + sxx) + (sy * ( (Float)(y) )));
HXLINE( 228)										t = ((t0 + txx) + (ty * ( (Float)(y) )));
HXLINE(  72)										bool _hx_tmp;
HXDLIN(  72)										if (!((s <= 0))) {
HXLINE(  72)											_hx_tmp = (t <= 0);
            										}
            										else {
HXLINE(  72)											_hx_tmp = true;
            										}
HXDLIN(  72)										if (_hx_tmp) {
HXLINE(  72)											if (foundY) {
HXLINE(  72)												goto _hx_goto_9;
            											}
            										}
            										else {
HXLINE(  72)											if (((s + t) < A)) {
HXLINE(  72)												int x1 = ::hx::Mod(x,tileImage->width);
HXDLIN(  72)												int y1 = ::hx::Mod(y,tileImage->height);
HXDLIN(  72)												::haxe::io::ArrayBufferViewImpl this1 = tileImage->image;
HXDLIN(  72)												int index;
HXDLIN(  72)												if (tileImage->useVirtualPos) {
HXLINE(  72)													index = ::Std_obj::_hx_int(((((( (Float)(y1) ) - tileImage->virtualY) * ( (Float)(tileImage->width) )) + x1) - tileImage->virtualX));
            												}
            												else {
HXLINE(  72)													index = ::Std_obj::_hx_int(( (Float)(((y1 * tileImage->width) + x1)) ));
            												}
HXDLIN(  72)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  72)												int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  72)												int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  72)												int color;
HXDLIN(  72)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  72)													color = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE(  72)													color = c;
            												}
HXDLIN(  72)												{
HXLINE(  72)													int this2 = color;
HXDLIN(  72)													int c1 = this2;
HXDLIN(  72)													bool _hx_tmp;
HXDLIN(  72)													if ((((c1 >> 24) & 255) < 254)) {
HXLINE(  72)														_hx_tmp = temp->transparent;
            													}
            													else {
HXLINE(  72)														_hx_tmp = false;
            													}
HXDLIN(  72)													if (_hx_tmp) {
HXLINE(  72)														int location;
HXDLIN(  72)														if (temp->useVirtualPos) {
HXLINE(  72)															location = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            														}
            														else {
HXLINE(  72)															location = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            														}
HXDLIN(  72)														::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN(  72)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  72)														int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  72)														int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  72)														int this3 = this2;
HXDLIN(  72)														int this4;
HXDLIN(  72)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  72)															this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            														}
            														else {
HXLINE(  72)															this4 = this3;
            														}
HXDLIN(  72)														Float a1;
HXDLIN(  72)														int this5 = ((this4 >> 24) & 255);
HXDLIN(  72)														if ((this5 == 0)) {
HXLINE(  72)															a1 = ((Float)0.);
            														}
            														else {
HXLINE(  72)															a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            														}
HXDLIN(  72)														Float r1;
HXDLIN(  72)														int this6 = ((this4 >> 16) & 255);
HXDLIN(  72)														if ((this6 == 0)) {
HXLINE(  72)															r1 = ((Float)0.);
            														}
            														else {
HXLINE(  72)															r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            														}
HXDLIN(  72)														Float g1;
HXDLIN(  72)														int this7 = ((this4 >> 8) & 255);
HXDLIN(  72)														if ((this7 == 0)) {
HXLINE(  72)															g1 = ((Float)0.);
            														}
            														else {
HXLINE(  72)															g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            														}
HXDLIN(  72)														Float b1;
HXDLIN(  72)														int this8 = (this4 & 255);
HXDLIN(  72)														if ((this8 == 0)) {
HXLINE(  72)															b1 = ((Float)0.);
            														}
            														else {
HXLINE(  72)															b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            														}
HXDLIN(  72)														Float a2;
HXDLIN(  72)														int this9 = ((color >> 24) & 255);
HXDLIN(  72)														if ((this9 == 0)) {
HXLINE(  72)															a2 = ((Float)0.);
            														}
            														else {
HXLINE(  72)															a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            														}
HXDLIN(  72)														Float r2;
HXDLIN(  72)														int this10 = ((color >> 16) & 255);
HXDLIN(  72)														if ((this10 == 0)) {
HXLINE(  72)															r2 = ((Float)0.);
            														}
            														else {
HXLINE(  72)															r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            														}
HXDLIN(  72)														Float g2;
HXDLIN(  72)														int this11 = ((color >> 8) & 255);
HXDLIN(  72)														if ((this11 == 0)) {
HXLINE(  72)															g2 = ((Float)0.);
            														}
            														else {
HXLINE(  72)															g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            														}
HXDLIN(  72)														Float b2;
HXDLIN(  72)														int this12 = (color & 255);
HXDLIN(  72)														if ((this12 == 0)) {
HXLINE(  72)															b2 = ((Float)0.);
            														}
            														else {
HXLINE(  72)															b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            														}
HXDLIN(  72)														Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  72)														int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  72)														int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  72)														int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  72)														int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  72)														int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  72)														{
HXLINE(  72)															::haxe::io::ArrayBufferViewImpl this13 = temp->image;
HXDLIN(  72)															int value;
HXDLIN(  72)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  72)																value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            															}
            															else {
HXLINE(  72)																value = blended;
            															}
HXDLIN(  72)															bool _hx_tmp;
HXDLIN(  72)															if ((location >= 0)) {
HXLINE(  72)																_hx_tmp = (location < (this13->byteLength >> 2));
            															}
            															else {
HXLINE(  72)																_hx_tmp = false;
            															}
HXDLIN(  72)															if (_hx_tmp) {
HXLINE(  72)																::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  72)																int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  72)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  72)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  72)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  72)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
            													else {
HXLINE(  72)														::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN(  72)														int index;
HXDLIN(  72)														if (temp->useVirtualPos) {
HXLINE(  72)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            														}
            														else {
HXLINE(  72)															index = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            														}
HXDLIN(  72)														int value;
HXDLIN(  72)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  72)															value = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            														}
            														else {
HXLINE(  72)															value = c1;
            														}
HXDLIN(  72)														bool _hx_tmp;
HXDLIN(  72)														if ((index >= 0)) {
HXLINE(  72)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE(  72)															_hx_tmp = false;
            														}
HXDLIN(  72)														if (_hx_tmp) {
HXLINE(  72)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  72)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  72)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  72)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  72)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  72)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
HXLINE( 237)												foundY = true;
            											}
            											else {
HXLINE(  72)												if (foundY) {
HXLINE(  72)													goto _hx_goto_9;
            												}
            											}
            										}
            									}
            									_hx_goto_9:;
            								}
            							}
            						}
HXDLIN(  72)						if ((hasHit == false)) {
HXLINE(  72)							::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,((Float)0.),((Float)0.),bx1,by,cx,cy1,true);
HXDLIN(  72)							if (hasUndo) {
HXLINE(  72)								v->undoImage = undoImage;
HXDLIN(  72)								v->undoX = xIter3->start;
HXDLIN(  72)								v->undoY = yIter3->start;
            							}
            						}
            					}
            				}
HXDLIN(  72)				{
HXLINE(  72)					Float bx2 = bx;
HXDLIN(  72)					Float by1 = cy;
HXDLIN(  72)					Float cx1 = ((Float)0.);
HXDLIN(  72)					Float cy2 = cy;
HXDLIN(  72)					bool adjustWinding1 = (((((bx * by1) - (bx2 * ((Float)0.))) + ((bx2 * cy2) - (cx1 * by1))) + ((cx1 * ((Float)0.)) - (bx * cy2))) > 0);
HXDLIN(  72)					if (!(adjustWinding1)) {
HXLINE(  72)						Float bx_ = bx2;
HXDLIN(  72)						Float by_ = by1;
HXLINE( 188)						bx2 = cx1;
HXLINE( 189)						by1 = cy2;
HXLINE( 190)						cx1 = bx_;
HXLINE( 191)						cy2 = by_;
            					}
HXLINE(  72)					{
HXLINE(  72)						bool hasUndo1 = false;
HXDLIN(  72)						Float s01 = ((((Float)0.) * cx1) - (bx * cy2));
HXDLIN(  72)						Float sx1 = cy2;
HXDLIN(  72)						Float sy1 = (bx - cx1);
HXDLIN(  72)						Float t01 = ((bx * by1) - (((Float)0.) * bx2));
HXDLIN(  72)						Float tx1 = (((Float)0.) - by1);
HXDLIN(  72)						Float ty1 = (bx2 - bx);
HXDLIN(  72)						Float A1 = ((((-(by1) * cx1) + (((Float)0.) * (-(bx2) + cx1))) + (bx * (by1 - cy2))) + (bx2 * cy2));
HXDLIN(  72)						::pixelimage::iter::IntIterStart xIter31;
HXDLIN(  72)						if ((bx > bx2)) {
HXLINE(  72)							if ((bx > cx1)) {
HXLINE(  72)								int min;
HXDLIN(  72)								if ((bx2 > cx1)) {
HXLINE(  72)									min = ::Math_obj::floor(cx1);
            								}
            								else {
HXLINE(  72)									min = ::Math_obj::floor(bx2);
            								}
HXDLIN(  72)								int ii_min = min;
HXDLIN(  72)								int ii_max = ::Math_obj::ceil(bx);
HXDLIN(  72)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  72)								xIter31 = this1;
            							}
            							else {
HXLINE(  72)								int ii_min = ::Math_obj::floor(bx2);
HXDLIN(  72)								int ii_max = ::Math_obj::ceil(cx1);
HXDLIN(  72)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  72)								xIter31 = this1;
            							}
            						}
            						else {
HXLINE(  72)							if ((bx2 > cx1)) {
HXLINE(  72)								int min;
HXDLIN(  72)								if ((bx > cx1)) {
HXLINE(  72)									min = ::Math_obj::floor(cx1);
            								}
            								else {
HXLINE(  72)									min = ::Math_obj::ceil(bx);
            								}
HXDLIN(  72)								int ii_min = min;
HXDLIN(  72)								int ii_max = ::Math_obj::ceil(bx2);
HXDLIN(  72)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  72)								xIter31 = this1;
            							}
            							else {
HXLINE(  72)								int ii_min = ::Math_obj::floor(bx);
HXDLIN(  72)								int ii_max = ::Math_obj::ceil(cx1);
HXDLIN(  72)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  72)								xIter31 = this1;
            							}
            						}
HXDLIN(  72)						::pixelimage::iter::IntIterStart yIter31;
HXDLIN(  72)						if ((((Float)0.) > by1)) {
HXLINE(  72)							if ((((Float)0.) > cy2)) {
HXLINE(  72)								int min;
HXDLIN(  72)								if ((by1 > cy2)) {
HXLINE(  72)									min = ::Math_obj::floor(cy2);
            								}
            								else {
HXLINE(  72)									min = ::Math_obj::floor(by1);
            								}
HXDLIN(  72)								int ii_min = min;
HXDLIN(  72)								int ii_max = 0;
HXDLIN(  72)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  72)								yIter31 = this1;
            							}
            							else {
HXLINE(  72)								int ii_min = ::Math_obj::floor(by1);
HXDLIN(  72)								int ii_max = ::Math_obj::ceil(cy2);
HXDLIN(  72)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  72)								yIter31 = this1;
            							}
            						}
            						else {
HXLINE(  72)							if ((by1 > cy2)) {
HXLINE(  72)								int min;
HXDLIN(  72)								if ((((Float)0.) > cy2)) {
HXLINE(  72)									min = ::Math_obj::floor(cy2);
            								}
            								else {
HXLINE(  72)									min = 0;
            								}
HXDLIN(  72)								int ii_min = min;
HXDLIN(  72)								int ii_max = ::Math_obj::ceil(by1);
HXDLIN(  72)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  72)								yIter31 = this1;
            							}
            							else {
HXLINE(  72)								int ii_min = 0;
HXDLIN(  72)								int ii_max = ::Math_obj::ceil(cy2);
HXDLIN(  72)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  72)								yIter31 = this1;
            							}
            						}
HXDLIN(  72)						::pixelimage::ImageStruct undoImage1 = null();
HXDLIN(  72)						if (hasUndo1) {
HXLINE(  72)							int w = ((xIter31->max - xIter31->start) + 1);
HXDLIN(  72)							int h = ((yIter31->max - yIter31->start) + 1);
HXDLIN(  72)							int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN(  72)							::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  72)							::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN(  72)							::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN(  72)							undoImage1 = this3;
HXDLIN(  72)							{
HXLINE(  72)								int rectLeft = xIter31->start;
HXDLIN(  72)								int rectTop = yIter31->start;
HXDLIN(  72)								int rectRight = xIter31->max;
HXDLIN(  72)								bool forceClear = false;
HXDLIN(  72)								{
HXLINE(  72)									int _g = rectTop;
HXDLIN(  72)									int _g1 = yIter31->max;
HXDLIN(  72)									while((_g < _g1)){
HXLINE(  72)										_g = (_g + 1);
HXDLIN(  72)										int dy = (_g - 1);
HXDLIN(  72)										{
HXLINE(  72)											int _g1 = rectLeft;
HXDLIN(  72)											int _g2 = rectRight;
HXDLIN(  72)											while((_g1 < _g2)){
HXLINE(  72)												_g1 = (_g1 + 1);
HXDLIN(  72)												int dx = (_g1 - 1);
HXDLIN(  72)												::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN(  72)												int index;
HXDLIN(  72)												if (temp->useVirtualPos) {
HXLINE(  72)													index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - temp->virtualY) * ( (Float)(temp->width) )) + dx) - temp->virtualX));
            												}
            												else {
HXLINE(  72)													index = ::Std_obj::_hx_int(( (Float)(((dy * temp->width) + dx)) ));
            												}
HXDLIN(  72)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  72)												int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  72)												int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  72)												int col;
HXDLIN(  72)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  72)													col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE(  72)													col = c;
            												}
HXDLIN(  72)												bool _hx_tmp;
HXDLIN(  72)												if (temp->useMask) {
HXLINE(  72)													_hx_tmp = ::hx::IsNotNull( temp->mask );
            												}
            												else {
HXLINE(  72)													_hx_tmp = false;
            												}
HXDLIN(  72)												if (_hx_tmp) {
HXLINE(  72)													::pixelimage::ImageStruct this1 = temp->mask;
HXDLIN(  72)													::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  72)													int index;
HXDLIN(  72)													if (this1->useVirtualPos) {
HXLINE(  72)														index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            													}
            													else {
HXLINE(  72)														index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            													}
HXDLIN(  72)													::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  72)													int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  72)													int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  72)													int v;
HXDLIN(  72)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  72)														v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE(  72)														v = c;
            													}
HXDLIN(  72)													int this3 = v;
HXDLIN(  72)													int maskPixel = this3;
HXDLIN(  72)													int this4 = col;
HXDLIN(  72)													int this5 = this4;
HXDLIN(  72)													if ((maskPixel == 0)) {
HXLINE(  72)														int this1 = this5;
HXDLIN(  72)														col = this1;
            													}
            													else {
HXLINE(  72)														Float m0;
HXDLIN(  72)														int this1 = ((maskPixel >> 24) & 255);
HXDLIN(  72)														if ((this1 == 0)) {
HXLINE(  72)															m0 = ((Float)0.);
            														}
            														else {
HXLINE(  72)															m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            														}
HXDLIN(  72)														Float m1;
HXDLIN(  72)														int this2 = ((maskPixel >> 16) & 255);
HXDLIN(  72)														if ((this2 == 0)) {
HXLINE(  72)															m1 = ((Float)0.);
            														}
            														else {
HXLINE(  72)															m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            														}
HXDLIN(  72)														Float m2;
HXDLIN(  72)														int this3 = ((maskPixel >> 8) & 255);
HXDLIN(  72)														if ((this3 == 0)) {
HXLINE(  72)															m2 = ((Float)0.);
            														}
            														else {
HXLINE(  72)															m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            														}
HXDLIN(  72)														Float m3;
HXDLIN(  72)														int this4 = (maskPixel & 255);
HXDLIN(  72)														if ((this4 == 0)) {
HXLINE(  72)															m3 = ((Float)0.);
            														}
            														else {
HXLINE(  72)															m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            														}
HXDLIN(  72)														int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN(  72)														int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN(  72)														int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN(  72)														int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN(  72)														col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            													}
            												}
HXDLIN(  72)												if ((col != 0)) {
HXLINE(  72)													int x = (dx - rectLeft);
HXDLIN(  72)													int y = (dy - rectTop);
HXDLIN(  72)													int this1 = col;
HXDLIN(  72)													int c = this1;
HXDLIN(  72)													bool _hx_tmp;
HXDLIN(  72)													if ((((c >> 24) & 255) < 254)) {
HXLINE(  72)														_hx_tmp = undoImage1->transparent;
            													}
            													else {
HXLINE(  72)														_hx_tmp = false;
            													}
HXDLIN(  72)													if (_hx_tmp) {
HXLINE(  72)														int location;
HXDLIN(  72)														if (undoImage1->useVirtualPos) {
HXLINE(  72)															location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            														}
            														else {
HXLINE(  72)															location = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            														}
HXDLIN(  72)														::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN(  72)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  72)														int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  72)														int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  72)														int this3 = this2;
HXDLIN(  72)														int this4;
HXDLIN(  72)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  72)															this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            														}
            														else {
HXLINE(  72)															this4 = this3;
            														}
HXDLIN(  72)														Float a1;
HXDLIN(  72)														int this5 = ((this4 >> 24) & 255);
HXDLIN(  72)														if ((this5 == 0)) {
HXLINE(  72)															a1 = ((Float)0.);
            														}
            														else {
HXLINE(  72)															a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            														}
HXDLIN(  72)														Float r1;
HXDLIN(  72)														int this6 = ((this4 >> 16) & 255);
HXDLIN(  72)														if ((this6 == 0)) {
HXLINE(  72)															r1 = ((Float)0.);
            														}
            														else {
HXLINE(  72)															r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            														}
HXDLIN(  72)														Float g1;
HXDLIN(  72)														int this7 = ((this4 >> 8) & 255);
HXDLIN(  72)														if ((this7 == 0)) {
HXLINE(  72)															g1 = ((Float)0.);
            														}
            														else {
HXLINE(  72)															g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            														}
HXDLIN(  72)														Float b1;
HXDLIN(  72)														int this8 = (this4 & 255);
HXDLIN(  72)														if ((this8 == 0)) {
HXLINE(  72)															b1 = ((Float)0.);
            														}
            														else {
HXLINE(  72)															b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            														}
HXDLIN(  72)														Float a2;
HXDLIN(  72)														int this9 = ((col >> 24) & 255);
HXDLIN(  72)														if ((this9 == 0)) {
HXLINE(  72)															a2 = ((Float)0.);
            														}
            														else {
HXLINE(  72)															a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            														}
HXDLIN(  72)														Float r2;
HXDLIN(  72)														int this10 = ((col >> 16) & 255);
HXDLIN(  72)														if ((this10 == 0)) {
HXLINE(  72)															r2 = ((Float)0.);
            														}
            														else {
HXLINE(  72)															r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            														}
HXDLIN(  72)														Float g2;
HXDLIN(  72)														int this11 = ((col >> 8) & 255);
HXDLIN(  72)														if ((this11 == 0)) {
HXLINE(  72)															g2 = ((Float)0.);
            														}
            														else {
HXLINE(  72)															g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            														}
HXDLIN(  72)														Float b2;
HXDLIN(  72)														int this12 = (col & 255);
HXDLIN(  72)														if ((this12 == 0)) {
HXLINE(  72)															b2 = ((Float)0.);
            														}
            														else {
HXLINE(  72)															b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            														}
HXDLIN(  72)														Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  72)														int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  72)														int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  72)														int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  72)														int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  72)														int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  72)														{
HXLINE(  72)															::haxe::io::ArrayBufferViewImpl this13 = undoImage1->image;
HXDLIN(  72)															int value;
HXDLIN(  72)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  72)																value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            															}
            															else {
HXLINE(  72)																value = blended;
            															}
HXDLIN(  72)															bool _hx_tmp;
HXDLIN(  72)															if ((location >= 0)) {
HXLINE(  72)																_hx_tmp = (location < (this13->byteLength >> 2));
            															}
            															else {
HXLINE(  72)																_hx_tmp = false;
            															}
HXDLIN(  72)															if (_hx_tmp) {
HXLINE(  72)																::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  72)																int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  72)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  72)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  72)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  72)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
            													else {
HXLINE(  72)														::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN(  72)														int index;
HXDLIN(  72)														if (undoImage1->useVirtualPos) {
HXLINE(  72)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            														}
            														else {
HXLINE(  72)															index = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            														}
HXDLIN(  72)														int value;
HXDLIN(  72)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  72)															value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            														}
            														else {
HXLINE(  72)															value = c;
            														}
HXDLIN(  72)														bool _hx_tmp;
HXDLIN(  72)														if ((index >= 0)) {
HXLINE(  72)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE(  72)															_hx_tmp = false;
            														}
HXDLIN(  72)														if (_hx_tmp) {
HXLINE(  72)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  72)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  72)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  72)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  72)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  72)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
            												else {
HXLINE(  72)													if (forceClear) {
HXLINE(  72)														::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN(  72)														int x = (dx - rectLeft);
HXDLIN(  72)														int y = (dy - rectTop);
HXDLIN(  72)														int index;
HXDLIN(  72)														if (undoImage1->useVirtualPos) {
HXLINE(  72)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            														}
            														else {
HXLINE(  72)															index = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            														}
HXDLIN(  72)														bool _hx_tmp;
HXDLIN(  72)														if ((index >= 0)) {
HXLINE(  72)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE(  72)															_hx_tmp = false;
            														}
HXDLIN(  72)														if (_hx_tmp) {
HXLINE(  72)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  72)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  72)															_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  72)															_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  72)															_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  72)															_this->b[(pos + 3)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  72)						bool foundY1 = false;
HXDLIN(  72)						Float s1 = ((Float)0.);
HXDLIN(  72)						Float t1 = ((Float)0.);
HXDLIN(  72)						Float sxx1 = ((Float)0.);
HXDLIN(  72)						Float txx1 = ((Float)0.);
HXDLIN(  72)						{
HXLINE(  72)							int _g_min1 = xIter31->start;
HXDLIN(  72)							int _g_max1 = xIter31->max;
HXDLIN(  72)							while((_g_min1 < _g_max1)){
HXLINE(  72)								_g_min1 = (_g_min1 + 1);
HXDLIN(  72)								int x = (_g_min1 - 1);
HXLINE( 223)								sxx1 = (sx1 * ( (Float)(x) ));
HXLINE( 224)								txx1 = (tx1 * ( (Float)(x) ));
HXLINE( 225)								foundY1 = false;
HXLINE(  72)								{
HXLINE(  72)									int _g_min = yIter31->start;
HXDLIN(  72)									int _g_max = yIter31->max;
HXDLIN(  72)									while((_g_min < _g_max)){
HXLINE(  72)										_g_min = (_g_min + 1);
HXDLIN(  72)										int y = (_g_min - 1);
HXLINE( 227)										s1 = ((s01 + sxx1) + (sy1 * ( (Float)(y) )));
HXLINE( 228)										t1 = ((t01 + txx1) + (ty1 * ( (Float)(y) )));
HXLINE(  72)										bool _hx_tmp;
HXDLIN(  72)										if (!((s1 <= 0))) {
HXLINE(  72)											_hx_tmp = (t1 <= 0);
            										}
            										else {
HXLINE(  72)											_hx_tmp = true;
            										}
HXDLIN(  72)										if (_hx_tmp) {
HXLINE(  72)											if (foundY1) {
HXLINE(  72)												goto _hx_goto_13;
            											}
            										}
            										else {
HXLINE(  72)											if (((s1 + t1) < A1)) {
HXLINE(  72)												int x1 = ::hx::Mod(x,tileImage->width);
HXDLIN(  72)												int y1 = ::hx::Mod(y,tileImage->height);
HXDLIN(  72)												::haxe::io::ArrayBufferViewImpl this1 = tileImage->image;
HXDLIN(  72)												int index;
HXDLIN(  72)												if (tileImage->useVirtualPos) {
HXLINE(  72)													index = ::Std_obj::_hx_int(((((( (Float)(y1) ) - tileImage->virtualY) * ( (Float)(tileImage->width) )) + x1) - tileImage->virtualX));
            												}
            												else {
HXLINE(  72)													index = ::Std_obj::_hx_int(( (Float)(((y1 * tileImage->width) + x1)) ));
            												}
HXDLIN(  72)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  72)												int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  72)												int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  72)												int color;
HXDLIN(  72)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  72)													color = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE(  72)													color = c;
            												}
HXDLIN(  72)												{
HXLINE(  72)													int this2 = color;
HXDLIN(  72)													int c1 = this2;
HXDLIN(  72)													bool _hx_tmp;
HXDLIN(  72)													if ((((c1 >> 24) & 255) < 254)) {
HXLINE(  72)														_hx_tmp = temp->transparent;
            													}
            													else {
HXLINE(  72)														_hx_tmp = false;
            													}
HXDLIN(  72)													if (_hx_tmp) {
HXLINE(  72)														int location;
HXDLIN(  72)														if (temp->useVirtualPos) {
HXLINE(  72)															location = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            														}
            														else {
HXLINE(  72)															location = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            														}
HXDLIN(  72)														::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN(  72)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  72)														int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  72)														int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  72)														int this3 = this2;
HXDLIN(  72)														int this4;
HXDLIN(  72)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  72)															this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            														}
            														else {
HXLINE(  72)															this4 = this3;
            														}
HXDLIN(  72)														Float a1;
HXDLIN(  72)														int this5 = ((this4 >> 24) & 255);
HXDLIN(  72)														if ((this5 == 0)) {
HXLINE(  72)															a1 = ((Float)0.);
            														}
            														else {
HXLINE(  72)															a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            														}
HXDLIN(  72)														Float r1;
HXDLIN(  72)														int this6 = ((this4 >> 16) & 255);
HXDLIN(  72)														if ((this6 == 0)) {
HXLINE(  72)															r1 = ((Float)0.);
            														}
            														else {
HXLINE(  72)															r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            														}
HXDLIN(  72)														Float g1;
HXDLIN(  72)														int this7 = ((this4 >> 8) & 255);
HXDLIN(  72)														if ((this7 == 0)) {
HXLINE(  72)															g1 = ((Float)0.);
            														}
            														else {
HXLINE(  72)															g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            														}
HXDLIN(  72)														Float b1;
HXDLIN(  72)														int this8 = (this4 & 255);
HXDLIN(  72)														if ((this8 == 0)) {
HXLINE(  72)															b1 = ((Float)0.);
            														}
            														else {
HXLINE(  72)															b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            														}
HXDLIN(  72)														Float a2;
HXDLIN(  72)														int this9 = ((color >> 24) & 255);
HXDLIN(  72)														if ((this9 == 0)) {
HXLINE(  72)															a2 = ((Float)0.);
            														}
            														else {
HXLINE(  72)															a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            														}
HXDLIN(  72)														Float r2;
HXDLIN(  72)														int this10 = ((color >> 16) & 255);
HXDLIN(  72)														if ((this10 == 0)) {
HXLINE(  72)															r2 = ((Float)0.);
            														}
            														else {
HXLINE(  72)															r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            														}
HXDLIN(  72)														Float g2;
HXDLIN(  72)														int this11 = ((color >> 8) & 255);
HXDLIN(  72)														if ((this11 == 0)) {
HXLINE(  72)															g2 = ((Float)0.);
            														}
            														else {
HXLINE(  72)															g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            														}
HXDLIN(  72)														Float b2;
HXDLIN(  72)														int this12 = (color & 255);
HXDLIN(  72)														if ((this12 == 0)) {
HXLINE(  72)															b2 = ((Float)0.);
            														}
            														else {
HXLINE(  72)															b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            														}
HXDLIN(  72)														Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  72)														int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  72)														int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  72)														int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  72)														int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  72)														int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  72)														{
HXLINE(  72)															::haxe::io::ArrayBufferViewImpl this13 = temp->image;
HXDLIN(  72)															int value;
HXDLIN(  72)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  72)																value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            															}
            															else {
HXLINE(  72)																value = blended;
            															}
HXDLIN(  72)															bool _hx_tmp;
HXDLIN(  72)															if ((location >= 0)) {
HXLINE(  72)																_hx_tmp = (location < (this13->byteLength >> 2));
            															}
            															else {
HXLINE(  72)																_hx_tmp = false;
            															}
HXDLIN(  72)															if (_hx_tmp) {
HXLINE(  72)																::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  72)																int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  72)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  72)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  72)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  72)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
            													else {
HXLINE(  72)														::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN(  72)														int index;
HXDLIN(  72)														if (temp->useVirtualPos) {
HXLINE(  72)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            														}
            														else {
HXLINE(  72)															index = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            														}
HXDLIN(  72)														int value;
HXDLIN(  72)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  72)															value = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            														}
            														else {
HXLINE(  72)															value = c1;
            														}
HXDLIN(  72)														bool _hx_tmp;
HXDLIN(  72)														if ((index >= 0)) {
HXLINE(  72)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE(  72)															_hx_tmp = false;
            														}
HXDLIN(  72)														if (_hx_tmp) {
HXLINE(  72)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  72)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  72)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  72)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  72)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  72)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
HXLINE( 237)												foundY1 = true;
            											}
            											else {
HXLINE(  72)												if (foundY1) {
HXLINE(  72)													goto _hx_goto_13;
            												}
            											}
            										}
            									}
            									_hx_goto_13:;
            								}
            							}
            						}
HXDLIN(  72)						if ((hasHit == false)) {
HXLINE(  72)							::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,bx,((Float)0.),bx2,by1,cx1,cy2,true);
HXDLIN(  72)							if (hasUndo1) {
HXLINE(  72)								v->undoImage = undoImage1;
HXDLIN(  72)								v->undoX = xIter31->start;
HXDLIN(  72)								v->undoY = yIter31->start;
            							}
            						}
            					}
            				}
HXDLIN(  72)				if ((hasHit == true)) {
HXLINE(  72)					::pixelimage::algo::HitQuad v = ::pixelimage::algo::HitQuad_obj::__alloc( HX_CTX ,((Float)0.),((Float)0.),bx,((Float)0.),bx,cy,((Float)0.),cy,true);
            				}
            			}
            		}
HXLINE(  73)		{
HXLINE(  73)			Float x = this->strokeWidth;
HXDLIN(  73)			Float y = this->strokeWidth;
HXDLIN(  73)			::pixelimage::ImageStruct tileImage1 = this->tileImageFill;
HXDLIN(  73)			bool hasHit1 = false;
HXDLIN(  73)			Float bx3 = (x + (this->diameter - (( (Float)(2) ) * this->strokeWidth)));
HXDLIN(  73)			Float cy3 = (y + (this->diameter - (( (Float)(2) ) * this->strokeWidth)));
HXDLIN(  73)			{
HXLINE(  73)				{
HXLINE(  73)					Float bx4 = bx3;
HXDLIN(  73)					Float by2 = y;
HXDLIN(  73)					Float cx2 = x;
HXDLIN(  73)					Float cy4 = cy3;
HXDLIN(  73)					bool adjustWinding2 = (((((x * by2) - (bx4 * y)) + ((bx4 * cy4) - (cx2 * by2))) + ((cx2 * y) - (x * cy4))) > 0);
HXDLIN(  73)					if (!(adjustWinding2)) {
HXLINE(  73)						Float bx_ = bx4;
HXDLIN(  73)						Float by_ = by2;
HXLINE( 188)						bx4 = cx2;
HXLINE( 189)						by2 = cy4;
HXLINE( 190)						cx2 = bx_;
HXLINE( 191)						cy4 = by_;
            					}
HXLINE(  73)					{
HXLINE(  73)						bool hasUndo2 = false;
HXDLIN(  73)						Float s02 = ((y * cx2) - (x * cy4));
HXDLIN(  73)						Float sx2 = (cy4 - y);
HXDLIN(  73)						Float sy2 = (x - cx2);
HXDLIN(  73)						Float t02 = ((x * by2) - (y * bx4));
HXDLIN(  73)						Float tx2 = (y - by2);
HXDLIN(  73)						Float ty2 = (bx4 - x);
HXDLIN(  73)						Float A2 = ((((-(by2) * cx2) + (y * (-(bx4) + cx2))) + (x * (by2 - cy4))) + (bx4 * cy4));
HXDLIN(  73)						::pixelimage::iter::IntIterStart xIter32;
HXDLIN(  73)						if ((x > bx4)) {
HXLINE(  73)							if ((x > cx2)) {
HXLINE(  73)								int min;
HXDLIN(  73)								if ((bx4 > cx2)) {
HXLINE(  73)									min = ::Math_obj::floor(cx2);
            								}
            								else {
HXLINE(  73)									min = ::Math_obj::floor(bx4);
            								}
HXDLIN(  73)								int ii_min = min;
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(x);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								xIter32 = this1;
            							}
            							else {
HXLINE(  73)								int ii_min = ::Math_obj::floor(bx4);
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(cx2);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								xIter32 = this1;
            							}
            						}
            						else {
HXLINE(  73)							if ((bx4 > cx2)) {
HXLINE(  73)								int min;
HXDLIN(  73)								if ((x > cx2)) {
HXLINE(  73)									min = ::Math_obj::floor(cx2);
            								}
            								else {
HXLINE(  73)									min = ::Math_obj::ceil(x);
            								}
HXDLIN(  73)								int ii_min = min;
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(bx4);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								xIter32 = this1;
            							}
            							else {
HXLINE(  73)								int ii_min = ::Math_obj::floor(x);
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(cx2);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								xIter32 = this1;
            							}
            						}
HXDLIN(  73)						::pixelimage::iter::IntIterStart yIter32;
HXDLIN(  73)						if ((y > by2)) {
HXLINE(  73)							if ((y > cy4)) {
HXLINE(  73)								int min;
HXDLIN(  73)								if ((by2 > cy4)) {
HXLINE(  73)									min = ::Math_obj::floor(cy4);
            								}
            								else {
HXLINE(  73)									min = ::Math_obj::floor(by2);
            								}
HXDLIN(  73)								int ii_min = min;
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(y);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								yIter32 = this1;
            							}
            							else {
HXLINE(  73)								int ii_min = ::Math_obj::floor(by2);
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(cy4);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								yIter32 = this1;
            							}
            						}
            						else {
HXLINE(  73)							if ((by2 > cy4)) {
HXLINE(  73)								int min;
HXDLIN(  73)								if ((y > cy4)) {
HXLINE(  73)									min = ::Math_obj::floor(cy4);
            								}
            								else {
HXLINE(  73)									min = ::Math_obj::ceil(y);
            								}
HXDLIN(  73)								int ii_min = min;
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(by2);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								yIter32 = this1;
            							}
            							else {
HXLINE(  73)								int ii_min = ::Math_obj::floor(y);
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(cy4);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								yIter32 = this1;
            							}
            						}
HXDLIN(  73)						::pixelimage::ImageStruct undoImage2 = null();
HXDLIN(  73)						if (hasUndo2) {
HXLINE(  73)							int w = ((xIter32->max - xIter32->start) + 1);
HXDLIN(  73)							int h = ((yIter32->max - yIter32->start) + 1);
HXDLIN(  73)							int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN(  73)							::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  73)							::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN(  73)							::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN(  73)							undoImage2 = this3;
HXDLIN(  73)							{
HXLINE(  73)								int rectLeft = xIter32->start;
HXDLIN(  73)								int rectTop = yIter32->start;
HXDLIN(  73)								int rectRight = xIter32->max;
HXDLIN(  73)								bool forceClear = false;
HXDLIN(  73)								{
HXLINE(  73)									int _g = rectTop;
HXDLIN(  73)									int _g1 = yIter32->max;
HXDLIN(  73)									while((_g < _g1)){
HXLINE(  73)										_g = (_g + 1);
HXDLIN(  73)										int dy = (_g - 1);
HXDLIN(  73)										{
HXLINE(  73)											int _g1 = rectLeft;
HXDLIN(  73)											int _g2 = rectRight;
HXDLIN(  73)											while((_g1 < _g2)){
HXLINE(  73)												_g1 = (_g1 + 1);
HXDLIN(  73)												int dx = (_g1 - 1);
HXDLIN(  73)												::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN(  73)												int index;
HXDLIN(  73)												if (temp->useVirtualPos) {
HXLINE(  73)													index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - temp->virtualY) * ( (Float)(temp->width) )) + dx) - temp->virtualX));
            												}
            												else {
HXLINE(  73)													index = ::Std_obj::_hx_int(( (Float)(((dy * temp->width) + dx)) ));
            												}
HXDLIN(  73)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)												int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  73)												int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  73)												int col;
HXDLIN(  73)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)													col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE(  73)													col = c;
            												}
HXDLIN(  73)												bool _hx_tmp;
HXDLIN(  73)												if (temp->useMask) {
HXLINE(  73)													_hx_tmp = ::hx::IsNotNull( temp->mask );
            												}
            												else {
HXLINE(  73)													_hx_tmp = false;
            												}
HXDLIN(  73)												if (_hx_tmp) {
HXLINE(  73)													::pixelimage::ImageStruct this1 = temp->mask;
HXDLIN(  73)													::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  73)													int index;
HXDLIN(  73)													if (this1->useVirtualPos) {
HXLINE(  73)														index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            													}
            													else {
HXLINE(  73)														index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            													}
HXDLIN(  73)													::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  73)													int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  73)													int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  73)													int v;
HXDLIN(  73)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)														v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE(  73)														v = c;
            													}
HXDLIN(  73)													int this3 = v;
HXDLIN(  73)													int maskPixel = this3;
HXDLIN(  73)													int this4 = col;
HXDLIN(  73)													int this5 = this4;
HXDLIN(  73)													if ((maskPixel == 0)) {
HXLINE(  73)														int this1 = this5;
HXDLIN(  73)														col = this1;
            													}
            													else {
HXLINE(  73)														Float m0;
HXDLIN(  73)														int this1 = ((maskPixel >> 24) & 255);
HXDLIN(  73)														if ((this1 == 0)) {
HXLINE(  73)															m0 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float m1;
HXDLIN(  73)														int this2 = ((maskPixel >> 16) & 255);
HXDLIN(  73)														if ((this2 == 0)) {
HXLINE(  73)															m1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float m2;
HXDLIN(  73)														int this3 = ((maskPixel >> 8) & 255);
HXDLIN(  73)														if ((this3 == 0)) {
HXLINE(  73)															m2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float m3;
HXDLIN(  73)														int this4 = (maskPixel & 255);
HXDLIN(  73)														if ((this4 == 0)) {
HXLINE(  73)															m3 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN(  73)														int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN(  73)														int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN(  73)														int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN(  73)														col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            													}
            												}
HXDLIN(  73)												if ((col != 0)) {
HXLINE(  73)													int x = (dx - rectLeft);
HXDLIN(  73)													int y = (dy - rectTop);
HXDLIN(  73)													int this1 = col;
HXDLIN(  73)													int c = this1;
HXDLIN(  73)													bool _hx_tmp;
HXDLIN(  73)													if ((((c >> 24) & 255) < 254)) {
HXLINE(  73)														_hx_tmp = undoImage2->transparent;
            													}
            													else {
HXLINE(  73)														_hx_tmp = false;
            													}
HXDLIN(  73)													if (_hx_tmp) {
HXLINE(  73)														int location;
HXDLIN(  73)														if (undoImage2->useVirtualPos) {
HXLINE(  73)															location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage2->virtualY) * ( (Float)(undoImage2->width) )) + x) - undoImage2->virtualX));
            														}
            														else {
HXLINE(  73)															location = ::Std_obj::_hx_int(( (Float)(((y * undoImage2->width) + x)) ));
            														}
HXDLIN(  73)														::haxe::io::ArrayBufferViewImpl this1 = undoImage2->image;
HXDLIN(  73)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)														int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  73)														int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  73)														int this3 = this2;
HXDLIN(  73)														int this4;
HXDLIN(  73)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)															this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            														}
            														else {
HXLINE(  73)															this4 = this3;
            														}
HXDLIN(  73)														Float a1;
HXDLIN(  73)														int this5 = ((this4 >> 24) & 255);
HXDLIN(  73)														if ((this5 == 0)) {
HXLINE(  73)															a1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float r1;
HXDLIN(  73)														int this6 = ((this4 >> 16) & 255);
HXDLIN(  73)														if ((this6 == 0)) {
HXLINE(  73)															r1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float g1;
HXDLIN(  73)														int this7 = ((this4 >> 8) & 255);
HXDLIN(  73)														if ((this7 == 0)) {
HXLINE(  73)															g1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float b1;
HXDLIN(  73)														int this8 = (this4 & 255);
HXDLIN(  73)														if ((this8 == 0)) {
HXLINE(  73)															b1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float a2;
HXDLIN(  73)														int this9 = ((col >> 24) & 255);
HXDLIN(  73)														if ((this9 == 0)) {
HXLINE(  73)															a2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float r2;
HXDLIN(  73)														int this10 = ((col >> 16) & 255);
HXDLIN(  73)														if ((this10 == 0)) {
HXLINE(  73)															r2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float g2;
HXDLIN(  73)														int this11 = ((col >> 8) & 255);
HXDLIN(  73)														if ((this11 == 0)) {
HXLINE(  73)															g2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float b2;
HXDLIN(  73)														int this12 = (col & 255);
HXDLIN(  73)														if ((this12 == 0)) {
HXLINE(  73)															b2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  73)														int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  73)														int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  73)														int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  73)														int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  73)														int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  73)														{
HXLINE(  73)															::haxe::io::ArrayBufferViewImpl this13 = undoImage2->image;
HXDLIN(  73)															int value;
HXDLIN(  73)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)																value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            															}
            															else {
HXLINE(  73)																value = blended;
            															}
HXDLIN(  73)															bool _hx_tmp;
HXDLIN(  73)															if ((location >= 0)) {
HXLINE(  73)																_hx_tmp = (location < (this13->byteLength >> 2));
            															}
            															else {
HXLINE(  73)																_hx_tmp = false;
            															}
HXDLIN(  73)															if (_hx_tmp) {
HXLINE(  73)																::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  73)																int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  73)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  73)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  73)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  73)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
            													else {
HXLINE(  73)														::haxe::io::ArrayBufferViewImpl this1 = undoImage2->image;
HXDLIN(  73)														int index;
HXDLIN(  73)														if (undoImage2->useVirtualPos) {
HXLINE(  73)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage2->virtualY) * ( (Float)(undoImage2->width) )) + x) - undoImage2->virtualX));
            														}
            														else {
HXLINE(  73)															index = ::Std_obj::_hx_int(( (Float)(((y * undoImage2->width) + x)) ));
            														}
HXDLIN(  73)														int value;
HXDLIN(  73)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)															value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            														}
            														else {
HXLINE(  73)															value = c;
            														}
HXDLIN(  73)														bool _hx_tmp;
HXDLIN(  73)														if ((index >= 0)) {
HXLINE(  73)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE(  73)															_hx_tmp = false;
            														}
HXDLIN(  73)														if (_hx_tmp) {
HXLINE(  73)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  73)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  73)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  73)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  73)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
            												else {
HXLINE(  73)													if (forceClear) {
HXLINE(  73)														::haxe::io::ArrayBufferViewImpl this1 = undoImage2->image;
HXDLIN(  73)														int x = (dx - rectLeft);
HXDLIN(  73)														int y = (dy - rectTop);
HXDLIN(  73)														int index;
HXDLIN(  73)														if (undoImage2->useVirtualPos) {
HXLINE(  73)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage2->virtualY) * ( (Float)(undoImage2->width) )) + x) - undoImage2->virtualX));
            														}
            														else {
HXLINE(  73)															index = ::Std_obj::_hx_int(( (Float)(((y * undoImage2->width) + x)) ));
            														}
HXDLIN(  73)														bool _hx_tmp;
HXDLIN(  73)														if ((index >= 0)) {
HXLINE(  73)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE(  73)															_hx_tmp = false;
            														}
HXDLIN(  73)														if (_hx_tmp) {
HXLINE(  73)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  73)															_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  73)															_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  73)															_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  73)															_this->b[(pos + 3)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  73)						bool foundY2 = false;
HXDLIN(  73)						Float s2 = ((Float)0.);
HXDLIN(  73)						Float t2 = ((Float)0.);
HXDLIN(  73)						Float sxx2 = ((Float)0.);
HXDLIN(  73)						Float txx2 = ((Float)0.);
HXDLIN(  73)						{
HXLINE(  73)							int _g_min2 = xIter32->start;
HXDLIN(  73)							int _g_max2 = xIter32->max;
HXDLIN(  73)							while((_g_min2 < _g_max2)){
HXLINE(  73)								_g_min2 = (_g_min2 + 1);
HXDLIN(  73)								int x = (_g_min2 - 1);
HXLINE( 223)								sxx2 = (sx2 * ( (Float)(x) ));
HXLINE( 224)								txx2 = (tx2 * ( (Float)(x) ));
HXLINE( 225)								foundY2 = false;
HXLINE(  73)								{
HXLINE(  73)									int _g_min = yIter32->start;
HXDLIN(  73)									int _g_max = yIter32->max;
HXDLIN(  73)									while((_g_min < _g_max)){
HXLINE(  73)										_g_min = (_g_min + 1);
HXDLIN(  73)										int y = (_g_min - 1);
HXLINE( 227)										s2 = ((s02 + sxx2) + (sy2 * ( (Float)(y) )));
HXLINE( 228)										t2 = ((t02 + txx2) + (ty2 * ( (Float)(y) )));
HXLINE(  73)										bool _hx_tmp;
HXDLIN(  73)										if (!((s2 <= 0))) {
HXLINE(  73)											_hx_tmp = (t2 <= 0);
            										}
            										else {
HXLINE(  73)											_hx_tmp = true;
            										}
HXDLIN(  73)										if (_hx_tmp) {
HXLINE(  73)											if (foundY2) {
HXLINE(  73)												goto _hx_goto_17;
            											}
            										}
            										else {
HXLINE(  73)											if (((s2 + t2) < A2)) {
HXLINE(  73)												int x1 = ::hx::Mod(x,tileImage1->width);
HXDLIN(  73)												int y1 = ::hx::Mod(y,tileImage1->height);
HXDLIN(  73)												::haxe::io::ArrayBufferViewImpl this1 = tileImage1->image;
HXDLIN(  73)												int index;
HXDLIN(  73)												if (tileImage1->useVirtualPos) {
HXLINE(  73)													index = ::Std_obj::_hx_int(((((( (Float)(y1) ) - tileImage1->virtualY) * ( (Float)(tileImage1->width) )) + x1) - tileImage1->virtualX));
            												}
            												else {
HXLINE(  73)													index = ::Std_obj::_hx_int(( (Float)(((y1 * tileImage1->width) + x1)) ));
            												}
HXDLIN(  73)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)												int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  73)												int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  73)												int color;
HXDLIN(  73)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)													color = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE(  73)													color = c;
            												}
HXDLIN(  73)												{
HXLINE(  73)													int this2 = color;
HXDLIN(  73)													int c1 = this2;
HXDLIN(  73)													bool _hx_tmp;
HXDLIN(  73)													if ((((c1 >> 24) & 255) < 254)) {
HXLINE(  73)														_hx_tmp = temp->transparent;
            													}
            													else {
HXLINE(  73)														_hx_tmp = false;
            													}
HXDLIN(  73)													if (_hx_tmp) {
HXLINE(  73)														int location;
HXDLIN(  73)														if (temp->useVirtualPos) {
HXLINE(  73)															location = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            														}
            														else {
HXLINE(  73)															location = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            														}
HXDLIN(  73)														::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN(  73)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)														int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  73)														int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  73)														int this3 = this2;
HXDLIN(  73)														int this4;
HXDLIN(  73)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)															this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            														}
            														else {
HXLINE(  73)															this4 = this3;
            														}
HXDLIN(  73)														Float a1;
HXDLIN(  73)														int this5 = ((this4 >> 24) & 255);
HXDLIN(  73)														if ((this5 == 0)) {
HXLINE(  73)															a1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float r1;
HXDLIN(  73)														int this6 = ((this4 >> 16) & 255);
HXDLIN(  73)														if ((this6 == 0)) {
HXLINE(  73)															r1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float g1;
HXDLIN(  73)														int this7 = ((this4 >> 8) & 255);
HXDLIN(  73)														if ((this7 == 0)) {
HXLINE(  73)															g1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float b1;
HXDLIN(  73)														int this8 = (this4 & 255);
HXDLIN(  73)														if ((this8 == 0)) {
HXLINE(  73)															b1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float a2;
HXDLIN(  73)														int this9 = ((color >> 24) & 255);
HXDLIN(  73)														if ((this9 == 0)) {
HXLINE(  73)															a2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float r2;
HXDLIN(  73)														int this10 = ((color >> 16) & 255);
HXDLIN(  73)														if ((this10 == 0)) {
HXLINE(  73)															r2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float g2;
HXDLIN(  73)														int this11 = ((color >> 8) & 255);
HXDLIN(  73)														if ((this11 == 0)) {
HXLINE(  73)															g2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float b2;
HXDLIN(  73)														int this12 = (color & 255);
HXDLIN(  73)														if ((this12 == 0)) {
HXLINE(  73)															b2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  73)														int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  73)														int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  73)														int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  73)														int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  73)														int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  73)														{
HXLINE(  73)															::haxe::io::ArrayBufferViewImpl this13 = temp->image;
HXDLIN(  73)															int value;
HXDLIN(  73)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)																value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            															}
            															else {
HXLINE(  73)																value = blended;
            															}
HXDLIN(  73)															bool _hx_tmp;
HXDLIN(  73)															if ((location >= 0)) {
HXLINE(  73)																_hx_tmp = (location < (this13->byteLength >> 2));
            															}
            															else {
HXLINE(  73)																_hx_tmp = false;
            															}
HXDLIN(  73)															if (_hx_tmp) {
HXLINE(  73)																::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  73)																int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  73)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  73)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  73)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  73)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
            													else {
HXLINE(  73)														::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN(  73)														int index;
HXDLIN(  73)														if (temp->useVirtualPos) {
HXLINE(  73)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            														}
            														else {
HXLINE(  73)															index = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            														}
HXDLIN(  73)														int value;
HXDLIN(  73)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)															value = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            														}
            														else {
HXLINE(  73)															value = c1;
            														}
HXDLIN(  73)														bool _hx_tmp;
HXDLIN(  73)														if ((index >= 0)) {
HXLINE(  73)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE(  73)															_hx_tmp = false;
            														}
HXDLIN(  73)														if (_hx_tmp) {
HXLINE(  73)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  73)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  73)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  73)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  73)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
HXLINE( 237)												foundY2 = true;
            											}
            											else {
HXLINE(  73)												if (foundY2) {
HXLINE(  73)													goto _hx_goto_17;
            												}
            											}
            										}
            									}
            									_hx_goto_17:;
            								}
            							}
            						}
HXDLIN(  73)						if ((hasHit1 == false)) {
HXLINE(  73)							::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,x,y,bx4,by2,cx2,cy4,true);
HXDLIN(  73)							if (hasUndo2) {
HXLINE(  73)								v->undoImage = undoImage2;
HXDLIN(  73)								v->undoX = xIter32->start;
HXDLIN(  73)								v->undoY = yIter32->start;
            							}
            						}
            					}
            				}
HXDLIN(  73)				{
HXLINE(  73)					Float bx5 = bx3;
HXDLIN(  73)					Float by3 = cy3;
HXDLIN(  73)					Float cx3 = x;
HXDLIN(  73)					Float cy5 = cy3;
HXDLIN(  73)					bool adjustWinding3 = (((((bx3 * by3) - (bx5 * y)) + ((bx5 * cy5) - (cx3 * by3))) + ((cx3 * y) - (bx3 * cy5))) > 0);
HXDLIN(  73)					if (!(adjustWinding3)) {
HXLINE(  73)						Float bx_ = bx5;
HXDLIN(  73)						Float by_ = by3;
HXLINE( 188)						bx5 = cx3;
HXLINE( 189)						by3 = cy5;
HXLINE( 190)						cx3 = bx_;
HXLINE( 191)						cy5 = by_;
            					}
HXLINE(  73)					{
HXLINE(  73)						bool hasUndo3 = false;
HXDLIN(  73)						Float s03 = ((y * cx3) - (bx3 * cy5));
HXDLIN(  73)						Float sx3 = (cy5 - y);
HXDLIN(  73)						Float sy3 = (bx3 - cx3);
HXDLIN(  73)						Float t03 = ((bx3 * by3) - (y * bx5));
HXDLIN(  73)						Float tx3 = (y - by3);
HXDLIN(  73)						Float ty3 = (bx5 - bx3);
HXDLIN(  73)						Float A3 = ((((-(by3) * cx3) + (y * (-(bx5) + cx3))) + (bx3 * (by3 - cy5))) + (bx5 * cy5));
HXDLIN(  73)						::pixelimage::iter::IntIterStart xIter33;
HXDLIN(  73)						if ((bx3 > bx5)) {
HXLINE(  73)							if ((bx3 > cx3)) {
HXLINE(  73)								int min;
HXDLIN(  73)								if ((bx5 > cx3)) {
HXLINE(  73)									min = ::Math_obj::floor(cx3);
            								}
            								else {
HXLINE(  73)									min = ::Math_obj::floor(bx5);
            								}
HXDLIN(  73)								int ii_min = min;
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(bx3);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								xIter33 = this1;
            							}
            							else {
HXLINE(  73)								int ii_min = ::Math_obj::floor(bx5);
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(cx3);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								xIter33 = this1;
            							}
            						}
            						else {
HXLINE(  73)							if ((bx5 > cx3)) {
HXLINE(  73)								int min;
HXDLIN(  73)								if ((bx3 > cx3)) {
HXLINE(  73)									min = ::Math_obj::floor(cx3);
            								}
            								else {
HXLINE(  73)									min = ::Math_obj::ceil(bx3);
            								}
HXDLIN(  73)								int ii_min = min;
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(bx5);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								xIter33 = this1;
            							}
            							else {
HXLINE(  73)								int ii_min = ::Math_obj::floor(bx3);
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(cx3);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								xIter33 = this1;
            							}
            						}
HXDLIN(  73)						::pixelimage::iter::IntIterStart yIter33;
HXDLIN(  73)						if ((y > by3)) {
HXLINE(  73)							if ((y > cy5)) {
HXLINE(  73)								int min;
HXDLIN(  73)								if ((by3 > cy5)) {
HXLINE(  73)									min = ::Math_obj::floor(cy5);
            								}
            								else {
HXLINE(  73)									min = ::Math_obj::floor(by3);
            								}
HXDLIN(  73)								int ii_min = min;
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(y);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								yIter33 = this1;
            							}
            							else {
HXLINE(  73)								int ii_min = ::Math_obj::floor(by3);
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(cy5);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								yIter33 = this1;
            							}
            						}
            						else {
HXLINE(  73)							if ((by3 > cy5)) {
HXLINE(  73)								int min;
HXDLIN(  73)								if ((y > cy5)) {
HXLINE(  73)									min = ::Math_obj::floor(cy5);
            								}
            								else {
HXLINE(  73)									min = ::Math_obj::ceil(y);
            								}
HXDLIN(  73)								int ii_min = min;
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(by3);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								yIter33 = this1;
            							}
            							else {
HXLINE(  73)								int ii_min = ::Math_obj::floor(y);
HXDLIN(  73)								int ii_max = ::Math_obj::ceil(cy5);
HXDLIN(  73)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  73)								yIter33 = this1;
            							}
            						}
HXDLIN(  73)						::pixelimage::ImageStruct undoImage3 = null();
HXDLIN(  73)						if (hasUndo3) {
HXLINE(  73)							int w = ((xIter33->max - xIter33->start) + 1);
HXDLIN(  73)							int h = ((yIter33->max - yIter33->start) + 1);
HXDLIN(  73)							int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN(  73)							::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  73)							::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN(  73)							::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN(  73)							undoImage3 = this3;
HXDLIN(  73)							{
HXLINE(  73)								int rectLeft = xIter33->start;
HXDLIN(  73)								int rectTop = yIter33->start;
HXDLIN(  73)								int rectRight = xIter33->max;
HXDLIN(  73)								bool forceClear = false;
HXDLIN(  73)								{
HXLINE(  73)									int _g = rectTop;
HXDLIN(  73)									int _g1 = yIter33->max;
HXDLIN(  73)									while((_g < _g1)){
HXLINE(  73)										_g = (_g + 1);
HXDLIN(  73)										int dy = (_g - 1);
HXDLIN(  73)										{
HXLINE(  73)											int _g1 = rectLeft;
HXDLIN(  73)											int _g2 = rectRight;
HXDLIN(  73)											while((_g1 < _g2)){
HXLINE(  73)												_g1 = (_g1 + 1);
HXDLIN(  73)												int dx = (_g1 - 1);
HXDLIN(  73)												::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN(  73)												int index;
HXDLIN(  73)												if (temp->useVirtualPos) {
HXLINE(  73)													index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - temp->virtualY) * ( (Float)(temp->width) )) + dx) - temp->virtualX));
            												}
            												else {
HXLINE(  73)													index = ::Std_obj::_hx_int(( (Float)(((dy * temp->width) + dx)) ));
            												}
HXDLIN(  73)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)												int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  73)												int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  73)												int col;
HXDLIN(  73)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)													col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE(  73)													col = c;
            												}
HXDLIN(  73)												bool _hx_tmp;
HXDLIN(  73)												if (temp->useMask) {
HXLINE(  73)													_hx_tmp = ::hx::IsNotNull( temp->mask );
            												}
            												else {
HXLINE(  73)													_hx_tmp = false;
            												}
HXDLIN(  73)												if (_hx_tmp) {
HXLINE(  73)													::pixelimage::ImageStruct this1 = temp->mask;
HXDLIN(  73)													::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  73)													int index;
HXDLIN(  73)													if (this1->useVirtualPos) {
HXLINE(  73)														index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            													}
            													else {
HXLINE(  73)														index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            													}
HXDLIN(  73)													::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  73)													int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  73)													int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  73)													int v;
HXDLIN(  73)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)														v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE(  73)														v = c;
            													}
HXDLIN(  73)													int this3 = v;
HXDLIN(  73)													int maskPixel = this3;
HXDLIN(  73)													int this4 = col;
HXDLIN(  73)													int this5 = this4;
HXDLIN(  73)													if ((maskPixel == 0)) {
HXLINE(  73)														int this1 = this5;
HXDLIN(  73)														col = this1;
            													}
            													else {
HXLINE(  73)														Float m0;
HXDLIN(  73)														int this1 = ((maskPixel >> 24) & 255);
HXDLIN(  73)														if ((this1 == 0)) {
HXLINE(  73)															m0 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float m1;
HXDLIN(  73)														int this2 = ((maskPixel >> 16) & 255);
HXDLIN(  73)														if ((this2 == 0)) {
HXLINE(  73)															m1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float m2;
HXDLIN(  73)														int this3 = ((maskPixel >> 8) & 255);
HXDLIN(  73)														if ((this3 == 0)) {
HXLINE(  73)															m2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float m3;
HXDLIN(  73)														int this4 = (maskPixel & 255);
HXDLIN(  73)														if ((this4 == 0)) {
HXLINE(  73)															m3 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN(  73)														int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN(  73)														int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN(  73)														int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN(  73)														col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            													}
            												}
HXDLIN(  73)												if ((col != 0)) {
HXLINE(  73)													int x = (dx - rectLeft);
HXDLIN(  73)													int y = (dy - rectTop);
HXDLIN(  73)													int this1 = col;
HXDLIN(  73)													int c = this1;
HXDLIN(  73)													bool _hx_tmp;
HXDLIN(  73)													if ((((c >> 24) & 255) < 254)) {
HXLINE(  73)														_hx_tmp = undoImage3->transparent;
            													}
            													else {
HXLINE(  73)														_hx_tmp = false;
            													}
HXDLIN(  73)													if (_hx_tmp) {
HXLINE(  73)														int location;
HXDLIN(  73)														if (undoImage3->useVirtualPos) {
HXLINE(  73)															location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x) - undoImage3->virtualX));
            														}
            														else {
HXLINE(  73)															location = ::Std_obj::_hx_int(( (Float)(((y * undoImage3->width) + x)) ));
            														}
HXDLIN(  73)														::haxe::io::ArrayBufferViewImpl this1 = undoImage3->image;
HXDLIN(  73)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)														int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  73)														int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  73)														int this3 = this2;
HXDLIN(  73)														int this4;
HXDLIN(  73)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)															this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            														}
            														else {
HXLINE(  73)															this4 = this3;
            														}
HXDLIN(  73)														Float a1;
HXDLIN(  73)														int this5 = ((this4 >> 24) & 255);
HXDLIN(  73)														if ((this5 == 0)) {
HXLINE(  73)															a1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float r1;
HXDLIN(  73)														int this6 = ((this4 >> 16) & 255);
HXDLIN(  73)														if ((this6 == 0)) {
HXLINE(  73)															r1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float g1;
HXDLIN(  73)														int this7 = ((this4 >> 8) & 255);
HXDLIN(  73)														if ((this7 == 0)) {
HXLINE(  73)															g1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float b1;
HXDLIN(  73)														int this8 = (this4 & 255);
HXDLIN(  73)														if ((this8 == 0)) {
HXLINE(  73)															b1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float a2;
HXDLIN(  73)														int this9 = ((col >> 24) & 255);
HXDLIN(  73)														if ((this9 == 0)) {
HXLINE(  73)															a2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float r2;
HXDLIN(  73)														int this10 = ((col >> 16) & 255);
HXDLIN(  73)														if ((this10 == 0)) {
HXLINE(  73)															r2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float g2;
HXDLIN(  73)														int this11 = ((col >> 8) & 255);
HXDLIN(  73)														if ((this11 == 0)) {
HXLINE(  73)															g2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float b2;
HXDLIN(  73)														int this12 = (col & 255);
HXDLIN(  73)														if ((this12 == 0)) {
HXLINE(  73)															b2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  73)														int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  73)														int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  73)														int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  73)														int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  73)														int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  73)														{
HXLINE(  73)															::haxe::io::ArrayBufferViewImpl this13 = undoImage3->image;
HXDLIN(  73)															int value;
HXDLIN(  73)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)																value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            															}
            															else {
HXLINE(  73)																value = blended;
            															}
HXDLIN(  73)															bool _hx_tmp;
HXDLIN(  73)															if ((location >= 0)) {
HXLINE(  73)																_hx_tmp = (location < (this13->byteLength >> 2));
            															}
            															else {
HXLINE(  73)																_hx_tmp = false;
            															}
HXDLIN(  73)															if (_hx_tmp) {
HXLINE(  73)																::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  73)																int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  73)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  73)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  73)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  73)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
            													else {
HXLINE(  73)														::haxe::io::ArrayBufferViewImpl this1 = undoImage3->image;
HXDLIN(  73)														int index;
HXDLIN(  73)														if (undoImage3->useVirtualPos) {
HXLINE(  73)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x) - undoImage3->virtualX));
            														}
            														else {
HXLINE(  73)															index = ::Std_obj::_hx_int(( (Float)(((y * undoImage3->width) + x)) ));
            														}
HXDLIN(  73)														int value;
HXDLIN(  73)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)															value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            														}
            														else {
HXLINE(  73)															value = c;
            														}
HXDLIN(  73)														bool _hx_tmp;
HXDLIN(  73)														if ((index >= 0)) {
HXLINE(  73)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE(  73)															_hx_tmp = false;
            														}
HXDLIN(  73)														if (_hx_tmp) {
HXLINE(  73)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  73)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  73)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  73)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  73)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
            												else {
HXLINE(  73)													if (forceClear) {
HXLINE(  73)														::haxe::io::ArrayBufferViewImpl this1 = undoImage3->image;
HXDLIN(  73)														int x = (dx - rectLeft);
HXDLIN(  73)														int y = (dy - rectTop);
HXDLIN(  73)														int index;
HXDLIN(  73)														if (undoImage3->useVirtualPos) {
HXLINE(  73)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage3->virtualY) * ( (Float)(undoImage3->width) )) + x) - undoImage3->virtualX));
            														}
            														else {
HXLINE(  73)															index = ::Std_obj::_hx_int(( (Float)(((y * undoImage3->width) + x)) ));
            														}
HXDLIN(  73)														bool _hx_tmp;
HXDLIN(  73)														if ((index >= 0)) {
HXLINE(  73)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE(  73)															_hx_tmp = false;
            														}
HXDLIN(  73)														if (_hx_tmp) {
HXLINE(  73)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  73)															_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  73)															_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  73)															_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  73)															_this->b[(pos + 3)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN(  73)						bool foundY3 = false;
HXDLIN(  73)						Float s3 = ((Float)0.);
HXDLIN(  73)						Float t3 = ((Float)0.);
HXDLIN(  73)						Float sxx3 = ((Float)0.);
HXDLIN(  73)						Float txx3 = ((Float)0.);
HXDLIN(  73)						{
HXLINE(  73)							int _g_min3 = xIter33->start;
HXDLIN(  73)							int _g_max3 = xIter33->max;
HXDLIN(  73)							while((_g_min3 < _g_max3)){
HXLINE(  73)								_g_min3 = (_g_min3 + 1);
HXDLIN(  73)								int x = (_g_min3 - 1);
HXLINE( 223)								sxx3 = (sx3 * ( (Float)(x) ));
HXLINE( 224)								txx3 = (tx3 * ( (Float)(x) ));
HXLINE( 225)								foundY3 = false;
HXLINE(  73)								{
HXLINE(  73)									int _g_min = yIter33->start;
HXDLIN(  73)									int _g_max = yIter33->max;
HXDLIN(  73)									while((_g_min < _g_max)){
HXLINE(  73)										_g_min = (_g_min + 1);
HXDLIN(  73)										int y = (_g_min - 1);
HXLINE( 227)										s3 = ((s03 + sxx3) + (sy3 * ( (Float)(y) )));
HXLINE( 228)										t3 = ((t03 + txx3) + (ty3 * ( (Float)(y) )));
HXLINE(  73)										bool _hx_tmp;
HXDLIN(  73)										if (!((s3 <= 0))) {
HXLINE(  73)											_hx_tmp = (t3 <= 0);
            										}
            										else {
HXLINE(  73)											_hx_tmp = true;
            										}
HXDLIN(  73)										if (_hx_tmp) {
HXLINE(  73)											if (foundY3) {
HXLINE(  73)												goto _hx_goto_21;
            											}
            										}
            										else {
HXLINE(  73)											if (((s3 + t3) < A3)) {
HXLINE(  73)												int x1 = ::hx::Mod(x,tileImage1->width);
HXDLIN(  73)												int y1 = ::hx::Mod(y,tileImage1->height);
HXDLIN(  73)												::haxe::io::ArrayBufferViewImpl this1 = tileImage1->image;
HXDLIN(  73)												int index;
HXDLIN(  73)												if (tileImage1->useVirtualPos) {
HXLINE(  73)													index = ::Std_obj::_hx_int(((((( (Float)(y1) ) - tileImage1->virtualY) * ( (Float)(tileImage1->width) )) + x1) - tileImage1->virtualX));
            												}
            												else {
HXLINE(  73)													index = ::Std_obj::_hx_int(( (Float)(((y1 * tileImage1->width) + x1)) ));
            												}
HXDLIN(  73)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)												int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  73)												int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  73)												int color;
HXDLIN(  73)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)													color = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE(  73)													color = c;
            												}
HXDLIN(  73)												{
HXLINE(  73)													int this2 = color;
HXDLIN(  73)													int c1 = this2;
HXDLIN(  73)													bool _hx_tmp;
HXDLIN(  73)													if ((((c1 >> 24) & 255) < 254)) {
HXLINE(  73)														_hx_tmp = temp->transparent;
            													}
            													else {
HXLINE(  73)														_hx_tmp = false;
            													}
HXDLIN(  73)													if (_hx_tmp) {
HXLINE(  73)														int location;
HXDLIN(  73)														if (temp->useVirtualPos) {
HXLINE(  73)															location = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            														}
            														else {
HXLINE(  73)															location = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            														}
HXDLIN(  73)														::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN(  73)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)														int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  73)														int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  73)														int this3 = this2;
HXDLIN(  73)														int this4;
HXDLIN(  73)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)															this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            														}
            														else {
HXLINE(  73)															this4 = this3;
            														}
HXDLIN(  73)														Float a1;
HXDLIN(  73)														int this5 = ((this4 >> 24) & 255);
HXDLIN(  73)														if ((this5 == 0)) {
HXLINE(  73)															a1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float r1;
HXDLIN(  73)														int this6 = ((this4 >> 16) & 255);
HXDLIN(  73)														if ((this6 == 0)) {
HXLINE(  73)															r1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float g1;
HXDLIN(  73)														int this7 = ((this4 >> 8) & 255);
HXDLIN(  73)														if ((this7 == 0)) {
HXLINE(  73)															g1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float b1;
HXDLIN(  73)														int this8 = (this4 & 255);
HXDLIN(  73)														if ((this8 == 0)) {
HXLINE(  73)															b1 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float a2;
HXDLIN(  73)														int this9 = ((color >> 24) & 255);
HXDLIN(  73)														if ((this9 == 0)) {
HXLINE(  73)															a2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float r2;
HXDLIN(  73)														int this10 = ((color >> 16) & 255);
HXDLIN(  73)														if ((this10 == 0)) {
HXLINE(  73)															r2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float g2;
HXDLIN(  73)														int this11 = ((color >> 8) & 255);
HXDLIN(  73)														if ((this11 == 0)) {
HXLINE(  73)															g2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float b2;
HXDLIN(  73)														int this12 = (color & 255);
HXDLIN(  73)														if ((this12 == 0)) {
HXLINE(  73)															b2 = ((Float)0.);
            														}
            														else {
HXLINE(  73)															b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            														}
HXDLIN(  73)														Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  73)														int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  73)														int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  73)														int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  73)														int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  73)														int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  73)														{
HXLINE(  73)															::haxe::io::ArrayBufferViewImpl this13 = temp->image;
HXDLIN(  73)															int value;
HXDLIN(  73)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)																value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            															}
            															else {
HXLINE(  73)																value = blended;
            															}
HXDLIN(  73)															bool _hx_tmp;
HXDLIN(  73)															if ((location >= 0)) {
HXLINE(  73)																_hx_tmp = (location < (this13->byteLength >> 2));
            															}
            															else {
HXLINE(  73)																_hx_tmp = false;
            															}
HXDLIN(  73)															if (_hx_tmp) {
HXLINE(  73)																::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  73)																int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  73)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  73)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  73)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  73)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
            													else {
HXLINE(  73)														::haxe::io::ArrayBufferViewImpl this1 = temp->image;
HXDLIN(  73)														int index;
HXDLIN(  73)														if (temp->useVirtualPos) {
HXLINE(  73)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - temp->virtualY) * ( (Float)(temp->width) )) + x) - temp->virtualX));
            														}
            														else {
HXLINE(  73)															index = ::Std_obj::_hx_int(( (Float)(((y * temp->width) + x)) ));
            														}
HXDLIN(  73)														int value;
HXDLIN(  73)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  73)															value = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            														}
            														else {
HXLINE(  73)															value = c1;
            														}
HXDLIN(  73)														bool _hx_tmp;
HXDLIN(  73)														if ((index >= 0)) {
HXLINE(  73)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE(  73)															_hx_tmp = false;
            														}
HXDLIN(  73)														if (_hx_tmp) {
HXLINE(  73)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  73)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  73)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  73)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  73)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  73)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
HXLINE( 237)												foundY3 = true;
            											}
            											else {
HXLINE(  73)												if (foundY3) {
HXLINE(  73)													goto _hx_goto_21;
            												}
            											}
            										}
            									}
            									_hx_goto_21:;
            								}
            							}
            						}
HXDLIN(  73)						if ((hasHit1 == false)) {
HXLINE(  73)							::pixelimage::algo::HitTri v = ::pixelimage::algo::HitTri_obj::__alloc( HX_CTX ,bx3,y,bx5,by3,cx3,cy5,true);
HXDLIN(  73)							if (hasUndo3) {
HXLINE(  73)								v->undoImage = undoImage3;
HXDLIN(  73)								v->undoX = xIter33->start;
HXDLIN(  73)								v->undoY = yIter33->start;
            							}
            						}
            					}
            				}
HXDLIN(  73)				if ((hasHit1 == true)) {
HXLINE(  73)					::pixelimage::algo::HitQuad v = ::pixelimage::algo::HitQuad_obj::__alloc( HX_CTX ,x,y,bx3,y,bx3,cy3,x,cy3,true);
            				}
            			}
            		}
            	}


HX_DEFINE_DYNAMIC_FUNC1(SquarePattern_obj,buildSquare,(void))


::hx::ObjectPtr< SquarePattern_obj > SquarePattern_obj::__new(::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< int >  __o_strokeColor,::hx::Null< Float >  __o_strokeWidth,::Array< ::String > strokeDashGapArray,::hx::Null< int >  __o_strokeColor0,::hx::Null< int >  __o_strokeColor1,::hx::Null< int >  __o_fillColor0,::hx::Null< int >  __o_fillColor1,::Array< bool > strokePatternFill, ::Dynamic strokePatternWidth, ::Dynamic strokePatternHeight,::hx::Null< bool >  __o_strokePatternAcross,::hx::Null< int >  __o_strokePatternScale,::Array< bool > fillPatternFill,::hx::Null< int >  __o_fillPatternWidth,::hx::Null< int >  __o_fillPatternHeight,::hx::Null< bool >  __o_fillPatternAcross,::hx::Null< int >  __o_fillPatternScale,::hx::Null< Float >  __o_left,::hx::Null< Float >  __o_top,::hx::Null< Float >  __o_diameter) {
	::hx::ObjectPtr< SquarePattern_obj > __this = new SquarePattern_obj();
	__this->__construct(__o_opacity,__o_visibility,__o_strokeColor,__o_strokeWidth,strokeDashGapArray,__o_strokeColor0,__o_strokeColor1,__o_fillColor0,__o_fillColor1,strokePatternFill,strokePatternWidth,strokePatternHeight,__o_strokePatternAcross,__o_strokePatternScale,fillPatternFill,__o_fillPatternWidth,__o_fillPatternHeight,__o_fillPatternAcross,__o_fillPatternScale,__o_left,__o_top,__o_diameter);
	return __this;
}

::hx::ObjectPtr< SquarePattern_obj > SquarePattern_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< int >  __o_strokeColor,::hx::Null< Float >  __o_strokeWidth,::Array< ::String > strokeDashGapArray,::hx::Null< int >  __o_strokeColor0,::hx::Null< int >  __o_strokeColor1,::hx::Null< int >  __o_fillColor0,::hx::Null< int >  __o_fillColor1,::Array< bool > strokePatternFill, ::Dynamic strokePatternWidth, ::Dynamic strokePatternHeight,::hx::Null< bool >  __o_strokePatternAcross,::hx::Null< int >  __o_strokePatternScale,::Array< bool > fillPatternFill,::hx::Null< int >  __o_fillPatternWidth,::hx::Null< int >  __o_fillPatternHeight,::hx::Null< bool >  __o_fillPatternAcross,::hx::Null< int >  __o_fillPatternScale,::hx::Null< Float >  __o_left,::hx::Null< Float >  __o_top,::hx::Null< Float >  __o_diameter) {
	SquarePattern_obj *__this = (SquarePattern_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SquarePattern_obj), true, "pixelimage.triangleGML.patternShape.SquarePattern"));
	*(void **)__this = SquarePattern_obj::_hx_vtable;
	__this->__construct(__o_opacity,__o_visibility,__o_strokeColor,__o_strokeWidth,strokeDashGapArray,__o_strokeColor0,__o_strokeColor1,__o_fillColor0,__o_fillColor1,strokePatternFill,strokePatternWidth,strokePatternHeight,__o_strokePatternAcross,__o_strokePatternScale,fillPatternFill,__o_fillPatternWidth,__o_fillPatternHeight,__o_fillPatternAcross,__o_fillPatternScale,__o_left,__o_top,__o_diameter);
	return __this;
}

SquarePattern_obj::SquarePattern_obj()
{
}

::hx::Val SquarePattern_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { return ::hx::Val( top ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { return ::hx::Val( left ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"render") ) { return ::hx::Val( render_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"diameter") ) { return ::hx::Val( diameter ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"buildSquare") ) { return ::hx::Val( buildSquare_dyn() ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setParameter") ) { return ::hx::Val( setParameter_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val SquarePattern_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"top") ) { top=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"left") ) { left=inValue.Cast< Float >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"diameter") ) { diameter=inValue.Cast< Float >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SquarePattern_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("left",07,08,b0,47));
	outFields->push(HX_("top",95,66,58,00));
	outFields->push(HX_("diameter",cd,6e,68,34));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo SquarePattern_obj_sMemberStorageInfo[] = {
	{::hx::fsFloat,(int)offsetof(SquarePattern_obj,left),HX_("left",07,08,b0,47)},
	{::hx::fsFloat,(int)offsetof(SquarePattern_obj,top),HX_("top",95,66,58,00)},
	{::hx::fsFloat,(int)offsetof(SquarePattern_obj,diameter),HX_("diameter",cd,6e,68,34)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *SquarePattern_obj_sStaticStorageInfo = 0;
#endif

static ::String SquarePattern_obj_sMemberFields[] = {
	HX_("left",07,08,b0,47),
	HX_("top",95,66,58,00),
	HX_("diameter",cd,6e,68,34),
	HX_("setParameter",a7,f5,ff,6c),
	HX_("render",56,6b,29,05),
	HX_("buildSquare",6b,e6,62,a9),
	::String(null()) };

::hx::Class SquarePattern_obj::__mClass;

void SquarePattern_obj::__register()
{
	SquarePattern_obj _hx_dummy;
	SquarePattern_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pixelimage.triangleGML.patternShape.SquarePattern",9f,d5,26,68);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SquarePattern_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SquarePattern_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SquarePattern_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SquarePattern_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pixelimage
} // end namespace triangleGML
} // end namespace patternShape
