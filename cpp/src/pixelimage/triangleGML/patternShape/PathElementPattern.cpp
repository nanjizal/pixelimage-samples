// Generated by Haxe 4.3.0-rc.1+
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_io_ArrayBufferViewImpl
#include <haxe/io/ArrayBufferViewImpl.h>
#endif
#ifndef INCLUDED_haxe_io_Bytes
#include <haxe/io/Bytes.h>
#endif
#ifndef INCLUDED_justPath_ILinePathContext
#include <justPath/ILinePathContext.h>
#endif
#ifndef INCLUDED_justPath_SvgLinePath
#include <justPath/SvgLinePath.h>
#endif
#ifndef INCLUDED_pixelimage_ImageStruct
#include <pixelimage/ImageStruct.h>
#endif
#ifndef INCLUDED_pixelimage__Endian_Endian_Fields_
#include <pixelimage/_Endian/Endian_Fields_.h>
#endif
#ifndef INCLUDED_pixelimage_algo_HitQuad
#include <pixelimage/algo/HitQuad.h>
#endif
#ifndef INCLUDED_pixelimage_algo_HitTri
#include <pixelimage/algo/HitTri.h>
#endif
#ifndef INCLUDED_pixelimage_algo_IhitObj
#include <pixelimage/algo/IhitObj.h>
#endif
#ifndef INCLUDED_pixelimage_iter_IntIterStart
#include <pixelimage/iter/IntIterStart.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_BasicShape
#include <pixelimage/triangleGML/coreShape/BasicShape.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_GroupShape
#include <pixelimage/triangleGML/coreShape/GroupShape.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_PatternShape
#include <pixelimage/triangleGML/coreShape/PatternShape.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_coreShape_ShapeInterface
#include <pixelimage/triangleGML/coreShape/ShapeInterface.h>
#endif
#ifndef INCLUDED_pixelimage_triangleGML_patternShape_PathElementPattern
#include <pixelimage/triangleGML/patternShape/PathElementPattern.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_fe0db7e25242d665_10_new,"pixelimage.triangleGML.patternShape.PathElementPattern","new",0x283538ff,"pixelimage.triangleGML.patternShape.PathElementPattern.new","pixelimage/triangleGML/patternShape/PathElementPattern.hx",10,0x9cbf1fb2)
HX_LOCAL_STACK_FRAME(_hx_pos_fe0db7e25242d665_63_setParameter,"pixelimage.triangleGML.patternShape.PathElementPattern","setParameter",0x6ff20128,"pixelimage.triangleGML.patternShape.PathElementPattern.setParameter","pixelimage/triangleGML/patternShape/PathElementPattern.hx",63,0x9cbf1fb2)
HX_LOCAL_STACK_FRAME(_hx_pos_fe0db7e25242d665_78_render,"pixelimage.triangleGML.patternShape.PathElementPattern","render",0x6731f017,"pixelimage.triangleGML.patternShape.PathElementPattern.render","pixelimage/triangleGML/patternShape/PathElementPattern.hx",78,0x9cbf1fb2)
HX_LOCAL_STACK_FRAME(_hx_pos_fe0db7e25242d665_95_lineSegmentTo,"pixelimage.triangleGML.patternShape.PathElementPattern","lineSegmentTo",0xe83fdad9,"pixelimage.triangleGML.patternShape.PathElementPattern.lineSegmentTo","pixelimage/triangleGML/patternShape/PathElementPattern.hx",95,0x9cbf1fb2)
HX_LOCAL_STACK_FRAME(_hx_pos_fe0db7e25242d665_115_lineTo,"pixelimage.triangleGML.patternShape.PathElementPattern","lineTo",0x4ea8cb50,"pixelimage.triangleGML.patternShape.PathElementPattern.lineTo","pixelimage/triangleGML/patternShape/PathElementPattern.hx",115,0x9cbf1fb2)
HX_LOCAL_STACK_FRAME(_hx_pos_fe0db7e25242d665_131_moveTo,"pixelimage.triangleGML.patternShape.PathElementPattern","moveTo",0x2eb557ad,"pixelimage.triangleGML.patternShape.PathElementPattern.moveTo","pixelimage/triangleGML/patternShape/PathElementPattern.hx",131,0x9cbf1fb2)
namespace pixelimage{
namespace triangleGML{
namespace patternShape{

void PathElementPattern_obj::__construct(::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< int >  __o_strokeColor,::hx::Null< Float >  __o_strokeWidth,::Array< ::String > strokeDashGapArray,::hx::Null< int >  __o_strokeColor0,::hx::Null< int >  __o_strokeColor1,::hx::Null< int >  __o_fillColor0,::hx::Null< int >  __o_fillColor1,::Array< bool > strokePatternFill, ::Dynamic strokePatternWidth, ::Dynamic strokePatternHeight,::hx::Null< bool >  __o_strokePatternAcross,::hx::Null< int >  __o_strokePatternScale,::Array< bool > fillPatternFill,::hx::Null< int >  __o_fillPatternWidth,::hx::Null< int >  __o_fillPatternHeight,::hx::Null< bool >  __o_fillPatternAcross,::hx::Null< int >  __o_fillPatternScale,::String __o_pathData,::hx::Null< Float >  __o_translateX,::hx::Null< Float >  __o_translateY,::hx::Null< Float >  __o_scaleX,::hx::Null< Float >  __o_scaleY){
            		Float opacity = __o_opacity.Default(((Float)1.));
            		bool visibility = __o_visibility.Default(true);
            		int strokeColor = __o_strokeColor.Default(0);
            		Float strokeWidth = __o_strokeWidth.Default(((Float)1.));
            		int strokeColor0 = __o_strokeColor0.Default(0);
            		int strokeColor1 = __o_strokeColor1.Default(0);
            		int fillColor0 = __o_fillColor0.Default(0);
            		int fillColor1 = __o_fillColor1.Default(0);
            		bool strokePatternAcross = __o_strokePatternAcross.Default(true);
            		int strokePatternScale = __o_strokePatternScale.Default(1);
            		int fillPatternWidth = __o_fillPatternWidth.Default(16);
            		int fillPatternHeight = __o_fillPatternHeight.Default(16);
            		bool fillPatternAcross = __o_fillPatternAcross.Default(true);
            		int fillPatternScale = __o_fillPatternScale.Default(1);
            		::String pathData = __o_pathData;
            		if (::hx::IsNull(__o_pathData)) pathData = HX_("",00,00,00,00);
            		Float translateX = __o_translateX.Default(((Float)0.));
            		Float translateY = __o_translateY.Default(((Float)0.));
            		Float scaleX = __o_scaleX.Default(((Float)1.));
            		Float scaleY = __o_scaleY.Default(((Float)1.));
            	HX_STACKFRAME(&_hx_pos_fe0db7e25242d665_10_new)
HXLINE(  20)		this->toggleDraw = true;
HXLINE(  17)		this->y0 = ((Float)0.);
HXLINE(  16)		this->x0 = ((Float)0.);
HXLINE(  52)		super::__construct(opacity,visibility,strokeColor,strokeWidth,strokeDashGapArray,strokeColor0,strokeColor1,fillColor0,fillColor1,strokePatternFill,strokePatternWidth,strokePatternHeight,strokePatternAcross,strokePatternScale,fillPatternFill,fillPatternWidth,fillPatternHeight,fillPatternAcross,fillPatternScale);
HXLINE(  56)		this->pathData = pathData;
HXLINE(  57)		this->translateX = translateX;
HXLINE(  58)		this->translateY = translateY;
HXLINE(  59)		this->scaleX = scaleX;
HXLINE(  60)		this->scaleY = scaleY;
            	}

Dynamic PathElementPattern_obj::__CreateEmpty() { return new PathElementPattern_obj; }

void *PathElementPattern_obj::_hx_vtable = 0;

Dynamic PathElementPattern_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< PathElementPattern_obj > _hx_result = new PathElementPattern_obj();
	_hx_result->__construct(inArgs[0],inArgs[1],inArgs[2],inArgs[3],inArgs[4],inArgs[5],inArgs[6],inArgs[7],inArgs[8],inArgs[9],inArgs[10],inArgs[11],inArgs[12],inArgs[13],inArgs[14],inArgs[15],inArgs[16],inArgs[17],inArgs[18],inArgs[19],inArgs[20],inArgs[21],inArgs[22],inArgs[23]);
	return _hx_result;
}

bool PathElementPattern_obj::_hx_isInstanceOf(int inClassId) {
	if (inClassId<=(int)0x2091632c) {
		if (inClassId<=(int)0x0ae8d273) {
			return inClassId==(int)0x00000001 || inClassId==(int)0x0ae8d273;
		} else {
			return inClassId==(int)0x2091632c;
		}
	} else {
		return inClassId==(int)0x24e92cfb || inClassId==(int)0x6e596dee;
	}
}

static ::justPath::ILinePathContext_obj _hx_pixelimage_triangleGML_patternShape_PathElementPattern__hx_justPath_ILinePathContext= {
	( void (::hx::Object::*)(Float,Float))&::pixelimage::triangleGML::patternShape::PathElementPattern_obj::moveTo,
	( void (::hx::Object::*)(Float,Float))&::pixelimage::triangleGML::patternShape::PathElementPattern_obj::lineTo,
	( void (::hx::Object::*)(Float,Float))&::pixelimage::triangleGML::patternShape::PathElementPattern_obj::lineSegmentTo,
};

void *PathElementPattern_obj::_hx_getInterface(int inHash) {
	switch(inHash) {
		case (int)0x4fa789de: return &_hx_pixelimage_triangleGML_patternShape_PathElementPattern__hx_justPath_ILinePathContext;
	}
	return super::_hx_getInterface(inHash);
}

void PathElementPattern_obj::setParameter(::String name,::String value){
            	HX_STACKFRAME(&_hx_pos_fe0db7e25242d665_63_setParameter)
HXDLIN(  63)		::String _hx_switch_0 = name;
            		if (  (_hx_switch_0==HX_("pathData",6f,9e,02,38)) ){
HXLINE(  65)			this->pathData = value;
HXDLIN(  65)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("scaleX",8e,ea,25,3c)) ){
HXLINE(  71)			this->scaleX = ::Std_obj::parseFloat(value);
HXDLIN(  71)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("scaleY",8f,ea,25,3c)) ){
HXLINE(  73)			this->scaleY = ::Std_obj::parseFloat(value);
HXDLIN(  73)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("translateX",4a,8d,5c,06)) ){
HXLINE(  67)			this->translateX = ::Std_obj::parseFloat(value);
HXDLIN(  67)			goto _hx_goto_1;
            		}
            		if (  (_hx_switch_0==HX_("translateY",4b,8d,5c,06)) ){
HXLINE(  69)			this->translateY = ::Std_obj::parseFloat(value);
HXDLIN(  69)			goto _hx_goto_1;
            		}
            		/* default */{
HXLINE(  75)			this->super::setParameter(name,value);
            		}
            		_hx_goto_1:;
            	}


::pixelimage::ImageStruct PathElementPattern_obj::render(::pixelimage::ImageStruct pixelShape){
            	HX_GC_STACKFRAME(&_hx_pos_fe0db7e25242d665_78_render)
HXLINE(  80)		int w = ::Math_obj::ceil(( (Float)(pixelShape->width) ));
HXDLIN(  80)		int h = ::Math_obj::ceil(( (Float)(pixelShape->height) ));
HXDLIN(  80)		int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN(  80)		::haxe::io::ArrayBufferViewImpl this1 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  80)		::haxe::io::ArrayBufferViewImpl this2 = this1;
HXDLIN(  80)		::pixelimage::ImageStruct this3 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this2);
HXDLIN(  80)		::pixelimage::ImageStruct this4 = this3;
HXDLIN(  80)		this->temp = this4;
HXLINE(  81)		this->temp->transparent = true;
HXLINE(  83)		this->buildPatternTemplates();
HXLINE(  84)		::justPath::SvgLinePath sp = ::justPath::SvgLinePath_obj::__alloc( HX_CTX ,::hx::ObjectPtr<OBJ_>(this));
HXLINE(  85)		sp->parse(this->pathData);
HXLINE(  88)		{
HXLINE(  88)			::pixelimage::ImageStruct pixelImage = this->temp;
HXDLIN(  88)			int x = ::Std_obj::_hx_int(this->offX);
HXDLIN(  88)			int y = ::Std_obj::_hx_int(this->offY);
HXDLIN(  88)			bool forceClear = false;
HXDLIN(  88)			{
HXLINE(  88)				int _g = 0;
HXDLIN(  88)				int _g1 = pixelImage->height;
HXDLIN(  88)				while((_g < _g1)){
HXLINE(  88)					_g = (_g + 1);
HXDLIN(  88)					int dy = (_g - 1);
HXDLIN(  88)					{
HXLINE(  88)						int _g1 = 0;
HXDLIN(  88)						int _g2 = pixelImage->width;
HXDLIN(  88)						while((_g1 < _g2)){
HXLINE(  88)							_g1 = (_g1 + 1);
HXDLIN(  88)							int dx = (_g1 - 1);
HXDLIN(  88)							::haxe::io::ArrayBufferViewImpl this1 = pixelImage->image;
HXDLIN(  88)							int index;
HXDLIN(  88)							if (pixelImage->useVirtualPos) {
HXLINE(  88)								index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - pixelImage->virtualY) * ( (Float)(pixelImage->width) )) + dx) - pixelImage->virtualX));
            							}
            							else {
HXLINE(  88)								index = ::Std_obj::_hx_int(( (Float)(((dy * pixelImage->width) + dx)) ));
            							}
HXDLIN(  88)							::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  88)							int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  88)							int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  88)							int col;
HXDLIN(  88)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  88)								col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            							}
            							else {
HXLINE(  88)								col = c;
            							}
HXDLIN(  88)							bool _hx_tmp;
HXDLIN(  88)							if (pixelImage->useMask) {
HXLINE(  88)								_hx_tmp = ::hx::IsNotNull( pixelImage->mask );
            							}
            							else {
HXLINE(  88)								_hx_tmp = false;
            							}
HXDLIN(  88)							if (_hx_tmp) {
HXLINE(  88)								::pixelimage::ImageStruct this1 = pixelImage->mask;
HXDLIN(  88)								::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  88)								int index;
HXDLIN(  88)								if (this1->useVirtualPos) {
HXLINE(  88)									index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            								}
            								else {
HXLINE(  88)									index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            								}
HXDLIN(  88)								::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  88)								int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  88)								int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  88)								int v;
HXDLIN(  88)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  88)									v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            								}
            								else {
HXLINE(  88)									v = c;
            								}
HXDLIN(  88)								int this3 = v;
HXDLIN(  88)								int maskPixel = this3;
HXDLIN(  88)								int this4 = col;
HXDLIN(  88)								int this5 = this4;
HXDLIN(  88)								if ((maskPixel == 0)) {
HXLINE(  88)									int this1 = this5;
HXDLIN(  88)									col = this1;
            								}
            								else {
HXLINE(  88)									Float m0;
HXDLIN(  88)									int this1 = ((maskPixel >> 24) & 255);
HXDLIN(  88)									if ((this1 == 0)) {
HXLINE(  88)										m0 = ((Float)0.);
            									}
            									else {
HXLINE(  88)										m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            									}
HXDLIN(  88)									Float m1;
HXDLIN(  88)									int this2 = ((maskPixel >> 16) & 255);
HXDLIN(  88)									if ((this2 == 0)) {
HXLINE(  88)										m1 = ((Float)0.);
            									}
            									else {
HXLINE(  88)										m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            									}
HXDLIN(  88)									Float m2;
HXDLIN(  88)									int this3 = ((maskPixel >> 8) & 255);
HXDLIN(  88)									if ((this3 == 0)) {
HXLINE(  88)										m2 = ((Float)0.);
            									}
            									else {
HXLINE(  88)										m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            									}
HXDLIN(  88)									Float m3;
HXDLIN(  88)									int this4 = (maskPixel & 255);
HXDLIN(  88)									if ((this4 == 0)) {
HXLINE(  88)										m3 = ((Float)0.);
            									}
            									else {
HXLINE(  88)										m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            									}
HXDLIN(  88)									int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this5 >> 24) & 255)) )));
HXDLIN(  88)									int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this5 >> 16) & 255)) )));
HXDLIN(  88)									int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this5 >> 8) & 255)) )));
HXDLIN(  88)									int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this5 & 255)) )));
HXDLIN(  88)									col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            								}
            							}
HXDLIN(  88)							if ((col != 0)) {
HXLINE(  88)								int x1 = (x + dx);
HXDLIN(  88)								int y1 = (y + dy);
HXDLIN(  88)								int this1 = col;
HXDLIN(  88)								int c = this1;
HXDLIN(  88)								bool _hx_tmp;
HXDLIN(  88)								if ((((c >> 24) & 255) < 254)) {
HXLINE(  88)									_hx_tmp = pixelShape->transparent;
            								}
            								else {
HXLINE(  88)									_hx_tmp = false;
            								}
HXDLIN(  88)								if (_hx_tmp) {
HXLINE(  88)									int location;
HXDLIN(  88)									if (pixelShape->useVirtualPos) {
HXLINE(  88)										location = ::Std_obj::_hx_int(((((( (Float)(y1) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x1) - pixelShape->virtualX));
            									}
            									else {
HXLINE(  88)										location = ::Std_obj::_hx_int(( (Float)(((y1 * pixelShape->width) + x1)) ));
            									}
HXDLIN(  88)									::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  88)									::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  88)									int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  88)									int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  88)									int this3 = this2;
HXDLIN(  88)									int this4;
HXDLIN(  88)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  88)										this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            									}
            									else {
HXLINE(  88)										this4 = this3;
            									}
HXDLIN(  88)									Float a1;
HXDLIN(  88)									int this5 = ((this4 >> 24) & 255);
HXDLIN(  88)									if ((this5 == 0)) {
HXLINE(  88)										a1 = ((Float)0.);
            									}
            									else {
HXLINE(  88)										a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            									}
HXDLIN(  88)									Float r1;
HXDLIN(  88)									int this6 = ((this4 >> 16) & 255);
HXDLIN(  88)									if ((this6 == 0)) {
HXLINE(  88)										r1 = ((Float)0.);
            									}
            									else {
HXLINE(  88)										r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            									}
HXDLIN(  88)									Float g1;
HXDLIN(  88)									int this7 = ((this4 >> 8) & 255);
HXDLIN(  88)									if ((this7 == 0)) {
HXLINE(  88)										g1 = ((Float)0.);
            									}
            									else {
HXLINE(  88)										g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            									}
HXDLIN(  88)									Float b1;
HXDLIN(  88)									int this8 = (this4 & 255);
HXDLIN(  88)									if ((this8 == 0)) {
HXLINE(  88)										b1 = ((Float)0.);
            									}
            									else {
HXLINE(  88)										b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            									}
HXDLIN(  88)									Float a2;
HXDLIN(  88)									int this9 = ((col >> 24) & 255);
HXDLIN(  88)									if ((this9 == 0)) {
HXLINE(  88)										a2 = ((Float)0.);
            									}
            									else {
HXLINE(  88)										a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            									}
HXDLIN(  88)									Float r2;
HXDLIN(  88)									int this10 = ((col >> 16) & 255);
HXDLIN(  88)									if ((this10 == 0)) {
HXLINE(  88)										r2 = ((Float)0.);
            									}
            									else {
HXLINE(  88)										r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            									}
HXDLIN(  88)									Float g2;
HXDLIN(  88)									int this11 = ((col >> 8) & 255);
HXDLIN(  88)									if ((this11 == 0)) {
HXLINE(  88)										g2 = ((Float)0.);
            									}
            									else {
HXLINE(  88)										g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            									}
HXDLIN(  88)									Float b2;
HXDLIN(  88)									int this12 = (col & 255);
HXDLIN(  88)									if ((this12 == 0)) {
HXLINE(  88)										b2 = ((Float)0.);
            									}
            									else {
HXLINE(  88)										b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            									}
HXDLIN(  88)									Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  88)									int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  88)									int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  88)									int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  88)									int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  88)									int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  88)									{
HXLINE(  88)										::haxe::io::ArrayBufferViewImpl this13 = pixelShape->image;
HXDLIN(  88)										int value;
HXDLIN(  88)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  88)											value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            										}
            										else {
HXLINE(  88)											value = blended;
            										}
HXDLIN(  88)										bool _hx_tmp;
HXDLIN(  88)										if ((location >= 0)) {
HXLINE(  88)											_hx_tmp = (location < (this13->byteLength >> 2));
            										}
            										else {
HXLINE(  88)											_hx_tmp = false;
            										}
HXDLIN(  88)										if (_hx_tmp) {
HXLINE(  88)											::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  88)											int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  88)											_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  88)											_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  88)											_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  88)											_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            										}
            									}
            								}
            								else {
HXLINE(  88)									::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  88)									int index;
HXDLIN(  88)									if (pixelShape->useVirtualPos) {
HXLINE(  88)										index = ::Std_obj::_hx_int(((((( (Float)(y1) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x1) - pixelShape->virtualX));
            									}
            									else {
HXLINE(  88)										index = ::Std_obj::_hx_int(( (Float)(((y1 * pixelShape->width) + x1)) ));
            									}
HXDLIN(  88)									int value;
HXDLIN(  88)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  88)										value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXLINE(  88)										value = c;
            									}
HXDLIN(  88)									bool _hx_tmp;
HXDLIN(  88)									if ((index >= 0)) {
HXLINE(  88)										_hx_tmp = (index < (this1->byteLength >> 2));
            									}
            									else {
HXLINE(  88)										_hx_tmp = false;
            									}
HXDLIN(  88)									if (_hx_tmp) {
HXLINE(  88)										::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  88)										int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  88)										_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  88)										_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  88)										_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  88)										_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            									}
            								}
            							}
            							else {
HXLINE(  88)								if (forceClear) {
HXLINE(  88)									::haxe::io::ArrayBufferViewImpl this1 = pixelShape->image;
HXDLIN(  88)									int x1 = (x + dx);
HXDLIN(  88)									int y1 = (y + dy);
HXDLIN(  88)									int index;
HXDLIN(  88)									if (pixelShape->useVirtualPos) {
HXLINE(  88)										index = ::Std_obj::_hx_int(((((( (Float)(y1) ) - pixelShape->virtualY) * ( (Float)(pixelShape->width) )) + x1) - pixelShape->virtualX));
            									}
            									else {
HXLINE(  88)										index = ::Std_obj::_hx_int(( (Float)(((y1 * pixelShape->width) + x1)) ));
            									}
HXDLIN(  88)									bool _hx_tmp;
HXDLIN(  88)									if ((index >= 0)) {
HXLINE(  88)										_hx_tmp = (index < (this1->byteLength >> 2));
            									}
            									else {
HXLINE(  88)										_hx_tmp = false;
            									}
HXDLIN(  88)									if (_hx_tmp) {
HXLINE(  88)										::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  88)										int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  88)										_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  88)										_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  88)										_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  88)										_this->b[(pos + 3)] = ( (unsigned char)(0) );
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXLINE(  89)		this->temp = null();
HXLINE(  92)		return this->super::render(pixelShape);
            	}


void PathElementPattern_obj::lineSegmentTo(Float x2,Float y2){
            	HX_GC_STACKFRAME(&_hx_pos_fe0db7e25242d665_95_lineSegmentTo)
HXLINE(  96)		if (this->toggleDraw) {
HXLINE(  97)			this->oldInfo = this->info;
HXLINE(  98)			::pixelimage::ImageStruct this1 = this->temp;
HXDLIN(  98)			Float px = ((this->x0 * this->scaleX) + this->translateX);
HXDLIN(  98)			Float py = ((this->y0 * this->scaleY) + this->translateY);
HXDLIN(  98)			::pixelimage::ImageStruct tileImage = this->tileImageStroke;
HXDLIN(  98)			Float o = (((y2 * this->scaleY) + this->translateY) - py);
HXDLIN(  98)			Float a = (((x2 * this->scaleX) + this->translateX) - px);
HXDLIN(  98)			Float h = ::Math_obj::pow(((o * o) + (a * a)),((Float)0.5));
HXDLIN(  98)			Float theta = ::Math_obj::atan2(o,a);
HXDLIN(  98)			 ::Dynamic debugCorners = false;
HXDLIN(  98)			if (::hx::IsNull( debugCorners )) {
HXLINE( 893)				debugCorners = false;
            			}
HXLINE(  98)			Float sin = ::Math_obj::sin(theta);
HXDLIN(  98)			Float cos = ::Math_obj::cos(theta);
HXDLIN(  98)			Float radius = (this->strokeWidth / ( (Float)(2) ));
HXDLIN(  98)			Float dx = ((Float)0.1);
HXDLIN(  98)			Float dy = radius;
HXDLIN(  98)			Float cx = h;
HXDLIN(  98)			Float cy = radius;
HXDLIN(  98)			Float bx = h;
HXDLIN(  98)			Float by = -(radius);
HXDLIN(  98)			Float ax = ((Float)0.1);
HXDLIN(  98)			Float ay = -(radius);
HXDLIN(  98)			Float temp = ((Float)0.);
HXLINE( 380)			temp = (px + ((ax * cos) - (ay * sin)));
HXLINE( 381)			ay = (py + ((ay * cos) + (ax * sin)));
HXLINE( 382)			ax = temp;
HXLINE( 384)			temp = (px + ((bx * cos) - (by * sin)));
HXLINE( 385)			by = (py + ((by * cos) + (bx * sin)));
HXLINE( 386)			bx = temp;
HXLINE( 388)			temp = (px + ((cx * cos) - (cy * sin)));
HXLINE( 389)			cy = (py + ((cy * cos) + (cx * sin)));
HXLINE( 390)			cx = temp;
HXLINE( 392)			temp = (px + ((dx * cos) - (dy * sin)));
HXLINE( 393)			dy = (py + ((dy * cos) + (dx * sin)));
HXLINE( 394)			dx = temp;
HXLINE(  98)			if (( (bool)(debugCorners) )) {
HXLINE(  98)				{
HXLINE(  98)					Float x = (ax - ((Float)6.));
HXDLIN(  98)					Float y = (ay - ((Float)6.));
HXDLIN(  98)					int p = ::Std_obj::_hx_int(x);
HXDLIN(  98)					int xx = p;
HXDLIN(  98)					int q = ::Std_obj::_hx_int(y);
HXDLIN(  98)					int maxX = ::Std_obj::_hx_int((x + 12));
HXDLIN(  98)					int maxY = ::Std_obj::_hx_int((y + 12));
HXDLIN(  98)					while(true){
HXLINE(  98)						{
HXLINE(  98)							p = (p + 1);
HXDLIN(  98)							int x = (p - 1);
HXDLIN(  98)							int this2 = -65536;
HXDLIN(  98)							int c = this2;
HXDLIN(  98)							bool _hx_tmp;
HXDLIN(  98)							if ((((c >> 24) & 255) < 254)) {
HXLINE(  98)								_hx_tmp = this1->transparent;
            							}
            							else {
HXLINE(  98)								_hx_tmp = false;
            							}
HXDLIN(  98)							if (_hx_tmp) {
HXLINE(  98)								int location;
HXDLIN(  98)								if (this1->useVirtualPos) {
HXLINE(  98)									location = ::Std_obj::_hx_int(((((( (Float)(q) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            								}
            								else {
HXLINE(  98)									location = ::Std_obj::_hx_int(( (Float)(((q * this1->width) + x)) ));
            								}
HXDLIN(  98)								::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  98)								::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  98)								int pos = ((location << 2) + this2->byteOffset);
HXDLIN(  98)								int this3 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  98)								int this4 = this3;
HXDLIN(  98)								int this5;
HXDLIN(  98)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  98)									this5 = ((((((this4 >> 24) & 255) << 24) | ((this4 & 255) << 16)) | (((this4 >> 8) & 255) << 8)) | ((this4 >> 16) & 255));
            								}
            								else {
HXLINE(  98)									this5 = this4;
            								}
HXDLIN(  98)								Float a1;
HXDLIN(  98)								int this6 = ((this5 >> 24) & 255);
HXDLIN(  98)								if ((this6 == 0)) {
HXLINE(  98)									a1 = ((Float)0.);
            								}
            								else {
HXLINE(  98)									a1 = (( (Float)(this6) ) / ( (Float)(255) ));
            								}
HXDLIN(  98)								Float r1;
HXDLIN(  98)								int this7 = ((this5 >> 16) & 255);
HXDLIN(  98)								if ((this7 == 0)) {
HXLINE(  98)									r1 = ((Float)0.);
            								}
            								else {
HXLINE(  98)									r1 = (( (Float)(this7) ) / ( (Float)(255) ));
            								}
HXDLIN(  98)								Float g1;
HXDLIN(  98)								int this8 = ((this5 >> 8) & 255);
HXDLIN(  98)								if ((this8 == 0)) {
HXLINE(  98)									g1 = ((Float)0.);
            								}
            								else {
HXLINE(  98)									g1 = (( (Float)(this8) ) / ( (Float)(255) ));
            								}
HXDLIN(  98)								Float b1;
HXDLIN(  98)								int this9 = (this5 & 255);
HXDLIN(  98)								if ((this9 == 0)) {
HXLINE(  98)									b1 = ((Float)0.);
            								}
            								else {
HXLINE(  98)									b1 = (( (Float)(this9) ) / ( (Float)(255) ));
            								}
HXDLIN(  98)								Float a2;
HXDLIN(  98)								int this10 = ((-65536 >> 24) & 255);
HXDLIN(  98)								if ((this10 == 0)) {
HXLINE(  98)									a2 = ((Float)0.);
            								}
            								else {
HXLINE(  98)									a2 = (( (Float)(this10) ) / ( (Float)(255) ));
            								}
HXDLIN(  98)								Float r2;
HXDLIN(  98)								int this11 = ((-65536 >> 16) & 255);
HXDLIN(  98)								if ((this11 == 0)) {
HXLINE(  98)									r2 = ((Float)0.);
            								}
            								else {
HXLINE(  98)									r2 = (( (Float)(this11) ) / ( (Float)(255) ));
            								}
HXDLIN(  98)								Float g2;
HXDLIN(  98)								int this12 = ((-65536 >> 8) & 255);
HXDLIN(  98)								if ((this12 == 0)) {
HXLINE(  98)									g2 = ((Float)0.);
            								}
            								else {
HXLINE(  98)									g2 = (( (Float)(this12) ) / ( (Float)(255) ));
            								}
HXDLIN(  98)								Float b2;
HXDLIN(  98)								int this13 = (-65536 & 255);
HXDLIN(  98)								if ((this13 == 0)) {
HXLINE(  98)									b2 = ((Float)0.);
            								}
            								else {
HXLINE(  98)									b2 = (( (Float)(this13) ) / ( (Float)(255) ));
            								}
HXDLIN(  98)								Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  98)								int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  98)								int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  98)								int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  98)								int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  98)								int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  98)								{
HXLINE(  98)									::haxe::io::ArrayBufferViewImpl this14 = this1->image;
HXDLIN(  98)									int value;
HXDLIN(  98)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  98)										value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            									}
            									else {
HXLINE(  98)										value = blended;
            									}
HXDLIN(  98)									bool _hx_tmp;
HXDLIN(  98)									if ((location >= 0)) {
HXLINE(  98)										_hx_tmp = (location < (this14->byteLength >> 2));
            									}
            									else {
HXLINE(  98)										_hx_tmp = false;
            									}
HXDLIN(  98)									if (_hx_tmp) {
HXLINE(  98)										::haxe::io::Bytes _this = this14->bytes;
HXDLIN(  98)										int pos = ((location << 2) + this14->byteOffset);
HXDLIN(  98)										_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  98)										_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  98)										_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  98)										_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            									}
            								}
            							}
            							else {
HXLINE(  98)								::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  98)								int index;
HXDLIN(  98)								if (this1->useVirtualPos) {
HXLINE(  98)									index = ::Std_obj::_hx_int(((((( (Float)(q) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            								}
            								else {
HXLINE(  98)									index = ::Std_obj::_hx_int(( (Float)(((q * this1->width) + x)) ));
            								}
HXDLIN(  98)								int value;
HXDLIN(  98)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  98)									value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            								}
            								else {
HXLINE(  98)									value = c;
            								}
HXDLIN(  98)								bool _hx_tmp;
HXDLIN(  98)								if ((index >= 0)) {
HXLINE(  98)									_hx_tmp = (index < (this2->byteLength >> 2));
            								}
            								else {
HXLINE(  98)									_hx_tmp = false;
            								}
HXDLIN(  98)								if (_hx_tmp) {
HXLINE(  98)									::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  98)									int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  98)									_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  98)									_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  98)									_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  98)									_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            								}
            							}
            						}
HXDLIN(  98)						if ((p > maxX)) {
HXLINE( 247)							p = xx;
HXLINE(  98)							q = (q + 1);
            						}
HXDLIN(  98)						if ((q > maxY)) {
HXLINE(  98)							goto _hx_goto_6;
            						}
            					}
            					_hx_goto_6:;
            				}
HXDLIN(  98)				{
HXLINE(  98)					Float x1 = (bx - ((Float)6.));
HXDLIN(  98)					Float y1 = (by - ((Float)6.));
HXDLIN(  98)					int p1 = ::Std_obj::_hx_int(x1);
HXDLIN(  98)					int xx1 = p1;
HXDLIN(  98)					int q1 = ::Std_obj::_hx_int(y1);
HXDLIN(  98)					int maxX1 = ::Std_obj::_hx_int((x1 + 12));
HXDLIN(  98)					int maxY1 = ::Std_obj::_hx_int((y1 + 12));
HXDLIN(  98)					while(true){
HXLINE(  98)						{
HXLINE(  98)							p1 = (p1 + 1);
HXDLIN(  98)							int x = (p1 - 1);
HXDLIN(  98)							int this2 = -16711936;
HXDLIN(  98)							int c = this2;
HXDLIN(  98)							bool _hx_tmp;
HXDLIN(  98)							if ((((c >> 24) & 255) < 254)) {
HXLINE(  98)								_hx_tmp = this1->transparent;
            							}
            							else {
HXLINE(  98)								_hx_tmp = false;
            							}
HXDLIN(  98)							if (_hx_tmp) {
HXLINE(  98)								int location;
HXDLIN(  98)								if (this1->useVirtualPos) {
HXLINE(  98)									location = ::Std_obj::_hx_int(((((( (Float)(q1) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            								}
            								else {
HXLINE(  98)									location = ::Std_obj::_hx_int(( (Float)(((q1 * this1->width) + x)) ));
            								}
HXDLIN(  98)								::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  98)								::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  98)								int pos = ((location << 2) + this2->byteOffset);
HXDLIN(  98)								int this3 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  98)								int this4 = this3;
HXDLIN(  98)								int this5;
HXDLIN(  98)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  98)									this5 = ((((((this4 >> 24) & 255) << 24) | ((this4 & 255) << 16)) | (((this4 >> 8) & 255) << 8)) | ((this4 >> 16) & 255));
            								}
            								else {
HXLINE(  98)									this5 = this4;
            								}
HXDLIN(  98)								Float a1;
HXDLIN(  98)								int this6 = ((this5 >> 24) & 255);
HXDLIN(  98)								if ((this6 == 0)) {
HXLINE(  98)									a1 = ((Float)0.);
            								}
            								else {
HXLINE(  98)									a1 = (( (Float)(this6) ) / ( (Float)(255) ));
            								}
HXDLIN(  98)								Float r1;
HXDLIN(  98)								int this7 = ((this5 >> 16) & 255);
HXDLIN(  98)								if ((this7 == 0)) {
HXLINE(  98)									r1 = ((Float)0.);
            								}
            								else {
HXLINE(  98)									r1 = (( (Float)(this7) ) / ( (Float)(255) ));
            								}
HXDLIN(  98)								Float g1;
HXDLIN(  98)								int this8 = ((this5 >> 8) & 255);
HXDLIN(  98)								if ((this8 == 0)) {
HXLINE(  98)									g1 = ((Float)0.);
            								}
            								else {
HXLINE(  98)									g1 = (( (Float)(this8) ) / ( (Float)(255) ));
            								}
HXDLIN(  98)								Float b1;
HXDLIN(  98)								int this9 = (this5 & 255);
HXDLIN(  98)								if ((this9 == 0)) {
HXLINE(  98)									b1 = ((Float)0.);
            								}
            								else {
HXLINE(  98)									b1 = (( (Float)(this9) ) / ( (Float)(255) ));
            								}
HXDLIN(  98)								Float a2;
HXDLIN(  98)								int this10 = ((-16711936 >> 24) & 255);
HXDLIN(  98)								if ((this10 == 0)) {
HXLINE(  98)									a2 = ((Float)0.);
            								}
            								else {
HXLINE(  98)									a2 = (( (Float)(this10) ) / ( (Float)(255) ));
            								}
HXDLIN(  98)								Float r2;
HXDLIN(  98)								int this11 = ((-16711936 >> 16) & 255);
HXDLIN(  98)								if ((this11 == 0)) {
HXLINE(  98)									r2 = ((Float)0.);
            								}
            								else {
HXLINE(  98)									r2 = (( (Float)(this11) ) / ( (Float)(255) ));
            								}
HXDLIN(  98)								Float g2;
HXDLIN(  98)								int this12 = ((-16711936 >> 8) & 255);
HXDLIN(  98)								if ((this12 == 0)) {
HXLINE(  98)									g2 = ((Float)0.);
            								}
            								else {
HXLINE(  98)									g2 = (( (Float)(this12) ) / ( (Float)(255) ));
            								}
HXDLIN(  98)								Float b2;
HXDLIN(  98)								int this13 = (-16711936 & 255);
HXDLIN(  98)								if ((this13 == 0)) {
HXLINE(  98)									b2 = ((Float)0.);
            								}
            								else {
HXLINE(  98)									b2 = (( (Float)(this13) ) / ( (Float)(255) ));
            								}
HXDLIN(  98)								Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  98)								int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  98)								int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  98)								int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  98)								int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  98)								int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  98)								{
HXLINE(  98)									::haxe::io::ArrayBufferViewImpl this14 = this1->image;
HXDLIN(  98)									int value;
HXDLIN(  98)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  98)										value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            									}
            									else {
HXLINE(  98)										value = blended;
            									}
HXDLIN(  98)									bool _hx_tmp;
HXDLIN(  98)									if ((location >= 0)) {
HXLINE(  98)										_hx_tmp = (location < (this14->byteLength >> 2));
            									}
            									else {
HXLINE(  98)										_hx_tmp = false;
            									}
HXDLIN(  98)									if (_hx_tmp) {
HXLINE(  98)										::haxe::io::Bytes _this = this14->bytes;
HXDLIN(  98)										int pos = ((location << 2) + this14->byteOffset);
HXDLIN(  98)										_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  98)										_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  98)										_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  98)										_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            									}
            								}
            							}
            							else {
HXLINE(  98)								::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  98)								int index;
HXDLIN(  98)								if (this1->useVirtualPos) {
HXLINE(  98)									index = ::Std_obj::_hx_int(((((( (Float)(q1) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            								}
            								else {
HXLINE(  98)									index = ::Std_obj::_hx_int(( (Float)(((q1 * this1->width) + x)) ));
            								}
HXDLIN(  98)								int value;
HXDLIN(  98)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  98)									value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            								}
            								else {
HXLINE(  98)									value = c;
            								}
HXDLIN(  98)								bool _hx_tmp;
HXDLIN(  98)								if ((index >= 0)) {
HXLINE(  98)									_hx_tmp = (index < (this2->byteLength >> 2));
            								}
            								else {
HXLINE(  98)									_hx_tmp = false;
            								}
HXDLIN(  98)								if (_hx_tmp) {
HXLINE(  98)									::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  98)									int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  98)									_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  98)									_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  98)									_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  98)									_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            								}
            							}
            						}
HXDLIN(  98)						if ((p1 > maxX1)) {
HXLINE( 247)							p1 = xx1;
HXLINE(  98)							q1 = (q1 + 1);
            						}
HXDLIN(  98)						if ((q1 > maxY1)) {
HXLINE(  98)							goto _hx_goto_7;
            						}
            					}
            					_hx_goto_7:;
            				}
HXDLIN(  98)				{
HXLINE(  98)					Float x2 = (cx - ((Float)6.));
HXDLIN(  98)					Float y2 = (cy - ((Float)6.));
HXDLIN(  98)					int p2 = ::Std_obj::_hx_int(x2);
HXDLIN(  98)					int xx2 = p2;
HXDLIN(  98)					int q2 = ::Std_obj::_hx_int(y2);
HXDLIN(  98)					int maxX2 = ::Std_obj::_hx_int((x2 + 12));
HXDLIN(  98)					int maxY2 = ::Std_obj::_hx_int((y2 + 12));
HXDLIN(  98)					while(true){
HXLINE(  98)						{
HXLINE(  98)							p2 = (p2 + 1);
HXDLIN(  98)							int x = (p2 - 1);
HXDLIN(  98)							int this2 = -16776961;
HXDLIN(  98)							int c = this2;
HXDLIN(  98)							bool _hx_tmp;
HXDLIN(  98)							if ((((c >> 24) & 255) < 254)) {
HXLINE(  98)								_hx_tmp = this1->transparent;
            							}
            							else {
HXLINE(  98)								_hx_tmp = false;
            							}
HXDLIN(  98)							if (_hx_tmp) {
HXLINE(  98)								int location;
HXDLIN(  98)								if (this1->useVirtualPos) {
HXLINE(  98)									location = ::Std_obj::_hx_int(((((( (Float)(q2) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            								}
            								else {
HXLINE(  98)									location = ::Std_obj::_hx_int(( (Float)(((q2 * this1->width) + x)) ));
            								}
HXDLIN(  98)								::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  98)								::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  98)								int pos = ((location << 2) + this2->byteOffset);
HXDLIN(  98)								int this3 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  98)								int this4 = this3;
HXDLIN(  98)								int this5;
HXDLIN(  98)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  98)									this5 = ((((((this4 >> 24) & 255) << 24) | ((this4 & 255) << 16)) | (((this4 >> 8) & 255) << 8)) | ((this4 >> 16) & 255));
            								}
            								else {
HXLINE(  98)									this5 = this4;
            								}
HXDLIN(  98)								Float a1;
HXDLIN(  98)								int this6 = ((this5 >> 24) & 255);
HXDLIN(  98)								if ((this6 == 0)) {
HXLINE(  98)									a1 = ((Float)0.);
            								}
            								else {
HXLINE(  98)									a1 = (( (Float)(this6) ) / ( (Float)(255) ));
            								}
HXDLIN(  98)								Float r1;
HXDLIN(  98)								int this7 = ((this5 >> 16) & 255);
HXDLIN(  98)								if ((this7 == 0)) {
HXLINE(  98)									r1 = ((Float)0.);
            								}
            								else {
HXLINE(  98)									r1 = (( (Float)(this7) ) / ( (Float)(255) ));
            								}
HXDLIN(  98)								Float g1;
HXDLIN(  98)								int this8 = ((this5 >> 8) & 255);
HXDLIN(  98)								if ((this8 == 0)) {
HXLINE(  98)									g1 = ((Float)0.);
            								}
            								else {
HXLINE(  98)									g1 = (( (Float)(this8) ) / ( (Float)(255) ));
            								}
HXDLIN(  98)								Float b1;
HXDLIN(  98)								int this9 = (this5 & 255);
HXDLIN(  98)								if ((this9 == 0)) {
HXLINE(  98)									b1 = ((Float)0.);
            								}
            								else {
HXLINE(  98)									b1 = (( (Float)(this9) ) / ( (Float)(255) ));
            								}
HXDLIN(  98)								Float a2;
HXDLIN(  98)								int this10 = ((-16776961 >> 24) & 255);
HXDLIN(  98)								if ((this10 == 0)) {
HXLINE(  98)									a2 = ((Float)0.);
            								}
            								else {
HXLINE(  98)									a2 = (( (Float)(this10) ) / ( (Float)(255) ));
            								}
HXDLIN(  98)								Float r2;
HXDLIN(  98)								int this11 = ((-16776961 >> 16) & 255);
HXDLIN(  98)								if ((this11 == 0)) {
HXLINE(  98)									r2 = ((Float)0.);
            								}
            								else {
HXLINE(  98)									r2 = (( (Float)(this11) ) / ( (Float)(255) ));
            								}
HXDLIN(  98)								Float g2;
HXDLIN(  98)								int this12 = ((-16776961 >> 8) & 255);
HXDLIN(  98)								if ((this12 == 0)) {
HXLINE(  98)									g2 = ((Float)0.);
            								}
            								else {
HXLINE(  98)									g2 = (( (Float)(this12) ) / ( (Float)(255) ));
            								}
HXDLIN(  98)								Float b2;
HXDLIN(  98)								int this13 = (-16776961 & 255);
HXDLIN(  98)								if ((this13 == 0)) {
HXLINE(  98)									b2 = ((Float)0.);
            								}
            								else {
HXLINE(  98)									b2 = (( (Float)(this13) ) / ( (Float)(255) ));
            								}
HXDLIN(  98)								Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  98)								int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  98)								int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  98)								int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  98)								int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  98)								int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  98)								{
HXLINE(  98)									::haxe::io::ArrayBufferViewImpl this14 = this1->image;
HXDLIN(  98)									int value;
HXDLIN(  98)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  98)										value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            									}
            									else {
HXLINE(  98)										value = blended;
            									}
HXDLIN(  98)									bool _hx_tmp;
HXDLIN(  98)									if ((location >= 0)) {
HXLINE(  98)										_hx_tmp = (location < (this14->byteLength >> 2));
            									}
            									else {
HXLINE(  98)										_hx_tmp = false;
            									}
HXDLIN(  98)									if (_hx_tmp) {
HXLINE(  98)										::haxe::io::Bytes _this = this14->bytes;
HXDLIN(  98)										int pos = ((location << 2) + this14->byteOffset);
HXDLIN(  98)										_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  98)										_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  98)										_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  98)										_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            									}
            								}
            							}
            							else {
HXLINE(  98)								::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  98)								int index;
HXDLIN(  98)								if (this1->useVirtualPos) {
HXLINE(  98)									index = ::Std_obj::_hx_int(((((( (Float)(q2) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            								}
            								else {
HXLINE(  98)									index = ::Std_obj::_hx_int(( (Float)(((q2 * this1->width) + x)) ));
            								}
HXDLIN(  98)								int value;
HXDLIN(  98)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  98)									value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            								}
            								else {
HXLINE(  98)									value = c;
            								}
HXDLIN(  98)								bool _hx_tmp;
HXDLIN(  98)								if ((index >= 0)) {
HXLINE(  98)									_hx_tmp = (index < (this2->byteLength >> 2));
            								}
            								else {
HXLINE(  98)									_hx_tmp = false;
            								}
HXDLIN(  98)								if (_hx_tmp) {
HXLINE(  98)									::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  98)									int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  98)									_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  98)									_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  98)									_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  98)									_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            								}
            							}
            						}
HXDLIN(  98)						if ((p2 > maxX2)) {
HXLINE( 247)							p2 = xx2;
HXLINE(  98)							q2 = (q2 + 1);
            						}
HXDLIN(  98)						if ((q2 > maxY2)) {
HXLINE(  98)							goto _hx_goto_8;
            						}
            					}
            					_hx_goto_8:;
            				}
HXDLIN(  98)				{
HXLINE(  98)					Float x3 = (dx - ((Float)6.));
HXDLIN(  98)					Float y3 = (dy - ((Float)6.));
HXDLIN(  98)					int p3 = ::Std_obj::_hx_int(x3);
HXDLIN(  98)					int xx3 = p3;
HXDLIN(  98)					int q3 = ::Std_obj::_hx_int(y3);
HXDLIN(  98)					int maxX3 = ::Std_obj::_hx_int((x3 + 12));
HXDLIN(  98)					int maxY3 = ::Std_obj::_hx_int((y3 + 12));
HXDLIN(  98)					while(true){
HXLINE(  98)						{
HXLINE(  98)							p3 = (p3 + 1);
HXDLIN(  98)							int x = (p3 - 1);
HXDLIN(  98)							int this2 = -1048336;
HXDLIN(  98)							int c = this2;
HXDLIN(  98)							bool _hx_tmp;
HXDLIN(  98)							if ((((c >> 24) & 255) < 254)) {
HXLINE(  98)								_hx_tmp = this1->transparent;
            							}
            							else {
HXLINE(  98)								_hx_tmp = false;
            							}
HXDLIN(  98)							if (_hx_tmp) {
HXLINE(  98)								int location;
HXDLIN(  98)								if (this1->useVirtualPos) {
HXLINE(  98)									location = ::Std_obj::_hx_int(((((( (Float)(q3) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            								}
            								else {
HXLINE(  98)									location = ::Std_obj::_hx_int(( (Float)(((q3 * this1->width) + x)) ));
            								}
HXDLIN(  98)								::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  98)								::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  98)								int pos = ((location << 2) + this2->byteOffset);
HXDLIN(  98)								int this3 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  98)								int this4 = this3;
HXDLIN(  98)								int this5;
HXDLIN(  98)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  98)									this5 = ((((((this4 >> 24) & 255) << 24) | ((this4 & 255) << 16)) | (((this4 >> 8) & 255) << 8)) | ((this4 >> 16) & 255));
            								}
            								else {
HXLINE(  98)									this5 = this4;
            								}
HXDLIN(  98)								Float a1;
HXDLIN(  98)								int this6 = ((this5 >> 24) & 255);
HXDLIN(  98)								if ((this6 == 0)) {
HXLINE(  98)									a1 = ((Float)0.);
            								}
            								else {
HXLINE(  98)									a1 = (( (Float)(this6) ) / ( (Float)(255) ));
            								}
HXDLIN(  98)								Float r1;
HXDLIN(  98)								int this7 = ((this5 >> 16) & 255);
HXDLIN(  98)								if ((this7 == 0)) {
HXLINE(  98)									r1 = ((Float)0.);
            								}
            								else {
HXLINE(  98)									r1 = (( (Float)(this7) ) / ( (Float)(255) ));
            								}
HXDLIN(  98)								Float g1;
HXDLIN(  98)								int this8 = ((this5 >> 8) & 255);
HXDLIN(  98)								if ((this8 == 0)) {
HXLINE(  98)									g1 = ((Float)0.);
            								}
            								else {
HXLINE(  98)									g1 = (( (Float)(this8) ) / ( (Float)(255) ));
            								}
HXDLIN(  98)								Float b1;
HXDLIN(  98)								int this9 = (this5 & 255);
HXDLIN(  98)								if ((this9 == 0)) {
HXLINE(  98)									b1 = ((Float)0.);
            								}
            								else {
HXLINE(  98)									b1 = (( (Float)(this9) ) / ( (Float)(255) ));
            								}
HXDLIN(  98)								Float a2;
HXDLIN(  98)								int this10 = ((-1048336 >> 24) & 255);
HXDLIN(  98)								if ((this10 == 0)) {
HXLINE(  98)									a2 = ((Float)0.);
            								}
            								else {
HXLINE(  98)									a2 = (( (Float)(this10) ) / ( (Float)(255) ));
            								}
HXDLIN(  98)								Float r2;
HXDLIN(  98)								int this11 = ((-1048336 >> 16) & 255);
HXDLIN(  98)								if ((this11 == 0)) {
HXLINE(  98)									r2 = ((Float)0.);
            								}
            								else {
HXLINE(  98)									r2 = (( (Float)(this11) ) / ( (Float)(255) ));
            								}
HXDLIN(  98)								Float g2;
HXDLIN(  98)								int this12 = ((-1048336 >> 8) & 255);
HXDLIN(  98)								if ((this12 == 0)) {
HXLINE(  98)									g2 = ((Float)0.);
            								}
            								else {
HXLINE(  98)									g2 = (( (Float)(this12) ) / ( (Float)(255) ));
            								}
HXDLIN(  98)								Float b2;
HXDLIN(  98)								int this13 = (-1048336 & 255);
HXDLIN(  98)								if ((this13 == 0)) {
HXLINE(  98)									b2 = ((Float)0.);
            								}
            								else {
HXLINE(  98)									b2 = (( (Float)(this13) ) / ( (Float)(255) ));
            								}
HXDLIN(  98)								Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  98)								int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  98)								int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  98)								int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  98)								int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  98)								int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  98)								{
HXLINE(  98)									::haxe::io::ArrayBufferViewImpl this14 = this1->image;
HXDLIN(  98)									int value;
HXDLIN(  98)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  98)										value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            									}
            									else {
HXLINE(  98)										value = blended;
            									}
HXDLIN(  98)									bool _hx_tmp;
HXDLIN(  98)									if ((location >= 0)) {
HXLINE(  98)										_hx_tmp = (location < (this14->byteLength >> 2));
            									}
            									else {
HXLINE(  98)										_hx_tmp = false;
            									}
HXDLIN(  98)									if (_hx_tmp) {
HXLINE(  98)										::haxe::io::Bytes _this = this14->bytes;
HXDLIN(  98)										int pos = ((location << 2) + this14->byteOffset);
HXDLIN(  98)										_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  98)										_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  98)										_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  98)										_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            									}
            								}
            							}
            							else {
HXLINE(  98)								::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  98)								int index;
HXDLIN(  98)								if (this1->useVirtualPos) {
HXLINE(  98)									index = ::Std_obj::_hx_int(((((( (Float)(q3) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            								}
            								else {
HXLINE(  98)									index = ::Std_obj::_hx_int(( (Float)(((q3 * this1->width) + x)) ));
            								}
HXDLIN(  98)								int value;
HXDLIN(  98)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  98)									value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            								}
            								else {
HXLINE(  98)									value = c;
            								}
HXDLIN(  98)								bool _hx_tmp;
HXDLIN(  98)								if ((index >= 0)) {
HXLINE(  98)									_hx_tmp = (index < (this2->byteLength >> 2));
            								}
            								else {
HXLINE(  98)									_hx_tmp = false;
            								}
HXDLIN(  98)								if (_hx_tmp) {
HXLINE(  98)									::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  98)									int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  98)									_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  98)									_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  98)									_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  98)									_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            								}
            							}
            						}
HXDLIN(  98)						if ((p3 > maxX3)) {
HXLINE( 247)							p3 = xx3;
HXLINE(  98)							q3 = (q3 + 1);
            						}
HXDLIN(  98)						if ((q3 > maxY3)) {
HXLINE(  98)							goto _hx_goto_9;
            						}
            					}
            					_hx_goto_9:;
            				}
            			}
HXDLIN(  98)			Float bx1 = bx;
HXDLIN(  98)			Float by1 = by;
HXDLIN(  98)			Float cx1 = dx;
HXDLIN(  98)			Float cy1 = dy;
HXDLIN(  98)			bool adjustWinding = (((((ax * by1) - (bx1 * ay)) + ((bx1 * cy1) - (cx1 * by1))) + ((cx1 * ay) - (ax * cy1))) > 0);
HXDLIN(  98)			if (!(adjustWinding)) {
HXLINE(  98)				Float bx_ = bx1;
HXDLIN(  98)				Float by_ = by1;
HXLINE( 188)				bx1 = cx1;
HXLINE( 189)				by1 = cy1;
HXLINE( 190)				cx1 = bx_;
HXLINE( 191)				cy1 = by_;
            			}
HXLINE(  98)			bool hasUndo = false;
HXDLIN(  98)			Float s0 = ((ay * cx1) - (ax * cy1));
HXDLIN(  98)			Float sx = (cy1 - ay);
HXDLIN(  98)			Float sy = (ax - cx1);
HXDLIN(  98)			Float t0 = ((ax * by1) - (ay * bx1));
HXDLIN(  98)			Float tx = (ay - by1);
HXDLIN(  98)			Float ty = (bx1 - ax);
HXDLIN(  98)			Float A = ((((-(by1) * cx1) + (ay * (-(bx1) + cx1))) + (ax * (by1 - cy1))) + (bx1 * cy1));
HXDLIN(  98)			::pixelimage::iter::IntIterStart xIter3;
HXDLIN(  98)			if ((ax > bx1)) {
HXLINE(  98)				if ((ax > cx1)) {
HXLINE(  98)					int min;
HXDLIN(  98)					if ((bx1 > cx1)) {
HXLINE(  98)						min = ::Math_obj::floor(cx1);
            					}
            					else {
HXLINE(  98)						min = ::Math_obj::floor(bx1);
            					}
HXDLIN(  98)					int ii_min = min;
HXDLIN(  98)					int ii_max = ::Math_obj::ceil(ax);
HXDLIN(  98)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  98)					xIter3 = this1;
            				}
            				else {
HXLINE(  98)					int ii_min = ::Math_obj::floor(bx1);
HXDLIN(  98)					int ii_max = ::Math_obj::ceil(cx1);
HXDLIN(  98)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  98)					xIter3 = this1;
            				}
            			}
            			else {
HXLINE(  98)				if ((bx1 > cx1)) {
HXLINE(  98)					int min;
HXDLIN(  98)					if ((ax > cx1)) {
HXLINE(  98)						min = ::Math_obj::floor(cx1);
            					}
            					else {
HXLINE(  98)						min = ::Math_obj::ceil(ax);
            					}
HXDLIN(  98)					int ii_min = min;
HXDLIN(  98)					int ii_max = ::Math_obj::ceil(bx1);
HXDLIN(  98)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  98)					xIter3 = this1;
            				}
            				else {
HXLINE(  98)					int ii_min = ::Math_obj::floor(ax);
HXDLIN(  98)					int ii_max = ::Math_obj::ceil(cx1);
HXDLIN(  98)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  98)					xIter3 = this1;
            				}
            			}
HXDLIN(  98)			::pixelimage::iter::IntIterStart yIter3;
HXDLIN(  98)			if ((ay > by1)) {
HXLINE(  98)				if ((ay > cy1)) {
HXLINE(  98)					int min;
HXDLIN(  98)					if ((by1 > cy1)) {
HXLINE(  98)						min = ::Math_obj::floor(cy1);
            					}
            					else {
HXLINE(  98)						min = ::Math_obj::floor(by1);
            					}
HXDLIN(  98)					int ii_min = min;
HXDLIN(  98)					int ii_max = ::Math_obj::ceil(ay);
HXDLIN(  98)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  98)					yIter3 = this1;
            				}
            				else {
HXLINE(  98)					int ii_min = ::Math_obj::floor(by1);
HXDLIN(  98)					int ii_max = ::Math_obj::ceil(cy1);
HXDLIN(  98)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  98)					yIter3 = this1;
            				}
            			}
            			else {
HXLINE(  98)				if ((by1 > cy1)) {
HXLINE(  98)					int min;
HXDLIN(  98)					if ((ay > cy1)) {
HXLINE(  98)						min = ::Math_obj::floor(cy1);
            					}
            					else {
HXLINE(  98)						min = ::Math_obj::ceil(ay);
            					}
HXDLIN(  98)					int ii_min = min;
HXDLIN(  98)					int ii_max = ::Math_obj::ceil(by1);
HXDLIN(  98)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  98)					yIter3 = this1;
            				}
            				else {
HXLINE(  98)					int ii_min = ::Math_obj::floor(ay);
HXDLIN(  98)					int ii_max = ::Math_obj::ceil(cy1);
HXDLIN(  98)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  98)					yIter3 = this1;
            				}
            			}
HXDLIN(  98)			::pixelimage::ImageStruct undoImage = null();
HXDLIN(  98)			if (hasUndo) {
HXLINE(  98)				int w = ((xIter3->max - xIter3->start) + 1);
HXDLIN(  98)				int h = ((yIter3->max - yIter3->start) + 1);
HXDLIN(  98)				int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN(  98)				::haxe::io::ArrayBufferViewImpl this2 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  98)				::haxe::io::ArrayBufferViewImpl this3 = this2;
HXDLIN(  98)				::pixelimage::ImageStruct this4 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this3);
HXDLIN(  98)				undoImage = this4;
HXDLIN(  98)				{
HXLINE(  98)					int rectLeft = xIter3->start;
HXDLIN(  98)					int rectTop = yIter3->start;
HXDLIN(  98)					int rectRight = xIter3->max;
HXDLIN(  98)					bool forceClear = false;
HXDLIN(  98)					{
HXLINE(  98)						int _g = rectTop;
HXDLIN(  98)						int _g1 = yIter3->max;
HXDLIN(  98)						while((_g < _g1)){
HXLINE(  98)							_g = (_g + 1);
HXDLIN(  98)							int dy = (_g - 1);
HXDLIN(  98)							{
HXLINE(  98)								int _g1 = rectLeft;
HXDLIN(  98)								int _g2 = rectRight;
HXDLIN(  98)								while((_g1 < _g2)){
HXLINE(  98)									_g1 = (_g1 + 1);
HXDLIN(  98)									int dx = (_g1 - 1);
HXDLIN(  98)									::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  98)									int index;
HXDLIN(  98)									if (this1->useVirtualPos) {
HXLINE(  98)										index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            									}
            									else {
HXLINE(  98)										index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            									}
HXDLIN(  98)									::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  98)									int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  98)									int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  98)									int col;
HXDLIN(  98)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  98)										col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXLINE(  98)										col = c;
            									}
HXDLIN(  98)									bool _hx_tmp;
HXDLIN(  98)									if (this1->useMask) {
HXLINE(  98)										_hx_tmp = ::hx::IsNotNull( this1->mask );
            									}
            									else {
HXLINE(  98)										_hx_tmp = false;
            									}
HXDLIN(  98)									if (_hx_tmp) {
HXLINE(  98)										::pixelimage::ImageStruct this2 = this1->mask;
HXDLIN(  98)										::haxe::io::ArrayBufferViewImpl this3 = this2->image;
HXDLIN(  98)										int index;
HXDLIN(  98)										if (this2->useVirtualPos) {
HXLINE(  98)											index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this2->virtualY) * ( (Float)(this2->width) )) + dx) - this2->virtualX));
            										}
            										else {
HXLINE(  98)											index = ::Std_obj::_hx_int(( (Float)(((dy * this2->width) + dx)) ));
            										}
HXDLIN(  98)										::haxe::io::Bytes _this = this3->bytes;
HXDLIN(  98)										int pos = ((index << 2) + this3->byteOffset);
HXDLIN(  98)										int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  98)										int v;
HXDLIN(  98)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  98)											v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            										}
            										else {
HXLINE(  98)											v = c;
            										}
HXDLIN(  98)										int this4 = v;
HXDLIN(  98)										int maskPixel = this4;
HXDLIN(  98)										int this5 = col;
HXDLIN(  98)										int this6 = this5;
HXDLIN(  98)										if ((maskPixel == 0)) {
HXLINE(  98)											int this1 = this6;
HXDLIN(  98)											col = this1;
            										}
            										else {
HXLINE(  98)											Float m0;
HXDLIN(  98)											int this1 = ((maskPixel >> 24) & 255);
HXDLIN(  98)											if ((this1 == 0)) {
HXLINE(  98)												m0 = ((Float)0.);
            											}
            											else {
HXLINE(  98)												m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            											}
HXDLIN(  98)											Float m1;
HXDLIN(  98)											int this2 = ((maskPixel >> 16) & 255);
HXDLIN(  98)											if ((this2 == 0)) {
HXLINE(  98)												m1 = ((Float)0.);
            											}
            											else {
HXLINE(  98)												m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            											}
HXDLIN(  98)											Float m2;
HXDLIN(  98)											int this3 = ((maskPixel >> 8) & 255);
HXDLIN(  98)											if ((this3 == 0)) {
HXLINE(  98)												m2 = ((Float)0.);
            											}
            											else {
HXLINE(  98)												m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            											}
HXDLIN(  98)											Float m3;
HXDLIN(  98)											int this4 = (maskPixel & 255);
HXDLIN(  98)											if ((this4 == 0)) {
HXLINE(  98)												m3 = ((Float)0.);
            											}
            											else {
HXLINE(  98)												m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            											}
HXDLIN(  98)											int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this6 >> 24) & 255)) )));
HXDLIN(  98)											int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this6 >> 16) & 255)) )));
HXDLIN(  98)											int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this6 >> 8) & 255)) )));
HXDLIN(  98)											int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this6 & 255)) )));
HXDLIN(  98)											col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN(  98)									if ((col != 0)) {
HXLINE(  98)										int x = (dx - rectLeft);
HXDLIN(  98)										int y = (dy - rectTop);
HXDLIN(  98)										int this1 = col;
HXDLIN(  98)										int c = this1;
HXDLIN(  98)										bool _hx_tmp;
HXDLIN(  98)										if ((((c >> 24) & 255) < 254)) {
HXLINE(  98)											_hx_tmp = undoImage->transparent;
            										}
            										else {
HXLINE(  98)											_hx_tmp = false;
            										}
HXDLIN(  98)										if (_hx_tmp) {
HXLINE(  98)											int location;
HXDLIN(  98)											if (undoImage->useVirtualPos) {
HXLINE(  98)												location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            											}
            											else {
HXLINE(  98)												location = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            											}
HXDLIN(  98)											::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  98)											::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  98)											int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  98)											int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  98)											int this3 = this2;
HXDLIN(  98)											int this4;
HXDLIN(  98)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  98)												this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            											}
            											else {
HXLINE(  98)												this4 = this3;
            											}
HXDLIN(  98)											Float a1;
HXDLIN(  98)											int this5 = ((this4 >> 24) & 255);
HXDLIN(  98)											if ((this5 == 0)) {
HXLINE(  98)												a1 = ((Float)0.);
            											}
            											else {
HXLINE(  98)												a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            											}
HXDLIN(  98)											Float r1;
HXDLIN(  98)											int this6 = ((this4 >> 16) & 255);
HXDLIN(  98)											if ((this6 == 0)) {
HXLINE(  98)												r1 = ((Float)0.);
            											}
            											else {
HXLINE(  98)												r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            											}
HXDLIN(  98)											Float g1;
HXDLIN(  98)											int this7 = ((this4 >> 8) & 255);
HXDLIN(  98)											if ((this7 == 0)) {
HXLINE(  98)												g1 = ((Float)0.);
            											}
            											else {
HXLINE(  98)												g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            											}
HXDLIN(  98)											Float b1;
HXDLIN(  98)											int this8 = (this4 & 255);
HXDLIN(  98)											if ((this8 == 0)) {
HXLINE(  98)												b1 = ((Float)0.);
            											}
            											else {
HXLINE(  98)												b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            											}
HXDLIN(  98)											Float a2;
HXDLIN(  98)											int this9 = ((col >> 24) & 255);
HXDLIN(  98)											if ((this9 == 0)) {
HXLINE(  98)												a2 = ((Float)0.);
            											}
            											else {
HXLINE(  98)												a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            											}
HXDLIN(  98)											Float r2;
HXDLIN(  98)											int this10 = ((col >> 16) & 255);
HXDLIN(  98)											if ((this10 == 0)) {
HXLINE(  98)												r2 = ((Float)0.);
            											}
            											else {
HXLINE(  98)												r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            											}
HXDLIN(  98)											Float g2;
HXDLIN(  98)											int this11 = ((col >> 8) & 255);
HXDLIN(  98)											if ((this11 == 0)) {
HXLINE(  98)												g2 = ((Float)0.);
            											}
            											else {
HXLINE(  98)												g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            											}
HXDLIN(  98)											Float b2;
HXDLIN(  98)											int this12 = (col & 255);
HXDLIN(  98)											if ((this12 == 0)) {
HXLINE(  98)												b2 = ((Float)0.);
            											}
            											else {
HXLINE(  98)												b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            											}
HXDLIN(  98)											Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  98)											int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  98)											int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  98)											int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  98)											int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  98)											int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  98)											{
HXLINE(  98)												::haxe::io::ArrayBufferViewImpl this13 = undoImage->image;
HXDLIN(  98)												int value;
HXDLIN(  98)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  98)													value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            												}
            												else {
HXLINE(  98)													value = blended;
            												}
HXDLIN(  98)												bool _hx_tmp;
HXDLIN(  98)												if ((location >= 0)) {
HXLINE(  98)													_hx_tmp = (location < (this13->byteLength >> 2));
            												}
            												else {
HXLINE(  98)													_hx_tmp = false;
            												}
HXDLIN(  98)												if (_hx_tmp) {
HXLINE(  98)													::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  98)													int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  98)													_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  98)													_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  98)													_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  98)													_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            												}
            											}
            										}
            										else {
HXLINE(  98)											::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  98)											int index;
HXDLIN(  98)											if (undoImage->useVirtualPos) {
HXLINE(  98)												index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            											}
            											else {
HXLINE(  98)												index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            											}
HXDLIN(  98)											int value;
HXDLIN(  98)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  98)												value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            											}
            											else {
HXLINE(  98)												value = c;
            											}
HXDLIN(  98)											bool _hx_tmp;
HXDLIN(  98)											if ((index >= 0)) {
HXLINE(  98)												_hx_tmp = (index < (this1->byteLength >> 2));
            											}
            											else {
HXLINE(  98)												_hx_tmp = false;
            											}
HXDLIN(  98)											if (_hx_tmp) {
HXLINE(  98)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  98)												int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  98)												_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  98)												_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  98)												_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  98)												_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            											}
            										}
            									}
            									else {
HXLINE(  98)										if (forceClear) {
HXLINE(  98)											::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN(  98)											int x = (dx - rectLeft);
HXDLIN(  98)											int y = (dy - rectTop);
HXDLIN(  98)											int index;
HXDLIN(  98)											if (undoImage->useVirtualPos) {
HXLINE(  98)												index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            											}
            											else {
HXLINE(  98)												index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            											}
HXDLIN(  98)											bool _hx_tmp;
HXDLIN(  98)											if ((index >= 0)) {
HXLINE(  98)												_hx_tmp = (index < (this1->byteLength >> 2));
            											}
            											else {
HXLINE(  98)												_hx_tmp = false;
            											}
HXDLIN(  98)											if (_hx_tmp) {
HXLINE(  98)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  98)												int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  98)												_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  98)												_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  98)												_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  98)												_this->b[(pos + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN(  98)			bool foundY = false;
HXDLIN(  98)			Float s = ((Float)0.);
HXDLIN(  98)			Float t = ((Float)0.);
HXDLIN(  98)			Float sxx = ((Float)0.);
HXDLIN(  98)			Float txx = ((Float)0.);
HXDLIN(  98)			int _g_min = xIter3->start;
HXDLIN(  98)			int _g_max = xIter3->max;
HXDLIN(  98)			while((_g_min < _g_max)){
HXLINE(  98)				_g_min = (_g_min + 1);
HXDLIN(  98)				int x = (_g_min - 1);
HXLINE( 223)				sxx = (sx * ( (Float)(x) ));
HXLINE( 224)				txx = (tx * ( (Float)(x) ));
HXLINE( 225)				foundY = false;
HXLINE(  98)				{
HXLINE(  98)					int _g_min1 = yIter3->start;
HXDLIN(  98)					int _g_max = yIter3->max;
HXDLIN(  98)					while((_g_min1 < _g_max)){
HXLINE(  98)						_g_min1 = (_g_min1 + 1);
HXDLIN(  98)						int y = (_g_min1 - 1);
HXLINE( 227)						s = ((s0 + sxx) + (sy * ( (Float)(y) )));
HXLINE( 228)						t = ((t0 + txx) + (ty * ( (Float)(y) )));
HXLINE(  98)						bool _hx_tmp;
HXDLIN(  98)						if (!((s <= 0))) {
HXLINE(  98)							_hx_tmp = (t <= 0);
            						}
            						else {
HXLINE(  98)							_hx_tmp = true;
            						}
HXDLIN(  98)						if (_hx_tmp) {
HXLINE(  98)							if (foundY) {
HXLINE(  98)								goto _hx_goto_13;
            							}
            						}
            						else {
HXLINE(  98)							if (((s + t) < A)) {
HXLINE(  98)								int x1 = ::hx::Mod(x,tileImage->width);
HXDLIN(  98)								int y1 = ::hx::Mod(y,tileImage->height);
HXDLIN(  98)								::haxe::io::ArrayBufferViewImpl this2 = tileImage->image;
HXDLIN(  98)								int index;
HXDLIN(  98)								if (tileImage->useVirtualPos) {
HXLINE(  98)									index = ::Std_obj::_hx_int(((((( (Float)(y1) ) - tileImage->virtualY) * ( (Float)(tileImage->width) )) + x1) - tileImage->virtualX));
            								}
            								else {
HXLINE(  98)									index = ::Std_obj::_hx_int(( (Float)(((y1 * tileImage->width) + x1)) ));
            								}
HXDLIN(  98)								::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  98)								int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  98)								int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  98)								int color;
HXDLIN(  98)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  98)									color = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            								}
            								else {
HXLINE(  98)									color = c;
            								}
HXDLIN(  98)								{
HXLINE(  98)									int this3 = color;
HXDLIN(  98)									int c1 = this3;
HXDLIN(  98)									bool _hx_tmp;
HXDLIN(  98)									if ((((c1 >> 24) & 255) < 254)) {
HXLINE(  98)										_hx_tmp = this1->transparent;
            									}
            									else {
HXLINE(  98)										_hx_tmp = false;
            									}
HXDLIN(  98)									if (_hx_tmp) {
HXLINE(  98)										int location;
HXDLIN(  98)										if (this1->useVirtualPos) {
HXLINE(  98)											location = ::Std_obj::_hx_int(((((( (Float)(y) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            										}
            										else {
HXLINE(  98)											location = ::Std_obj::_hx_int(( (Float)(((y * this1->width) + x)) ));
            										}
HXDLIN(  98)										::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  98)										::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  98)										int pos = ((location << 2) + this2->byteOffset);
HXDLIN(  98)										int this3 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  98)										int this4 = this3;
HXDLIN(  98)										int this5;
HXDLIN(  98)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  98)											this5 = ((((((this4 >> 24) & 255) << 24) | ((this4 & 255) << 16)) | (((this4 >> 8) & 255) << 8)) | ((this4 >> 16) & 255));
            										}
            										else {
HXLINE(  98)											this5 = this4;
            										}
HXDLIN(  98)										Float a1;
HXDLIN(  98)										int this6 = ((this5 >> 24) & 255);
HXDLIN(  98)										if ((this6 == 0)) {
HXLINE(  98)											a1 = ((Float)0.);
            										}
            										else {
HXLINE(  98)											a1 = (( (Float)(this6) ) / ( (Float)(255) ));
            										}
HXDLIN(  98)										Float r1;
HXDLIN(  98)										int this7 = ((this5 >> 16) & 255);
HXDLIN(  98)										if ((this7 == 0)) {
HXLINE(  98)											r1 = ((Float)0.);
            										}
            										else {
HXLINE(  98)											r1 = (( (Float)(this7) ) / ( (Float)(255) ));
            										}
HXDLIN(  98)										Float g1;
HXDLIN(  98)										int this8 = ((this5 >> 8) & 255);
HXDLIN(  98)										if ((this8 == 0)) {
HXLINE(  98)											g1 = ((Float)0.);
            										}
            										else {
HXLINE(  98)											g1 = (( (Float)(this8) ) / ( (Float)(255) ));
            										}
HXDLIN(  98)										Float b1;
HXDLIN(  98)										int this9 = (this5 & 255);
HXDLIN(  98)										if ((this9 == 0)) {
HXLINE(  98)											b1 = ((Float)0.);
            										}
            										else {
HXLINE(  98)											b1 = (( (Float)(this9) ) / ( (Float)(255) ));
            										}
HXDLIN(  98)										Float a2;
HXDLIN(  98)										int this10 = ((color >> 24) & 255);
HXDLIN(  98)										if ((this10 == 0)) {
HXLINE(  98)											a2 = ((Float)0.);
            										}
            										else {
HXLINE(  98)											a2 = (( (Float)(this10) ) / ( (Float)(255) ));
            										}
HXDLIN(  98)										Float r2;
HXDLIN(  98)										int this11 = ((color >> 16) & 255);
HXDLIN(  98)										if ((this11 == 0)) {
HXLINE(  98)											r2 = ((Float)0.);
            										}
            										else {
HXLINE(  98)											r2 = (( (Float)(this11) ) / ( (Float)(255) ));
            										}
HXDLIN(  98)										Float g2;
HXDLIN(  98)										int this12 = ((color >> 8) & 255);
HXDLIN(  98)										if ((this12 == 0)) {
HXLINE(  98)											g2 = ((Float)0.);
            										}
            										else {
HXLINE(  98)											g2 = (( (Float)(this12) ) / ( (Float)(255) ));
            										}
HXDLIN(  98)										Float b2;
HXDLIN(  98)										int this13 = (color & 255);
HXDLIN(  98)										if ((this13 == 0)) {
HXLINE(  98)											b2 = ((Float)0.);
            										}
            										else {
HXLINE(  98)											b2 = (( (Float)(this13) ) / ( (Float)(255) ));
            										}
HXDLIN(  98)										Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  98)										int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  98)										int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  98)										int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  98)										int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  98)										int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  98)										{
HXLINE(  98)											::haxe::io::ArrayBufferViewImpl this14 = this1->image;
HXDLIN(  98)											int value;
HXDLIN(  98)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  98)												value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            											}
            											else {
HXLINE(  98)												value = blended;
            											}
HXDLIN(  98)											bool _hx_tmp;
HXDLIN(  98)											if ((location >= 0)) {
HXLINE(  98)												_hx_tmp = (location < (this14->byteLength >> 2));
            											}
            											else {
HXLINE(  98)												_hx_tmp = false;
            											}
HXDLIN(  98)											if (_hx_tmp) {
HXLINE(  98)												::haxe::io::Bytes _this = this14->bytes;
HXDLIN(  98)												int pos = ((location << 2) + this14->byteOffset);
HXDLIN(  98)												_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  98)												_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  98)												_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  98)												_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            											}
            										}
            									}
            									else {
HXLINE(  98)										::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  98)										int index;
HXDLIN(  98)										if (this1->useVirtualPos) {
HXLINE(  98)											index = ::Std_obj::_hx_int(((((( (Float)(y) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            										}
            										else {
HXLINE(  98)											index = ::Std_obj::_hx_int(( (Float)(((y * this1->width) + x)) ));
            										}
HXDLIN(  98)										int value;
HXDLIN(  98)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  98)											value = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            										}
            										else {
HXLINE(  98)											value = c1;
            										}
HXDLIN(  98)										bool _hx_tmp;
HXDLIN(  98)										if ((index >= 0)) {
HXLINE(  98)											_hx_tmp = (index < (this2->byteLength >> 2));
            										}
            										else {
HXLINE(  98)											_hx_tmp = false;
            										}
HXDLIN(  98)										if (_hx_tmp) {
HXLINE(  98)											::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  98)											int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  98)											_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  98)											_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  98)											_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  98)											_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            										}
            									}
            								}
HXLINE( 237)								foundY = true;
            							}
            							else {
HXLINE(  98)								if (foundY) {
HXLINE(  98)									goto _hx_goto_13;
            								}
            							}
            						}
            					}
            					_hx_goto_13:;
            				}
            			}
HXDLIN(  98)			Float bx2 = cx;
HXDLIN(  98)			Float by2 = cy;
HXDLIN(  98)			Float cx2 = dx;
HXDLIN(  98)			Float cy2 = dy;
HXDLIN(  98)			bool adjustWinding1 = (((((bx * by2) - (bx2 * by)) + ((bx2 * cy2) - (cx2 * by2))) + ((cx2 * by) - (bx * cy2))) > 0);
HXDLIN(  98)			if (!(adjustWinding1)) {
HXLINE(  98)				Float bx_ = bx2;
HXDLIN(  98)				Float by_ = by2;
HXLINE( 188)				bx2 = cx2;
HXLINE( 189)				by2 = cy2;
HXLINE( 190)				cx2 = bx_;
HXLINE( 191)				cy2 = by_;
            			}
HXLINE(  98)			bool hasUndo1 = false;
HXDLIN(  98)			Float s01 = ((by * cx2) - (bx * cy2));
HXDLIN(  98)			Float sx1 = (cy2 - by);
HXDLIN(  98)			Float sy1 = (bx - cx2);
HXDLIN(  98)			Float t01 = ((bx * by2) - (by * bx2));
HXDLIN(  98)			Float tx1 = (by - by2);
HXDLIN(  98)			Float ty1 = (bx2 - bx);
HXDLIN(  98)			Float A1 = ((((-(by2) * cx2) + (by * (-(bx2) + cx2))) + (bx * (by2 - cy2))) + (bx2 * cy2));
HXDLIN(  98)			::pixelimage::iter::IntIterStart xIter31;
HXDLIN(  98)			if ((bx > bx2)) {
HXLINE(  98)				if ((bx > cx2)) {
HXLINE(  98)					int min;
HXDLIN(  98)					if ((bx2 > cx2)) {
HXLINE(  98)						min = ::Math_obj::floor(cx2);
            					}
            					else {
HXLINE(  98)						min = ::Math_obj::floor(bx2);
            					}
HXDLIN(  98)					int ii_min = min;
HXDLIN(  98)					int ii_max = ::Math_obj::ceil(bx);
HXDLIN(  98)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  98)					xIter31 = this1;
            				}
            				else {
HXLINE(  98)					int ii_min = ::Math_obj::floor(bx2);
HXDLIN(  98)					int ii_max = ::Math_obj::ceil(cx2);
HXDLIN(  98)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  98)					xIter31 = this1;
            				}
            			}
            			else {
HXLINE(  98)				if ((bx2 > cx2)) {
HXLINE(  98)					int min;
HXDLIN(  98)					if ((bx > cx2)) {
HXLINE(  98)						min = ::Math_obj::floor(cx2);
            					}
            					else {
HXLINE(  98)						min = ::Math_obj::ceil(bx);
            					}
HXDLIN(  98)					int ii_min = min;
HXDLIN(  98)					int ii_max = ::Math_obj::ceil(bx2);
HXDLIN(  98)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  98)					xIter31 = this1;
            				}
            				else {
HXLINE(  98)					int ii_min = ::Math_obj::floor(bx);
HXDLIN(  98)					int ii_max = ::Math_obj::ceil(cx2);
HXDLIN(  98)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  98)					xIter31 = this1;
            				}
            			}
HXDLIN(  98)			::pixelimage::iter::IntIterStart yIter31;
HXDLIN(  98)			if ((by > by2)) {
HXLINE(  98)				if ((by > cy2)) {
HXLINE(  98)					int min;
HXDLIN(  98)					if ((by2 > cy2)) {
HXLINE(  98)						min = ::Math_obj::floor(cy2);
            					}
            					else {
HXLINE(  98)						min = ::Math_obj::floor(by2);
            					}
HXDLIN(  98)					int ii_min = min;
HXDLIN(  98)					int ii_max = ::Math_obj::ceil(by);
HXDLIN(  98)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  98)					yIter31 = this1;
            				}
            				else {
HXLINE(  98)					int ii_min = ::Math_obj::floor(by2);
HXDLIN(  98)					int ii_max = ::Math_obj::ceil(cy2);
HXDLIN(  98)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  98)					yIter31 = this1;
            				}
            			}
            			else {
HXLINE(  98)				if ((by2 > cy2)) {
HXLINE(  98)					int min;
HXDLIN(  98)					if ((by > cy2)) {
HXLINE(  98)						min = ::Math_obj::floor(cy2);
            					}
            					else {
HXLINE(  98)						min = ::Math_obj::ceil(by);
            					}
HXDLIN(  98)					int ii_min = min;
HXDLIN(  98)					int ii_max = ::Math_obj::ceil(by2);
HXDLIN(  98)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  98)					yIter31 = this1;
            				}
            				else {
HXLINE(  98)					int ii_min = ::Math_obj::floor(by);
HXDLIN(  98)					int ii_max = ::Math_obj::ceil(cy2);
HXDLIN(  98)					::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN(  98)					yIter31 = this1;
            				}
            			}
HXDLIN(  98)			::pixelimage::ImageStruct undoImage1 = null();
HXDLIN(  98)			if (hasUndo1) {
HXLINE(  98)				int w = ((xIter31->max - xIter31->start) + 1);
HXDLIN(  98)				int h = ((yIter31->max - yIter31->start) + 1);
HXDLIN(  98)				int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN(  98)				::haxe::io::ArrayBufferViewImpl this2 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN(  98)				::haxe::io::ArrayBufferViewImpl this3 = this2;
HXDLIN(  98)				::pixelimage::ImageStruct this4 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this3);
HXDLIN(  98)				undoImage1 = this4;
HXDLIN(  98)				{
HXLINE(  98)					int rectLeft = xIter31->start;
HXDLIN(  98)					int rectTop = yIter31->start;
HXDLIN(  98)					int rectRight = xIter31->max;
HXDLIN(  98)					bool forceClear = false;
HXDLIN(  98)					{
HXLINE(  98)						int _g = rectTop;
HXDLIN(  98)						int _g1 = yIter31->max;
HXDLIN(  98)						while((_g < _g1)){
HXLINE(  98)							_g = (_g + 1);
HXDLIN(  98)							int dy = (_g - 1);
HXDLIN(  98)							{
HXLINE(  98)								int _g1 = rectLeft;
HXDLIN(  98)								int _g2 = rectRight;
HXDLIN(  98)								while((_g1 < _g2)){
HXLINE(  98)									_g1 = (_g1 + 1);
HXDLIN(  98)									int dx = (_g1 - 1);
HXDLIN(  98)									::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  98)									int index;
HXDLIN(  98)									if (this1->useVirtualPos) {
HXLINE(  98)										index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            									}
            									else {
HXLINE(  98)										index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            									}
HXDLIN(  98)									::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  98)									int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  98)									int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  98)									int col;
HXDLIN(  98)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  98)										col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXLINE(  98)										col = c;
            									}
HXDLIN(  98)									bool _hx_tmp;
HXDLIN(  98)									if (this1->useMask) {
HXLINE(  98)										_hx_tmp = ::hx::IsNotNull( this1->mask );
            									}
            									else {
HXLINE(  98)										_hx_tmp = false;
            									}
HXDLIN(  98)									if (_hx_tmp) {
HXLINE(  98)										::pixelimage::ImageStruct this2 = this1->mask;
HXDLIN(  98)										::haxe::io::ArrayBufferViewImpl this3 = this2->image;
HXDLIN(  98)										int index;
HXDLIN(  98)										if (this2->useVirtualPos) {
HXLINE(  98)											index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this2->virtualY) * ( (Float)(this2->width) )) + dx) - this2->virtualX));
            										}
            										else {
HXLINE(  98)											index = ::Std_obj::_hx_int(( (Float)(((dy * this2->width) + dx)) ));
            										}
HXDLIN(  98)										::haxe::io::Bytes _this = this3->bytes;
HXDLIN(  98)										int pos = ((index << 2) + this3->byteOffset);
HXDLIN(  98)										int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  98)										int v;
HXDLIN(  98)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  98)											v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            										}
            										else {
HXLINE(  98)											v = c;
            										}
HXDLIN(  98)										int this4 = v;
HXDLIN(  98)										int maskPixel = this4;
HXDLIN(  98)										int this5 = col;
HXDLIN(  98)										int this6 = this5;
HXDLIN(  98)										if ((maskPixel == 0)) {
HXLINE(  98)											int this1 = this6;
HXDLIN(  98)											col = this1;
            										}
            										else {
HXLINE(  98)											Float m0;
HXDLIN(  98)											int this1 = ((maskPixel >> 24) & 255);
HXDLIN(  98)											if ((this1 == 0)) {
HXLINE(  98)												m0 = ((Float)0.);
            											}
            											else {
HXLINE(  98)												m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            											}
HXDLIN(  98)											Float m1;
HXDLIN(  98)											int this2 = ((maskPixel >> 16) & 255);
HXDLIN(  98)											if ((this2 == 0)) {
HXLINE(  98)												m1 = ((Float)0.);
            											}
            											else {
HXLINE(  98)												m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            											}
HXDLIN(  98)											Float m2;
HXDLIN(  98)											int this3 = ((maskPixel >> 8) & 255);
HXDLIN(  98)											if ((this3 == 0)) {
HXLINE(  98)												m2 = ((Float)0.);
            											}
            											else {
HXLINE(  98)												m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            											}
HXDLIN(  98)											Float m3;
HXDLIN(  98)											int this4 = (maskPixel & 255);
HXDLIN(  98)											if ((this4 == 0)) {
HXLINE(  98)												m3 = ((Float)0.);
            											}
            											else {
HXLINE(  98)												m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            											}
HXDLIN(  98)											int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this6 >> 24) & 255)) )));
HXDLIN(  98)											int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this6 >> 16) & 255)) )));
HXDLIN(  98)											int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this6 >> 8) & 255)) )));
HXDLIN(  98)											int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this6 & 255)) )));
HXDLIN(  98)											col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            										}
            									}
HXDLIN(  98)									if ((col != 0)) {
HXLINE(  98)										int x = (dx - rectLeft);
HXDLIN(  98)										int y = (dy - rectTop);
HXDLIN(  98)										int this1 = col;
HXDLIN(  98)										int c = this1;
HXDLIN(  98)										bool _hx_tmp;
HXDLIN(  98)										if ((((c >> 24) & 255) < 254)) {
HXLINE(  98)											_hx_tmp = undoImage1->transparent;
            										}
            										else {
HXLINE(  98)											_hx_tmp = false;
            										}
HXDLIN(  98)										if (_hx_tmp) {
HXLINE(  98)											int location;
HXDLIN(  98)											if (undoImage1->useVirtualPos) {
HXLINE(  98)												location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            											}
            											else {
HXLINE(  98)												location = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            											}
HXDLIN(  98)											::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN(  98)											::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  98)											int pos = ((location << 2) + this1->byteOffset);
HXDLIN(  98)											int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  98)											int this3 = this2;
HXDLIN(  98)											int this4;
HXDLIN(  98)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  98)												this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            											}
            											else {
HXLINE(  98)												this4 = this3;
            											}
HXDLIN(  98)											Float a1;
HXDLIN(  98)											int this5 = ((this4 >> 24) & 255);
HXDLIN(  98)											if ((this5 == 0)) {
HXLINE(  98)												a1 = ((Float)0.);
            											}
            											else {
HXLINE(  98)												a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            											}
HXDLIN(  98)											Float r1;
HXDLIN(  98)											int this6 = ((this4 >> 16) & 255);
HXDLIN(  98)											if ((this6 == 0)) {
HXLINE(  98)												r1 = ((Float)0.);
            											}
            											else {
HXLINE(  98)												r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            											}
HXDLIN(  98)											Float g1;
HXDLIN(  98)											int this7 = ((this4 >> 8) & 255);
HXDLIN(  98)											if ((this7 == 0)) {
HXLINE(  98)												g1 = ((Float)0.);
            											}
            											else {
HXLINE(  98)												g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            											}
HXDLIN(  98)											Float b1;
HXDLIN(  98)											int this8 = (this4 & 255);
HXDLIN(  98)											if ((this8 == 0)) {
HXLINE(  98)												b1 = ((Float)0.);
            											}
            											else {
HXLINE(  98)												b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            											}
HXDLIN(  98)											Float a2;
HXDLIN(  98)											int this9 = ((col >> 24) & 255);
HXDLIN(  98)											if ((this9 == 0)) {
HXLINE(  98)												a2 = ((Float)0.);
            											}
            											else {
HXLINE(  98)												a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            											}
HXDLIN(  98)											Float r2;
HXDLIN(  98)											int this10 = ((col >> 16) & 255);
HXDLIN(  98)											if ((this10 == 0)) {
HXLINE(  98)												r2 = ((Float)0.);
            											}
            											else {
HXLINE(  98)												r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            											}
HXDLIN(  98)											Float g2;
HXDLIN(  98)											int this11 = ((col >> 8) & 255);
HXDLIN(  98)											if ((this11 == 0)) {
HXLINE(  98)												g2 = ((Float)0.);
            											}
            											else {
HXLINE(  98)												g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            											}
HXDLIN(  98)											Float b2;
HXDLIN(  98)											int this12 = (col & 255);
HXDLIN(  98)											if ((this12 == 0)) {
HXLINE(  98)												b2 = ((Float)0.);
            											}
            											else {
HXLINE(  98)												b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            											}
HXDLIN(  98)											Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  98)											int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  98)											int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  98)											int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  98)											int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  98)											int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  98)											{
HXLINE(  98)												::haxe::io::ArrayBufferViewImpl this13 = undoImage1->image;
HXDLIN(  98)												int value;
HXDLIN(  98)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  98)													value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            												}
            												else {
HXLINE(  98)													value = blended;
            												}
HXDLIN(  98)												bool _hx_tmp;
HXDLIN(  98)												if ((location >= 0)) {
HXLINE(  98)													_hx_tmp = (location < (this13->byteLength >> 2));
            												}
            												else {
HXLINE(  98)													_hx_tmp = false;
            												}
HXDLIN(  98)												if (_hx_tmp) {
HXLINE(  98)													::haxe::io::Bytes _this = this13->bytes;
HXDLIN(  98)													int pos = ((location << 2) + this13->byteOffset);
HXDLIN(  98)													_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  98)													_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  98)													_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  98)													_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            												}
            											}
            										}
            										else {
HXLINE(  98)											::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN(  98)											int index;
HXDLIN(  98)											if (undoImage1->useVirtualPos) {
HXLINE(  98)												index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            											}
            											else {
HXLINE(  98)												index = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            											}
HXDLIN(  98)											int value;
HXDLIN(  98)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  98)												value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            											}
            											else {
HXLINE(  98)												value = c;
            											}
HXDLIN(  98)											bool _hx_tmp;
HXDLIN(  98)											if ((index >= 0)) {
HXLINE(  98)												_hx_tmp = (index < (this1->byteLength >> 2));
            											}
            											else {
HXLINE(  98)												_hx_tmp = false;
            											}
HXDLIN(  98)											if (_hx_tmp) {
HXLINE(  98)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  98)												int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  98)												_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  98)												_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  98)												_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  98)												_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            											}
            										}
            									}
            									else {
HXLINE(  98)										if (forceClear) {
HXLINE(  98)											::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN(  98)											int x = (dx - rectLeft);
HXDLIN(  98)											int y = (dy - rectTop);
HXDLIN(  98)											int index;
HXDLIN(  98)											if (undoImage1->useVirtualPos) {
HXLINE(  98)												index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            											}
            											else {
HXLINE(  98)												index = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            											}
HXDLIN(  98)											bool _hx_tmp;
HXDLIN(  98)											if ((index >= 0)) {
HXLINE(  98)												_hx_tmp = (index < (this1->byteLength >> 2));
            											}
            											else {
HXLINE(  98)												_hx_tmp = false;
            											}
HXDLIN(  98)											if (_hx_tmp) {
HXLINE(  98)												::haxe::io::Bytes _this = this1->bytes;
HXDLIN(  98)												int pos = ((index << 2) + this1->byteOffset);
HXDLIN(  98)												_this->b[pos] = ( (unsigned char)(0) );
HXDLIN(  98)												_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN(  98)												_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN(  98)												_this->b[(pos + 3)] = ( (unsigned char)(0) );
            											}
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
HXDLIN(  98)			bool foundY1 = false;
HXDLIN(  98)			Float s1 = ((Float)0.);
HXDLIN(  98)			Float t1 = ((Float)0.);
HXDLIN(  98)			Float sxx1 = ((Float)0.);
HXDLIN(  98)			Float txx1 = ((Float)0.);
HXDLIN(  98)			int _g_min1 = xIter31->start;
HXDLIN(  98)			int _g_max1 = xIter31->max;
HXDLIN(  98)			while((_g_min1 < _g_max1)){
HXLINE(  98)				_g_min1 = (_g_min1 + 1);
HXDLIN(  98)				int x = (_g_min1 - 1);
HXLINE( 223)				sxx1 = (sx1 * ( (Float)(x) ));
HXLINE( 224)				txx1 = (tx1 * ( (Float)(x) ));
HXLINE( 225)				foundY1 = false;
HXLINE(  98)				{
HXLINE(  98)					int _g_min = yIter31->start;
HXDLIN(  98)					int _g_max = yIter31->max;
HXDLIN(  98)					while((_g_min < _g_max)){
HXLINE(  98)						_g_min = (_g_min + 1);
HXDLIN(  98)						int y = (_g_min - 1);
HXLINE( 227)						s1 = ((s01 + sxx1) + (sy1 * ( (Float)(y) )));
HXLINE( 228)						t1 = ((t01 + txx1) + (ty1 * ( (Float)(y) )));
HXLINE(  98)						bool _hx_tmp;
HXDLIN(  98)						if (!((s1 <= 0))) {
HXLINE(  98)							_hx_tmp = (t1 <= 0);
            						}
            						else {
HXLINE(  98)							_hx_tmp = true;
            						}
HXDLIN(  98)						if (_hx_tmp) {
HXLINE(  98)							if (foundY1) {
HXLINE(  98)								goto _hx_goto_17;
            							}
            						}
            						else {
HXLINE(  98)							if (((s1 + t1) < A1)) {
HXLINE(  98)								int x1 = ::hx::Mod(x,tileImage->width);
HXDLIN(  98)								int y1 = ::hx::Mod(y,tileImage->height);
HXDLIN(  98)								::haxe::io::ArrayBufferViewImpl this2 = tileImage->image;
HXDLIN(  98)								int index;
HXDLIN(  98)								if (tileImage->useVirtualPos) {
HXLINE(  98)									index = ::Std_obj::_hx_int(((((( (Float)(y1) ) - tileImage->virtualY) * ( (Float)(tileImage->width) )) + x1) - tileImage->virtualX));
            								}
            								else {
HXLINE(  98)									index = ::Std_obj::_hx_int(( (Float)(((y1 * tileImage->width) + x1)) ));
            								}
HXDLIN(  98)								::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  98)								int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  98)								int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  98)								int color;
HXDLIN(  98)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  98)									color = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            								}
            								else {
HXLINE(  98)									color = c;
            								}
HXDLIN(  98)								{
HXLINE(  98)									int this3 = color;
HXDLIN(  98)									int c1 = this3;
HXDLIN(  98)									bool _hx_tmp;
HXDLIN(  98)									if ((((c1 >> 24) & 255) < 254)) {
HXLINE(  98)										_hx_tmp = this1->transparent;
            									}
            									else {
HXLINE(  98)										_hx_tmp = false;
            									}
HXDLIN(  98)									if (_hx_tmp) {
HXLINE(  98)										int location;
HXDLIN(  98)										if (this1->useVirtualPos) {
HXLINE(  98)											location = ::Std_obj::_hx_int(((((( (Float)(y) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            										}
            										else {
HXLINE(  98)											location = ::Std_obj::_hx_int(( (Float)(((y * this1->width) + x)) ));
            										}
HXDLIN(  98)										::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  98)										::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  98)										int pos = ((location << 2) + this2->byteOffset);
HXDLIN(  98)										int this3 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN(  98)										int this4 = this3;
HXDLIN(  98)										int this5;
HXDLIN(  98)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  98)											this5 = ((((((this4 >> 24) & 255) << 24) | ((this4 & 255) << 16)) | (((this4 >> 8) & 255) << 8)) | ((this4 >> 16) & 255));
            										}
            										else {
HXLINE(  98)											this5 = this4;
            										}
HXDLIN(  98)										Float a1;
HXDLIN(  98)										int this6 = ((this5 >> 24) & 255);
HXDLIN(  98)										if ((this6 == 0)) {
HXLINE(  98)											a1 = ((Float)0.);
            										}
            										else {
HXLINE(  98)											a1 = (( (Float)(this6) ) / ( (Float)(255) ));
            										}
HXDLIN(  98)										Float r1;
HXDLIN(  98)										int this7 = ((this5 >> 16) & 255);
HXDLIN(  98)										if ((this7 == 0)) {
HXLINE(  98)											r1 = ((Float)0.);
            										}
            										else {
HXLINE(  98)											r1 = (( (Float)(this7) ) / ( (Float)(255) ));
            										}
HXDLIN(  98)										Float g1;
HXDLIN(  98)										int this8 = ((this5 >> 8) & 255);
HXDLIN(  98)										if ((this8 == 0)) {
HXLINE(  98)											g1 = ((Float)0.);
            										}
            										else {
HXLINE(  98)											g1 = (( (Float)(this8) ) / ( (Float)(255) ));
            										}
HXDLIN(  98)										Float b1;
HXDLIN(  98)										int this9 = (this5 & 255);
HXDLIN(  98)										if ((this9 == 0)) {
HXLINE(  98)											b1 = ((Float)0.);
            										}
            										else {
HXLINE(  98)											b1 = (( (Float)(this9) ) / ( (Float)(255) ));
            										}
HXDLIN(  98)										Float a2;
HXDLIN(  98)										int this10 = ((color >> 24) & 255);
HXDLIN(  98)										if ((this10 == 0)) {
HXLINE(  98)											a2 = ((Float)0.);
            										}
            										else {
HXLINE(  98)											a2 = (( (Float)(this10) ) / ( (Float)(255) ));
            										}
HXDLIN(  98)										Float r2;
HXDLIN(  98)										int this11 = ((color >> 16) & 255);
HXDLIN(  98)										if ((this11 == 0)) {
HXLINE(  98)											r2 = ((Float)0.);
            										}
            										else {
HXLINE(  98)											r2 = (( (Float)(this11) ) / ( (Float)(255) ));
            										}
HXDLIN(  98)										Float g2;
HXDLIN(  98)										int this12 = ((color >> 8) & 255);
HXDLIN(  98)										if ((this12 == 0)) {
HXLINE(  98)											g2 = ((Float)0.);
            										}
            										else {
HXLINE(  98)											g2 = (( (Float)(this12) ) / ( (Float)(255) ));
            										}
HXDLIN(  98)										Float b2;
HXDLIN(  98)										int this13 = (color & 255);
HXDLIN(  98)										if ((this13 == 0)) {
HXLINE(  98)											b2 = ((Float)0.);
            										}
            										else {
HXLINE(  98)											b2 = (( (Float)(this13) ) / ( (Float)(255) ));
            										}
HXDLIN(  98)										Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN(  98)										int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN(  98)										int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN(  98)										int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN(  98)										int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN(  98)										int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN(  98)										{
HXLINE(  98)											::haxe::io::ArrayBufferViewImpl this14 = this1->image;
HXDLIN(  98)											int value;
HXDLIN(  98)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  98)												value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            											}
            											else {
HXLINE(  98)												value = blended;
            											}
HXDLIN(  98)											bool _hx_tmp;
HXDLIN(  98)											if ((location >= 0)) {
HXLINE(  98)												_hx_tmp = (location < (this14->byteLength >> 2));
            											}
            											else {
HXLINE(  98)												_hx_tmp = false;
            											}
HXDLIN(  98)											if (_hx_tmp) {
HXLINE(  98)												::haxe::io::Bytes _this = this14->bytes;
HXDLIN(  98)												int pos = ((location << 2) + this14->byteOffset);
HXDLIN(  98)												_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  98)												_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  98)												_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  98)												_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            											}
            										}
            									}
            									else {
HXLINE(  98)										::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN(  98)										int index;
HXDLIN(  98)										if (this1->useVirtualPos) {
HXLINE(  98)											index = ::Std_obj::_hx_int(((((( (Float)(y) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            										}
            										else {
HXLINE(  98)											index = ::Std_obj::_hx_int(( (Float)(((y * this1->width) + x)) ));
            										}
HXDLIN(  98)										int value;
HXDLIN(  98)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE(  98)											value = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            										}
            										else {
HXLINE(  98)											value = c1;
            										}
HXDLIN(  98)										bool _hx_tmp;
HXDLIN(  98)										if ((index >= 0)) {
HXLINE(  98)											_hx_tmp = (index < (this2->byteLength >> 2));
            										}
            										else {
HXLINE(  98)											_hx_tmp = false;
            										}
HXDLIN(  98)										if (_hx_tmp) {
HXLINE(  98)											::haxe::io::Bytes _this = this2->bytes;
HXDLIN(  98)											int pos = ((index << 2) + this2->byteOffset);
HXDLIN(  98)											_this->b[pos] = ( (unsigned char)(value) );
HXDLIN(  98)											_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN(  98)											_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN(  98)											_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            										}
            									}
            								}
HXLINE( 237)								foundY1 = true;
            							}
            							else {
HXLINE(  98)								if (foundY1) {
HXLINE(  98)									goto _hx_goto_17;
            								}
            							}
            						}
            					}
            					_hx_goto_17:;
            				}
            			}
HXDLIN(  98)			::pixelimage::algo::HitQuad v = ::pixelimage::algo::HitQuad_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,dx,dy,true);
HXDLIN(  98)			this->info = v;
HXLINE( 101)			bool _hx_tmp;
HXDLIN( 101)			if (::hx::IsNotNull( this->info )) {
HXLINE( 101)				_hx_tmp = ::hx::IsNotNull( this->oldInfo );
            			}
            			else {
HXLINE( 101)				_hx_tmp = false;
            			}
HXDLIN( 101)			if (_hx_tmp) {
HXLINE( 102)				::pixelimage::ImageStruct this1 = this->temp;
HXDLIN( 102)				Float ax = ((( (Float)(this->oldInfo->__Field(HX_("bx",d6,55,00,00),::hx::paccDynamic)) ) * this->scaleX) + this->translateX);
HXDLIN( 102)				Float ay = ((( (Float)(this->oldInfo->__Field(HX_("by",d7,55,00,00),::hx::paccDynamic)) ) * this->scaleY) + this->translateY);
HXDLIN( 102)				Float bx = ((( (Float)(this->info->__Field(HX_("ax",f7,54,00,00),::hx::paccDynamic)) ) * this->scaleX) + this->translateX);
HXDLIN( 102)				Float by = ((( (Float)(this->info->__Field(HX_("ay",f8,54,00,00),::hx::paccDynamic)) ) * this->scaleY) + this->translateY);
HXDLIN( 102)				Float cx = ((( (Float)(this->info->__Field(HX_("dx",94,57,00,00),::hx::paccDynamic)) ) * this->scaleX) + this->translateX);
HXDLIN( 102)				Float cy = ((( (Float)(this->info->__Field(HX_("dy",95,57,00,00),::hx::paccDynamic)) ) * this->scaleY) + this->translateY);
HXDLIN( 102)				Float dx = ((( (Float)(this->oldInfo->__Field(HX_("cx",b5,56,00,00),::hx::paccDynamic)) ) * this->scaleX) + this->translateX);
HXDLIN( 102)				Float dy = ((( (Float)(this->oldInfo->__Field(HX_("cy",b6,56,00,00),::hx::paccDynamic)) ) * this->scaleY) + this->translateY);
HXDLIN( 102)				::pixelimage::ImageStruct tileImage = this->tileImageStroke;
HXDLIN( 102)				{
HXLINE( 102)					{
HXLINE( 102)						Float bx1 = bx;
HXDLIN( 102)						Float by1 = by;
HXDLIN( 102)						Float cx1 = dx;
HXDLIN( 102)						Float cy1 = dy;
HXDLIN( 102)						bool adjustWinding = (((((ax * by1) - (bx1 * ay)) + ((bx1 * cy1) - (cx1 * by1))) + ((cx1 * ay) - (ax * cy1))) > 0);
HXDLIN( 102)						if (!(adjustWinding)) {
HXLINE( 102)							Float bx_ = bx1;
HXDLIN( 102)							Float by_ = by1;
HXLINE( 188)							bx1 = cx1;
HXLINE( 189)							by1 = cy1;
HXLINE( 190)							cx1 = bx_;
HXLINE( 191)							cy1 = by_;
            						}
HXLINE( 102)						{
HXLINE( 102)							bool hasUndo = false;
HXDLIN( 102)							Float s0 = ((ay * cx1) - (ax * cy1));
HXDLIN( 102)							Float sx = (cy1 - ay);
HXDLIN( 102)							Float sy = (ax - cx1);
HXDLIN( 102)							Float t0 = ((ax * by1) - (ay * bx1));
HXDLIN( 102)							Float tx = (ay - by1);
HXDLIN( 102)							Float ty = (bx1 - ax);
HXDLIN( 102)							Float A = ((((-(by1) * cx1) + (ay * (-(bx1) + cx1))) + (ax * (by1 - cy1))) + (bx1 * cy1));
HXDLIN( 102)							::pixelimage::iter::IntIterStart xIter3;
HXDLIN( 102)							if ((ax > bx1)) {
HXLINE( 102)								if ((ax > cx1)) {
HXLINE( 102)									int min;
HXDLIN( 102)									if ((bx1 > cx1)) {
HXLINE( 102)										min = ::Math_obj::floor(cx1);
            									}
            									else {
HXLINE( 102)										min = ::Math_obj::floor(bx1);
            									}
HXDLIN( 102)									int ii_min = min;
HXDLIN( 102)									int ii_max = ::Math_obj::ceil(ax);
HXDLIN( 102)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 102)									xIter3 = this1;
            								}
            								else {
HXLINE( 102)									int ii_min = ::Math_obj::floor(bx1);
HXDLIN( 102)									int ii_max = ::Math_obj::ceil(cx1);
HXDLIN( 102)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 102)									xIter3 = this1;
            								}
            							}
            							else {
HXLINE( 102)								if ((bx1 > cx1)) {
HXLINE( 102)									int min;
HXDLIN( 102)									if ((ax > cx1)) {
HXLINE( 102)										min = ::Math_obj::floor(cx1);
            									}
            									else {
HXLINE( 102)										min = ::Math_obj::ceil(ax);
            									}
HXDLIN( 102)									int ii_min = min;
HXDLIN( 102)									int ii_max = ::Math_obj::ceil(bx1);
HXDLIN( 102)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 102)									xIter3 = this1;
            								}
            								else {
HXLINE( 102)									int ii_min = ::Math_obj::floor(ax);
HXDLIN( 102)									int ii_max = ::Math_obj::ceil(cx1);
HXDLIN( 102)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 102)									xIter3 = this1;
            								}
            							}
HXDLIN( 102)							::pixelimage::iter::IntIterStart yIter3;
HXDLIN( 102)							if ((ay > by1)) {
HXLINE( 102)								if ((ay > cy1)) {
HXLINE( 102)									int min;
HXDLIN( 102)									if ((by1 > cy1)) {
HXLINE( 102)										min = ::Math_obj::floor(cy1);
            									}
            									else {
HXLINE( 102)										min = ::Math_obj::floor(by1);
            									}
HXDLIN( 102)									int ii_min = min;
HXDLIN( 102)									int ii_max = ::Math_obj::ceil(ay);
HXDLIN( 102)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 102)									yIter3 = this1;
            								}
            								else {
HXLINE( 102)									int ii_min = ::Math_obj::floor(by1);
HXDLIN( 102)									int ii_max = ::Math_obj::ceil(cy1);
HXDLIN( 102)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 102)									yIter3 = this1;
            								}
            							}
            							else {
HXLINE( 102)								if ((by1 > cy1)) {
HXLINE( 102)									int min;
HXDLIN( 102)									if ((ay > cy1)) {
HXLINE( 102)										min = ::Math_obj::floor(cy1);
            									}
            									else {
HXLINE( 102)										min = ::Math_obj::ceil(ay);
            									}
HXDLIN( 102)									int ii_min = min;
HXDLIN( 102)									int ii_max = ::Math_obj::ceil(by1);
HXDLIN( 102)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 102)									yIter3 = this1;
            								}
            								else {
HXLINE( 102)									int ii_min = ::Math_obj::floor(ay);
HXDLIN( 102)									int ii_max = ::Math_obj::ceil(cy1);
HXDLIN( 102)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 102)									yIter3 = this1;
            								}
            							}
HXDLIN( 102)							::pixelimage::ImageStruct undoImage = null();
HXDLIN( 102)							if (hasUndo) {
HXLINE( 102)								int w = ((xIter3->max - xIter3->start) + 1);
HXDLIN( 102)								int h = ((yIter3->max - yIter3->start) + 1);
HXDLIN( 102)								int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN( 102)								::haxe::io::ArrayBufferViewImpl this2 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 102)								::haxe::io::ArrayBufferViewImpl this3 = this2;
HXDLIN( 102)								::pixelimage::ImageStruct this4 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this3);
HXDLIN( 102)								undoImage = this4;
HXDLIN( 102)								{
HXLINE( 102)									int rectLeft = xIter3->start;
HXDLIN( 102)									int rectTop = yIter3->start;
HXDLIN( 102)									int rectRight = xIter3->max;
HXDLIN( 102)									bool forceClear = false;
HXDLIN( 102)									{
HXLINE( 102)										int _g = rectTop;
HXDLIN( 102)										int _g1 = yIter3->max;
HXDLIN( 102)										while((_g < _g1)){
HXLINE( 102)											_g = (_g + 1);
HXDLIN( 102)											int dy = (_g - 1);
HXDLIN( 102)											{
HXLINE( 102)												int _g1 = rectLeft;
HXDLIN( 102)												int _g2 = rectRight;
HXDLIN( 102)												while((_g1 < _g2)){
HXLINE( 102)													_g1 = (_g1 + 1);
HXDLIN( 102)													int dx = (_g1 - 1);
HXDLIN( 102)													::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 102)													int index;
HXDLIN( 102)													if (this1->useVirtualPos) {
HXLINE( 102)														index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            													}
            													else {
HXLINE( 102)														index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            													}
HXDLIN( 102)													::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 102)													int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 102)													int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 102)													int col;
HXDLIN( 102)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 102)														col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE( 102)														col = c;
            													}
HXDLIN( 102)													bool _hx_tmp;
HXDLIN( 102)													if (this1->useMask) {
HXLINE( 102)														_hx_tmp = ::hx::IsNotNull( this1->mask );
            													}
            													else {
HXLINE( 102)														_hx_tmp = false;
            													}
HXDLIN( 102)													if (_hx_tmp) {
HXLINE( 102)														::pixelimage::ImageStruct this2 = this1->mask;
HXDLIN( 102)														::haxe::io::ArrayBufferViewImpl this3 = this2->image;
HXDLIN( 102)														int index;
HXDLIN( 102)														if (this2->useVirtualPos) {
HXLINE( 102)															index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this2->virtualY) * ( (Float)(this2->width) )) + dx) - this2->virtualX));
            														}
            														else {
HXLINE( 102)															index = ::Std_obj::_hx_int(( (Float)(((dy * this2->width) + dx)) ));
            														}
HXDLIN( 102)														::haxe::io::Bytes _this = this3->bytes;
HXDLIN( 102)														int pos = ((index << 2) + this3->byteOffset);
HXDLIN( 102)														int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 102)														int v;
HXDLIN( 102)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 102)															v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            														}
            														else {
HXLINE( 102)															v = c;
            														}
HXDLIN( 102)														int this4 = v;
HXDLIN( 102)														int maskPixel = this4;
HXDLIN( 102)														int this5 = col;
HXDLIN( 102)														int this6 = this5;
HXDLIN( 102)														if ((maskPixel == 0)) {
HXLINE( 102)															int this1 = this6;
HXDLIN( 102)															col = this1;
            														}
            														else {
HXLINE( 102)															Float m0;
HXDLIN( 102)															int this1 = ((maskPixel >> 24) & 255);
HXDLIN( 102)															if ((this1 == 0)) {
HXLINE( 102)																m0 = ((Float)0.);
            															}
            															else {
HXLINE( 102)																m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            															}
HXDLIN( 102)															Float m1;
HXDLIN( 102)															int this2 = ((maskPixel >> 16) & 255);
HXDLIN( 102)															if ((this2 == 0)) {
HXLINE( 102)																m1 = ((Float)0.);
            															}
            															else {
HXLINE( 102)																m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            															}
HXDLIN( 102)															Float m2;
HXDLIN( 102)															int this3 = ((maskPixel >> 8) & 255);
HXDLIN( 102)															if ((this3 == 0)) {
HXLINE( 102)																m2 = ((Float)0.);
            															}
            															else {
HXLINE( 102)																m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            															}
HXDLIN( 102)															Float m3;
HXDLIN( 102)															int this4 = (maskPixel & 255);
HXDLIN( 102)															if ((this4 == 0)) {
HXLINE( 102)																m3 = ((Float)0.);
            															}
            															else {
HXLINE( 102)																m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            															}
HXDLIN( 102)															int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this6 >> 24) & 255)) )));
HXDLIN( 102)															int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this6 >> 16) & 255)) )));
HXDLIN( 102)															int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this6 >> 8) & 255)) )));
HXDLIN( 102)															int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this6 & 255)) )));
HXDLIN( 102)															col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            														}
            													}
HXDLIN( 102)													if ((col != 0)) {
HXLINE( 102)														int x = (dx - rectLeft);
HXDLIN( 102)														int y = (dy - rectTop);
HXDLIN( 102)														int this1 = col;
HXDLIN( 102)														int c = this1;
HXDLIN( 102)														bool _hx_tmp;
HXDLIN( 102)														if ((((c >> 24) & 255) < 254)) {
HXLINE( 102)															_hx_tmp = undoImage->transparent;
            														}
            														else {
HXLINE( 102)															_hx_tmp = false;
            														}
HXDLIN( 102)														if (_hx_tmp) {
HXLINE( 102)															int location;
HXDLIN( 102)															if (undoImage->useVirtualPos) {
HXLINE( 102)																location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            															}
            															else {
HXLINE( 102)																location = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            															}
HXDLIN( 102)															::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN( 102)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 102)															int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 102)															int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 102)															int this3 = this2;
HXDLIN( 102)															int this4;
HXDLIN( 102)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 102)																this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            															}
            															else {
HXLINE( 102)																this4 = this3;
            															}
HXDLIN( 102)															Float a1;
HXDLIN( 102)															int this5 = ((this4 >> 24) & 255);
HXDLIN( 102)															if ((this5 == 0)) {
HXLINE( 102)																a1 = ((Float)0.);
            															}
            															else {
HXLINE( 102)																a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            															}
HXDLIN( 102)															Float r1;
HXDLIN( 102)															int this6 = ((this4 >> 16) & 255);
HXDLIN( 102)															if ((this6 == 0)) {
HXLINE( 102)																r1 = ((Float)0.);
            															}
            															else {
HXLINE( 102)																r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            															}
HXDLIN( 102)															Float g1;
HXDLIN( 102)															int this7 = ((this4 >> 8) & 255);
HXDLIN( 102)															if ((this7 == 0)) {
HXLINE( 102)																g1 = ((Float)0.);
            															}
            															else {
HXLINE( 102)																g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            															}
HXDLIN( 102)															Float b1;
HXDLIN( 102)															int this8 = (this4 & 255);
HXDLIN( 102)															if ((this8 == 0)) {
HXLINE( 102)																b1 = ((Float)0.);
            															}
            															else {
HXLINE( 102)																b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            															}
HXDLIN( 102)															Float a2;
HXDLIN( 102)															int this9 = ((col >> 24) & 255);
HXDLIN( 102)															if ((this9 == 0)) {
HXLINE( 102)																a2 = ((Float)0.);
            															}
            															else {
HXLINE( 102)																a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            															}
HXDLIN( 102)															Float r2;
HXDLIN( 102)															int this10 = ((col >> 16) & 255);
HXDLIN( 102)															if ((this10 == 0)) {
HXLINE( 102)																r2 = ((Float)0.);
            															}
            															else {
HXLINE( 102)																r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            															}
HXDLIN( 102)															Float g2;
HXDLIN( 102)															int this11 = ((col >> 8) & 255);
HXDLIN( 102)															if ((this11 == 0)) {
HXLINE( 102)																g2 = ((Float)0.);
            															}
            															else {
HXLINE( 102)																g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            															}
HXDLIN( 102)															Float b2;
HXDLIN( 102)															int this12 = (col & 255);
HXDLIN( 102)															if ((this12 == 0)) {
HXLINE( 102)																b2 = ((Float)0.);
            															}
            															else {
HXLINE( 102)																b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            															}
HXDLIN( 102)															Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 102)															int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 102)															int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 102)															int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 102)															int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 102)															int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 102)															{
HXLINE( 102)																::haxe::io::ArrayBufferViewImpl this13 = undoImage->image;
HXDLIN( 102)																int value;
HXDLIN( 102)																if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 102)																	value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																}
            																else {
HXLINE( 102)																	value = blended;
            																}
HXDLIN( 102)																bool _hx_tmp;
HXDLIN( 102)																if ((location >= 0)) {
HXLINE( 102)																	_hx_tmp = (location < (this13->byteLength >> 2));
            																}
            																else {
HXLINE( 102)																	_hx_tmp = false;
            																}
HXDLIN( 102)																if (_hx_tmp) {
HXLINE( 102)																	::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 102)																	int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 102)																	_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 102)																	_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 102)																	_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 102)																	_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																}
            															}
            														}
            														else {
HXLINE( 102)															::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN( 102)															int index;
HXDLIN( 102)															if (undoImage->useVirtualPos) {
HXLINE( 102)																index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            															}
            															else {
HXLINE( 102)																index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            															}
HXDLIN( 102)															int value;
HXDLIN( 102)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 102)																value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            															}
            															else {
HXLINE( 102)																value = c;
            															}
HXDLIN( 102)															bool _hx_tmp;
HXDLIN( 102)															if ((index >= 0)) {
HXLINE( 102)																_hx_tmp = (index < (this1->byteLength >> 2));
            															}
            															else {
HXLINE( 102)																_hx_tmp = false;
            															}
HXDLIN( 102)															if (_hx_tmp) {
HXLINE( 102)																::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 102)																int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 102)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 102)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 102)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 102)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
            													else {
HXLINE( 102)														if (forceClear) {
HXLINE( 102)															::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN( 102)															int x = (dx - rectLeft);
HXDLIN( 102)															int y = (dy - rectTop);
HXDLIN( 102)															int index;
HXDLIN( 102)															if (undoImage->useVirtualPos) {
HXLINE( 102)																index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            															}
            															else {
HXLINE( 102)																index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            															}
HXDLIN( 102)															bool _hx_tmp;
HXDLIN( 102)															if ((index >= 0)) {
HXLINE( 102)																_hx_tmp = (index < (this1->byteLength >> 2));
            															}
            															else {
HXLINE( 102)																_hx_tmp = false;
            															}
HXDLIN( 102)															if (_hx_tmp) {
HXLINE( 102)																::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 102)																int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 102)																_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 102)																_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 102)																_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 102)																_this->b[(pos + 3)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 102)							bool foundY = false;
HXDLIN( 102)							Float s = ((Float)0.);
HXDLIN( 102)							Float t = ((Float)0.);
HXDLIN( 102)							Float sxx = ((Float)0.);
HXDLIN( 102)							Float txx = ((Float)0.);
HXDLIN( 102)							{
HXLINE( 102)								int _g_min = xIter3->start;
HXDLIN( 102)								int _g_max = xIter3->max;
HXDLIN( 102)								while((_g_min < _g_max)){
HXLINE( 102)									_g_min = (_g_min + 1);
HXDLIN( 102)									int x = (_g_min - 1);
HXLINE( 223)									sxx = (sx * ( (Float)(x) ));
HXLINE( 224)									txx = (tx * ( (Float)(x) ));
HXLINE( 225)									foundY = false;
HXLINE( 102)									{
HXLINE( 102)										int _g_min1 = yIter3->start;
HXDLIN( 102)										int _g_max = yIter3->max;
HXDLIN( 102)										while((_g_min1 < _g_max)){
HXLINE( 102)											_g_min1 = (_g_min1 + 1);
HXDLIN( 102)											int y = (_g_min1 - 1);
HXLINE( 227)											s = ((s0 + sxx) + (sy * ( (Float)(y) )));
HXLINE( 228)											t = ((t0 + txx) + (ty * ( (Float)(y) )));
HXLINE( 102)											bool _hx_tmp;
HXDLIN( 102)											if (!((s <= 0))) {
HXLINE( 102)												_hx_tmp = (t <= 0);
            											}
            											else {
HXLINE( 102)												_hx_tmp = true;
            											}
HXDLIN( 102)											if (_hx_tmp) {
HXLINE( 102)												if (foundY) {
HXLINE( 102)													goto _hx_goto_21;
            												}
            											}
            											else {
HXLINE( 102)												if (((s + t) < A)) {
HXLINE( 102)													int x1 = ::hx::Mod(x,tileImage->width);
HXDLIN( 102)													int y1 = ::hx::Mod(y,tileImage->height);
HXDLIN( 102)													::haxe::io::ArrayBufferViewImpl this2 = tileImage->image;
HXDLIN( 102)													int index;
HXDLIN( 102)													if (tileImage->useVirtualPos) {
HXLINE( 102)														index = ::Std_obj::_hx_int(((((( (Float)(y1) ) - tileImage->virtualY) * ( (Float)(tileImage->width) )) + x1) - tileImage->virtualX));
            													}
            													else {
HXLINE( 102)														index = ::Std_obj::_hx_int(( (Float)(((y1 * tileImage->width) + x1)) ));
            													}
HXDLIN( 102)													::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 102)													int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 102)													int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 102)													int color;
HXDLIN( 102)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 102)														color = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE( 102)														color = c;
            													}
HXDLIN( 102)													{
HXLINE( 102)														int this3 = color;
HXDLIN( 102)														int c1 = this3;
HXDLIN( 102)														bool _hx_tmp;
HXDLIN( 102)														if ((((c1 >> 24) & 255) < 254)) {
HXLINE( 102)															_hx_tmp = this1->transparent;
            														}
            														else {
HXLINE( 102)															_hx_tmp = false;
            														}
HXDLIN( 102)														if (_hx_tmp) {
HXLINE( 102)															int location;
HXDLIN( 102)															if (this1->useVirtualPos) {
HXLINE( 102)																location = ::Std_obj::_hx_int(((((( (Float)(y) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            															}
            															else {
HXLINE( 102)																location = ::Std_obj::_hx_int(( (Float)(((y * this1->width) + x)) ));
            															}
HXDLIN( 102)															::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 102)															::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 102)															int pos = ((location << 2) + this2->byteOffset);
HXDLIN( 102)															int this3 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 102)															int this4 = this3;
HXDLIN( 102)															int this5;
HXDLIN( 102)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 102)																this5 = ((((((this4 >> 24) & 255) << 24) | ((this4 & 255) << 16)) | (((this4 >> 8) & 255) << 8)) | ((this4 >> 16) & 255));
            															}
            															else {
HXLINE( 102)																this5 = this4;
            															}
HXDLIN( 102)															Float a1;
HXDLIN( 102)															int this6 = ((this5 >> 24) & 255);
HXDLIN( 102)															if ((this6 == 0)) {
HXLINE( 102)																a1 = ((Float)0.);
            															}
            															else {
HXLINE( 102)																a1 = (( (Float)(this6) ) / ( (Float)(255) ));
            															}
HXDLIN( 102)															Float r1;
HXDLIN( 102)															int this7 = ((this5 >> 16) & 255);
HXDLIN( 102)															if ((this7 == 0)) {
HXLINE( 102)																r1 = ((Float)0.);
            															}
            															else {
HXLINE( 102)																r1 = (( (Float)(this7) ) / ( (Float)(255) ));
            															}
HXDLIN( 102)															Float g1;
HXDLIN( 102)															int this8 = ((this5 >> 8) & 255);
HXDLIN( 102)															if ((this8 == 0)) {
HXLINE( 102)																g1 = ((Float)0.);
            															}
            															else {
HXLINE( 102)																g1 = (( (Float)(this8) ) / ( (Float)(255) ));
            															}
HXDLIN( 102)															Float b1;
HXDLIN( 102)															int this9 = (this5 & 255);
HXDLIN( 102)															if ((this9 == 0)) {
HXLINE( 102)																b1 = ((Float)0.);
            															}
            															else {
HXLINE( 102)																b1 = (( (Float)(this9) ) / ( (Float)(255) ));
            															}
HXDLIN( 102)															Float a2;
HXDLIN( 102)															int this10 = ((color >> 24) & 255);
HXDLIN( 102)															if ((this10 == 0)) {
HXLINE( 102)																a2 = ((Float)0.);
            															}
            															else {
HXLINE( 102)																a2 = (( (Float)(this10) ) / ( (Float)(255) ));
            															}
HXDLIN( 102)															Float r2;
HXDLIN( 102)															int this11 = ((color >> 16) & 255);
HXDLIN( 102)															if ((this11 == 0)) {
HXLINE( 102)																r2 = ((Float)0.);
            															}
            															else {
HXLINE( 102)																r2 = (( (Float)(this11) ) / ( (Float)(255) ));
            															}
HXDLIN( 102)															Float g2;
HXDLIN( 102)															int this12 = ((color >> 8) & 255);
HXDLIN( 102)															if ((this12 == 0)) {
HXLINE( 102)																g2 = ((Float)0.);
            															}
            															else {
HXLINE( 102)																g2 = (( (Float)(this12) ) / ( (Float)(255) ));
            															}
HXDLIN( 102)															Float b2;
HXDLIN( 102)															int this13 = (color & 255);
HXDLIN( 102)															if ((this13 == 0)) {
HXLINE( 102)																b2 = ((Float)0.);
            															}
            															else {
HXLINE( 102)																b2 = (( (Float)(this13) ) / ( (Float)(255) ));
            															}
HXDLIN( 102)															Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 102)															int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 102)															int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 102)															int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 102)															int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 102)															int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 102)															{
HXLINE( 102)																::haxe::io::ArrayBufferViewImpl this14 = this1->image;
HXDLIN( 102)																int value;
HXDLIN( 102)																if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 102)																	value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																}
            																else {
HXLINE( 102)																	value = blended;
            																}
HXDLIN( 102)																bool _hx_tmp;
HXDLIN( 102)																if ((location >= 0)) {
HXLINE( 102)																	_hx_tmp = (location < (this14->byteLength >> 2));
            																}
            																else {
HXLINE( 102)																	_hx_tmp = false;
            																}
HXDLIN( 102)																if (_hx_tmp) {
HXLINE( 102)																	::haxe::io::Bytes _this = this14->bytes;
HXDLIN( 102)																	int pos = ((location << 2) + this14->byteOffset);
HXDLIN( 102)																	_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 102)																	_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 102)																	_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 102)																	_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																}
            															}
            														}
            														else {
HXLINE( 102)															::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 102)															int index;
HXDLIN( 102)															if (this1->useVirtualPos) {
HXLINE( 102)																index = ::Std_obj::_hx_int(((((( (Float)(y) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            															}
            															else {
HXLINE( 102)																index = ::Std_obj::_hx_int(( (Float)(((y * this1->width) + x)) ));
            															}
HXDLIN( 102)															int value;
HXDLIN( 102)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 102)																value = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            															}
            															else {
HXLINE( 102)																value = c1;
            															}
HXDLIN( 102)															bool _hx_tmp;
HXDLIN( 102)															if ((index >= 0)) {
HXLINE( 102)																_hx_tmp = (index < (this2->byteLength >> 2));
            															}
            															else {
HXLINE( 102)																_hx_tmp = false;
            															}
HXDLIN( 102)															if (_hx_tmp) {
HXLINE( 102)																::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 102)																int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 102)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 102)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 102)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 102)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
HXLINE( 237)													foundY = true;
            												}
            												else {
HXLINE( 102)													if (foundY) {
HXLINE( 102)														goto _hx_goto_21;
            													}
            												}
            											}
            										}
            										_hx_goto_21:;
            									}
            								}
            							}
            						}
            					}
HXDLIN( 102)					{
HXLINE( 102)						Float bx2 = cx;
HXDLIN( 102)						Float by2 = cy;
HXDLIN( 102)						Float cx2 = dx;
HXDLIN( 102)						Float cy2 = dy;
HXDLIN( 102)						bool adjustWinding1 = (((((bx * by2) - (bx2 * by)) + ((bx2 * cy2) - (cx2 * by2))) + ((cx2 * by) - (bx * cy2))) > 0);
HXDLIN( 102)						if (!(adjustWinding1)) {
HXLINE( 102)							Float bx_ = bx2;
HXDLIN( 102)							Float by_ = by2;
HXLINE( 188)							bx2 = cx2;
HXLINE( 189)							by2 = cy2;
HXLINE( 190)							cx2 = bx_;
HXLINE( 191)							cy2 = by_;
            						}
HXLINE( 102)						{
HXLINE( 102)							bool hasUndo1 = false;
HXDLIN( 102)							Float s01 = ((by * cx2) - (bx * cy2));
HXDLIN( 102)							Float sx1 = (cy2 - by);
HXDLIN( 102)							Float sy1 = (bx - cx2);
HXDLIN( 102)							Float t01 = ((bx * by2) - (by * bx2));
HXDLIN( 102)							Float tx1 = (by - by2);
HXDLIN( 102)							Float ty1 = (bx2 - bx);
HXDLIN( 102)							Float A1 = ((((-(by2) * cx2) + (by * (-(bx2) + cx2))) + (bx * (by2 - cy2))) + (bx2 * cy2));
HXDLIN( 102)							::pixelimage::iter::IntIterStart xIter31;
HXDLIN( 102)							if ((bx > bx2)) {
HXLINE( 102)								if ((bx > cx2)) {
HXLINE( 102)									int min;
HXDLIN( 102)									if ((bx2 > cx2)) {
HXLINE( 102)										min = ::Math_obj::floor(cx2);
            									}
            									else {
HXLINE( 102)										min = ::Math_obj::floor(bx2);
            									}
HXDLIN( 102)									int ii_min = min;
HXDLIN( 102)									int ii_max = ::Math_obj::ceil(bx);
HXDLIN( 102)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 102)									xIter31 = this1;
            								}
            								else {
HXLINE( 102)									int ii_min = ::Math_obj::floor(bx2);
HXDLIN( 102)									int ii_max = ::Math_obj::ceil(cx2);
HXDLIN( 102)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 102)									xIter31 = this1;
            								}
            							}
            							else {
HXLINE( 102)								if ((bx2 > cx2)) {
HXLINE( 102)									int min;
HXDLIN( 102)									if ((bx > cx2)) {
HXLINE( 102)										min = ::Math_obj::floor(cx2);
            									}
            									else {
HXLINE( 102)										min = ::Math_obj::ceil(bx);
            									}
HXDLIN( 102)									int ii_min = min;
HXDLIN( 102)									int ii_max = ::Math_obj::ceil(bx2);
HXDLIN( 102)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 102)									xIter31 = this1;
            								}
            								else {
HXLINE( 102)									int ii_min = ::Math_obj::floor(bx);
HXDLIN( 102)									int ii_max = ::Math_obj::ceil(cx2);
HXDLIN( 102)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 102)									xIter31 = this1;
            								}
            							}
HXDLIN( 102)							::pixelimage::iter::IntIterStart yIter31;
HXDLIN( 102)							if ((by > by2)) {
HXLINE( 102)								if ((by > cy2)) {
HXLINE( 102)									int min;
HXDLIN( 102)									if ((by2 > cy2)) {
HXLINE( 102)										min = ::Math_obj::floor(cy2);
            									}
            									else {
HXLINE( 102)										min = ::Math_obj::floor(by2);
            									}
HXDLIN( 102)									int ii_min = min;
HXDLIN( 102)									int ii_max = ::Math_obj::ceil(by);
HXDLIN( 102)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 102)									yIter31 = this1;
            								}
            								else {
HXLINE( 102)									int ii_min = ::Math_obj::floor(by2);
HXDLIN( 102)									int ii_max = ::Math_obj::ceil(cy2);
HXDLIN( 102)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 102)									yIter31 = this1;
            								}
            							}
            							else {
HXLINE( 102)								if ((by2 > cy2)) {
HXLINE( 102)									int min;
HXDLIN( 102)									if ((by > cy2)) {
HXLINE( 102)										min = ::Math_obj::floor(cy2);
            									}
            									else {
HXLINE( 102)										min = ::Math_obj::ceil(by);
            									}
HXDLIN( 102)									int ii_min = min;
HXDLIN( 102)									int ii_max = ::Math_obj::ceil(by2);
HXDLIN( 102)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 102)									yIter31 = this1;
            								}
            								else {
HXLINE( 102)									int ii_min = ::Math_obj::floor(by);
HXDLIN( 102)									int ii_max = ::Math_obj::ceil(cy2);
HXDLIN( 102)									::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 102)									yIter31 = this1;
            								}
            							}
HXDLIN( 102)							::pixelimage::ImageStruct undoImage1 = null();
HXDLIN( 102)							if (hasUndo1) {
HXLINE( 102)								int w = ((xIter31->max - xIter31->start) + 1);
HXDLIN( 102)								int h = ((yIter31->max - yIter31->start) + 1);
HXDLIN( 102)								int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN( 102)								::haxe::io::ArrayBufferViewImpl this2 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 102)								::haxe::io::ArrayBufferViewImpl this3 = this2;
HXDLIN( 102)								::pixelimage::ImageStruct this4 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this3);
HXDLIN( 102)								undoImage1 = this4;
HXDLIN( 102)								{
HXLINE( 102)									int rectLeft = xIter31->start;
HXDLIN( 102)									int rectTop = yIter31->start;
HXDLIN( 102)									int rectRight = xIter31->max;
HXDLIN( 102)									bool forceClear = false;
HXDLIN( 102)									{
HXLINE( 102)										int _g = rectTop;
HXDLIN( 102)										int _g1 = yIter31->max;
HXDLIN( 102)										while((_g < _g1)){
HXLINE( 102)											_g = (_g + 1);
HXDLIN( 102)											int dy = (_g - 1);
HXDLIN( 102)											{
HXLINE( 102)												int _g1 = rectLeft;
HXDLIN( 102)												int _g2 = rectRight;
HXDLIN( 102)												while((_g1 < _g2)){
HXLINE( 102)													_g1 = (_g1 + 1);
HXDLIN( 102)													int dx = (_g1 - 1);
HXDLIN( 102)													::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 102)													int index;
HXDLIN( 102)													if (this1->useVirtualPos) {
HXLINE( 102)														index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            													}
            													else {
HXLINE( 102)														index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            													}
HXDLIN( 102)													::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 102)													int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 102)													int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 102)													int col;
HXDLIN( 102)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 102)														col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE( 102)														col = c;
            													}
HXDLIN( 102)													bool _hx_tmp;
HXDLIN( 102)													if (this1->useMask) {
HXLINE( 102)														_hx_tmp = ::hx::IsNotNull( this1->mask );
            													}
            													else {
HXLINE( 102)														_hx_tmp = false;
            													}
HXDLIN( 102)													if (_hx_tmp) {
HXLINE( 102)														::pixelimage::ImageStruct this2 = this1->mask;
HXDLIN( 102)														::haxe::io::ArrayBufferViewImpl this3 = this2->image;
HXDLIN( 102)														int index;
HXDLIN( 102)														if (this2->useVirtualPos) {
HXLINE( 102)															index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this2->virtualY) * ( (Float)(this2->width) )) + dx) - this2->virtualX));
            														}
            														else {
HXLINE( 102)															index = ::Std_obj::_hx_int(( (Float)(((dy * this2->width) + dx)) ));
            														}
HXDLIN( 102)														::haxe::io::Bytes _this = this3->bytes;
HXDLIN( 102)														int pos = ((index << 2) + this3->byteOffset);
HXDLIN( 102)														int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 102)														int v;
HXDLIN( 102)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 102)															v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            														}
            														else {
HXLINE( 102)															v = c;
            														}
HXDLIN( 102)														int this4 = v;
HXDLIN( 102)														int maskPixel = this4;
HXDLIN( 102)														int this5 = col;
HXDLIN( 102)														int this6 = this5;
HXDLIN( 102)														if ((maskPixel == 0)) {
HXLINE( 102)															int this1 = this6;
HXDLIN( 102)															col = this1;
            														}
            														else {
HXLINE( 102)															Float m0;
HXDLIN( 102)															int this1 = ((maskPixel >> 24) & 255);
HXDLIN( 102)															if ((this1 == 0)) {
HXLINE( 102)																m0 = ((Float)0.);
            															}
            															else {
HXLINE( 102)																m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            															}
HXDLIN( 102)															Float m1;
HXDLIN( 102)															int this2 = ((maskPixel >> 16) & 255);
HXDLIN( 102)															if ((this2 == 0)) {
HXLINE( 102)																m1 = ((Float)0.);
            															}
            															else {
HXLINE( 102)																m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            															}
HXDLIN( 102)															Float m2;
HXDLIN( 102)															int this3 = ((maskPixel >> 8) & 255);
HXDLIN( 102)															if ((this3 == 0)) {
HXLINE( 102)																m2 = ((Float)0.);
            															}
            															else {
HXLINE( 102)																m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            															}
HXDLIN( 102)															Float m3;
HXDLIN( 102)															int this4 = (maskPixel & 255);
HXDLIN( 102)															if ((this4 == 0)) {
HXLINE( 102)																m3 = ((Float)0.);
            															}
            															else {
HXLINE( 102)																m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            															}
HXDLIN( 102)															int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this6 >> 24) & 255)) )));
HXDLIN( 102)															int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this6 >> 16) & 255)) )));
HXDLIN( 102)															int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this6 >> 8) & 255)) )));
HXDLIN( 102)															int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this6 & 255)) )));
HXDLIN( 102)															col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            														}
            													}
HXDLIN( 102)													if ((col != 0)) {
HXLINE( 102)														int x = (dx - rectLeft);
HXDLIN( 102)														int y = (dy - rectTop);
HXDLIN( 102)														int this1 = col;
HXDLIN( 102)														int c = this1;
HXDLIN( 102)														bool _hx_tmp;
HXDLIN( 102)														if ((((c >> 24) & 255) < 254)) {
HXLINE( 102)															_hx_tmp = undoImage1->transparent;
            														}
            														else {
HXLINE( 102)															_hx_tmp = false;
            														}
HXDLIN( 102)														if (_hx_tmp) {
HXLINE( 102)															int location;
HXDLIN( 102)															if (undoImage1->useVirtualPos) {
HXLINE( 102)																location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            															}
            															else {
HXLINE( 102)																location = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            															}
HXDLIN( 102)															::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN( 102)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 102)															int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 102)															int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 102)															int this3 = this2;
HXDLIN( 102)															int this4;
HXDLIN( 102)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 102)																this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            															}
            															else {
HXLINE( 102)																this4 = this3;
            															}
HXDLIN( 102)															Float a1;
HXDLIN( 102)															int this5 = ((this4 >> 24) & 255);
HXDLIN( 102)															if ((this5 == 0)) {
HXLINE( 102)																a1 = ((Float)0.);
            															}
            															else {
HXLINE( 102)																a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            															}
HXDLIN( 102)															Float r1;
HXDLIN( 102)															int this6 = ((this4 >> 16) & 255);
HXDLIN( 102)															if ((this6 == 0)) {
HXLINE( 102)																r1 = ((Float)0.);
            															}
            															else {
HXLINE( 102)																r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            															}
HXDLIN( 102)															Float g1;
HXDLIN( 102)															int this7 = ((this4 >> 8) & 255);
HXDLIN( 102)															if ((this7 == 0)) {
HXLINE( 102)																g1 = ((Float)0.);
            															}
            															else {
HXLINE( 102)																g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            															}
HXDLIN( 102)															Float b1;
HXDLIN( 102)															int this8 = (this4 & 255);
HXDLIN( 102)															if ((this8 == 0)) {
HXLINE( 102)																b1 = ((Float)0.);
            															}
            															else {
HXLINE( 102)																b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            															}
HXDLIN( 102)															Float a2;
HXDLIN( 102)															int this9 = ((col >> 24) & 255);
HXDLIN( 102)															if ((this9 == 0)) {
HXLINE( 102)																a2 = ((Float)0.);
            															}
            															else {
HXLINE( 102)																a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            															}
HXDLIN( 102)															Float r2;
HXDLIN( 102)															int this10 = ((col >> 16) & 255);
HXDLIN( 102)															if ((this10 == 0)) {
HXLINE( 102)																r2 = ((Float)0.);
            															}
            															else {
HXLINE( 102)																r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            															}
HXDLIN( 102)															Float g2;
HXDLIN( 102)															int this11 = ((col >> 8) & 255);
HXDLIN( 102)															if ((this11 == 0)) {
HXLINE( 102)																g2 = ((Float)0.);
            															}
            															else {
HXLINE( 102)																g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            															}
HXDLIN( 102)															Float b2;
HXDLIN( 102)															int this12 = (col & 255);
HXDLIN( 102)															if ((this12 == 0)) {
HXLINE( 102)																b2 = ((Float)0.);
            															}
            															else {
HXLINE( 102)																b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            															}
HXDLIN( 102)															Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 102)															int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 102)															int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 102)															int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 102)															int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 102)															int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 102)															{
HXLINE( 102)																::haxe::io::ArrayBufferViewImpl this13 = undoImage1->image;
HXDLIN( 102)																int value;
HXDLIN( 102)																if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 102)																	value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																}
            																else {
HXLINE( 102)																	value = blended;
            																}
HXDLIN( 102)																bool _hx_tmp;
HXDLIN( 102)																if ((location >= 0)) {
HXLINE( 102)																	_hx_tmp = (location < (this13->byteLength >> 2));
            																}
            																else {
HXLINE( 102)																	_hx_tmp = false;
            																}
HXDLIN( 102)																if (_hx_tmp) {
HXLINE( 102)																	::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 102)																	int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 102)																	_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 102)																	_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 102)																	_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 102)																	_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																}
            															}
            														}
            														else {
HXLINE( 102)															::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN( 102)															int index;
HXDLIN( 102)															if (undoImage1->useVirtualPos) {
HXLINE( 102)																index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            															}
            															else {
HXLINE( 102)																index = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            															}
HXDLIN( 102)															int value;
HXDLIN( 102)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 102)																value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            															}
            															else {
HXLINE( 102)																value = c;
            															}
HXDLIN( 102)															bool _hx_tmp;
HXDLIN( 102)															if ((index >= 0)) {
HXLINE( 102)																_hx_tmp = (index < (this1->byteLength >> 2));
            															}
            															else {
HXLINE( 102)																_hx_tmp = false;
            															}
HXDLIN( 102)															if (_hx_tmp) {
HXLINE( 102)																::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 102)																int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 102)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 102)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 102)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 102)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
            													else {
HXLINE( 102)														if (forceClear) {
HXLINE( 102)															::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN( 102)															int x = (dx - rectLeft);
HXDLIN( 102)															int y = (dy - rectTop);
HXDLIN( 102)															int index;
HXDLIN( 102)															if (undoImage1->useVirtualPos) {
HXLINE( 102)																index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            															}
            															else {
HXLINE( 102)																index = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            															}
HXDLIN( 102)															bool _hx_tmp;
HXDLIN( 102)															if ((index >= 0)) {
HXLINE( 102)																_hx_tmp = (index < (this1->byteLength >> 2));
            															}
            															else {
HXLINE( 102)																_hx_tmp = false;
            															}
HXDLIN( 102)															if (_hx_tmp) {
HXLINE( 102)																::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 102)																int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 102)																_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 102)																_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 102)																_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 102)																_this->b[(pos + 3)] = ( (unsigned char)(0) );
            															}
            														}
            													}
            												}
            											}
            										}
            									}
            								}
            							}
HXDLIN( 102)							bool foundY1 = false;
HXDLIN( 102)							Float s1 = ((Float)0.);
HXDLIN( 102)							Float t1 = ((Float)0.);
HXDLIN( 102)							Float sxx1 = ((Float)0.);
HXDLIN( 102)							Float txx1 = ((Float)0.);
HXDLIN( 102)							{
HXLINE( 102)								int _g_min1 = xIter31->start;
HXDLIN( 102)								int _g_max1 = xIter31->max;
HXDLIN( 102)								while((_g_min1 < _g_max1)){
HXLINE( 102)									_g_min1 = (_g_min1 + 1);
HXDLIN( 102)									int x = (_g_min1 - 1);
HXLINE( 223)									sxx1 = (sx1 * ( (Float)(x) ));
HXLINE( 224)									txx1 = (tx1 * ( (Float)(x) ));
HXLINE( 225)									foundY1 = false;
HXLINE( 102)									{
HXLINE( 102)										int _g_min = yIter31->start;
HXDLIN( 102)										int _g_max = yIter31->max;
HXDLIN( 102)										while((_g_min < _g_max)){
HXLINE( 102)											_g_min = (_g_min + 1);
HXDLIN( 102)											int y = (_g_min - 1);
HXLINE( 227)											s1 = ((s01 + sxx1) + (sy1 * ( (Float)(y) )));
HXLINE( 228)											t1 = ((t01 + txx1) + (ty1 * ( (Float)(y) )));
HXLINE( 102)											bool _hx_tmp;
HXDLIN( 102)											if (!((s1 <= 0))) {
HXLINE( 102)												_hx_tmp = (t1 <= 0);
            											}
            											else {
HXLINE( 102)												_hx_tmp = true;
            											}
HXDLIN( 102)											if (_hx_tmp) {
HXLINE( 102)												if (foundY1) {
HXLINE( 102)													goto _hx_goto_25;
            												}
            											}
            											else {
HXLINE( 102)												if (((s1 + t1) < A1)) {
HXLINE( 102)													int x1 = ::hx::Mod(x,tileImage->width);
HXDLIN( 102)													int y1 = ::hx::Mod(y,tileImage->height);
HXDLIN( 102)													::haxe::io::ArrayBufferViewImpl this2 = tileImage->image;
HXDLIN( 102)													int index;
HXDLIN( 102)													if (tileImage->useVirtualPos) {
HXLINE( 102)														index = ::Std_obj::_hx_int(((((( (Float)(y1) ) - tileImage->virtualY) * ( (Float)(tileImage->width) )) + x1) - tileImage->virtualX));
            													}
            													else {
HXLINE( 102)														index = ::Std_obj::_hx_int(( (Float)(((y1 * tileImage->width) + x1)) ));
            													}
HXDLIN( 102)													::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 102)													int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 102)													int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 102)													int color;
HXDLIN( 102)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 102)														color = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE( 102)														color = c;
            													}
HXDLIN( 102)													{
HXLINE( 102)														int this3 = color;
HXDLIN( 102)														int c1 = this3;
HXDLIN( 102)														bool _hx_tmp;
HXDLIN( 102)														if ((((c1 >> 24) & 255) < 254)) {
HXLINE( 102)															_hx_tmp = this1->transparent;
            														}
            														else {
HXLINE( 102)															_hx_tmp = false;
            														}
HXDLIN( 102)														if (_hx_tmp) {
HXLINE( 102)															int location;
HXDLIN( 102)															if (this1->useVirtualPos) {
HXLINE( 102)																location = ::Std_obj::_hx_int(((((( (Float)(y) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            															}
            															else {
HXLINE( 102)																location = ::Std_obj::_hx_int(( (Float)(((y * this1->width) + x)) ));
            															}
HXDLIN( 102)															::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 102)															::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 102)															int pos = ((location << 2) + this2->byteOffset);
HXDLIN( 102)															int this3 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 102)															int this4 = this3;
HXDLIN( 102)															int this5;
HXDLIN( 102)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 102)																this5 = ((((((this4 >> 24) & 255) << 24) | ((this4 & 255) << 16)) | (((this4 >> 8) & 255) << 8)) | ((this4 >> 16) & 255));
            															}
            															else {
HXLINE( 102)																this5 = this4;
            															}
HXDLIN( 102)															Float a1;
HXDLIN( 102)															int this6 = ((this5 >> 24) & 255);
HXDLIN( 102)															if ((this6 == 0)) {
HXLINE( 102)																a1 = ((Float)0.);
            															}
            															else {
HXLINE( 102)																a1 = (( (Float)(this6) ) / ( (Float)(255) ));
            															}
HXDLIN( 102)															Float r1;
HXDLIN( 102)															int this7 = ((this5 >> 16) & 255);
HXDLIN( 102)															if ((this7 == 0)) {
HXLINE( 102)																r1 = ((Float)0.);
            															}
            															else {
HXLINE( 102)																r1 = (( (Float)(this7) ) / ( (Float)(255) ));
            															}
HXDLIN( 102)															Float g1;
HXDLIN( 102)															int this8 = ((this5 >> 8) & 255);
HXDLIN( 102)															if ((this8 == 0)) {
HXLINE( 102)																g1 = ((Float)0.);
            															}
            															else {
HXLINE( 102)																g1 = (( (Float)(this8) ) / ( (Float)(255) ));
            															}
HXDLIN( 102)															Float b1;
HXDLIN( 102)															int this9 = (this5 & 255);
HXDLIN( 102)															if ((this9 == 0)) {
HXLINE( 102)																b1 = ((Float)0.);
            															}
            															else {
HXLINE( 102)																b1 = (( (Float)(this9) ) / ( (Float)(255) ));
            															}
HXDLIN( 102)															Float a2;
HXDLIN( 102)															int this10 = ((color >> 24) & 255);
HXDLIN( 102)															if ((this10 == 0)) {
HXLINE( 102)																a2 = ((Float)0.);
            															}
            															else {
HXLINE( 102)																a2 = (( (Float)(this10) ) / ( (Float)(255) ));
            															}
HXDLIN( 102)															Float r2;
HXDLIN( 102)															int this11 = ((color >> 16) & 255);
HXDLIN( 102)															if ((this11 == 0)) {
HXLINE( 102)																r2 = ((Float)0.);
            															}
            															else {
HXLINE( 102)																r2 = (( (Float)(this11) ) / ( (Float)(255) ));
            															}
HXDLIN( 102)															Float g2;
HXDLIN( 102)															int this12 = ((color >> 8) & 255);
HXDLIN( 102)															if ((this12 == 0)) {
HXLINE( 102)																g2 = ((Float)0.);
            															}
            															else {
HXLINE( 102)																g2 = (( (Float)(this12) ) / ( (Float)(255) ));
            															}
HXDLIN( 102)															Float b2;
HXDLIN( 102)															int this13 = (color & 255);
HXDLIN( 102)															if ((this13 == 0)) {
HXLINE( 102)																b2 = ((Float)0.);
            															}
            															else {
HXLINE( 102)																b2 = (( (Float)(this13) ) / ( (Float)(255) ));
            															}
HXDLIN( 102)															Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 102)															int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 102)															int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 102)															int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 102)															int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 102)															int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 102)															{
HXLINE( 102)																::haxe::io::ArrayBufferViewImpl this14 = this1->image;
HXDLIN( 102)																int value;
HXDLIN( 102)																if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 102)																	value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            																}
            																else {
HXLINE( 102)																	value = blended;
            																}
HXDLIN( 102)																bool _hx_tmp;
HXDLIN( 102)																if ((location >= 0)) {
HXLINE( 102)																	_hx_tmp = (location < (this14->byteLength >> 2));
            																}
            																else {
HXLINE( 102)																	_hx_tmp = false;
            																}
HXDLIN( 102)																if (_hx_tmp) {
HXLINE( 102)																	::haxe::io::Bytes _this = this14->bytes;
HXDLIN( 102)																	int pos = ((location << 2) + this14->byteOffset);
HXDLIN( 102)																	_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 102)																	_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 102)																	_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 102)																	_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            																}
            															}
            														}
            														else {
HXLINE( 102)															::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 102)															int index;
HXDLIN( 102)															if (this1->useVirtualPos) {
HXLINE( 102)																index = ::Std_obj::_hx_int(((((( (Float)(y) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            															}
            															else {
HXLINE( 102)																index = ::Std_obj::_hx_int(( (Float)(((y * this1->width) + x)) ));
            															}
HXDLIN( 102)															int value;
HXDLIN( 102)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 102)																value = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            															}
            															else {
HXLINE( 102)																value = c1;
            															}
HXDLIN( 102)															bool _hx_tmp;
HXDLIN( 102)															if ((index >= 0)) {
HXLINE( 102)																_hx_tmp = (index < (this2->byteLength >> 2));
            															}
            															else {
HXLINE( 102)																_hx_tmp = false;
            															}
HXDLIN( 102)															if (_hx_tmp) {
HXLINE( 102)																::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 102)																int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 102)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 102)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 102)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 102)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
HXLINE( 237)													foundY1 = true;
            												}
            												else {
HXLINE( 102)													if (foundY1) {
HXLINE( 102)														goto _hx_goto_25;
            													}
            												}
            											}
            										}
            										_hx_goto_25:;
            									}
            								}
            							}
            						}
            					}
HXDLIN( 102)					::pixelimage::algo::HitQuad v = ::pixelimage::algo::HitQuad_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,dx,dy,true);
            				}
            			}
            		}
HXLINE( 110)		this->toggleDraw = !(this->toggleDraw);
HXLINE( 111)		this->x0 = x2;
HXLINE( 112)		this->y0 = y2;
            	}


HX_DEFINE_DYNAMIC_FUNC2(PathElementPattern_obj,lineSegmentTo,(void))

void PathElementPattern_obj::lineTo(Float x2,Float y2){
            	HX_GC_STACKFRAME(&_hx_pos_fe0db7e25242d665_115_lineTo)
HXLINE( 116)		this->oldInfo = this->info;
HXLINE( 117)		::pixelimage::ImageStruct this1 = this->temp;
HXDLIN( 117)		Float px = ((this->x0 * this->scaleX) + this->translateX);
HXDLIN( 117)		Float py = ((this->y0 * this->scaleY) + this->translateY);
HXDLIN( 117)		::pixelimage::ImageStruct tileImage = this->tileImageStroke;
HXDLIN( 117)		Float o = (((y2 * this->scaleY) + this->translateY) - py);
HXDLIN( 117)		Float a = (((x2 * this->scaleX) + this->translateX) - px);
HXDLIN( 117)		Float h = ::Math_obj::pow(((o * o) + (a * a)),((Float)0.5));
HXDLIN( 117)		Float theta = ::Math_obj::atan2(o,a);
HXDLIN( 117)		 ::Dynamic debugCorners = false;
HXDLIN( 117)		if (::hx::IsNull( debugCorners )) {
HXLINE( 893)			debugCorners = false;
            		}
HXLINE( 117)		Float sin = ::Math_obj::sin(theta);
HXDLIN( 117)		Float cos = ::Math_obj::cos(theta);
HXDLIN( 117)		Float radius = (this->strokeWidth / ( (Float)(2) ));
HXDLIN( 117)		Float dx = ((Float)0.1);
HXDLIN( 117)		Float dy = radius;
HXDLIN( 117)		Float cx = h;
HXDLIN( 117)		Float cy = radius;
HXDLIN( 117)		Float bx = h;
HXDLIN( 117)		Float by = -(radius);
HXDLIN( 117)		Float ax = ((Float)0.1);
HXDLIN( 117)		Float ay = -(radius);
HXDLIN( 117)		Float temp = ((Float)0.);
HXLINE( 380)		temp = (px + ((ax * cos) - (ay * sin)));
HXLINE( 381)		ay = (py + ((ay * cos) + (ax * sin)));
HXLINE( 382)		ax = temp;
HXLINE( 384)		temp = (px + ((bx * cos) - (by * sin)));
HXLINE( 385)		by = (py + ((by * cos) + (bx * sin)));
HXLINE( 386)		bx = temp;
HXLINE( 388)		temp = (px + ((cx * cos) - (cy * sin)));
HXLINE( 389)		cy = (py + ((cy * cos) + (cx * sin)));
HXLINE( 390)		cx = temp;
HXLINE( 392)		temp = (px + ((dx * cos) - (dy * sin)));
HXLINE( 393)		dy = (py + ((dy * cos) + (dx * sin)));
HXLINE( 394)		dx = temp;
HXLINE( 117)		if (( (bool)(debugCorners) )) {
HXLINE( 117)			{
HXLINE( 117)				Float x = (ax - ((Float)6.));
HXDLIN( 117)				Float y = (ay - ((Float)6.));
HXDLIN( 117)				int p = ::Std_obj::_hx_int(x);
HXDLIN( 117)				int xx = p;
HXDLIN( 117)				int q = ::Std_obj::_hx_int(y);
HXDLIN( 117)				int maxX = ::Std_obj::_hx_int((x + 12));
HXDLIN( 117)				int maxY = ::Std_obj::_hx_int((y + 12));
HXDLIN( 117)				while(true){
HXLINE( 117)					{
HXLINE( 117)						p = (p + 1);
HXDLIN( 117)						int x = (p - 1);
HXDLIN( 117)						int this2 = -65536;
HXDLIN( 117)						int c = this2;
HXDLIN( 117)						bool _hx_tmp;
HXDLIN( 117)						if ((((c >> 24) & 255) < 254)) {
HXLINE( 117)							_hx_tmp = this1->transparent;
            						}
            						else {
HXLINE( 117)							_hx_tmp = false;
            						}
HXDLIN( 117)						if (_hx_tmp) {
HXLINE( 117)							int location;
HXDLIN( 117)							if (this1->useVirtualPos) {
HXLINE( 117)								location = ::Std_obj::_hx_int(((((( (Float)(q) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            							}
            							else {
HXLINE( 117)								location = ::Std_obj::_hx_int(( (Float)(((q * this1->width) + x)) ));
            							}
HXDLIN( 117)							::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 117)							::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 117)							int pos = ((location << 2) + this2->byteOffset);
HXDLIN( 117)							int this3 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 117)							int this4 = this3;
HXDLIN( 117)							int this5;
HXDLIN( 117)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)								this5 = ((((((this4 >> 24) & 255) << 24) | ((this4 & 255) << 16)) | (((this4 >> 8) & 255) << 8)) | ((this4 >> 16) & 255));
            							}
            							else {
HXLINE( 117)								this5 = this4;
            							}
HXDLIN( 117)							Float a1;
HXDLIN( 117)							int this6 = ((this5 >> 24) & 255);
HXDLIN( 117)							if ((this6 == 0)) {
HXLINE( 117)								a1 = ((Float)0.);
            							}
            							else {
HXLINE( 117)								a1 = (( (Float)(this6) ) / ( (Float)(255) ));
            							}
HXDLIN( 117)							Float r1;
HXDLIN( 117)							int this7 = ((this5 >> 16) & 255);
HXDLIN( 117)							if ((this7 == 0)) {
HXLINE( 117)								r1 = ((Float)0.);
            							}
            							else {
HXLINE( 117)								r1 = (( (Float)(this7) ) / ( (Float)(255) ));
            							}
HXDLIN( 117)							Float g1;
HXDLIN( 117)							int this8 = ((this5 >> 8) & 255);
HXDLIN( 117)							if ((this8 == 0)) {
HXLINE( 117)								g1 = ((Float)0.);
            							}
            							else {
HXLINE( 117)								g1 = (( (Float)(this8) ) / ( (Float)(255) ));
            							}
HXDLIN( 117)							Float b1;
HXDLIN( 117)							int this9 = (this5 & 255);
HXDLIN( 117)							if ((this9 == 0)) {
HXLINE( 117)								b1 = ((Float)0.);
            							}
            							else {
HXLINE( 117)								b1 = (( (Float)(this9) ) / ( (Float)(255) ));
            							}
HXDLIN( 117)							Float a2;
HXDLIN( 117)							int this10 = ((-65536 >> 24) & 255);
HXDLIN( 117)							if ((this10 == 0)) {
HXLINE( 117)								a2 = ((Float)0.);
            							}
            							else {
HXLINE( 117)								a2 = (( (Float)(this10) ) / ( (Float)(255) ));
            							}
HXDLIN( 117)							Float r2;
HXDLIN( 117)							int this11 = ((-65536 >> 16) & 255);
HXDLIN( 117)							if ((this11 == 0)) {
HXLINE( 117)								r2 = ((Float)0.);
            							}
            							else {
HXLINE( 117)								r2 = (( (Float)(this11) ) / ( (Float)(255) ));
            							}
HXDLIN( 117)							Float g2;
HXDLIN( 117)							int this12 = ((-65536 >> 8) & 255);
HXDLIN( 117)							if ((this12 == 0)) {
HXLINE( 117)								g2 = ((Float)0.);
            							}
            							else {
HXLINE( 117)								g2 = (( (Float)(this12) ) / ( (Float)(255) ));
            							}
HXDLIN( 117)							Float b2;
HXDLIN( 117)							int this13 = (-65536 & 255);
HXDLIN( 117)							if ((this13 == 0)) {
HXLINE( 117)								b2 = ((Float)0.);
            							}
            							else {
HXLINE( 117)								b2 = (( (Float)(this13) ) / ( (Float)(255) ));
            							}
HXDLIN( 117)							Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 117)							int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 117)							int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 117)							int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 117)							int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 117)							int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 117)							{
HXLINE( 117)								::haxe::io::ArrayBufferViewImpl this14 = this1->image;
HXDLIN( 117)								int value;
HXDLIN( 117)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)									value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            								}
            								else {
HXLINE( 117)									value = blended;
            								}
HXDLIN( 117)								bool _hx_tmp;
HXDLIN( 117)								if ((location >= 0)) {
HXLINE( 117)									_hx_tmp = (location < (this14->byteLength >> 2));
            								}
            								else {
HXLINE( 117)									_hx_tmp = false;
            								}
HXDLIN( 117)								if (_hx_tmp) {
HXLINE( 117)									::haxe::io::Bytes _this = this14->bytes;
HXDLIN( 117)									int pos = ((location << 2) + this14->byteOffset);
HXDLIN( 117)									_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 117)									_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 117)									_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 117)									_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            								}
            							}
            						}
            						else {
HXLINE( 117)							::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 117)							int index;
HXDLIN( 117)							if (this1->useVirtualPos) {
HXLINE( 117)								index = ::Std_obj::_hx_int(((((( (Float)(q) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            							}
            							else {
HXLINE( 117)								index = ::Std_obj::_hx_int(( (Float)(((q * this1->width) + x)) ));
            							}
HXDLIN( 117)							int value;
HXDLIN( 117)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)								value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            							}
            							else {
HXLINE( 117)								value = c;
            							}
HXDLIN( 117)							bool _hx_tmp;
HXDLIN( 117)							if ((index >= 0)) {
HXLINE( 117)								_hx_tmp = (index < (this2->byteLength >> 2));
            							}
            							else {
HXLINE( 117)								_hx_tmp = false;
            							}
HXDLIN( 117)							if (_hx_tmp) {
HXLINE( 117)								::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 117)								int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 117)								_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 117)								_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 117)								_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 117)								_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            							}
            						}
            					}
HXDLIN( 117)					if ((p > maxX)) {
HXLINE( 247)						p = xx;
HXLINE( 117)						q = (q + 1);
            					}
HXDLIN( 117)					if ((q > maxY)) {
HXLINE( 117)						goto _hx_goto_27;
            					}
            				}
            				_hx_goto_27:;
            			}
HXDLIN( 117)			{
HXLINE( 117)				Float x1 = (bx - ((Float)6.));
HXDLIN( 117)				Float y1 = (by - ((Float)6.));
HXDLIN( 117)				int p1 = ::Std_obj::_hx_int(x1);
HXDLIN( 117)				int xx1 = p1;
HXDLIN( 117)				int q1 = ::Std_obj::_hx_int(y1);
HXDLIN( 117)				int maxX1 = ::Std_obj::_hx_int((x1 + 12));
HXDLIN( 117)				int maxY1 = ::Std_obj::_hx_int((y1 + 12));
HXDLIN( 117)				while(true){
HXLINE( 117)					{
HXLINE( 117)						p1 = (p1 + 1);
HXDLIN( 117)						int x = (p1 - 1);
HXDLIN( 117)						int this2 = -16711936;
HXDLIN( 117)						int c = this2;
HXDLIN( 117)						bool _hx_tmp;
HXDLIN( 117)						if ((((c >> 24) & 255) < 254)) {
HXLINE( 117)							_hx_tmp = this1->transparent;
            						}
            						else {
HXLINE( 117)							_hx_tmp = false;
            						}
HXDLIN( 117)						if (_hx_tmp) {
HXLINE( 117)							int location;
HXDLIN( 117)							if (this1->useVirtualPos) {
HXLINE( 117)								location = ::Std_obj::_hx_int(((((( (Float)(q1) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            							}
            							else {
HXLINE( 117)								location = ::Std_obj::_hx_int(( (Float)(((q1 * this1->width) + x)) ));
            							}
HXDLIN( 117)							::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 117)							::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 117)							int pos = ((location << 2) + this2->byteOffset);
HXDLIN( 117)							int this3 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 117)							int this4 = this3;
HXDLIN( 117)							int this5;
HXDLIN( 117)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)								this5 = ((((((this4 >> 24) & 255) << 24) | ((this4 & 255) << 16)) | (((this4 >> 8) & 255) << 8)) | ((this4 >> 16) & 255));
            							}
            							else {
HXLINE( 117)								this5 = this4;
            							}
HXDLIN( 117)							Float a1;
HXDLIN( 117)							int this6 = ((this5 >> 24) & 255);
HXDLIN( 117)							if ((this6 == 0)) {
HXLINE( 117)								a1 = ((Float)0.);
            							}
            							else {
HXLINE( 117)								a1 = (( (Float)(this6) ) / ( (Float)(255) ));
            							}
HXDLIN( 117)							Float r1;
HXDLIN( 117)							int this7 = ((this5 >> 16) & 255);
HXDLIN( 117)							if ((this7 == 0)) {
HXLINE( 117)								r1 = ((Float)0.);
            							}
            							else {
HXLINE( 117)								r1 = (( (Float)(this7) ) / ( (Float)(255) ));
            							}
HXDLIN( 117)							Float g1;
HXDLIN( 117)							int this8 = ((this5 >> 8) & 255);
HXDLIN( 117)							if ((this8 == 0)) {
HXLINE( 117)								g1 = ((Float)0.);
            							}
            							else {
HXLINE( 117)								g1 = (( (Float)(this8) ) / ( (Float)(255) ));
            							}
HXDLIN( 117)							Float b1;
HXDLIN( 117)							int this9 = (this5 & 255);
HXDLIN( 117)							if ((this9 == 0)) {
HXLINE( 117)								b1 = ((Float)0.);
            							}
            							else {
HXLINE( 117)								b1 = (( (Float)(this9) ) / ( (Float)(255) ));
            							}
HXDLIN( 117)							Float a2;
HXDLIN( 117)							int this10 = ((-16711936 >> 24) & 255);
HXDLIN( 117)							if ((this10 == 0)) {
HXLINE( 117)								a2 = ((Float)0.);
            							}
            							else {
HXLINE( 117)								a2 = (( (Float)(this10) ) / ( (Float)(255) ));
            							}
HXDLIN( 117)							Float r2;
HXDLIN( 117)							int this11 = ((-16711936 >> 16) & 255);
HXDLIN( 117)							if ((this11 == 0)) {
HXLINE( 117)								r2 = ((Float)0.);
            							}
            							else {
HXLINE( 117)								r2 = (( (Float)(this11) ) / ( (Float)(255) ));
            							}
HXDLIN( 117)							Float g2;
HXDLIN( 117)							int this12 = ((-16711936 >> 8) & 255);
HXDLIN( 117)							if ((this12 == 0)) {
HXLINE( 117)								g2 = ((Float)0.);
            							}
            							else {
HXLINE( 117)								g2 = (( (Float)(this12) ) / ( (Float)(255) ));
            							}
HXDLIN( 117)							Float b2;
HXDLIN( 117)							int this13 = (-16711936 & 255);
HXDLIN( 117)							if ((this13 == 0)) {
HXLINE( 117)								b2 = ((Float)0.);
            							}
            							else {
HXLINE( 117)								b2 = (( (Float)(this13) ) / ( (Float)(255) ));
            							}
HXDLIN( 117)							Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 117)							int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 117)							int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 117)							int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 117)							int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 117)							int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 117)							{
HXLINE( 117)								::haxe::io::ArrayBufferViewImpl this14 = this1->image;
HXDLIN( 117)								int value;
HXDLIN( 117)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)									value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            								}
            								else {
HXLINE( 117)									value = blended;
            								}
HXDLIN( 117)								bool _hx_tmp;
HXDLIN( 117)								if ((location >= 0)) {
HXLINE( 117)									_hx_tmp = (location < (this14->byteLength >> 2));
            								}
            								else {
HXLINE( 117)									_hx_tmp = false;
            								}
HXDLIN( 117)								if (_hx_tmp) {
HXLINE( 117)									::haxe::io::Bytes _this = this14->bytes;
HXDLIN( 117)									int pos = ((location << 2) + this14->byteOffset);
HXDLIN( 117)									_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 117)									_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 117)									_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 117)									_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            								}
            							}
            						}
            						else {
HXLINE( 117)							::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 117)							int index;
HXDLIN( 117)							if (this1->useVirtualPos) {
HXLINE( 117)								index = ::Std_obj::_hx_int(((((( (Float)(q1) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            							}
            							else {
HXLINE( 117)								index = ::Std_obj::_hx_int(( (Float)(((q1 * this1->width) + x)) ));
            							}
HXDLIN( 117)							int value;
HXDLIN( 117)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)								value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            							}
            							else {
HXLINE( 117)								value = c;
            							}
HXDLIN( 117)							bool _hx_tmp;
HXDLIN( 117)							if ((index >= 0)) {
HXLINE( 117)								_hx_tmp = (index < (this2->byteLength >> 2));
            							}
            							else {
HXLINE( 117)								_hx_tmp = false;
            							}
HXDLIN( 117)							if (_hx_tmp) {
HXLINE( 117)								::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 117)								int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 117)								_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 117)								_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 117)								_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 117)								_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            							}
            						}
            					}
HXDLIN( 117)					if ((p1 > maxX1)) {
HXLINE( 247)						p1 = xx1;
HXLINE( 117)						q1 = (q1 + 1);
            					}
HXDLIN( 117)					if ((q1 > maxY1)) {
HXLINE( 117)						goto _hx_goto_28;
            					}
            				}
            				_hx_goto_28:;
            			}
HXDLIN( 117)			{
HXLINE( 117)				Float x2 = (cx - ((Float)6.));
HXDLIN( 117)				Float y2 = (cy - ((Float)6.));
HXDLIN( 117)				int p2 = ::Std_obj::_hx_int(x2);
HXDLIN( 117)				int xx2 = p2;
HXDLIN( 117)				int q2 = ::Std_obj::_hx_int(y2);
HXDLIN( 117)				int maxX2 = ::Std_obj::_hx_int((x2 + 12));
HXDLIN( 117)				int maxY2 = ::Std_obj::_hx_int((y2 + 12));
HXDLIN( 117)				while(true){
HXLINE( 117)					{
HXLINE( 117)						p2 = (p2 + 1);
HXDLIN( 117)						int x = (p2 - 1);
HXDLIN( 117)						int this2 = -16776961;
HXDLIN( 117)						int c = this2;
HXDLIN( 117)						bool _hx_tmp;
HXDLIN( 117)						if ((((c >> 24) & 255) < 254)) {
HXLINE( 117)							_hx_tmp = this1->transparent;
            						}
            						else {
HXLINE( 117)							_hx_tmp = false;
            						}
HXDLIN( 117)						if (_hx_tmp) {
HXLINE( 117)							int location;
HXDLIN( 117)							if (this1->useVirtualPos) {
HXLINE( 117)								location = ::Std_obj::_hx_int(((((( (Float)(q2) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            							}
            							else {
HXLINE( 117)								location = ::Std_obj::_hx_int(( (Float)(((q2 * this1->width) + x)) ));
            							}
HXDLIN( 117)							::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 117)							::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 117)							int pos = ((location << 2) + this2->byteOffset);
HXDLIN( 117)							int this3 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 117)							int this4 = this3;
HXDLIN( 117)							int this5;
HXDLIN( 117)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)								this5 = ((((((this4 >> 24) & 255) << 24) | ((this4 & 255) << 16)) | (((this4 >> 8) & 255) << 8)) | ((this4 >> 16) & 255));
            							}
            							else {
HXLINE( 117)								this5 = this4;
            							}
HXDLIN( 117)							Float a1;
HXDLIN( 117)							int this6 = ((this5 >> 24) & 255);
HXDLIN( 117)							if ((this6 == 0)) {
HXLINE( 117)								a1 = ((Float)0.);
            							}
            							else {
HXLINE( 117)								a1 = (( (Float)(this6) ) / ( (Float)(255) ));
            							}
HXDLIN( 117)							Float r1;
HXDLIN( 117)							int this7 = ((this5 >> 16) & 255);
HXDLIN( 117)							if ((this7 == 0)) {
HXLINE( 117)								r1 = ((Float)0.);
            							}
            							else {
HXLINE( 117)								r1 = (( (Float)(this7) ) / ( (Float)(255) ));
            							}
HXDLIN( 117)							Float g1;
HXDLIN( 117)							int this8 = ((this5 >> 8) & 255);
HXDLIN( 117)							if ((this8 == 0)) {
HXLINE( 117)								g1 = ((Float)0.);
            							}
            							else {
HXLINE( 117)								g1 = (( (Float)(this8) ) / ( (Float)(255) ));
            							}
HXDLIN( 117)							Float b1;
HXDLIN( 117)							int this9 = (this5 & 255);
HXDLIN( 117)							if ((this9 == 0)) {
HXLINE( 117)								b1 = ((Float)0.);
            							}
            							else {
HXLINE( 117)								b1 = (( (Float)(this9) ) / ( (Float)(255) ));
            							}
HXDLIN( 117)							Float a2;
HXDLIN( 117)							int this10 = ((-16776961 >> 24) & 255);
HXDLIN( 117)							if ((this10 == 0)) {
HXLINE( 117)								a2 = ((Float)0.);
            							}
            							else {
HXLINE( 117)								a2 = (( (Float)(this10) ) / ( (Float)(255) ));
            							}
HXDLIN( 117)							Float r2;
HXDLIN( 117)							int this11 = ((-16776961 >> 16) & 255);
HXDLIN( 117)							if ((this11 == 0)) {
HXLINE( 117)								r2 = ((Float)0.);
            							}
            							else {
HXLINE( 117)								r2 = (( (Float)(this11) ) / ( (Float)(255) ));
            							}
HXDLIN( 117)							Float g2;
HXDLIN( 117)							int this12 = ((-16776961 >> 8) & 255);
HXDLIN( 117)							if ((this12 == 0)) {
HXLINE( 117)								g2 = ((Float)0.);
            							}
            							else {
HXLINE( 117)								g2 = (( (Float)(this12) ) / ( (Float)(255) ));
            							}
HXDLIN( 117)							Float b2;
HXDLIN( 117)							int this13 = (-16776961 & 255);
HXDLIN( 117)							if ((this13 == 0)) {
HXLINE( 117)								b2 = ((Float)0.);
            							}
            							else {
HXLINE( 117)								b2 = (( (Float)(this13) ) / ( (Float)(255) ));
            							}
HXDLIN( 117)							Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 117)							int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 117)							int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 117)							int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 117)							int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 117)							int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 117)							{
HXLINE( 117)								::haxe::io::ArrayBufferViewImpl this14 = this1->image;
HXDLIN( 117)								int value;
HXDLIN( 117)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)									value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            								}
            								else {
HXLINE( 117)									value = blended;
            								}
HXDLIN( 117)								bool _hx_tmp;
HXDLIN( 117)								if ((location >= 0)) {
HXLINE( 117)									_hx_tmp = (location < (this14->byteLength >> 2));
            								}
            								else {
HXLINE( 117)									_hx_tmp = false;
            								}
HXDLIN( 117)								if (_hx_tmp) {
HXLINE( 117)									::haxe::io::Bytes _this = this14->bytes;
HXDLIN( 117)									int pos = ((location << 2) + this14->byteOffset);
HXDLIN( 117)									_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 117)									_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 117)									_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 117)									_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            								}
            							}
            						}
            						else {
HXLINE( 117)							::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 117)							int index;
HXDLIN( 117)							if (this1->useVirtualPos) {
HXLINE( 117)								index = ::Std_obj::_hx_int(((((( (Float)(q2) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            							}
            							else {
HXLINE( 117)								index = ::Std_obj::_hx_int(( (Float)(((q2 * this1->width) + x)) ));
            							}
HXDLIN( 117)							int value;
HXDLIN( 117)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)								value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            							}
            							else {
HXLINE( 117)								value = c;
            							}
HXDLIN( 117)							bool _hx_tmp;
HXDLIN( 117)							if ((index >= 0)) {
HXLINE( 117)								_hx_tmp = (index < (this2->byteLength >> 2));
            							}
            							else {
HXLINE( 117)								_hx_tmp = false;
            							}
HXDLIN( 117)							if (_hx_tmp) {
HXLINE( 117)								::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 117)								int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 117)								_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 117)								_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 117)								_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 117)								_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            							}
            						}
            					}
HXDLIN( 117)					if ((p2 > maxX2)) {
HXLINE( 247)						p2 = xx2;
HXLINE( 117)						q2 = (q2 + 1);
            					}
HXDLIN( 117)					if ((q2 > maxY2)) {
HXLINE( 117)						goto _hx_goto_29;
            					}
            				}
            				_hx_goto_29:;
            			}
HXDLIN( 117)			{
HXLINE( 117)				Float x3 = (dx - ((Float)6.));
HXDLIN( 117)				Float y3 = (dy - ((Float)6.));
HXDLIN( 117)				int p3 = ::Std_obj::_hx_int(x3);
HXDLIN( 117)				int xx3 = p3;
HXDLIN( 117)				int q3 = ::Std_obj::_hx_int(y3);
HXDLIN( 117)				int maxX3 = ::Std_obj::_hx_int((x3 + 12));
HXDLIN( 117)				int maxY3 = ::Std_obj::_hx_int((y3 + 12));
HXDLIN( 117)				while(true){
HXLINE( 117)					{
HXLINE( 117)						p3 = (p3 + 1);
HXDLIN( 117)						int x = (p3 - 1);
HXDLIN( 117)						int this2 = -1048336;
HXDLIN( 117)						int c = this2;
HXDLIN( 117)						bool _hx_tmp;
HXDLIN( 117)						if ((((c >> 24) & 255) < 254)) {
HXLINE( 117)							_hx_tmp = this1->transparent;
            						}
            						else {
HXLINE( 117)							_hx_tmp = false;
            						}
HXDLIN( 117)						if (_hx_tmp) {
HXLINE( 117)							int location;
HXDLIN( 117)							if (this1->useVirtualPos) {
HXLINE( 117)								location = ::Std_obj::_hx_int(((((( (Float)(q3) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            							}
            							else {
HXLINE( 117)								location = ::Std_obj::_hx_int(( (Float)(((q3 * this1->width) + x)) ));
            							}
HXDLIN( 117)							::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 117)							::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 117)							int pos = ((location << 2) + this2->byteOffset);
HXDLIN( 117)							int this3 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 117)							int this4 = this3;
HXDLIN( 117)							int this5;
HXDLIN( 117)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)								this5 = ((((((this4 >> 24) & 255) << 24) | ((this4 & 255) << 16)) | (((this4 >> 8) & 255) << 8)) | ((this4 >> 16) & 255));
            							}
            							else {
HXLINE( 117)								this5 = this4;
            							}
HXDLIN( 117)							Float a1;
HXDLIN( 117)							int this6 = ((this5 >> 24) & 255);
HXDLIN( 117)							if ((this6 == 0)) {
HXLINE( 117)								a1 = ((Float)0.);
            							}
            							else {
HXLINE( 117)								a1 = (( (Float)(this6) ) / ( (Float)(255) ));
            							}
HXDLIN( 117)							Float r1;
HXDLIN( 117)							int this7 = ((this5 >> 16) & 255);
HXDLIN( 117)							if ((this7 == 0)) {
HXLINE( 117)								r1 = ((Float)0.);
            							}
            							else {
HXLINE( 117)								r1 = (( (Float)(this7) ) / ( (Float)(255) ));
            							}
HXDLIN( 117)							Float g1;
HXDLIN( 117)							int this8 = ((this5 >> 8) & 255);
HXDLIN( 117)							if ((this8 == 0)) {
HXLINE( 117)								g1 = ((Float)0.);
            							}
            							else {
HXLINE( 117)								g1 = (( (Float)(this8) ) / ( (Float)(255) ));
            							}
HXDLIN( 117)							Float b1;
HXDLIN( 117)							int this9 = (this5 & 255);
HXDLIN( 117)							if ((this9 == 0)) {
HXLINE( 117)								b1 = ((Float)0.);
            							}
            							else {
HXLINE( 117)								b1 = (( (Float)(this9) ) / ( (Float)(255) ));
            							}
HXDLIN( 117)							Float a2;
HXDLIN( 117)							int this10 = ((-1048336 >> 24) & 255);
HXDLIN( 117)							if ((this10 == 0)) {
HXLINE( 117)								a2 = ((Float)0.);
            							}
            							else {
HXLINE( 117)								a2 = (( (Float)(this10) ) / ( (Float)(255) ));
            							}
HXDLIN( 117)							Float r2;
HXDLIN( 117)							int this11 = ((-1048336 >> 16) & 255);
HXDLIN( 117)							if ((this11 == 0)) {
HXLINE( 117)								r2 = ((Float)0.);
            							}
            							else {
HXLINE( 117)								r2 = (( (Float)(this11) ) / ( (Float)(255) ));
            							}
HXDLIN( 117)							Float g2;
HXDLIN( 117)							int this12 = ((-1048336 >> 8) & 255);
HXDLIN( 117)							if ((this12 == 0)) {
HXLINE( 117)								g2 = ((Float)0.);
            							}
            							else {
HXLINE( 117)								g2 = (( (Float)(this12) ) / ( (Float)(255) ));
            							}
HXDLIN( 117)							Float b2;
HXDLIN( 117)							int this13 = (-1048336 & 255);
HXDLIN( 117)							if ((this13 == 0)) {
HXLINE( 117)								b2 = ((Float)0.);
            							}
            							else {
HXLINE( 117)								b2 = (( (Float)(this13) ) / ( (Float)(255) ));
            							}
HXDLIN( 117)							Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 117)							int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 117)							int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 117)							int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 117)							int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 117)							int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 117)							{
HXLINE( 117)								::haxe::io::ArrayBufferViewImpl this14 = this1->image;
HXDLIN( 117)								int value;
HXDLIN( 117)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)									value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            								}
            								else {
HXLINE( 117)									value = blended;
            								}
HXDLIN( 117)								bool _hx_tmp;
HXDLIN( 117)								if ((location >= 0)) {
HXLINE( 117)									_hx_tmp = (location < (this14->byteLength >> 2));
            								}
            								else {
HXLINE( 117)									_hx_tmp = false;
            								}
HXDLIN( 117)								if (_hx_tmp) {
HXLINE( 117)									::haxe::io::Bytes _this = this14->bytes;
HXDLIN( 117)									int pos = ((location << 2) + this14->byteOffset);
HXDLIN( 117)									_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 117)									_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 117)									_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 117)									_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            								}
            							}
            						}
            						else {
HXLINE( 117)							::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 117)							int index;
HXDLIN( 117)							if (this1->useVirtualPos) {
HXLINE( 117)								index = ::Std_obj::_hx_int(((((( (Float)(q3) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            							}
            							else {
HXLINE( 117)								index = ::Std_obj::_hx_int(( (Float)(((q3 * this1->width) + x)) ));
            							}
HXDLIN( 117)							int value;
HXDLIN( 117)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)								value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            							}
            							else {
HXLINE( 117)								value = c;
            							}
HXDLIN( 117)							bool _hx_tmp;
HXDLIN( 117)							if ((index >= 0)) {
HXLINE( 117)								_hx_tmp = (index < (this2->byteLength >> 2));
            							}
            							else {
HXLINE( 117)								_hx_tmp = false;
            							}
HXDLIN( 117)							if (_hx_tmp) {
HXLINE( 117)								::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 117)								int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 117)								_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 117)								_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 117)								_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 117)								_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            							}
            						}
            					}
HXDLIN( 117)					if ((p3 > maxX3)) {
HXLINE( 247)						p3 = xx3;
HXLINE( 117)						q3 = (q3 + 1);
            					}
HXDLIN( 117)					if ((q3 > maxY3)) {
HXLINE( 117)						goto _hx_goto_30;
            					}
            				}
            				_hx_goto_30:;
            			}
            		}
HXDLIN( 117)		Float bx1 = bx;
HXDLIN( 117)		Float by1 = by;
HXDLIN( 117)		Float cx1 = dx;
HXDLIN( 117)		Float cy1 = dy;
HXDLIN( 117)		bool adjustWinding = (((((ax * by1) - (bx1 * ay)) + ((bx1 * cy1) - (cx1 * by1))) + ((cx1 * ay) - (ax * cy1))) > 0);
HXDLIN( 117)		if (!(adjustWinding)) {
HXLINE( 117)			Float bx_ = bx1;
HXDLIN( 117)			Float by_ = by1;
HXLINE( 188)			bx1 = cx1;
HXLINE( 189)			by1 = cy1;
HXLINE( 190)			cx1 = bx_;
HXLINE( 191)			cy1 = by_;
            		}
HXLINE( 117)		bool hasUndo = false;
HXDLIN( 117)		Float s0 = ((ay * cx1) - (ax * cy1));
HXDLIN( 117)		Float sx = (cy1 - ay);
HXDLIN( 117)		Float sy = (ax - cx1);
HXDLIN( 117)		Float t0 = ((ax * by1) - (ay * bx1));
HXDLIN( 117)		Float tx = (ay - by1);
HXDLIN( 117)		Float ty = (bx1 - ax);
HXDLIN( 117)		Float A = ((((-(by1) * cx1) + (ay * (-(bx1) + cx1))) + (ax * (by1 - cy1))) + (bx1 * cy1));
HXDLIN( 117)		::pixelimage::iter::IntIterStart xIter3;
HXDLIN( 117)		if ((ax > bx1)) {
HXLINE( 117)			if ((ax > cx1)) {
HXLINE( 117)				int min;
HXDLIN( 117)				if ((bx1 > cx1)) {
HXLINE( 117)					min = ::Math_obj::floor(cx1);
            				}
            				else {
HXLINE( 117)					min = ::Math_obj::floor(bx1);
            				}
HXDLIN( 117)				int ii_min = min;
HXDLIN( 117)				int ii_max = ::Math_obj::ceil(ax);
HXDLIN( 117)				::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 117)				xIter3 = this1;
            			}
            			else {
HXLINE( 117)				int ii_min = ::Math_obj::floor(bx1);
HXDLIN( 117)				int ii_max = ::Math_obj::ceil(cx1);
HXDLIN( 117)				::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 117)				xIter3 = this1;
            			}
            		}
            		else {
HXLINE( 117)			if ((bx1 > cx1)) {
HXLINE( 117)				int min;
HXDLIN( 117)				if ((ax > cx1)) {
HXLINE( 117)					min = ::Math_obj::floor(cx1);
            				}
            				else {
HXLINE( 117)					min = ::Math_obj::ceil(ax);
            				}
HXDLIN( 117)				int ii_min = min;
HXDLIN( 117)				int ii_max = ::Math_obj::ceil(bx1);
HXDLIN( 117)				::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 117)				xIter3 = this1;
            			}
            			else {
HXLINE( 117)				int ii_min = ::Math_obj::floor(ax);
HXDLIN( 117)				int ii_max = ::Math_obj::ceil(cx1);
HXDLIN( 117)				::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 117)				xIter3 = this1;
            			}
            		}
HXDLIN( 117)		::pixelimage::iter::IntIterStart yIter3;
HXDLIN( 117)		if ((ay > by1)) {
HXLINE( 117)			if ((ay > cy1)) {
HXLINE( 117)				int min;
HXDLIN( 117)				if ((by1 > cy1)) {
HXLINE( 117)					min = ::Math_obj::floor(cy1);
            				}
            				else {
HXLINE( 117)					min = ::Math_obj::floor(by1);
            				}
HXDLIN( 117)				int ii_min = min;
HXDLIN( 117)				int ii_max = ::Math_obj::ceil(ay);
HXDLIN( 117)				::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 117)				yIter3 = this1;
            			}
            			else {
HXLINE( 117)				int ii_min = ::Math_obj::floor(by1);
HXDLIN( 117)				int ii_max = ::Math_obj::ceil(cy1);
HXDLIN( 117)				::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 117)				yIter3 = this1;
            			}
            		}
            		else {
HXLINE( 117)			if ((by1 > cy1)) {
HXLINE( 117)				int min;
HXDLIN( 117)				if ((ay > cy1)) {
HXLINE( 117)					min = ::Math_obj::floor(cy1);
            				}
            				else {
HXLINE( 117)					min = ::Math_obj::ceil(ay);
            				}
HXDLIN( 117)				int ii_min = min;
HXDLIN( 117)				int ii_max = ::Math_obj::ceil(by1);
HXDLIN( 117)				::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 117)				yIter3 = this1;
            			}
            			else {
HXLINE( 117)				int ii_min = ::Math_obj::floor(ay);
HXDLIN( 117)				int ii_max = ::Math_obj::ceil(cy1);
HXDLIN( 117)				::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 117)				yIter3 = this1;
            			}
            		}
HXDLIN( 117)		::pixelimage::ImageStruct undoImage = null();
HXDLIN( 117)		if (hasUndo) {
HXLINE( 117)			int w = ((xIter3->max - xIter3->start) + 1);
HXDLIN( 117)			int h = ((yIter3->max - yIter3->start) + 1);
HXDLIN( 117)			int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN( 117)			::haxe::io::ArrayBufferViewImpl this2 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 117)			::haxe::io::ArrayBufferViewImpl this3 = this2;
HXDLIN( 117)			::pixelimage::ImageStruct this4 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this3);
HXDLIN( 117)			undoImage = this4;
HXDLIN( 117)			{
HXLINE( 117)				int rectLeft = xIter3->start;
HXDLIN( 117)				int rectTop = yIter3->start;
HXDLIN( 117)				int rectRight = xIter3->max;
HXDLIN( 117)				bool forceClear = false;
HXDLIN( 117)				{
HXLINE( 117)					int _g = rectTop;
HXDLIN( 117)					int _g1 = yIter3->max;
HXDLIN( 117)					while((_g < _g1)){
HXLINE( 117)						_g = (_g + 1);
HXDLIN( 117)						int dy = (_g - 1);
HXDLIN( 117)						{
HXLINE( 117)							int _g1 = rectLeft;
HXDLIN( 117)							int _g2 = rectRight;
HXDLIN( 117)							while((_g1 < _g2)){
HXLINE( 117)								_g1 = (_g1 + 1);
HXDLIN( 117)								int dx = (_g1 - 1);
HXDLIN( 117)								::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 117)								int index;
HXDLIN( 117)								if (this1->useVirtualPos) {
HXLINE( 117)									index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            								}
            								else {
HXLINE( 117)									index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            								}
HXDLIN( 117)								::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 117)								int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 117)								int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 117)								int col;
HXDLIN( 117)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)									col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            								}
            								else {
HXLINE( 117)									col = c;
            								}
HXDLIN( 117)								bool _hx_tmp;
HXDLIN( 117)								if (this1->useMask) {
HXLINE( 117)									_hx_tmp = ::hx::IsNotNull( this1->mask );
            								}
            								else {
HXLINE( 117)									_hx_tmp = false;
            								}
HXDLIN( 117)								if (_hx_tmp) {
HXLINE( 117)									::pixelimage::ImageStruct this2 = this1->mask;
HXDLIN( 117)									::haxe::io::ArrayBufferViewImpl this3 = this2->image;
HXDLIN( 117)									int index;
HXDLIN( 117)									if (this2->useVirtualPos) {
HXLINE( 117)										index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this2->virtualY) * ( (Float)(this2->width) )) + dx) - this2->virtualX));
            									}
            									else {
HXLINE( 117)										index = ::Std_obj::_hx_int(( (Float)(((dy * this2->width) + dx)) ));
            									}
HXDLIN( 117)									::haxe::io::Bytes _this = this3->bytes;
HXDLIN( 117)									int pos = ((index << 2) + this3->byteOffset);
HXDLIN( 117)									int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 117)									int v;
HXDLIN( 117)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)										v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXLINE( 117)										v = c;
            									}
HXDLIN( 117)									int this4 = v;
HXDLIN( 117)									int maskPixel = this4;
HXDLIN( 117)									int this5 = col;
HXDLIN( 117)									int this6 = this5;
HXDLIN( 117)									if ((maskPixel == 0)) {
HXLINE( 117)										int this1 = this6;
HXDLIN( 117)										col = this1;
            									}
            									else {
HXLINE( 117)										Float m0;
HXDLIN( 117)										int this1 = ((maskPixel >> 24) & 255);
HXDLIN( 117)										if ((this1 == 0)) {
HXLINE( 117)											m0 = ((Float)0.);
            										}
            										else {
HXLINE( 117)											m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            										}
HXDLIN( 117)										Float m1;
HXDLIN( 117)										int this2 = ((maskPixel >> 16) & 255);
HXDLIN( 117)										if ((this2 == 0)) {
HXLINE( 117)											m1 = ((Float)0.);
            										}
            										else {
HXLINE( 117)											m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            										}
HXDLIN( 117)										Float m2;
HXDLIN( 117)										int this3 = ((maskPixel >> 8) & 255);
HXDLIN( 117)										if ((this3 == 0)) {
HXLINE( 117)											m2 = ((Float)0.);
            										}
            										else {
HXLINE( 117)											m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            										}
HXDLIN( 117)										Float m3;
HXDLIN( 117)										int this4 = (maskPixel & 255);
HXDLIN( 117)										if ((this4 == 0)) {
HXLINE( 117)											m3 = ((Float)0.);
            										}
            										else {
HXLINE( 117)											m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            										}
HXDLIN( 117)										int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this6 >> 24) & 255)) )));
HXDLIN( 117)										int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this6 >> 16) & 255)) )));
HXDLIN( 117)										int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this6 >> 8) & 255)) )));
HXDLIN( 117)										int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this6 & 255)) )));
HXDLIN( 117)										col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN( 117)								if ((col != 0)) {
HXLINE( 117)									int x = (dx - rectLeft);
HXDLIN( 117)									int y = (dy - rectTop);
HXDLIN( 117)									int this1 = col;
HXDLIN( 117)									int c = this1;
HXDLIN( 117)									bool _hx_tmp;
HXDLIN( 117)									if ((((c >> 24) & 255) < 254)) {
HXLINE( 117)										_hx_tmp = undoImage->transparent;
            									}
            									else {
HXLINE( 117)										_hx_tmp = false;
            									}
HXDLIN( 117)									if (_hx_tmp) {
HXLINE( 117)										int location;
HXDLIN( 117)										if (undoImage->useVirtualPos) {
HXLINE( 117)											location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            										}
            										else {
HXLINE( 117)											location = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            										}
HXDLIN( 117)										::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN( 117)										::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 117)										int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 117)										int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 117)										int this3 = this2;
HXDLIN( 117)										int this4;
HXDLIN( 117)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)											this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            										}
            										else {
HXLINE( 117)											this4 = this3;
            										}
HXDLIN( 117)										Float a1;
HXDLIN( 117)										int this5 = ((this4 >> 24) & 255);
HXDLIN( 117)										if ((this5 == 0)) {
HXLINE( 117)											a1 = ((Float)0.);
            										}
            										else {
HXLINE( 117)											a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            										}
HXDLIN( 117)										Float r1;
HXDLIN( 117)										int this6 = ((this4 >> 16) & 255);
HXDLIN( 117)										if ((this6 == 0)) {
HXLINE( 117)											r1 = ((Float)0.);
            										}
            										else {
HXLINE( 117)											r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            										}
HXDLIN( 117)										Float g1;
HXDLIN( 117)										int this7 = ((this4 >> 8) & 255);
HXDLIN( 117)										if ((this7 == 0)) {
HXLINE( 117)											g1 = ((Float)0.);
            										}
            										else {
HXLINE( 117)											g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            										}
HXDLIN( 117)										Float b1;
HXDLIN( 117)										int this8 = (this4 & 255);
HXDLIN( 117)										if ((this8 == 0)) {
HXLINE( 117)											b1 = ((Float)0.);
            										}
            										else {
HXLINE( 117)											b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            										}
HXDLIN( 117)										Float a2;
HXDLIN( 117)										int this9 = ((col >> 24) & 255);
HXDLIN( 117)										if ((this9 == 0)) {
HXLINE( 117)											a2 = ((Float)0.);
            										}
            										else {
HXLINE( 117)											a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            										}
HXDLIN( 117)										Float r2;
HXDLIN( 117)										int this10 = ((col >> 16) & 255);
HXDLIN( 117)										if ((this10 == 0)) {
HXLINE( 117)											r2 = ((Float)0.);
            										}
            										else {
HXLINE( 117)											r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            										}
HXDLIN( 117)										Float g2;
HXDLIN( 117)										int this11 = ((col >> 8) & 255);
HXDLIN( 117)										if ((this11 == 0)) {
HXLINE( 117)											g2 = ((Float)0.);
            										}
            										else {
HXLINE( 117)											g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            										}
HXDLIN( 117)										Float b2;
HXDLIN( 117)										int this12 = (col & 255);
HXDLIN( 117)										if ((this12 == 0)) {
HXLINE( 117)											b2 = ((Float)0.);
            										}
            										else {
HXLINE( 117)											b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            										}
HXDLIN( 117)										Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 117)										int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 117)										int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 117)										int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 117)										int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 117)										int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 117)										{
HXLINE( 117)											::haxe::io::ArrayBufferViewImpl this13 = undoImage->image;
HXDLIN( 117)											int value;
HXDLIN( 117)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)												value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            											}
            											else {
HXLINE( 117)												value = blended;
            											}
HXDLIN( 117)											bool _hx_tmp;
HXDLIN( 117)											if ((location >= 0)) {
HXLINE( 117)												_hx_tmp = (location < (this13->byteLength >> 2));
            											}
            											else {
HXLINE( 117)												_hx_tmp = false;
            											}
HXDLIN( 117)											if (_hx_tmp) {
HXLINE( 117)												::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 117)												int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 117)												_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 117)												_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 117)												_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 117)												_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            											}
            										}
            									}
            									else {
HXLINE( 117)										::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN( 117)										int index;
HXDLIN( 117)										if (undoImage->useVirtualPos) {
HXLINE( 117)											index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            										}
            										else {
HXLINE( 117)											index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            										}
HXDLIN( 117)										int value;
HXDLIN( 117)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)											value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            										}
            										else {
HXLINE( 117)											value = c;
            										}
HXDLIN( 117)										bool _hx_tmp;
HXDLIN( 117)										if ((index >= 0)) {
HXLINE( 117)											_hx_tmp = (index < (this1->byteLength >> 2));
            										}
            										else {
HXLINE( 117)											_hx_tmp = false;
            										}
HXDLIN( 117)										if (_hx_tmp) {
HXLINE( 117)											::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 117)											int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 117)											_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 117)											_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 117)											_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 117)											_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            										}
            									}
            								}
            								else {
HXLINE( 117)									if (forceClear) {
HXLINE( 117)										::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN( 117)										int x = (dx - rectLeft);
HXDLIN( 117)										int y = (dy - rectTop);
HXDLIN( 117)										int index;
HXDLIN( 117)										if (undoImage->useVirtualPos) {
HXLINE( 117)											index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            										}
            										else {
HXLINE( 117)											index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            										}
HXDLIN( 117)										bool _hx_tmp;
HXDLIN( 117)										if ((index >= 0)) {
HXLINE( 117)											_hx_tmp = (index < (this1->byteLength >> 2));
            										}
            										else {
HXLINE( 117)											_hx_tmp = false;
            										}
HXDLIN( 117)										if (_hx_tmp) {
HXLINE( 117)											::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 117)											int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 117)											_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 117)											_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 117)											_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 117)											_this->b[(pos + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 117)		bool foundY = false;
HXDLIN( 117)		Float s = ((Float)0.);
HXDLIN( 117)		Float t = ((Float)0.);
HXDLIN( 117)		Float sxx = ((Float)0.);
HXDLIN( 117)		Float txx = ((Float)0.);
HXDLIN( 117)		int _g_min = xIter3->start;
HXDLIN( 117)		int _g_max = xIter3->max;
HXDLIN( 117)		while((_g_min < _g_max)){
HXLINE( 117)			_g_min = (_g_min + 1);
HXDLIN( 117)			int x = (_g_min - 1);
HXLINE( 223)			sxx = (sx * ( (Float)(x) ));
HXLINE( 224)			txx = (tx * ( (Float)(x) ));
HXLINE( 225)			foundY = false;
HXLINE( 117)			{
HXLINE( 117)				int _g_min1 = yIter3->start;
HXDLIN( 117)				int _g_max = yIter3->max;
HXDLIN( 117)				while((_g_min1 < _g_max)){
HXLINE( 117)					_g_min1 = (_g_min1 + 1);
HXDLIN( 117)					int y = (_g_min1 - 1);
HXLINE( 227)					s = ((s0 + sxx) + (sy * ( (Float)(y) )));
HXLINE( 228)					t = ((t0 + txx) + (ty * ( (Float)(y) )));
HXLINE( 117)					bool _hx_tmp;
HXDLIN( 117)					if (!((s <= 0))) {
HXLINE( 117)						_hx_tmp = (t <= 0);
            					}
            					else {
HXLINE( 117)						_hx_tmp = true;
            					}
HXDLIN( 117)					if (_hx_tmp) {
HXLINE( 117)						if (foundY) {
HXLINE( 117)							goto _hx_goto_34;
            						}
            					}
            					else {
HXLINE( 117)						if (((s + t) < A)) {
HXLINE( 117)							int x1 = ::hx::Mod(x,tileImage->width);
HXDLIN( 117)							int y1 = ::hx::Mod(y,tileImage->height);
HXDLIN( 117)							::haxe::io::ArrayBufferViewImpl this2 = tileImage->image;
HXDLIN( 117)							int index;
HXDLIN( 117)							if (tileImage->useVirtualPos) {
HXLINE( 117)								index = ::Std_obj::_hx_int(((((( (Float)(y1) ) - tileImage->virtualY) * ( (Float)(tileImage->width) )) + x1) - tileImage->virtualX));
            							}
            							else {
HXLINE( 117)								index = ::Std_obj::_hx_int(( (Float)(((y1 * tileImage->width) + x1)) ));
            							}
HXDLIN( 117)							::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 117)							int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 117)							int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 117)							int color;
HXDLIN( 117)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)								color = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            							}
            							else {
HXLINE( 117)								color = c;
            							}
HXDLIN( 117)							{
HXLINE( 117)								int this3 = color;
HXDLIN( 117)								int c1 = this3;
HXDLIN( 117)								bool _hx_tmp;
HXDLIN( 117)								if ((((c1 >> 24) & 255) < 254)) {
HXLINE( 117)									_hx_tmp = this1->transparent;
            								}
            								else {
HXLINE( 117)									_hx_tmp = false;
            								}
HXDLIN( 117)								if (_hx_tmp) {
HXLINE( 117)									int location;
HXDLIN( 117)									if (this1->useVirtualPos) {
HXLINE( 117)										location = ::Std_obj::_hx_int(((((( (Float)(y) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            									}
            									else {
HXLINE( 117)										location = ::Std_obj::_hx_int(( (Float)(((y * this1->width) + x)) ));
            									}
HXDLIN( 117)									::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 117)									::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 117)									int pos = ((location << 2) + this2->byteOffset);
HXDLIN( 117)									int this3 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 117)									int this4 = this3;
HXDLIN( 117)									int this5;
HXDLIN( 117)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)										this5 = ((((((this4 >> 24) & 255) << 24) | ((this4 & 255) << 16)) | (((this4 >> 8) & 255) << 8)) | ((this4 >> 16) & 255));
            									}
            									else {
HXLINE( 117)										this5 = this4;
            									}
HXDLIN( 117)									Float a1;
HXDLIN( 117)									int this6 = ((this5 >> 24) & 255);
HXDLIN( 117)									if ((this6 == 0)) {
HXLINE( 117)										a1 = ((Float)0.);
            									}
            									else {
HXLINE( 117)										a1 = (( (Float)(this6) ) / ( (Float)(255) ));
            									}
HXDLIN( 117)									Float r1;
HXDLIN( 117)									int this7 = ((this5 >> 16) & 255);
HXDLIN( 117)									if ((this7 == 0)) {
HXLINE( 117)										r1 = ((Float)0.);
            									}
            									else {
HXLINE( 117)										r1 = (( (Float)(this7) ) / ( (Float)(255) ));
            									}
HXDLIN( 117)									Float g1;
HXDLIN( 117)									int this8 = ((this5 >> 8) & 255);
HXDLIN( 117)									if ((this8 == 0)) {
HXLINE( 117)										g1 = ((Float)0.);
            									}
            									else {
HXLINE( 117)										g1 = (( (Float)(this8) ) / ( (Float)(255) ));
            									}
HXDLIN( 117)									Float b1;
HXDLIN( 117)									int this9 = (this5 & 255);
HXDLIN( 117)									if ((this9 == 0)) {
HXLINE( 117)										b1 = ((Float)0.);
            									}
            									else {
HXLINE( 117)										b1 = (( (Float)(this9) ) / ( (Float)(255) ));
            									}
HXDLIN( 117)									Float a2;
HXDLIN( 117)									int this10 = ((color >> 24) & 255);
HXDLIN( 117)									if ((this10 == 0)) {
HXLINE( 117)										a2 = ((Float)0.);
            									}
            									else {
HXLINE( 117)										a2 = (( (Float)(this10) ) / ( (Float)(255) ));
            									}
HXDLIN( 117)									Float r2;
HXDLIN( 117)									int this11 = ((color >> 16) & 255);
HXDLIN( 117)									if ((this11 == 0)) {
HXLINE( 117)										r2 = ((Float)0.);
            									}
            									else {
HXLINE( 117)										r2 = (( (Float)(this11) ) / ( (Float)(255) ));
            									}
HXDLIN( 117)									Float g2;
HXDLIN( 117)									int this12 = ((color >> 8) & 255);
HXDLIN( 117)									if ((this12 == 0)) {
HXLINE( 117)										g2 = ((Float)0.);
            									}
            									else {
HXLINE( 117)										g2 = (( (Float)(this12) ) / ( (Float)(255) ));
            									}
HXDLIN( 117)									Float b2;
HXDLIN( 117)									int this13 = (color & 255);
HXDLIN( 117)									if ((this13 == 0)) {
HXLINE( 117)										b2 = ((Float)0.);
            									}
            									else {
HXLINE( 117)										b2 = (( (Float)(this13) ) / ( (Float)(255) ));
            									}
HXDLIN( 117)									Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 117)									int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 117)									int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 117)									int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 117)									int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 117)									int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 117)									{
HXLINE( 117)										::haxe::io::ArrayBufferViewImpl this14 = this1->image;
HXDLIN( 117)										int value;
HXDLIN( 117)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)											value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            										}
            										else {
HXLINE( 117)											value = blended;
            										}
HXDLIN( 117)										bool _hx_tmp;
HXDLIN( 117)										if ((location >= 0)) {
HXLINE( 117)											_hx_tmp = (location < (this14->byteLength >> 2));
            										}
            										else {
HXLINE( 117)											_hx_tmp = false;
            										}
HXDLIN( 117)										if (_hx_tmp) {
HXLINE( 117)											::haxe::io::Bytes _this = this14->bytes;
HXDLIN( 117)											int pos = ((location << 2) + this14->byteOffset);
HXDLIN( 117)											_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 117)											_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 117)											_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 117)											_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            										}
            									}
            								}
            								else {
HXLINE( 117)									::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 117)									int index;
HXDLIN( 117)									if (this1->useVirtualPos) {
HXLINE( 117)										index = ::Std_obj::_hx_int(((((( (Float)(y) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            									}
            									else {
HXLINE( 117)										index = ::Std_obj::_hx_int(( (Float)(((y * this1->width) + x)) ));
            									}
HXDLIN( 117)									int value;
HXDLIN( 117)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)										value = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            									}
            									else {
HXLINE( 117)										value = c1;
            									}
HXDLIN( 117)									bool _hx_tmp;
HXDLIN( 117)									if ((index >= 0)) {
HXLINE( 117)										_hx_tmp = (index < (this2->byteLength >> 2));
            									}
            									else {
HXLINE( 117)										_hx_tmp = false;
            									}
HXDLIN( 117)									if (_hx_tmp) {
HXLINE( 117)										::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 117)										int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 117)										_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 117)										_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 117)										_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 117)										_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            									}
            								}
            							}
HXLINE( 237)							foundY = true;
            						}
            						else {
HXLINE( 117)							if (foundY) {
HXLINE( 117)								goto _hx_goto_34;
            							}
            						}
            					}
            				}
            				_hx_goto_34:;
            			}
            		}
HXDLIN( 117)		Float bx2 = cx;
HXDLIN( 117)		Float by2 = cy;
HXDLIN( 117)		Float cx2 = dx;
HXDLIN( 117)		Float cy2 = dy;
HXDLIN( 117)		bool adjustWinding1 = (((((bx * by2) - (bx2 * by)) + ((bx2 * cy2) - (cx2 * by2))) + ((cx2 * by) - (bx * cy2))) > 0);
HXDLIN( 117)		if (!(adjustWinding1)) {
HXLINE( 117)			Float bx_ = bx2;
HXDLIN( 117)			Float by_ = by2;
HXLINE( 188)			bx2 = cx2;
HXLINE( 189)			by2 = cy2;
HXLINE( 190)			cx2 = bx_;
HXLINE( 191)			cy2 = by_;
            		}
HXLINE( 117)		bool hasUndo1 = false;
HXDLIN( 117)		Float s01 = ((by * cx2) - (bx * cy2));
HXDLIN( 117)		Float sx1 = (cy2 - by);
HXDLIN( 117)		Float sy1 = (bx - cx2);
HXDLIN( 117)		Float t01 = ((bx * by2) - (by * bx2));
HXDLIN( 117)		Float tx1 = (by - by2);
HXDLIN( 117)		Float ty1 = (bx2 - bx);
HXDLIN( 117)		Float A1 = ((((-(by2) * cx2) + (by * (-(bx2) + cx2))) + (bx * (by2 - cy2))) + (bx2 * cy2));
HXDLIN( 117)		::pixelimage::iter::IntIterStart xIter31;
HXDLIN( 117)		if ((bx > bx2)) {
HXLINE( 117)			if ((bx > cx2)) {
HXLINE( 117)				int min;
HXDLIN( 117)				if ((bx2 > cx2)) {
HXLINE( 117)					min = ::Math_obj::floor(cx2);
            				}
            				else {
HXLINE( 117)					min = ::Math_obj::floor(bx2);
            				}
HXDLIN( 117)				int ii_min = min;
HXDLIN( 117)				int ii_max = ::Math_obj::ceil(bx);
HXDLIN( 117)				::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 117)				xIter31 = this1;
            			}
            			else {
HXLINE( 117)				int ii_min = ::Math_obj::floor(bx2);
HXDLIN( 117)				int ii_max = ::Math_obj::ceil(cx2);
HXDLIN( 117)				::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 117)				xIter31 = this1;
            			}
            		}
            		else {
HXLINE( 117)			if ((bx2 > cx2)) {
HXLINE( 117)				int min;
HXDLIN( 117)				if ((bx > cx2)) {
HXLINE( 117)					min = ::Math_obj::floor(cx2);
            				}
            				else {
HXLINE( 117)					min = ::Math_obj::ceil(bx);
            				}
HXDLIN( 117)				int ii_min = min;
HXDLIN( 117)				int ii_max = ::Math_obj::ceil(bx2);
HXDLIN( 117)				::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 117)				xIter31 = this1;
            			}
            			else {
HXLINE( 117)				int ii_min = ::Math_obj::floor(bx);
HXDLIN( 117)				int ii_max = ::Math_obj::ceil(cx2);
HXDLIN( 117)				::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 117)				xIter31 = this1;
            			}
            		}
HXDLIN( 117)		::pixelimage::iter::IntIterStart yIter31;
HXDLIN( 117)		if ((by > by2)) {
HXLINE( 117)			if ((by > cy2)) {
HXLINE( 117)				int min;
HXDLIN( 117)				if ((by2 > cy2)) {
HXLINE( 117)					min = ::Math_obj::floor(cy2);
            				}
            				else {
HXLINE( 117)					min = ::Math_obj::floor(by2);
            				}
HXDLIN( 117)				int ii_min = min;
HXDLIN( 117)				int ii_max = ::Math_obj::ceil(by);
HXDLIN( 117)				::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 117)				yIter31 = this1;
            			}
            			else {
HXLINE( 117)				int ii_min = ::Math_obj::floor(by2);
HXDLIN( 117)				int ii_max = ::Math_obj::ceil(cy2);
HXDLIN( 117)				::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 117)				yIter31 = this1;
            			}
            		}
            		else {
HXLINE( 117)			if ((by2 > cy2)) {
HXLINE( 117)				int min;
HXDLIN( 117)				if ((by > cy2)) {
HXLINE( 117)					min = ::Math_obj::floor(cy2);
            				}
            				else {
HXLINE( 117)					min = ::Math_obj::ceil(by);
            				}
HXDLIN( 117)				int ii_min = min;
HXDLIN( 117)				int ii_max = ::Math_obj::ceil(by2);
HXDLIN( 117)				::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 117)				yIter31 = this1;
            			}
            			else {
HXLINE( 117)				int ii_min = ::Math_obj::floor(by);
HXDLIN( 117)				int ii_max = ::Math_obj::ceil(cy2);
HXDLIN( 117)				::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 117)				yIter31 = this1;
            			}
            		}
HXDLIN( 117)		::pixelimage::ImageStruct undoImage1 = null();
HXDLIN( 117)		if (hasUndo1) {
HXLINE( 117)			int w = ((xIter31->max - xIter31->start) + 1);
HXDLIN( 117)			int h = ((yIter31->max - yIter31->start) + 1);
HXDLIN( 117)			int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN( 117)			::haxe::io::ArrayBufferViewImpl this2 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 117)			::haxe::io::ArrayBufferViewImpl this3 = this2;
HXDLIN( 117)			::pixelimage::ImageStruct this4 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this3);
HXDLIN( 117)			undoImage1 = this4;
HXDLIN( 117)			{
HXLINE( 117)				int rectLeft = xIter31->start;
HXDLIN( 117)				int rectTop = yIter31->start;
HXDLIN( 117)				int rectRight = xIter31->max;
HXDLIN( 117)				bool forceClear = false;
HXDLIN( 117)				{
HXLINE( 117)					int _g = rectTop;
HXDLIN( 117)					int _g1 = yIter31->max;
HXDLIN( 117)					while((_g < _g1)){
HXLINE( 117)						_g = (_g + 1);
HXDLIN( 117)						int dy = (_g - 1);
HXDLIN( 117)						{
HXLINE( 117)							int _g1 = rectLeft;
HXDLIN( 117)							int _g2 = rectRight;
HXDLIN( 117)							while((_g1 < _g2)){
HXLINE( 117)								_g1 = (_g1 + 1);
HXDLIN( 117)								int dx = (_g1 - 1);
HXDLIN( 117)								::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 117)								int index;
HXDLIN( 117)								if (this1->useVirtualPos) {
HXLINE( 117)									index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            								}
            								else {
HXLINE( 117)									index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            								}
HXDLIN( 117)								::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 117)								int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 117)								int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 117)								int col;
HXDLIN( 117)								if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)									col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            								}
            								else {
HXLINE( 117)									col = c;
            								}
HXDLIN( 117)								bool _hx_tmp;
HXDLIN( 117)								if (this1->useMask) {
HXLINE( 117)									_hx_tmp = ::hx::IsNotNull( this1->mask );
            								}
            								else {
HXLINE( 117)									_hx_tmp = false;
            								}
HXDLIN( 117)								if (_hx_tmp) {
HXLINE( 117)									::pixelimage::ImageStruct this2 = this1->mask;
HXDLIN( 117)									::haxe::io::ArrayBufferViewImpl this3 = this2->image;
HXDLIN( 117)									int index;
HXDLIN( 117)									if (this2->useVirtualPos) {
HXLINE( 117)										index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this2->virtualY) * ( (Float)(this2->width) )) + dx) - this2->virtualX));
            									}
            									else {
HXLINE( 117)										index = ::Std_obj::_hx_int(( (Float)(((dy * this2->width) + dx)) ));
            									}
HXDLIN( 117)									::haxe::io::Bytes _this = this3->bytes;
HXDLIN( 117)									int pos = ((index << 2) + this3->byteOffset);
HXDLIN( 117)									int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 117)									int v;
HXDLIN( 117)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)										v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            									}
            									else {
HXLINE( 117)										v = c;
            									}
HXDLIN( 117)									int this4 = v;
HXDLIN( 117)									int maskPixel = this4;
HXDLIN( 117)									int this5 = col;
HXDLIN( 117)									int this6 = this5;
HXDLIN( 117)									if ((maskPixel == 0)) {
HXLINE( 117)										int this1 = this6;
HXDLIN( 117)										col = this1;
            									}
            									else {
HXLINE( 117)										Float m0;
HXDLIN( 117)										int this1 = ((maskPixel >> 24) & 255);
HXDLIN( 117)										if ((this1 == 0)) {
HXLINE( 117)											m0 = ((Float)0.);
            										}
            										else {
HXLINE( 117)											m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            										}
HXDLIN( 117)										Float m1;
HXDLIN( 117)										int this2 = ((maskPixel >> 16) & 255);
HXDLIN( 117)										if ((this2 == 0)) {
HXLINE( 117)											m1 = ((Float)0.);
            										}
            										else {
HXLINE( 117)											m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            										}
HXDLIN( 117)										Float m2;
HXDLIN( 117)										int this3 = ((maskPixel >> 8) & 255);
HXDLIN( 117)										if ((this3 == 0)) {
HXLINE( 117)											m2 = ((Float)0.);
            										}
            										else {
HXLINE( 117)											m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            										}
HXDLIN( 117)										Float m3;
HXDLIN( 117)										int this4 = (maskPixel & 255);
HXDLIN( 117)										if ((this4 == 0)) {
HXLINE( 117)											m3 = ((Float)0.);
            										}
            										else {
HXLINE( 117)											m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            										}
HXDLIN( 117)										int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this6 >> 24) & 255)) )));
HXDLIN( 117)										int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this6 >> 16) & 255)) )));
HXDLIN( 117)										int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this6 >> 8) & 255)) )));
HXDLIN( 117)										int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this6 & 255)) )));
HXDLIN( 117)										col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            									}
            								}
HXDLIN( 117)								if ((col != 0)) {
HXLINE( 117)									int x = (dx - rectLeft);
HXDLIN( 117)									int y = (dy - rectTop);
HXDLIN( 117)									int this1 = col;
HXDLIN( 117)									int c = this1;
HXDLIN( 117)									bool _hx_tmp;
HXDLIN( 117)									if ((((c >> 24) & 255) < 254)) {
HXLINE( 117)										_hx_tmp = undoImage1->transparent;
            									}
            									else {
HXLINE( 117)										_hx_tmp = false;
            									}
HXDLIN( 117)									if (_hx_tmp) {
HXLINE( 117)										int location;
HXDLIN( 117)										if (undoImage1->useVirtualPos) {
HXLINE( 117)											location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            										}
            										else {
HXLINE( 117)											location = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            										}
HXDLIN( 117)										::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN( 117)										::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 117)										int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 117)										int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 117)										int this3 = this2;
HXDLIN( 117)										int this4;
HXDLIN( 117)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)											this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            										}
            										else {
HXLINE( 117)											this4 = this3;
            										}
HXDLIN( 117)										Float a1;
HXDLIN( 117)										int this5 = ((this4 >> 24) & 255);
HXDLIN( 117)										if ((this5 == 0)) {
HXLINE( 117)											a1 = ((Float)0.);
            										}
            										else {
HXLINE( 117)											a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            										}
HXDLIN( 117)										Float r1;
HXDLIN( 117)										int this6 = ((this4 >> 16) & 255);
HXDLIN( 117)										if ((this6 == 0)) {
HXLINE( 117)											r1 = ((Float)0.);
            										}
            										else {
HXLINE( 117)											r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            										}
HXDLIN( 117)										Float g1;
HXDLIN( 117)										int this7 = ((this4 >> 8) & 255);
HXDLIN( 117)										if ((this7 == 0)) {
HXLINE( 117)											g1 = ((Float)0.);
            										}
            										else {
HXLINE( 117)											g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            										}
HXDLIN( 117)										Float b1;
HXDLIN( 117)										int this8 = (this4 & 255);
HXDLIN( 117)										if ((this8 == 0)) {
HXLINE( 117)											b1 = ((Float)0.);
            										}
            										else {
HXLINE( 117)											b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            										}
HXDLIN( 117)										Float a2;
HXDLIN( 117)										int this9 = ((col >> 24) & 255);
HXDLIN( 117)										if ((this9 == 0)) {
HXLINE( 117)											a2 = ((Float)0.);
            										}
            										else {
HXLINE( 117)											a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            										}
HXDLIN( 117)										Float r2;
HXDLIN( 117)										int this10 = ((col >> 16) & 255);
HXDLIN( 117)										if ((this10 == 0)) {
HXLINE( 117)											r2 = ((Float)0.);
            										}
            										else {
HXLINE( 117)											r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            										}
HXDLIN( 117)										Float g2;
HXDLIN( 117)										int this11 = ((col >> 8) & 255);
HXDLIN( 117)										if ((this11 == 0)) {
HXLINE( 117)											g2 = ((Float)0.);
            										}
            										else {
HXLINE( 117)											g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            										}
HXDLIN( 117)										Float b2;
HXDLIN( 117)										int this12 = (col & 255);
HXDLIN( 117)										if ((this12 == 0)) {
HXLINE( 117)											b2 = ((Float)0.);
            										}
            										else {
HXLINE( 117)											b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            										}
HXDLIN( 117)										Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 117)										int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 117)										int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 117)										int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 117)										int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 117)										int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 117)										{
HXLINE( 117)											::haxe::io::ArrayBufferViewImpl this13 = undoImage1->image;
HXDLIN( 117)											int value;
HXDLIN( 117)											if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)												value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            											}
            											else {
HXLINE( 117)												value = blended;
            											}
HXDLIN( 117)											bool _hx_tmp;
HXDLIN( 117)											if ((location >= 0)) {
HXLINE( 117)												_hx_tmp = (location < (this13->byteLength >> 2));
            											}
            											else {
HXLINE( 117)												_hx_tmp = false;
            											}
HXDLIN( 117)											if (_hx_tmp) {
HXLINE( 117)												::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 117)												int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 117)												_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 117)												_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 117)												_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 117)												_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            											}
            										}
            									}
            									else {
HXLINE( 117)										::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN( 117)										int index;
HXDLIN( 117)										if (undoImage1->useVirtualPos) {
HXLINE( 117)											index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            										}
            										else {
HXLINE( 117)											index = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            										}
HXDLIN( 117)										int value;
HXDLIN( 117)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)											value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            										}
            										else {
HXLINE( 117)											value = c;
            										}
HXDLIN( 117)										bool _hx_tmp;
HXDLIN( 117)										if ((index >= 0)) {
HXLINE( 117)											_hx_tmp = (index < (this1->byteLength >> 2));
            										}
            										else {
HXLINE( 117)											_hx_tmp = false;
            										}
HXDLIN( 117)										if (_hx_tmp) {
HXLINE( 117)											::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 117)											int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 117)											_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 117)											_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 117)											_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 117)											_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            										}
            									}
            								}
            								else {
HXLINE( 117)									if (forceClear) {
HXLINE( 117)										::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN( 117)										int x = (dx - rectLeft);
HXDLIN( 117)										int y = (dy - rectTop);
HXDLIN( 117)										int index;
HXDLIN( 117)										if (undoImage1->useVirtualPos) {
HXLINE( 117)											index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            										}
            										else {
HXLINE( 117)											index = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            										}
HXDLIN( 117)										bool _hx_tmp;
HXDLIN( 117)										if ((index >= 0)) {
HXLINE( 117)											_hx_tmp = (index < (this1->byteLength >> 2));
            										}
            										else {
HXLINE( 117)											_hx_tmp = false;
            										}
HXDLIN( 117)										if (_hx_tmp) {
HXLINE( 117)											::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 117)											int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 117)											_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 117)											_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 117)											_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 117)											_this->b[(pos + 3)] = ( (unsigned char)(0) );
            										}
            									}
            								}
            							}
            						}
            					}
            				}
            			}
            		}
HXDLIN( 117)		bool foundY1 = false;
HXDLIN( 117)		Float s1 = ((Float)0.);
HXDLIN( 117)		Float t1 = ((Float)0.);
HXDLIN( 117)		Float sxx1 = ((Float)0.);
HXDLIN( 117)		Float txx1 = ((Float)0.);
HXDLIN( 117)		int _g_min1 = xIter31->start;
HXDLIN( 117)		int _g_max1 = xIter31->max;
HXDLIN( 117)		while((_g_min1 < _g_max1)){
HXLINE( 117)			_g_min1 = (_g_min1 + 1);
HXDLIN( 117)			int x = (_g_min1 - 1);
HXLINE( 223)			sxx1 = (sx1 * ( (Float)(x) ));
HXLINE( 224)			txx1 = (tx1 * ( (Float)(x) ));
HXLINE( 225)			foundY1 = false;
HXLINE( 117)			{
HXLINE( 117)				int _g_min = yIter31->start;
HXDLIN( 117)				int _g_max = yIter31->max;
HXDLIN( 117)				while((_g_min < _g_max)){
HXLINE( 117)					_g_min = (_g_min + 1);
HXDLIN( 117)					int y = (_g_min - 1);
HXLINE( 227)					s1 = ((s01 + sxx1) + (sy1 * ( (Float)(y) )));
HXLINE( 228)					t1 = ((t01 + txx1) + (ty1 * ( (Float)(y) )));
HXLINE( 117)					bool _hx_tmp;
HXDLIN( 117)					if (!((s1 <= 0))) {
HXLINE( 117)						_hx_tmp = (t1 <= 0);
            					}
            					else {
HXLINE( 117)						_hx_tmp = true;
            					}
HXDLIN( 117)					if (_hx_tmp) {
HXLINE( 117)						if (foundY1) {
HXLINE( 117)							goto _hx_goto_38;
            						}
            					}
            					else {
HXLINE( 117)						if (((s1 + t1) < A1)) {
HXLINE( 117)							int x1 = ::hx::Mod(x,tileImage->width);
HXDLIN( 117)							int y1 = ::hx::Mod(y,tileImage->height);
HXDLIN( 117)							::haxe::io::ArrayBufferViewImpl this2 = tileImage->image;
HXDLIN( 117)							int index;
HXDLIN( 117)							if (tileImage->useVirtualPos) {
HXLINE( 117)								index = ::Std_obj::_hx_int(((((( (Float)(y1) ) - tileImage->virtualY) * ( (Float)(tileImage->width) )) + x1) - tileImage->virtualX));
            							}
            							else {
HXLINE( 117)								index = ::Std_obj::_hx_int(( (Float)(((y1 * tileImage->width) + x1)) ));
            							}
HXDLIN( 117)							::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 117)							int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 117)							int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 117)							int color;
HXDLIN( 117)							if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)								color = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            							}
            							else {
HXLINE( 117)								color = c;
            							}
HXDLIN( 117)							{
HXLINE( 117)								int this3 = color;
HXDLIN( 117)								int c1 = this3;
HXDLIN( 117)								bool _hx_tmp;
HXDLIN( 117)								if ((((c1 >> 24) & 255) < 254)) {
HXLINE( 117)									_hx_tmp = this1->transparent;
            								}
            								else {
HXLINE( 117)									_hx_tmp = false;
            								}
HXDLIN( 117)								if (_hx_tmp) {
HXLINE( 117)									int location;
HXDLIN( 117)									if (this1->useVirtualPos) {
HXLINE( 117)										location = ::Std_obj::_hx_int(((((( (Float)(y) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            									}
            									else {
HXLINE( 117)										location = ::Std_obj::_hx_int(( (Float)(((y * this1->width) + x)) ));
            									}
HXDLIN( 117)									::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 117)									::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 117)									int pos = ((location << 2) + this2->byteOffset);
HXDLIN( 117)									int this3 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 117)									int this4 = this3;
HXDLIN( 117)									int this5;
HXDLIN( 117)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)										this5 = ((((((this4 >> 24) & 255) << 24) | ((this4 & 255) << 16)) | (((this4 >> 8) & 255) << 8)) | ((this4 >> 16) & 255));
            									}
            									else {
HXLINE( 117)										this5 = this4;
            									}
HXDLIN( 117)									Float a1;
HXDLIN( 117)									int this6 = ((this5 >> 24) & 255);
HXDLIN( 117)									if ((this6 == 0)) {
HXLINE( 117)										a1 = ((Float)0.);
            									}
            									else {
HXLINE( 117)										a1 = (( (Float)(this6) ) / ( (Float)(255) ));
            									}
HXDLIN( 117)									Float r1;
HXDLIN( 117)									int this7 = ((this5 >> 16) & 255);
HXDLIN( 117)									if ((this7 == 0)) {
HXLINE( 117)										r1 = ((Float)0.);
            									}
            									else {
HXLINE( 117)										r1 = (( (Float)(this7) ) / ( (Float)(255) ));
            									}
HXDLIN( 117)									Float g1;
HXDLIN( 117)									int this8 = ((this5 >> 8) & 255);
HXDLIN( 117)									if ((this8 == 0)) {
HXLINE( 117)										g1 = ((Float)0.);
            									}
            									else {
HXLINE( 117)										g1 = (( (Float)(this8) ) / ( (Float)(255) ));
            									}
HXDLIN( 117)									Float b1;
HXDLIN( 117)									int this9 = (this5 & 255);
HXDLIN( 117)									if ((this9 == 0)) {
HXLINE( 117)										b1 = ((Float)0.);
            									}
            									else {
HXLINE( 117)										b1 = (( (Float)(this9) ) / ( (Float)(255) ));
            									}
HXDLIN( 117)									Float a2;
HXDLIN( 117)									int this10 = ((color >> 24) & 255);
HXDLIN( 117)									if ((this10 == 0)) {
HXLINE( 117)										a2 = ((Float)0.);
            									}
            									else {
HXLINE( 117)										a2 = (( (Float)(this10) ) / ( (Float)(255) ));
            									}
HXDLIN( 117)									Float r2;
HXDLIN( 117)									int this11 = ((color >> 16) & 255);
HXDLIN( 117)									if ((this11 == 0)) {
HXLINE( 117)										r2 = ((Float)0.);
            									}
            									else {
HXLINE( 117)										r2 = (( (Float)(this11) ) / ( (Float)(255) ));
            									}
HXDLIN( 117)									Float g2;
HXDLIN( 117)									int this12 = ((color >> 8) & 255);
HXDLIN( 117)									if ((this12 == 0)) {
HXLINE( 117)										g2 = ((Float)0.);
            									}
            									else {
HXLINE( 117)										g2 = (( (Float)(this12) ) / ( (Float)(255) ));
            									}
HXDLIN( 117)									Float b2;
HXDLIN( 117)									int this13 = (color & 255);
HXDLIN( 117)									if ((this13 == 0)) {
HXLINE( 117)										b2 = ((Float)0.);
            									}
            									else {
HXLINE( 117)										b2 = (( (Float)(this13) ) / ( (Float)(255) ));
            									}
HXDLIN( 117)									Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 117)									int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 117)									int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 117)									int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 117)									int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 117)									int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 117)									{
HXLINE( 117)										::haxe::io::ArrayBufferViewImpl this14 = this1->image;
HXDLIN( 117)										int value;
HXDLIN( 117)										if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)											value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            										}
            										else {
HXLINE( 117)											value = blended;
            										}
HXDLIN( 117)										bool _hx_tmp;
HXDLIN( 117)										if ((location >= 0)) {
HXLINE( 117)											_hx_tmp = (location < (this14->byteLength >> 2));
            										}
            										else {
HXLINE( 117)											_hx_tmp = false;
            										}
HXDLIN( 117)										if (_hx_tmp) {
HXLINE( 117)											::haxe::io::Bytes _this = this14->bytes;
HXDLIN( 117)											int pos = ((location << 2) + this14->byteOffset);
HXDLIN( 117)											_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 117)											_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 117)											_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 117)											_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            										}
            									}
            								}
            								else {
HXLINE( 117)									::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 117)									int index;
HXDLIN( 117)									if (this1->useVirtualPos) {
HXLINE( 117)										index = ::Std_obj::_hx_int(((((( (Float)(y) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            									}
            									else {
HXLINE( 117)										index = ::Std_obj::_hx_int(( (Float)(((y * this1->width) + x)) ));
            									}
HXDLIN( 117)									int value;
HXDLIN( 117)									if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 117)										value = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            									}
            									else {
HXLINE( 117)										value = c1;
            									}
HXDLIN( 117)									bool _hx_tmp;
HXDLIN( 117)									if ((index >= 0)) {
HXLINE( 117)										_hx_tmp = (index < (this2->byteLength >> 2));
            									}
            									else {
HXLINE( 117)										_hx_tmp = false;
            									}
HXDLIN( 117)									if (_hx_tmp) {
HXLINE( 117)										::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 117)										int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 117)										_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 117)										_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 117)										_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 117)										_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            									}
            								}
            							}
HXLINE( 237)							foundY1 = true;
            						}
            						else {
HXLINE( 117)							if (foundY1) {
HXLINE( 117)								goto _hx_goto_38;
            							}
            						}
            					}
            				}
            				_hx_goto_38:;
            			}
            		}
HXDLIN( 117)		::pixelimage::algo::HitQuad v = ::pixelimage::algo::HitQuad_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,dx,dy,true);
HXDLIN( 117)		this->info = v;
HXLINE( 120)		bool _hx_tmp;
HXDLIN( 120)		if (::hx::IsNotNull( this->info )) {
HXLINE( 120)			_hx_tmp = ::hx::IsNotNull( this->oldInfo );
            		}
            		else {
HXLINE( 120)			_hx_tmp = false;
            		}
HXDLIN( 120)		if (_hx_tmp) {
HXLINE( 121)			::pixelimage::ImageStruct this1 = this->temp;
HXDLIN( 121)			Float ax = ((( (Float)(this->oldInfo->__Field(HX_("bx",d6,55,00,00),::hx::paccDynamic)) ) * this->scaleX) + this->translateX);
HXDLIN( 121)			Float ay = ((( (Float)(this->oldInfo->__Field(HX_("by",d7,55,00,00),::hx::paccDynamic)) ) * this->scaleY) + this->translateY);
HXDLIN( 121)			Float bx = ((( (Float)(this->info->__Field(HX_("ax",f7,54,00,00),::hx::paccDynamic)) ) * this->scaleX) + this->translateX);
HXDLIN( 121)			Float by = ((( (Float)(this->info->__Field(HX_("ay",f8,54,00,00),::hx::paccDynamic)) ) * this->scaleY) + this->translateY);
HXDLIN( 121)			Float cx = ((( (Float)(this->info->__Field(HX_("dx",94,57,00,00),::hx::paccDynamic)) ) * this->scaleX) + this->translateX);
HXDLIN( 121)			Float cy = ((( (Float)(this->info->__Field(HX_("dy",95,57,00,00),::hx::paccDynamic)) ) * this->scaleY) + this->translateY);
HXDLIN( 121)			Float dx = ((( (Float)(this->oldInfo->__Field(HX_("cx",b5,56,00,00),::hx::paccDynamic)) ) * this->scaleX) + this->translateX);
HXDLIN( 121)			Float dy = ((( (Float)(this->oldInfo->__Field(HX_("cy",b6,56,00,00),::hx::paccDynamic)) ) * this->scaleY) + this->translateY);
HXDLIN( 121)			::pixelimage::ImageStruct tileImage = this->tileImageStroke;
HXDLIN( 121)			{
HXLINE( 121)				{
HXLINE( 121)					Float bx1 = bx;
HXDLIN( 121)					Float by1 = by;
HXDLIN( 121)					Float cx1 = dx;
HXDLIN( 121)					Float cy1 = dy;
HXDLIN( 121)					bool adjustWinding = (((((ax * by1) - (bx1 * ay)) + ((bx1 * cy1) - (cx1 * by1))) + ((cx1 * ay) - (ax * cy1))) > 0);
HXDLIN( 121)					if (!(adjustWinding)) {
HXLINE( 121)						Float bx_ = bx1;
HXDLIN( 121)						Float by_ = by1;
HXLINE( 188)						bx1 = cx1;
HXLINE( 189)						by1 = cy1;
HXLINE( 190)						cx1 = bx_;
HXLINE( 191)						cy1 = by_;
            					}
HXLINE( 121)					{
HXLINE( 121)						bool hasUndo = false;
HXDLIN( 121)						Float s0 = ((ay * cx1) - (ax * cy1));
HXDLIN( 121)						Float sx = (cy1 - ay);
HXDLIN( 121)						Float sy = (ax - cx1);
HXDLIN( 121)						Float t0 = ((ax * by1) - (ay * bx1));
HXDLIN( 121)						Float tx = (ay - by1);
HXDLIN( 121)						Float ty = (bx1 - ax);
HXDLIN( 121)						Float A = ((((-(by1) * cx1) + (ay * (-(bx1) + cx1))) + (ax * (by1 - cy1))) + (bx1 * cy1));
HXDLIN( 121)						::pixelimage::iter::IntIterStart xIter3;
HXDLIN( 121)						if ((ax > bx1)) {
HXLINE( 121)							if ((ax > cx1)) {
HXLINE( 121)								int min;
HXDLIN( 121)								if ((bx1 > cx1)) {
HXLINE( 121)									min = ::Math_obj::floor(cx1);
            								}
            								else {
HXLINE( 121)									min = ::Math_obj::floor(bx1);
            								}
HXDLIN( 121)								int ii_min = min;
HXDLIN( 121)								int ii_max = ::Math_obj::ceil(ax);
HXDLIN( 121)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 121)								xIter3 = this1;
            							}
            							else {
HXLINE( 121)								int ii_min = ::Math_obj::floor(bx1);
HXDLIN( 121)								int ii_max = ::Math_obj::ceil(cx1);
HXDLIN( 121)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 121)								xIter3 = this1;
            							}
            						}
            						else {
HXLINE( 121)							if ((bx1 > cx1)) {
HXLINE( 121)								int min;
HXDLIN( 121)								if ((ax > cx1)) {
HXLINE( 121)									min = ::Math_obj::floor(cx1);
            								}
            								else {
HXLINE( 121)									min = ::Math_obj::ceil(ax);
            								}
HXDLIN( 121)								int ii_min = min;
HXDLIN( 121)								int ii_max = ::Math_obj::ceil(bx1);
HXDLIN( 121)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 121)								xIter3 = this1;
            							}
            							else {
HXLINE( 121)								int ii_min = ::Math_obj::floor(ax);
HXDLIN( 121)								int ii_max = ::Math_obj::ceil(cx1);
HXDLIN( 121)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 121)								xIter3 = this1;
            							}
            						}
HXDLIN( 121)						::pixelimage::iter::IntIterStart yIter3;
HXDLIN( 121)						if ((ay > by1)) {
HXLINE( 121)							if ((ay > cy1)) {
HXLINE( 121)								int min;
HXDLIN( 121)								if ((by1 > cy1)) {
HXLINE( 121)									min = ::Math_obj::floor(cy1);
            								}
            								else {
HXLINE( 121)									min = ::Math_obj::floor(by1);
            								}
HXDLIN( 121)								int ii_min = min;
HXDLIN( 121)								int ii_max = ::Math_obj::ceil(ay);
HXDLIN( 121)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 121)								yIter3 = this1;
            							}
            							else {
HXLINE( 121)								int ii_min = ::Math_obj::floor(by1);
HXDLIN( 121)								int ii_max = ::Math_obj::ceil(cy1);
HXDLIN( 121)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 121)								yIter3 = this1;
            							}
            						}
            						else {
HXLINE( 121)							if ((by1 > cy1)) {
HXLINE( 121)								int min;
HXDLIN( 121)								if ((ay > cy1)) {
HXLINE( 121)									min = ::Math_obj::floor(cy1);
            								}
            								else {
HXLINE( 121)									min = ::Math_obj::ceil(ay);
            								}
HXDLIN( 121)								int ii_min = min;
HXDLIN( 121)								int ii_max = ::Math_obj::ceil(by1);
HXDLIN( 121)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 121)								yIter3 = this1;
            							}
            							else {
HXLINE( 121)								int ii_min = ::Math_obj::floor(ay);
HXDLIN( 121)								int ii_max = ::Math_obj::ceil(cy1);
HXDLIN( 121)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 121)								yIter3 = this1;
            							}
            						}
HXDLIN( 121)						::pixelimage::ImageStruct undoImage = null();
HXDLIN( 121)						if (hasUndo) {
HXLINE( 121)							int w = ((xIter3->max - xIter3->start) + 1);
HXDLIN( 121)							int h = ((yIter3->max - yIter3->start) + 1);
HXDLIN( 121)							int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN( 121)							::haxe::io::ArrayBufferViewImpl this2 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 121)							::haxe::io::ArrayBufferViewImpl this3 = this2;
HXDLIN( 121)							::pixelimage::ImageStruct this4 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this3);
HXDLIN( 121)							undoImage = this4;
HXDLIN( 121)							{
HXLINE( 121)								int rectLeft = xIter3->start;
HXDLIN( 121)								int rectTop = yIter3->start;
HXDLIN( 121)								int rectRight = xIter3->max;
HXDLIN( 121)								bool forceClear = false;
HXDLIN( 121)								{
HXLINE( 121)									int _g = rectTop;
HXDLIN( 121)									int _g1 = yIter3->max;
HXDLIN( 121)									while((_g < _g1)){
HXLINE( 121)										_g = (_g + 1);
HXDLIN( 121)										int dy = (_g - 1);
HXDLIN( 121)										{
HXLINE( 121)											int _g1 = rectLeft;
HXDLIN( 121)											int _g2 = rectRight;
HXDLIN( 121)											while((_g1 < _g2)){
HXLINE( 121)												_g1 = (_g1 + 1);
HXDLIN( 121)												int dx = (_g1 - 1);
HXDLIN( 121)												::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 121)												int index;
HXDLIN( 121)												if (this1->useVirtualPos) {
HXLINE( 121)													index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            												}
            												else {
HXLINE( 121)													index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            												}
HXDLIN( 121)												::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 121)												int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 121)												int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 121)												int col;
HXDLIN( 121)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 121)													col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE( 121)													col = c;
            												}
HXDLIN( 121)												bool _hx_tmp;
HXDLIN( 121)												if (this1->useMask) {
HXLINE( 121)													_hx_tmp = ::hx::IsNotNull( this1->mask );
            												}
            												else {
HXLINE( 121)													_hx_tmp = false;
            												}
HXDLIN( 121)												if (_hx_tmp) {
HXLINE( 121)													::pixelimage::ImageStruct this2 = this1->mask;
HXDLIN( 121)													::haxe::io::ArrayBufferViewImpl this3 = this2->image;
HXDLIN( 121)													int index;
HXDLIN( 121)													if (this2->useVirtualPos) {
HXLINE( 121)														index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this2->virtualY) * ( (Float)(this2->width) )) + dx) - this2->virtualX));
            													}
            													else {
HXLINE( 121)														index = ::Std_obj::_hx_int(( (Float)(((dy * this2->width) + dx)) ));
            													}
HXDLIN( 121)													::haxe::io::Bytes _this = this3->bytes;
HXDLIN( 121)													int pos = ((index << 2) + this3->byteOffset);
HXDLIN( 121)													int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 121)													int v;
HXDLIN( 121)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 121)														v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE( 121)														v = c;
            													}
HXDLIN( 121)													int this4 = v;
HXDLIN( 121)													int maskPixel = this4;
HXDLIN( 121)													int this5 = col;
HXDLIN( 121)													int this6 = this5;
HXDLIN( 121)													if ((maskPixel == 0)) {
HXLINE( 121)														int this1 = this6;
HXDLIN( 121)														col = this1;
            													}
            													else {
HXLINE( 121)														Float m0;
HXDLIN( 121)														int this1 = ((maskPixel >> 24) & 255);
HXDLIN( 121)														if ((this1 == 0)) {
HXLINE( 121)															m0 = ((Float)0.);
            														}
            														else {
HXLINE( 121)															m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            														}
HXDLIN( 121)														Float m1;
HXDLIN( 121)														int this2 = ((maskPixel >> 16) & 255);
HXDLIN( 121)														if ((this2 == 0)) {
HXLINE( 121)															m1 = ((Float)0.);
            														}
            														else {
HXLINE( 121)															m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            														}
HXDLIN( 121)														Float m2;
HXDLIN( 121)														int this3 = ((maskPixel >> 8) & 255);
HXDLIN( 121)														if ((this3 == 0)) {
HXLINE( 121)															m2 = ((Float)0.);
            														}
            														else {
HXLINE( 121)															m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            														}
HXDLIN( 121)														Float m3;
HXDLIN( 121)														int this4 = (maskPixel & 255);
HXDLIN( 121)														if ((this4 == 0)) {
HXLINE( 121)															m3 = ((Float)0.);
            														}
            														else {
HXLINE( 121)															m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            														}
HXDLIN( 121)														int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this6 >> 24) & 255)) )));
HXDLIN( 121)														int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this6 >> 16) & 255)) )));
HXDLIN( 121)														int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this6 >> 8) & 255)) )));
HXDLIN( 121)														int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this6 & 255)) )));
HXDLIN( 121)														col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            													}
            												}
HXDLIN( 121)												if ((col != 0)) {
HXLINE( 121)													int x = (dx - rectLeft);
HXDLIN( 121)													int y = (dy - rectTop);
HXDLIN( 121)													int this1 = col;
HXDLIN( 121)													int c = this1;
HXDLIN( 121)													bool _hx_tmp;
HXDLIN( 121)													if ((((c >> 24) & 255) < 254)) {
HXLINE( 121)														_hx_tmp = undoImage->transparent;
            													}
            													else {
HXLINE( 121)														_hx_tmp = false;
            													}
HXDLIN( 121)													if (_hx_tmp) {
HXLINE( 121)														int location;
HXDLIN( 121)														if (undoImage->useVirtualPos) {
HXLINE( 121)															location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            														}
            														else {
HXLINE( 121)															location = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            														}
HXDLIN( 121)														::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN( 121)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 121)														int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 121)														int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 121)														int this3 = this2;
HXDLIN( 121)														int this4;
HXDLIN( 121)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 121)															this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            														}
            														else {
HXLINE( 121)															this4 = this3;
            														}
HXDLIN( 121)														Float a1;
HXDLIN( 121)														int this5 = ((this4 >> 24) & 255);
HXDLIN( 121)														if ((this5 == 0)) {
HXLINE( 121)															a1 = ((Float)0.);
            														}
            														else {
HXLINE( 121)															a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            														}
HXDLIN( 121)														Float r1;
HXDLIN( 121)														int this6 = ((this4 >> 16) & 255);
HXDLIN( 121)														if ((this6 == 0)) {
HXLINE( 121)															r1 = ((Float)0.);
            														}
            														else {
HXLINE( 121)															r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            														}
HXDLIN( 121)														Float g1;
HXDLIN( 121)														int this7 = ((this4 >> 8) & 255);
HXDLIN( 121)														if ((this7 == 0)) {
HXLINE( 121)															g1 = ((Float)0.);
            														}
            														else {
HXLINE( 121)															g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            														}
HXDLIN( 121)														Float b1;
HXDLIN( 121)														int this8 = (this4 & 255);
HXDLIN( 121)														if ((this8 == 0)) {
HXLINE( 121)															b1 = ((Float)0.);
            														}
            														else {
HXLINE( 121)															b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            														}
HXDLIN( 121)														Float a2;
HXDLIN( 121)														int this9 = ((col >> 24) & 255);
HXDLIN( 121)														if ((this9 == 0)) {
HXLINE( 121)															a2 = ((Float)0.);
            														}
            														else {
HXLINE( 121)															a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            														}
HXDLIN( 121)														Float r2;
HXDLIN( 121)														int this10 = ((col >> 16) & 255);
HXDLIN( 121)														if ((this10 == 0)) {
HXLINE( 121)															r2 = ((Float)0.);
            														}
            														else {
HXLINE( 121)															r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            														}
HXDLIN( 121)														Float g2;
HXDLIN( 121)														int this11 = ((col >> 8) & 255);
HXDLIN( 121)														if ((this11 == 0)) {
HXLINE( 121)															g2 = ((Float)0.);
            														}
            														else {
HXLINE( 121)															g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            														}
HXDLIN( 121)														Float b2;
HXDLIN( 121)														int this12 = (col & 255);
HXDLIN( 121)														if ((this12 == 0)) {
HXLINE( 121)															b2 = ((Float)0.);
            														}
            														else {
HXLINE( 121)															b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            														}
HXDLIN( 121)														Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 121)														int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 121)														int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 121)														int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 121)														int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 121)														int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 121)														{
HXLINE( 121)															::haxe::io::ArrayBufferViewImpl this13 = undoImage->image;
HXDLIN( 121)															int value;
HXDLIN( 121)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 121)																value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            															}
            															else {
HXLINE( 121)																value = blended;
            															}
HXDLIN( 121)															bool _hx_tmp;
HXDLIN( 121)															if ((location >= 0)) {
HXLINE( 121)																_hx_tmp = (location < (this13->byteLength >> 2));
            															}
            															else {
HXLINE( 121)																_hx_tmp = false;
            															}
HXDLIN( 121)															if (_hx_tmp) {
HXLINE( 121)																::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 121)																int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 121)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 121)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 121)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 121)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
            													else {
HXLINE( 121)														::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN( 121)														int index;
HXDLIN( 121)														if (undoImage->useVirtualPos) {
HXLINE( 121)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            														}
            														else {
HXLINE( 121)															index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            														}
HXDLIN( 121)														int value;
HXDLIN( 121)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 121)															value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            														}
            														else {
HXLINE( 121)															value = c;
            														}
HXDLIN( 121)														bool _hx_tmp;
HXDLIN( 121)														if ((index >= 0)) {
HXLINE( 121)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE( 121)															_hx_tmp = false;
            														}
HXDLIN( 121)														if (_hx_tmp) {
HXLINE( 121)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 121)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 121)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 121)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 121)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 121)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
            												else {
HXLINE( 121)													if (forceClear) {
HXLINE( 121)														::haxe::io::ArrayBufferViewImpl this1 = undoImage->image;
HXDLIN( 121)														int x = (dx - rectLeft);
HXDLIN( 121)														int y = (dy - rectTop);
HXDLIN( 121)														int index;
HXDLIN( 121)														if (undoImage->useVirtualPos) {
HXLINE( 121)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage->virtualY) * ( (Float)(undoImage->width) )) + x) - undoImage->virtualX));
            														}
            														else {
HXLINE( 121)															index = ::Std_obj::_hx_int(( (Float)(((y * undoImage->width) + x)) ));
            														}
HXDLIN( 121)														bool _hx_tmp;
HXDLIN( 121)														if ((index >= 0)) {
HXLINE( 121)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE( 121)															_hx_tmp = false;
            														}
HXDLIN( 121)														if (_hx_tmp) {
HXLINE( 121)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 121)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 121)															_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 121)															_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 121)															_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 121)															_this->b[(pos + 3)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 121)						bool foundY = false;
HXDLIN( 121)						Float s = ((Float)0.);
HXDLIN( 121)						Float t = ((Float)0.);
HXDLIN( 121)						Float sxx = ((Float)0.);
HXDLIN( 121)						Float txx = ((Float)0.);
HXDLIN( 121)						{
HXLINE( 121)							int _g_min = xIter3->start;
HXDLIN( 121)							int _g_max = xIter3->max;
HXDLIN( 121)							while((_g_min < _g_max)){
HXLINE( 121)								_g_min = (_g_min + 1);
HXDLIN( 121)								int x = (_g_min - 1);
HXLINE( 223)								sxx = (sx * ( (Float)(x) ));
HXLINE( 224)								txx = (tx * ( (Float)(x) ));
HXLINE( 225)								foundY = false;
HXLINE( 121)								{
HXLINE( 121)									int _g_min1 = yIter3->start;
HXDLIN( 121)									int _g_max = yIter3->max;
HXDLIN( 121)									while((_g_min1 < _g_max)){
HXLINE( 121)										_g_min1 = (_g_min1 + 1);
HXDLIN( 121)										int y = (_g_min1 - 1);
HXLINE( 227)										s = ((s0 + sxx) + (sy * ( (Float)(y) )));
HXLINE( 228)										t = ((t0 + txx) + (ty * ( (Float)(y) )));
HXLINE( 121)										bool _hx_tmp;
HXDLIN( 121)										if (!((s <= 0))) {
HXLINE( 121)											_hx_tmp = (t <= 0);
            										}
            										else {
HXLINE( 121)											_hx_tmp = true;
            										}
HXDLIN( 121)										if (_hx_tmp) {
HXLINE( 121)											if (foundY) {
HXLINE( 121)												goto _hx_goto_42;
            											}
            										}
            										else {
HXLINE( 121)											if (((s + t) < A)) {
HXLINE( 121)												int x1 = ::hx::Mod(x,tileImage->width);
HXDLIN( 121)												int y1 = ::hx::Mod(y,tileImage->height);
HXDLIN( 121)												::haxe::io::ArrayBufferViewImpl this2 = tileImage->image;
HXDLIN( 121)												int index;
HXDLIN( 121)												if (tileImage->useVirtualPos) {
HXLINE( 121)													index = ::Std_obj::_hx_int(((((( (Float)(y1) ) - tileImage->virtualY) * ( (Float)(tileImage->width) )) + x1) - tileImage->virtualX));
            												}
            												else {
HXLINE( 121)													index = ::Std_obj::_hx_int(( (Float)(((y1 * tileImage->width) + x1)) ));
            												}
HXDLIN( 121)												::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 121)												int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 121)												int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 121)												int color;
HXDLIN( 121)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 121)													color = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE( 121)													color = c;
            												}
HXDLIN( 121)												{
HXLINE( 121)													int this3 = color;
HXDLIN( 121)													int c1 = this3;
HXDLIN( 121)													bool _hx_tmp;
HXDLIN( 121)													if ((((c1 >> 24) & 255) < 254)) {
HXLINE( 121)														_hx_tmp = this1->transparent;
            													}
            													else {
HXLINE( 121)														_hx_tmp = false;
            													}
HXDLIN( 121)													if (_hx_tmp) {
HXLINE( 121)														int location;
HXDLIN( 121)														if (this1->useVirtualPos) {
HXLINE( 121)															location = ::Std_obj::_hx_int(((((( (Float)(y) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            														}
            														else {
HXLINE( 121)															location = ::Std_obj::_hx_int(( (Float)(((y * this1->width) + x)) ));
            														}
HXDLIN( 121)														::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 121)														::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 121)														int pos = ((location << 2) + this2->byteOffset);
HXDLIN( 121)														int this3 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 121)														int this4 = this3;
HXDLIN( 121)														int this5;
HXDLIN( 121)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 121)															this5 = ((((((this4 >> 24) & 255) << 24) | ((this4 & 255) << 16)) | (((this4 >> 8) & 255) << 8)) | ((this4 >> 16) & 255));
            														}
            														else {
HXLINE( 121)															this5 = this4;
            														}
HXDLIN( 121)														Float a1;
HXDLIN( 121)														int this6 = ((this5 >> 24) & 255);
HXDLIN( 121)														if ((this6 == 0)) {
HXLINE( 121)															a1 = ((Float)0.);
            														}
            														else {
HXLINE( 121)															a1 = (( (Float)(this6) ) / ( (Float)(255) ));
            														}
HXDLIN( 121)														Float r1;
HXDLIN( 121)														int this7 = ((this5 >> 16) & 255);
HXDLIN( 121)														if ((this7 == 0)) {
HXLINE( 121)															r1 = ((Float)0.);
            														}
            														else {
HXLINE( 121)															r1 = (( (Float)(this7) ) / ( (Float)(255) ));
            														}
HXDLIN( 121)														Float g1;
HXDLIN( 121)														int this8 = ((this5 >> 8) & 255);
HXDLIN( 121)														if ((this8 == 0)) {
HXLINE( 121)															g1 = ((Float)0.);
            														}
            														else {
HXLINE( 121)															g1 = (( (Float)(this8) ) / ( (Float)(255) ));
            														}
HXDLIN( 121)														Float b1;
HXDLIN( 121)														int this9 = (this5 & 255);
HXDLIN( 121)														if ((this9 == 0)) {
HXLINE( 121)															b1 = ((Float)0.);
            														}
            														else {
HXLINE( 121)															b1 = (( (Float)(this9) ) / ( (Float)(255) ));
            														}
HXDLIN( 121)														Float a2;
HXDLIN( 121)														int this10 = ((color >> 24) & 255);
HXDLIN( 121)														if ((this10 == 0)) {
HXLINE( 121)															a2 = ((Float)0.);
            														}
            														else {
HXLINE( 121)															a2 = (( (Float)(this10) ) / ( (Float)(255) ));
            														}
HXDLIN( 121)														Float r2;
HXDLIN( 121)														int this11 = ((color >> 16) & 255);
HXDLIN( 121)														if ((this11 == 0)) {
HXLINE( 121)															r2 = ((Float)0.);
            														}
            														else {
HXLINE( 121)															r2 = (( (Float)(this11) ) / ( (Float)(255) ));
            														}
HXDLIN( 121)														Float g2;
HXDLIN( 121)														int this12 = ((color >> 8) & 255);
HXDLIN( 121)														if ((this12 == 0)) {
HXLINE( 121)															g2 = ((Float)0.);
            														}
            														else {
HXLINE( 121)															g2 = (( (Float)(this12) ) / ( (Float)(255) ));
            														}
HXDLIN( 121)														Float b2;
HXDLIN( 121)														int this13 = (color & 255);
HXDLIN( 121)														if ((this13 == 0)) {
HXLINE( 121)															b2 = ((Float)0.);
            														}
            														else {
HXLINE( 121)															b2 = (( (Float)(this13) ) / ( (Float)(255) ));
            														}
HXDLIN( 121)														Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 121)														int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 121)														int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 121)														int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 121)														int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 121)														int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 121)														{
HXLINE( 121)															::haxe::io::ArrayBufferViewImpl this14 = this1->image;
HXDLIN( 121)															int value;
HXDLIN( 121)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 121)																value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            															}
            															else {
HXLINE( 121)																value = blended;
            															}
HXDLIN( 121)															bool _hx_tmp;
HXDLIN( 121)															if ((location >= 0)) {
HXLINE( 121)																_hx_tmp = (location < (this14->byteLength >> 2));
            															}
            															else {
HXLINE( 121)																_hx_tmp = false;
            															}
HXDLIN( 121)															if (_hx_tmp) {
HXLINE( 121)																::haxe::io::Bytes _this = this14->bytes;
HXDLIN( 121)																int pos = ((location << 2) + this14->byteOffset);
HXDLIN( 121)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 121)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 121)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 121)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
            													else {
HXLINE( 121)														::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 121)														int index;
HXDLIN( 121)														if (this1->useVirtualPos) {
HXLINE( 121)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            														}
            														else {
HXLINE( 121)															index = ::Std_obj::_hx_int(( (Float)(((y * this1->width) + x)) ));
            														}
HXDLIN( 121)														int value;
HXDLIN( 121)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 121)															value = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            														}
            														else {
HXLINE( 121)															value = c1;
            														}
HXDLIN( 121)														bool _hx_tmp;
HXDLIN( 121)														if ((index >= 0)) {
HXLINE( 121)															_hx_tmp = (index < (this2->byteLength >> 2));
            														}
            														else {
HXLINE( 121)															_hx_tmp = false;
            														}
HXDLIN( 121)														if (_hx_tmp) {
HXLINE( 121)															::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 121)															int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 121)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 121)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 121)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 121)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
HXLINE( 237)												foundY = true;
            											}
            											else {
HXLINE( 121)												if (foundY) {
HXLINE( 121)													goto _hx_goto_42;
            												}
            											}
            										}
            									}
            									_hx_goto_42:;
            								}
            							}
            						}
            					}
            				}
HXDLIN( 121)				{
HXLINE( 121)					Float bx2 = cx;
HXDLIN( 121)					Float by2 = cy;
HXDLIN( 121)					Float cx2 = dx;
HXDLIN( 121)					Float cy2 = dy;
HXDLIN( 121)					bool adjustWinding1 = (((((bx * by2) - (bx2 * by)) + ((bx2 * cy2) - (cx2 * by2))) + ((cx2 * by) - (bx * cy2))) > 0);
HXDLIN( 121)					if (!(adjustWinding1)) {
HXLINE( 121)						Float bx_ = bx2;
HXDLIN( 121)						Float by_ = by2;
HXLINE( 188)						bx2 = cx2;
HXLINE( 189)						by2 = cy2;
HXLINE( 190)						cx2 = bx_;
HXLINE( 191)						cy2 = by_;
            					}
HXLINE( 121)					{
HXLINE( 121)						bool hasUndo1 = false;
HXDLIN( 121)						Float s01 = ((by * cx2) - (bx * cy2));
HXDLIN( 121)						Float sx1 = (cy2 - by);
HXDLIN( 121)						Float sy1 = (bx - cx2);
HXDLIN( 121)						Float t01 = ((bx * by2) - (by * bx2));
HXDLIN( 121)						Float tx1 = (by - by2);
HXDLIN( 121)						Float ty1 = (bx2 - bx);
HXDLIN( 121)						Float A1 = ((((-(by2) * cx2) + (by * (-(bx2) + cx2))) + (bx * (by2 - cy2))) + (bx2 * cy2));
HXDLIN( 121)						::pixelimage::iter::IntIterStart xIter31;
HXDLIN( 121)						if ((bx > bx2)) {
HXLINE( 121)							if ((bx > cx2)) {
HXLINE( 121)								int min;
HXDLIN( 121)								if ((bx2 > cx2)) {
HXLINE( 121)									min = ::Math_obj::floor(cx2);
            								}
            								else {
HXLINE( 121)									min = ::Math_obj::floor(bx2);
            								}
HXDLIN( 121)								int ii_min = min;
HXDLIN( 121)								int ii_max = ::Math_obj::ceil(bx);
HXDLIN( 121)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 121)								xIter31 = this1;
            							}
            							else {
HXLINE( 121)								int ii_min = ::Math_obj::floor(bx2);
HXDLIN( 121)								int ii_max = ::Math_obj::ceil(cx2);
HXDLIN( 121)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 121)								xIter31 = this1;
            							}
            						}
            						else {
HXLINE( 121)							if ((bx2 > cx2)) {
HXLINE( 121)								int min;
HXDLIN( 121)								if ((bx > cx2)) {
HXLINE( 121)									min = ::Math_obj::floor(cx2);
            								}
            								else {
HXLINE( 121)									min = ::Math_obj::ceil(bx);
            								}
HXDLIN( 121)								int ii_min = min;
HXDLIN( 121)								int ii_max = ::Math_obj::ceil(bx2);
HXDLIN( 121)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 121)								xIter31 = this1;
            							}
            							else {
HXLINE( 121)								int ii_min = ::Math_obj::floor(bx);
HXDLIN( 121)								int ii_max = ::Math_obj::ceil(cx2);
HXDLIN( 121)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 121)								xIter31 = this1;
            							}
            						}
HXDLIN( 121)						::pixelimage::iter::IntIterStart yIter31;
HXDLIN( 121)						if ((by > by2)) {
HXLINE( 121)							if ((by > cy2)) {
HXLINE( 121)								int min;
HXDLIN( 121)								if ((by2 > cy2)) {
HXLINE( 121)									min = ::Math_obj::floor(cy2);
            								}
            								else {
HXLINE( 121)									min = ::Math_obj::floor(by2);
            								}
HXDLIN( 121)								int ii_min = min;
HXDLIN( 121)								int ii_max = ::Math_obj::ceil(by);
HXDLIN( 121)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 121)								yIter31 = this1;
            							}
            							else {
HXLINE( 121)								int ii_min = ::Math_obj::floor(by2);
HXDLIN( 121)								int ii_max = ::Math_obj::ceil(cy2);
HXDLIN( 121)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 121)								yIter31 = this1;
            							}
            						}
            						else {
HXLINE( 121)							if ((by2 > cy2)) {
HXLINE( 121)								int min;
HXDLIN( 121)								if ((by > cy2)) {
HXLINE( 121)									min = ::Math_obj::floor(cy2);
            								}
            								else {
HXLINE( 121)									min = ::Math_obj::ceil(by);
            								}
HXDLIN( 121)								int ii_min = min;
HXDLIN( 121)								int ii_max = ::Math_obj::ceil(by2);
HXDLIN( 121)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 121)								yIter31 = this1;
            							}
            							else {
HXLINE( 121)								int ii_min = ::Math_obj::floor(by);
HXDLIN( 121)								int ii_max = ::Math_obj::ceil(cy2);
HXDLIN( 121)								::pixelimage::iter::IntIterStart this1 = ::pixelimage::iter::IntIterStart_obj::__alloc( HX_CTX ,ii_min,ii_max);
HXDLIN( 121)								yIter31 = this1;
            							}
            						}
HXDLIN( 121)						::pixelimage::ImageStruct undoImage1 = null();
HXDLIN( 121)						if (hasUndo1) {
HXLINE( 121)							int w = ((xIter31->max - xIter31->start) + 1);
HXDLIN( 121)							int h = ((yIter31->max - yIter31->start) + 1);
HXDLIN( 121)							int size = (::Std_obj::_hx_int(( (Float)((w * h)) )) * 4);
HXDLIN( 121)							::haxe::io::ArrayBufferViewImpl this2 = ::haxe::io::ArrayBufferViewImpl_obj::__alloc( HX_CTX ,::haxe::io::Bytes_obj::alloc(size),0,size);
HXDLIN( 121)							::haxe::io::ArrayBufferViewImpl this3 = this2;
HXDLIN( 121)							::pixelimage::ImageStruct this4 = ::pixelimage::ImageStruct_obj::__alloc( HX_CTX ,w,h,this3);
HXDLIN( 121)							undoImage1 = this4;
HXDLIN( 121)							{
HXLINE( 121)								int rectLeft = xIter31->start;
HXDLIN( 121)								int rectTop = yIter31->start;
HXDLIN( 121)								int rectRight = xIter31->max;
HXDLIN( 121)								bool forceClear = false;
HXDLIN( 121)								{
HXLINE( 121)									int _g = rectTop;
HXDLIN( 121)									int _g1 = yIter31->max;
HXDLIN( 121)									while((_g < _g1)){
HXLINE( 121)										_g = (_g + 1);
HXDLIN( 121)										int dy = (_g - 1);
HXDLIN( 121)										{
HXLINE( 121)											int _g1 = rectLeft;
HXDLIN( 121)											int _g2 = rectRight;
HXDLIN( 121)											while((_g1 < _g2)){
HXLINE( 121)												_g1 = (_g1 + 1);
HXDLIN( 121)												int dx = (_g1 - 1);
HXDLIN( 121)												::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 121)												int index;
HXDLIN( 121)												if (this1->useVirtualPos) {
HXLINE( 121)													index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this1->virtualY) * ( (Float)(this1->width) )) + dx) - this1->virtualX));
            												}
            												else {
HXLINE( 121)													index = ::Std_obj::_hx_int(( (Float)(((dy * this1->width) + dx)) ));
            												}
HXDLIN( 121)												::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 121)												int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 121)												int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 121)												int col;
HXDLIN( 121)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 121)													col = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE( 121)													col = c;
            												}
HXDLIN( 121)												bool _hx_tmp;
HXDLIN( 121)												if (this1->useMask) {
HXLINE( 121)													_hx_tmp = ::hx::IsNotNull( this1->mask );
            												}
            												else {
HXLINE( 121)													_hx_tmp = false;
            												}
HXDLIN( 121)												if (_hx_tmp) {
HXLINE( 121)													::pixelimage::ImageStruct this2 = this1->mask;
HXDLIN( 121)													::haxe::io::ArrayBufferViewImpl this3 = this2->image;
HXDLIN( 121)													int index;
HXDLIN( 121)													if (this2->useVirtualPos) {
HXLINE( 121)														index = ::Std_obj::_hx_int(((((( (Float)(dy) ) - this2->virtualY) * ( (Float)(this2->width) )) + dx) - this2->virtualX));
            													}
            													else {
HXLINE( 121)														index = ::Std_obj::_hx_int(( (Float)(((dy * this2->width) + dx)) ));
            													}
HXDLIN( 121)													::haxe::io::Bytes _this = this3->bytes;
HXDLIN( 121)													int pos = ((index << 2) + this3->byteOffset);
HXDLIN( 121)													int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 121)													int v;
HXDLIN( 121)													if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 121)														v = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            													}
            													else {
HXLINE( 121)														v = c;
            													}
HXDLIN( 121)													int this4 = v;
HXDLIN( 121)													int maskPixel = this4;
HXDLIN( 121)													int this5 = col;
HXDLIN( 121)													int this6 = this5;
HXDLIN( 121)													if ((maskPixel == 0)) {
HXLINE( 121)														int this1 = this6;
HXDLIN( 121)														col = this1;
            													}
            													else {
HXLINE( 121)														Float m0;
HXDLIN( 121)														int this1 = ((maskPixel >> 24) & 255);
HXDLIN( 121)														if ((this1 == 0)) {
HXLINE( 121)															m0 = ((Float)0.);
            														}
            														else {
HXLINE( 121)															m0 = (( (Float)(this1) ) / ( (Float)(255) ));
            														}
HXDLIN( 121)														Float m1;
HXDLIN( 121)														int this2 = ((maskPixel >> 16) & 255);
HXDLIN( 121)														if ((this2 == 0)) {
HXLINE( 121)															m1 = ((Float)0.);
            														}
            														else {
HXLINE( 121)															m1 = (( (Float)(this2) ) / ( (Float)(255) ));
            														}
HXDLIN( 121)														Float m2;
HXDLIN( 121)														int this3 = ((maskPixel >> 8) & 255);
HXDLIN( 121)														if ((this3 == 0)) {
HXLINE( 121)															m2 = ((Float)0.);
            														}
            														else {
HXLINE( 121)															m2 = (( (Float)(this3) ) / ( (Float)(255) ));
            														}
HXDLIN( 121)														Float m3;
HXDLIN( 121)														int this4 = (maskPixel & 255);
HXDLIN( 121)														if ((this4 == 0)) {
HXLINE( 121)															m3 = ((Float)0.);
            														}
            														else {
HXLINE( 121)															m3 = (( (Float)(this4) ) / ( (Float)(255) ));
            														}
HXDLIN( 121)														int ch0 = ::Std_obj::_hx_int(((((Float)1.) - m0) * ( (Float)(((this6 >> 24) & 255)) )));
HXDLIN( 121)														int ch1 = ::Std_obj::_hx_int(((((Float)1.) - m1) * ( (Float)(((this6 >> 16) & 255)) )));
HXDLIN( 121)														int ch2 = ::Std_obj::_hx_int(((((Float)1.) - m2) * ( (Float)(((this6 >> 8) & 255)) )));
HXDLIN( 121)														int ch3 = ::Std_obj::_hx_int(((((Float)1.) - m3) * ( (Float)((this6 & 255)) )));
HXDLIN( 121)														col = ((((::Math_obj::round((( (Float)(ch0) ) * ( (Float)(255) ))) << 24) | (::Math_obj::round((( (Float)(ch1) ) * ( (Float)(255) ))) << 16)) | (::Math_obj::round((( (Float)(ch2) ) * ( (Float)(255) ))) << 8)) | ::Math_obj::round((( (Float)(ch3) ) * ( (Float)(255) ))));
            													}
            												}
HXDLIN( 121)												if ((col != 0)) {
HXLINE( 121)													int x = (dx - rectLeft);
HXDLIN( 121)													int y = (dy - rectTop);
HXDLIN( 121)													int this1 = col;
HXDLIN( 121)													int c = this1;
HXDLIN( 121)													bool _hx_tmp;
HXDLIN( 121)													if ((((c >> 24) & 255) < 254)) {
HXLINE( 121)														_hx_tmp = undoImage1->transparent;
            													}
            													else {
HXLINE( 121)														_hx_tmp = false;
            													}
HXDLIN( 121)													if (_hx_tmp) {
HXLINE( 121)														int location;
HXDLIN( 121)														if (undoImage1->useVirtualPos) {
HXLINE( 121)															location = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            														}
            														else {
HXLINE( 121)															location = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            														}
HXDLIN( 121)														::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN( 121)														::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 121)														int pos = ((location << 2) + this1->byteOffset);
HXDLIN( 121)														int this2 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 121)														int this3 = this2;
HXDLIN( 121)														int this4;
HXDLIN( 121)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 121)															this4 = ((((((this3 >> 24) & 255) << 24) | ((this3 & 255) << 16)) | (((this3 >> 8) & 255) << 8)) | ((this3 >> 16) & 255));
            														}
            														else {
HXLINE( 121)															this4 = this3;
            														}
HXDLIN( 121)														Float a1;
HXDLIN( 121)														int this5 = ((this4 >> 24) & 255);
HXDLIN( 121)														if ((this5 == 0)) {
HXLINE( 121)															a1 = ((Float)0.);
            														}
            														else {
HXLINE( 121)															a1 = (( (Float)(this5) ) / ( (Float)(255) ));
            														}
HXDLIN( 121)														Float r1;
HXDLIN( 121)														int this6 = ((this4 >> 16) & 255);
HXDLIN( 121)														if ((this6 == 0)) {
HXLINE( 121)															r1 = ((Float)0.);
            														}
            														else {
HXLINE( 121)															r1 = (( (Float)(this6) ) / ( (Float)(255) ));
            														}
HXDLIN( 121)														Float g1;
HXDLIN( 121)														int this7 = ((this4 >> 8) & 255);
HXDLIN( 121)														if ((this7 == 0)) {
HXLINE( 121)															g1 = ((Float)0.);
            														}
            														else {
HXLINE( 121)															g1 = (( (Float)(this7) ) / ( (Float)(255) ));
            														}
HXDLIN( 121)														Float b1;
HXDLIN( 121)														int this8 = (this4 & 255);
HXDLIN( 121)														if ((this8 == 0)) {
HXLINE( 121)															b1 = ((Float)0.);
            														}
            														else {
HXLINE( 121)															b1 = (( (Float)(this8) ) / ( (Float)(255) ));
            														}
HXDLIN( 121)														Float a2;
HXDLIN( 121)														int this9 = ((col >> 24) & 255);
HXDLIN( 121)														if ((this9 == 0)) {
HXLINE( 121)															a2 = ((Float)0.);
            														}
            														else {
HXLINE( 121)															a2 = (( (Float)(this9) ) / ( (Float)(255) ));
            														}
HXDLIN( 121)														Float r2;
HXDLIN( 121)														int this10 = ((col >> 16) & 255);
HXDLIN( 121)														if ((this10 == 0)) {
HXLINE( 121)															r2 = ((Float)0.);
            														}
            														else {
HXLINE( 121)															r2 = (( (Float)(this10) ) / ( (Float)(255) ));
            														}
HXDLIN( 121)														Float g2;
HXDLIN( 121)														int this11 = ((col >> 8) & 255);
HXDLIN( 121)														if ((this11 == 0)) {
HXLINE( 121)															g2 = ((Float)0.);
            														}
            														else {
HXLINE( 121)															g2 = (( (Float)(this11) ) / ( (Float)(255) ));
            														}
HXDLIN( 121)														Float b2;
HXDLIN( 121)														int this12 = (col & 255);
HXDLIN( 121)														if ((this12 == 0)) {
HXLINE( 121)															b2 = ((Float)0.);
            														}
            														else {
HXLINE( 121)															b2 = (( (Float)(this12) ) / ( (Float)(255) ));
            														}
HXDLIN( 121)														Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 121)														int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 121)														int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 121)														int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 121)														int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 121)														int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 121)														{
HXLINE( 121)															::haxe::io::ArrayBufferViewImpl this13 = undoImage1->image;
HXDLIN( 121)															int value;
HXDLIN( 121)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 121)																value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            															}
            															else {
HXLINE( 121)																value = blended;
            															}
HXDLIN( 121)															bool _hx_tmp;
HXDLIN( 121)															if ((location >= 0)) {
HXLINE( 121)																_hx_tmp = (location < (this13->byteLength >> 2));
            															}
            															else {
HXLINE( 121)																_hx_tmp = false;
            															}
HXDLIN( 121)															if (_hx_tmp) {
HXLINE( 121)																::haxe::io::Bytes _this = this13->bytes;
HXDLIN( 121)																int pos = ((location << 2) + this13->byteOffset);
HXDLIN( 121)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 121)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 121)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 121)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
            													else {
HXLINE( 121)														::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN( 121)														int index;
HXDLIN( 121)														if (undoImage1->useVirtualPos) {
HXLINE( 121)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            														}
            														else {
HXLINE( 121)															index = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            														}
HXDLIN( 121)														int value;
HXDLIN( 121)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 121)															value = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            														}
            														else {
HXLINE( 121)															value = c;
            														}
HXDLIN( 121)														bool _hx_tmp;
HXDLIN( 121)														if ((index >= 0)) {
HXLINE( 121)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE( 121)															_hx_tmp = false;
            														}
HXDLIN( 121)														if (_hx_tmp) {
HXLINE( 121)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 121)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 121)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 121)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 121)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 121)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
            												else {
HXLINE( 121)													if (forceClear) {
HXLINE( 121)														::haxe::io::ArrayBufferViewImpl this1 = undoImage1->image;
HXDLIN( 121)														int x = (dx - rectLeft);
HXDLIN( 121)														int y = (dy - rectTop);
HXDLIN( 121)														int index;
HXDLIN( 121)														if (undoImage1->useVirtualPos) {
HXLINE( 121)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - undoImage1->virtualY) * ( (Float)(undoImage1->width) )) + x) - undoImage1->virtualX));
            														}
            														else {
HXLINE( 121)															index = ::Std_obj::_hx_int(( (Float)(((y * undoImage1->width) + x)) ));
            														}
HXDLIN( 121)														bool _hx_tmp;
HXDLIN( 121)														if ((index >= 0)) {
HXLINE( 121)															_hx_tmp = (index < (this1->byteLength >> 2));
            														}
            														else {
HXLINE( 121)															_hx_tmp = false;
            														}
HXDLIN( 121)														if (_hx_tmp) {
HXLINE( 121)															::haxe::io::Bytes _this = this1->bytes;
HXDLIN( 121)															int pos = ((index << 2) + this1->byteOffset);
HXDLIN( 121)															_this->b[pos] = ( (unsigned char)(0) );
HXDLIN( 121)															_this->b[(pos + 1)] = ( (unsigned char)(0) );
HXDLIN( 121)															_this->b[(pos + 2)] = ( (unsigned char)(0) );
HXDLIN( 121)															_this->b[(pos + 3)] = ( (unsigned char)(0) );
            														}
            													}
            												}
            											}
            										}
            									}
            								}
            							}
            						}
HXDLIN( 121)						bool foundY1 = false;
HXDLIN( 121)						Float s1 = ((Float)0.);
HXDLIN( 121)						Float t1 = ((Float)0.);
HXDLIN( 121)						Float sxx1 = ((Float)0.);
HXDLIN( 121)						Float txx1 = ((Float)0.);
HXDLIN( 121)						{
HXLINE( 121)							int _g_min1 = xIter31->start;
HXDLIN( 121)							int _g_max1 = xIter31->max;
HXDLIN( 121)							while((_g_min1 < _g_max1)){
HXLINE( 121)								_g_min1 = (_g_min1 + 1);
HXDLIN( 121)								int x = (_g_min1 - 1);
HXLINE( 223)								sxx1 = (sx1 * ( (Float)(x) ));
HXLINE( 224)								txx1 = (tx1 * ( (Float)(x) ));
HXLINE( 225)								foundY1 = false;
HXLINE( 121)								{
HXLINE( 121)									int _g_min = yIter31->start;
HXDLIN( 121)									int _g_max = yIter31->max;
HXDLIN( 121)									while((_g_min < _g_max)){
HXLINE( 121)										_g_min = (_g_min + 1);
HXDLIN( 121)										int y = (_g_min - 1);
HXLINE( 227)										s1 = ((s01 + sxx1) + (sy1 * ( (Float)(y) )));
HXLINE( 228)										t1 = ((t01 + txx1) + (ty1 * ( (Float)(y) )));
HXLINE( 121)										bool _hx_tmp;
HXDLIN( 121)										if (!((s1 <= 0))) {
HXLINE( 121)											_hx_tmp = (t1 <= 0);
            										}
            										else {
HXLINE( 121)											_hx_tmp = true;
            										}
HXDLIN( 121)										if (_hx_tmp) {
HXLINE( 121)											if (foundY1) {
HXLINE( 121)												goto _hx_goto_46;
            											}
            										}
            										else {
HXLINE( 121)											if (((s1 + t1) < A1)) {
HXLINE( 121)												int x1 = ::hx::Mod(x,tileImage->width);
HXDLIN( 121)												int y1 = ::hx::Mod(y,tileImage->height);
HXDLIN( 121)												::haxe::io::ArrayBufferViewImpl this2 = tileImage->image;
HXDLIN( 121)												int index;
HXDLIN( 121)												if (tileImage->useVirtualPos) {
HXLINE( 121)													index = ::Std_obj::_hx_int(((((( (Float)(y1) ) - tileImage->virtualY) * ( (Float)(tileImage->width) )) + x1) - tileImage->virtualX));
            												}
            												else {
HXLINE( 121)													index = ::Std_obj::_hx_int(( (Float)(((y1 * tileImage->width) + x1)) ));
            												}
HXDLIN( 121)												::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 121)												int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 121)												int c = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 121)												int color;
HXDLIN( 121)												if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 121)													color = ((((((c >> 24) & 255) << 24) | ((c & 255) << 16)) | (((c >> 8) & 255) << 8)) | ((c >> 16) & 255));
            												}
            												else {
HXLINE( 121)													color = c;
            												}
HXDLIN( 121)												{
HXLINE( 121)													int this3 = color;
HXDLIN( 121)													int c1 = this3;
HXDLIN( 121)													bool _hx_tmp;
HXDLIN( 121)													if ((((c1 >> 24) & 255) < 254)) {
HXLINE( 121)														_hx_tmp = this1->transparent;
            													}
            													else {
HXLINE( 121)														_hx_tmp = false;
            													}
HXDLIN( 121)													if (_hx_tmp) {
HXLINE( 121)														int location;
HXDLIN( 121)														if (this1->useVirtualPos) {
HXLINE( 121)															location = ::Std_obj::_hx_int(((((( (Float)(y) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            														}
            														else {
HXLINE( 121)															location = ::Std_obj::_hx_int(( (Float)(((y * this1->width) + x)) ));
            														}
HXDLIN( 121)														::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 121)														::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 121)														int pos = ((location << 2) + this2->byteOffset);
HXDLIN( 121)														int this3 = (((( (int)(_this->b->__get(pos)) ) | (( (int)(_this->b->__get((pos + 1))) ) << 8)) | (( (int)(_this->b->__get((pos + 2))) ) << 16)) | (( (int)(_this->b->__get((pos + 3))) ) << 24));
HXDLIN( 121)														int this4 = this3;
HXDLIN( 121)														int this5;
HXDLIN( 121)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 121)															this5 = ((((((this4 >> 24) & 255) << 24) | ((this4 & 255) << 16)) | (((this4 >> 8) & 255) << 8)) | ((this4 >> 16) & 255));
            														}
            														else {
HXLINE( 121)															this5 = this4;
            														}
HXDLIN( 121)														Float a1;
HXDLIN( 121)														int this6 = ((this5 >> 24) & 255);
HXDLIN( 121)														if ((this6 == 0)) {
HXLINE( 121)															a1 = ((Float)0.);
            														}
            														else {
HXLINE( 121)															a1 = (( (Float)(this6) ) / ( (Float)(255) ));
            														}
HXDLIN( 121)														Float r1;
HXDLIN( 121)														int this7 = ((this5 >> 16) & 255);
HXDLIN( 121)														if ((this7 == 0)) {
HXLINE( 121)															r1 = ((Float)0.);
            														}
            														else {
HXLINE( 121)															r1 = (( (Float)(this7) ) / ( (Float)(255) ));
            														}
HXDLIN( 121)														Float g1;
HXDLIN( 121)														int this8 = ((this5 >> 8) & 255);
HXDLIN( 121)														if ((this8 == 0)) {
HXLINE( 121)															g1 = ((Float)0.);
            														}
            														else {
HXLINE( 121)															g1 = (( (Float)(this8) ) / ( (Float)(255) ));
            														}
HXDLIN( 121)														Float b1;
HXDLIN( 121)														int this9 = (this5 & 255);
HXDLIN( 121)														if ((this9 == 0)) {
HXLINE( 121)															b1 = ((Float)0.);
            														}
            														else {
HXLINE( 121)															b1 = (( (Float)(this9) ) / ( (Float)(255) ));
            														}
HXDLIN( 121)														Float a2;
HXDLIN( 121)														int this10 = ((color >> 24) & 255);
HXDLIN( 121)														if ((this10 == 0)) {
HXLINE( 121)															a2 = ((Float)0.);
            														}
            														else {
HXLINE( 121)															a2 = (( (Float)(this10) ) / ( (Float)(255) ));
            														}
HXDLIN( 121)														Float r2;
HXDLIN( 121)														int this11 = ((color >> 16) & 255);
HXDLIN( 121)														if ((this11 == 0)) {
HXLINE( 121)															r2 = ((Float)0.);
            														}
            														else {
HXLINE( 121)															r2 = (( (Float)(this11) ) / ( (Float)(255) ));
            														}
HXDLIN( 121)														Float g2;
HXDLIN( 121)														int this12 = ((color >> 8) & 255);
HXDLIN( 121)														if ((this12 == 0)) {
HXLINE( 121)															g2 = ((Float)0.);
            														}
            														else {
HXLINE( 121)															g2 = (( (Float)(this12) ) / ( (Float)(255) ));
            														}
HXDLIN( 121)														Float b2;
HXDLIN( 121)														int this13 = (color & 255);
HXDLIN( 121)														if ((this13 == 0)) {
HXLINE( 121)															b2 = ((Float)0.);
            														}
            														else {
HXLINE( 121)															b2 = (( (Float)(this13) ) / ( (Float)(255) ));
            														}
HXDLIN( 121)														Float a3 = (a1 * (( (Float)(1) ) - a2));
HXDLIN( 121)														int r = ::Std_obj::_hx_int((( (Float)(255) ) * ((r1 * a3) + (r2 * a2))));
HXDLIN( 121)														int g = ::Std_obj::_hx_int((( (Float)(255) ) * ((g1 * a3) + (g2 * a2))));
HXDLIN( 121)														int b = ::Std_obj::_hx_int((( (Float)(255) ) * ((b1 * a3) + (b2 * a2))));
HXDLIN( 121)														int a = ::Std_obj::_hx_int((( (Float)(255) ) * (a3 + a2)));
HXDLIN( 121)														int blended = ((((a << 24) | (r << 16)) | (g << 8)) | b);
HXDLIN( 121)														{
HXLINE( 121)															::haxe::io::ArrayBufferViewImpl this14 = this1->image;
HXDLIN( 121)															int value;
HXDLIN( 121)															if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 121)																value = ((((((blended >> 24) & 255) << 24) | ((blended & 255) << 16)) | (((blended >> 8) & 255) << 8)) | ((blended >> 16) & 255));
            															}
            															else {
HXLINE( 121)																value = blended;
            															}
HXDLIN( 121)															bool _hx_tmp;
HXDLIN( 121)															if ((location >= 0)) {
HXLINE( 121)																_hx_tmp = (location < (this14->byteLength >> 2));
            															}
            															else {
HXLINE( 121)																_hx_tmp = false;
            															}
HXDLIN( 121)															if (_hx_tmp) {
HXLINE( 121)																::haxe::io::Bytes _this = this14->bytes;
HXDLIN( 121)																int pos = ((location << 2) + this14->byteOffset);
HXDLIN( 121)																_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 121)																_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 121)																_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 121)																_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            															}
            														}
            													}
            													else {
HXLINE( 121)														::haxe::io::ArrayBufferViewImpl this2 = this1->image;
HXDLIN( 121)														int index;
HXDLIN( 121)														if (this1->useVirtualPos) {
HXLINE( 121)															index = ::Std_obj::_hx_int(((((( (Float)(y) ) - this1->virtualY) * ( (Float)(this1->width) )) + x) - this1->virtualX));
            														}
            														else {
HXLINE( 121)															index = ::Std_obj::_hx_int(( (Float)(((y * this1->width) + x)) ));
            														}
HXDLIN( 121)														int value;
HXDLIN( 121)														if (::pixelimage::_Endian::Endian_Fields__obj::isLittleEndian) {
HXLINE( 121)															value = ((((((c1 >> 24) & 255) << 24) | ((c1 & 255) << 16)) | (((c1 >> 8) & 255) << 8)) | ((c1 >> 16) & 255));
            														}
            														else {
HXLINE( 121)															value = c1;
            														}
HXDLIN( 121)														bool _hx_tmp;
HXDLIN( 121)														if ((index >= 0)) {
HXLINE( 121)															_hx_tmp = (index < (this2->byteLength >> 2));
            														}
            														else {
HXLINE( 121)															_hx_tmp = false;
            														}
HXDLIN( 121)														if (_hx_tmp) {
HXLINE( 121)															::haxe::io::Bytes _this = this2->bytes;
HXDLIN( 121)															int pos = ((index << 2) + this2->byteOffset);
HXDLIN( 121)															_this->b[pos] = ( (unsigned char)(value) );
HXDLIN( 121)															_this->b[(pos + 1)] = ( (unsigned char)((value >> 8)) );
HXDLIN( 121)															_this->b[(pos + 2)] = ( (unsigned char)((value >> 16)) );
HXDLIN( 121)															_this->b[(pos + 3)] = ( (unsigned char)(::hx::UShr(value,24)) );
            														}
            													}
            												}
HXLINE( 237)												foundY1 = true;
            											}
            											else {
HXLINE( 121)												if (foundY1) {
HXLINE( 121)													goto _hx_goto_46;
            												}
            											}
            										}
            									}
            									_hx_goto_46:;
            								}
            							}
            						}
            					}
            				}
HXDLIN( 121)				::pixelimage::algo::HitQuad v = ::pixelimage::algo::HitQuad_obj::__alloc( HX_CTX ,ax,ay,bx,by,cx,cy,dx,dy,true);
            			}
            		}
HXLINE( 126)		this->x0 = x2;
HXLINE( 127)		this->y0 = y2;
HXLINE( 128)		this->toggleDraw = true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(PathElementPattern_obj,lineTo,(void))

void PathElementPattern_obj::moveTo(Float x1,Float y1){
            	HX_STACKFRAME(&_hx_pos_fe0db7e25242d665_131_moveTo)
HXLINE( 132)		this->x0 = x1;
HXLINE( 133)		this->y0 = y1;
HXLINE( 134)		this->info = null();
HXLINE( 135)		this->toggleDraw = true;
            	}


HX_DEFINE_DYNAMIC_FUNC2(PathElementPattern_obj,moveTo,(void))


::hx::ObjectPtr< PathElementPattern_obj > PathElementPattern_obj::__new(::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< int >  __o_strokeColor,::hx::Null< Float >  __o_strokeWidth,::Array< ::String > strokeDashGapArray,::hx::Null< int >  __o_strokeColor0,::hx::Null< int >  __o_strokeColor1,::hx::Null< int >  __o_fillColor0,::hx::Null< int >  __o_fillColor1,::Array< bool > strokePatternFill, ::Dynamic strokePatternWidth, ::Dynamic strokePatternHeight,::hx::Null< bool >  __o_strokePatternAcross,::hx::Null< int >  __o_strokePatternScale,::Array< bool > fillPatternFill,::hx::Null< int >  __o_fillPatternWidth,::hx::Null< int >  __o_fillPatternHeight,::hx::Null< bool >  __o_fillPatternAcross,::hx::Null< int >  __o_fillPatternScale,::String __o_pathData,::hx::Null< Float >  __o_translateX,::hx::Null< Float >  __o_translateY,::hx::Null< Float >  __o_scaleX,::hx::Null< Float >  __o_scaleY) {
	::hx::ObjectPtr< PathElementPattern_obj > __this = new PathElementPattern_obj();
	__this->__construct(__o_opacity,__o_visibility,__o_strokeColor,__o_strokeWidth,strokeDashGapArray,__o_strokeColor0,__o_strokeColor1,__o_fillColor0,__o_fillColor1,strokePatternFill,strokePatternWidth,strokePatternHeight,__o_strokePatternAcross,__o_strokePatternScale,fillPatternFill,__o_fillPatternWidth,__o_fillPatternHeight,__o_fillPatternAcross,__o_fillPatternScale,__o_pathData,__o_translateX,__o_translateY,__o_scaleX,__o_scaleY);
	return __this;
}

::hx::ObjectPtr< PathElementPattern_obj > PathElementPattern_obj::__alloc(::hx::Ctx *_hx_ctx,::hx::Null< Float >  __o_opacity,::hx::Null< bool >  __o_visibility,::hx::Null< int >  __o_strokeColor,::hx::Null< Float >  __o_strokeWidth,::Array< ::String > strokeDashGapArray,::hx::Null< int >  __o_strokeColor0,::hx::Null< int >  __o_strokeColor1,::hx::Null< int >  __o_fillColor0,::hx::Null< int >  __o_fillColor1,::Array< bool > strokePatternFill, ::Dynamic strokePatternWidth, ::Dynamic strokePatternHeight,::hx::Null< bool >  __o_strokePatternAcross,::hx::Null< int >  __o_strokePatternScale,::Array< bool > fillPatternFill,::hx::Null< int >  __o_fillPatternWidth,::hx::Null< int >  __o_fillPatternHeight,::hx::Null< bool >  __o_fillPatternAcross,::hx::Null< int >  __o_fillPatternScale,::String __o_pathData,::hx::Null< Float >  __o_translateX,::hx::Null< Float >  __o_translateY,::hx::Null< Float >  __o_scaleX,::hx::Null< Float >  __o_scaleY) {
	PathElementPattern_obj *__this = (PathElementPattern_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(PathElementPattern_obj), true, "pixelimage.triangleGML.patternShape.PathElementPattern"));
	*(void **)__this = PathElementPattern_obj::_hx_vtable;
	__this->__construct(__o_opacity,__o_visibility,__o_strokeColor,__o_strokeWidth,strokeDashGapArray,__o_strokeColor0,__o_strokeColor1,__o_fillColor0,__o_fillColor1,strokePatternFill,strokePatternWidth,strokePatternHeight,__o_strokePatternAcross,__o_strokePatternScale,fillPatternFill,__o_fillPatternWidth,__o_fillPatternHeight,__o_fillPatternAcross,__o_fillPatternScale,__o_pathData,__o_translateX,__o_translateY,__o_scaleX,__o_scaleY);
	return __this;
}

PathElementPattern_obj::PathElementPattern_obj()
{
}

void PathElementPattern_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(PathElementPattern);
	HX_MARK_MEMBER_NAME(pathData,"pathData");
	HX_MARK_MEMBER_NAME(translateX,"translateX");
	HX_MARK_MEMBER_NAME(translateY,"translateY");
	HX_MARK_MEMBER_NAME(scaleX,"scaleX");
	HX_MARK_MEMBER_NAME(scaleY,"scaleY");
	HX_MARK_MEMBER_NAME(x0,"x0");
	HX_MARK_MEMBER_NAME(y0,"y0");
	HX_MARK_MEMBER_NAME(temp,"temp");
	HX_MARK_MEMBER_NAME(toggleDraw,"toggleDraw");
	HX_MARK_MEMBER_NAME(info,"info");
	HX_MARK_MEMBER_NAME(oldInfo,"oldInfo");
	::pixelimage::triangleGML::coreShape::PatternShape_obj::__Mark(HX_MARK_ARG);
	HX_MARK_END_CLASS();
}

void PathElementPattern_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(pathData,"pathData");
	HX_VISIT_MEMBER_NAME(translateX,"translateX");
	HX_VISIT_MEMBER_NAME(translateY,"translateY");
	HX_VISIT_MEMBER_NAME(scaleX,"scaleX");
	HX_VISIT_MEMBER_NAME(scaleY,"scaleY");
	HX_VISIT_MEMBER_NAME(x0,"x0");
	HX_VISIT_MEMBER_NAME(y0,"y0");
	HX_VISIT_MEMBER_NAME(temp,"temp");
	HX_VISIT_MEMBER_NAME(toggleDraw,"toggleDraw");
	HX_VISIT_MEMBER_NAME(info,"info");
	HX_VISIT_MEMBER_NAME(oldInfo,"oldInfo");
	::pixelimage::triangleGML::coreShape::PatternShape_obj::__Visit(HX_VISIT_ARG);
}

::hx::Val PathElementPattern_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"x0") ) { return ::hx::Val( x0 ); }
		if (HX_FIELD_EQ(inName,"y0") ) { return ::hx::Val( y0 ); }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"temp") ) { return ::hx::Val( temp ); }
		if (HX_FIELD_EQ(inName,"info") ) { return ::hx::Val( info ); }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"scaleX") ) { return ::hx::Val( scaleX ); }
		if (HX_FIELD_EQ(inName,"scaleY") ) { return ::hx::Val( scaleY ); }
		if (HX_FIELD_EQ(inName,"render") ) { return ::hx::Val( render_dyn() ); }
		if (HX_FIELD_EQ(inName,"lineTo") ) { return ::hx::Val( lineTo_dyn() ); }
		if (HX_FIELD_EQ(inName,"moveTo") ) { return ::hx::Val( moveTo_dyn() ); }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"oldInfo") ) { return ::hx::Val( oldInfo ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"pathData") ) { return ::hx::Val( pathData ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"translateX") ) { return ::hx::Val( translateX ); }
		if (HX_FIELD_EQ(inName,"translateY") ) { return ::hx::Val( translateY ); }
		if (HX_FIELD_EQ(inName,"toggleDraw") ) { return ::hx::Val( toggleDraw ); }
		break;
	case 12:
		if (HX_FIELD_EQ(inName,"setParameter") ) { return ::hx::Val( setParameter_dyn() ); }
		break;
	case 13:
		if (HX_FIELD_EQ(inName,"lineSegmentTo") ) { return ::hx::Val( lineSegmentTo_dyn() ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val PathElementPattern_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 2:
		if (HX_FIELD_EQ(inName,"x0") ) { x0=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"y0") ) { y0=inValue.Cast< Float >(); return inValue; }
		break;
	case 4:
		if (HX_FIELD_EQ(inName,"temp") ) { temp=inValue.Cast< ::pixelimage::ImageStruct >(); return inValue; }
		if (HX_FIELD_EQ(inName,"info") ) { info=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 6:
		if (HX_FIELD_EQ(inName,"scaleX") ) { scaleX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"scaleY") ) { scaleY=inValue.Cast< Float >(); return inValue; }
		break;
	case 7:
		if (HX_FIELD_EQ(inName,"oldInfo") ) { oldInfo=inValue.Cast<  ::Dynamic >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"pathData") ) { pathData=inValue.Cast< ::String >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"translateX") ) { translateX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"translateY") ) { translateY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"toggleDraw") ) { toggleDraw=inValue.Cast< bool >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void PathElementPattern_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("pathData",6f,9e,02,38));
	outFields->push(HX_("translateX",4a,8d,5c,06));
	outFields->push(HX_("translateY",4b,8d,5c,06));
	outFields->push(HX_("scaleX",8e,ea,25,3c));
	outFields->push(HX_("scaleY",8f,ea,25,3c));
	outFields->push(HX_("x0",b8,68,00,00));
	outFields->push(HX_("y0",97,69,00,00));
	outFields->push(HX_("temp",14,c3,f9,4c));
	outFields->push(HX_("toggleDraw",b8,71,26,da));
	outFields->push(HX_("info",6e,38,bb,45));
	outFields->push(HX_("oldInfo",b5,dc,ff,fa));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo PathElementPattern_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(PathElementPattern_obj,pathData),HX_("pathData",6f,9e,02,38)},
	{::hx::fsFloat,(int)offsetof(PathElementPattern_obj,translateX),HX_("translateX",4a,8d,5c,06)},
	{::hx::fsFloat,(int)offsetof(PathElementPattern_obj,translateY),HX_("translateY",4b,8d,5c,06)},
	{::hx::fsFloat,(int)offsetof(PathElementPattern_obj,scaleX),HX_("scaleX",8e,ea,25,3c)},
	{::hx::fsFloat,(int)offsetof(PathElementPattern_obj,scaleY),HX_("scaleY",8f,ea,25,3c)},
	{::hx::fsFloat,(int)offsetof(PathElementPattern_obj,x0),HX_("x0",b8,68,00,00)},
	{::hx::fsFloat,(int)offsetof(PathElementPattern_obj,y0),HX_("y0",97,69,00,00)},
	{::hx::fsObject /* ::pixelimage::ImageStruct */ ,(int)offsetof(PathElementPattern_obj,temp),HX_("temp",14,c3,f9,4c)},
	{::hx::fsBool,(int)offsetof(PathElementPattern_obj,toggleDraw),HX_("toggleDraw",b8,71,26,da)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PathElementPattern_obj,info),HX_("info",6e,38,bb,45)},
	{::hx::fsObject /*  ::Dynamic */ ,(int)offsetof(PathElementPattern_obj,oldInfo),HX_("oldInfo",b5,dc,ff,fa)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *PathElementPattern_obj_sStaticStorageInfo = 0;
#endif

static ::String PathElementPattern_obj_sMemberFields[] = {
	HX_("pathData",6f,9e,02,38),
	HX_("translateX",4a,8d,5c,06),
	HX_("translateY",4b,8d,5c,06),
	HX_("scaleX",8e,ea,25,3c),
	HX_("scaleY",8f,ea,25,3c),
	HX_("x0",b8,68,00,00),
	HX_("y0",97,69,00,00),
	HX_("temp",14,c3,f9,4c),
	HX_("toggleDraw",b8,71,26,da),
	HX_("info",6e,38,bb,45),
	HX_("oldInfo",b5,dc,ff,fa),
	HX_("setParameter",a7,f5,ff,6c),
	HX_("render",56,6b,29,05),
	HX_("lineSegmentTo",7a,d5,67,57),
	HX_("lineTo",8f,46,a0,ec),
	HX_("moveTo",ec,d2,ac,cc),
	::String(null()) };

::hx::Class PathElementPattern_obj::__mClass;

void PathElementPattern_obj::__register()
{
	PathElementPattern_obj _hx_dummy;
	PathElementPattern_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("pixelimage.triangleGML.patternShape.PathElementPattern",8d,4d,cf,6b);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(PathElementPattern_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< PathElementPattern_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = PathElementPattern_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = PathElementPattern_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace pixelimage
} // end namespace triangleGML
} // end namespace patternShape
