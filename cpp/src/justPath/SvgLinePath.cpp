// Generated by Haxe 4.3.0-rc.1+
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif
#ifndef INCLUDED_justPath_EllipseArc
#include <justPath/EllipseArc.h>
#endif
#ifndef INCLUDED_justPath_ILinePathContext
#include <justPath/ILinePathContext.h>
#endif
#ifndef INCLUDED_justPath_StoreF6
#include <justPath/StoreF6.h>
#endif
#ifndef INCLUDED_justPath_SvgLinePath
#include <justPath/SvgLinePath.h>
#endif
#ifndef INCLUDED_justPath__CurveMath_CurveMath_Fields_
#include <justPath/_CurveMath/CurveMath_Fields_.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_01bb42201027e3f1_7_new,"justPath.SvgLinePath","new",0xac112112,"justPath.SvgLinePath.new","justPath/SvgLinePath.hx",7,0x0f70c65f)
HX_LOCAL_STACK_FRAME(_hx_pos_01bb42201027e3f1_30_parse,"justPath.SvgLinePath","parse",0xcf8df165,"justPath.SvgLinePath.parse","justPath/SvgLinePath.hx",30,0x0f70c65f)
namespace justPath{

void SvgLinePath_obj::__construct(::Dynamic pathContext_){
            	HX_STACKFRAME(&_hx_pos_01bb42201027e3f1_7_new)
HXLINE(  17)		this->py = ((Float)0.);
HXLINE(  16)		this->px = ((Float)0.);
HXLINE(  15)		this->l = 0;
HXLINE(  14)		this->c = 0;
HXLINE(  13)		this->controlY = ((Float)0.);
HXLINE(  12)		this->controlX = ((Float)0.);
HXLINE(  11)		this->lastY = ((Float)0.);
HXLINE(  10)		this->lastX = ((Float)0.);
HXLINE(   9)		this->pos = 0;
HXLINE(   8)		this->str = HX_("",00,00,00,00);
HXLINE(  21)		this->pathContext = pathContext_;
            	}

Dynamic SvgLinePath_obj::__CreateEmpty() { return new SvgLinePath_obj; }

void *SvgLinePath_obj::_hx_vtable = 0;

Dynamic SvgLinePath_obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< SvgLinePath_obj > _hx_result = new SvgLinePath_obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool SvgLinePath_obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x1fbed828;
}

::String SvgLinePath_obj::parse(::String str_){
            	HX_GC_STACKFRAME(&_hx_pos_01bb42201027e3f1_30_parse)
HXLINE(  31)		this->str = str_;
HXLINE(  32)		this->pos = 0;
HXLINE(  33)		this->l = this->str.length;
HXLINE(  34)		this->c = this->str.cca(this->pos++);
HXLINE(  35)		int count = 0;
HXLINE(  36)		this->store = ::justPath::StoreF6_obj::__alloc( HX_CTX );
HXLINE(  37)		while((this->pos < this->l)){
HXLINE(  38)			switch((int)(this->c)){
            				case (int)65: {
HXLINE( 313)					{
HXLINE( 313)						{
HXLINE( 313)							::justPath::StoreF6 _this = this->store;
HXDLIN( 313)							_this->l = 0;
HXDLIN( 313)							_this->s0 = null();
HXDLIN( 313)							_this->s1 = null();
HXDLIN( 313)							_this->s2 = null();
HXDLIN( 313)							_this->s3 = null();
HXDLIN( 313)							_this->s4 = null();
HXDLIN( 313)							_this->s5 = null();
HXDLIN( 313)							_this->s6 = null();
            						}
HXDLIN( 313)						this->c = this->str.cca(this->pos++);
HXDLIN( 313)						::String temp = HX_("",00,00,00,00);
HXDLIN( 313)						bool exit = false;
HXDLIN( 313)						while(true){
HXLINE( 313)							switch((int)(this->c)){
            								case (int)32: case (int)44: {
HXLINE( 313)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 313)										if (((this->store->l & 1) == 0)) {
HXLINE( 313)											::justPath::StoreF6 _this = this->store;
HXDLIN( 313)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 313)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 313)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 313)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 313)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 313)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 313)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 313)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 313)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 313)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 313)													{
HXLINE( 313)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 313)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 313)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 313)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 313)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 313)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 313)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 313)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 313)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 313)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 313)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 313)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 313)											_this->l++;
            										}
            										else {
HXLINE( 313)											::justPath::StoreF6 _this = this->store;
HXDLIN( 313)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 313)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 313)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 313)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 313)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 313)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 313)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 313)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 313)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 313)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 313)													{
HXLINE( 313)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 313)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 313)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 313)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 313)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 313)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 313)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 313)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 313)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 313)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 313)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 313)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 313)											_this->l++;
            										}
HXDLIN( 313)										temp = HX_("",00,00,00,00);
            									}
            								}
            								break;
            								case (int)45: {
HXLINE( 313)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 313)										if (((this->store->l & 1) == 0)) {
HXLINE( 313)											::justPath::StoreF6 _this = this->store;
HXDLIN( 313)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 313)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 313)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 313)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 313)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 313)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 313)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 313)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 313)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 313)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 313)													{
HXLINE( 313)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 313)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 313)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 313)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 313)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 313)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 313)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 313)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 313)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 313)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 313)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 313)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 313)											_this->l++;
            										}
            										else {
HXLINE( 313)											::justPath::StoreF6 _this = this->store;
HXDLIN( 313)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 313)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 313)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 313)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 313)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 313)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 313)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 313)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 313)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 313)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 313)													{
HXLINE( 313)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 313)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 313)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 313)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 313)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 313)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 313)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 313)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 313)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 313)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 313)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 313)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 313)											_this->l++;
            										}
            									}
HXDLIN( 313)									temp = HX_("-",2d,00,00,00);
            								}
            								break;
            								case (int)46: {
HXLINE( 313)									temp = (temp + HX_(".",2e,00,00,00));
            								}
            								break;
            								case (int)48: {
HXLINE( 313)									temp = (temp + HX_("0",30,00,00,00));
            								}
            								break;
            								case (int)49: {
HXLINE( 313)									temp = (temp + HX_("1",31,00,00,00));
            								}
            								break;
            								case (int)50: {
HXLINE( 313)									temp = (temp + HX_("2",32,00,00,00));
            								}
            								break;
            								case (int)51: {
HXLINE( 313)									temp = (temp + HX_("3",33,00,00,00));
            								}
            								break;
            								case (int)52: {
HXLINE( 313)									temp = (temp + HX_("4",34,00,00,00));
            								}
            								break;
            								case (int)53: {
HXLINE( 313)									temp = (temp + HX_("5",35,00,00,00));
            								}
            								break;
            								case (int)54: {
HXLINE( 313)									temp = (temp + HX_("6",36,00,00,00));
            								}
            								break;
            								case (int)55: {
HXLINE( 313)									temp = (temp + HX_("7",37,00,00,00));
            								}
            								break;
            								case (int)56: {
HXLINE( 313)									temp = (temp + HX_("8",38,00,00,00));
            								}
            								break;
            								case (int)57: {
HXLINE( 313)									temp = (temp + HX_("9",39,00,00,00));
            								}
            								break;
            								default:{
HXLINE( 313)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 313)										if (((this->store->l & 1) == 0)) {
HXLINE( 313)											::justPath::StoreF6 _this = this->store;
HXDLIN( 313)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 313)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 313)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 313)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 313)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 313)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 313)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 313)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 313)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 313)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 313)													{
HXLINE( 313)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 313)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 313)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 313)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 313)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 313)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 313)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 313)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 313)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 313)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 313)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 313)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 313)											_this->l++;
            										}
            										else {
HXLINE( 313)											::justPath::StoreF6 _this = this->store;
HXDLIN( 313)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 313)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 313)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 313)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 313)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 313)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 313)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 313)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 313)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 313)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 313)													{
HXLINE( 313)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 313)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 313)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 313)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 313)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 313)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 313)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 313)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 313)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 313)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 313)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 313)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 313)											_this->l++;
            										}
HXDLIN( 313)										temp = HX_("",00,00,00,00);
            									}
HXDLIN( 313)									this->pos--;
HXDLIN( 313)									exit = true;
            								}
            							}
HXDLIN( 313)							if (exit) {
HXLINE( 313)								goto _hx_goto_2;
            							}
HXDLIN( 313)							this->c = this->str.cca(this->pos++);
            						}
            						_hx_goto_2:;
            					}
HXLINE( 314)					if ((this->store->l == 7)) {
HXLINE( 315)						Float sx = this->lastX;
HXLINE( 316)						Float sy = this->lastY;
HXLINE( 317)						::justPath::StoreF6 _this = this->store;
HXDLIN( 317)						 ::Dynamic out = _this->s0;
HXDLIN( 317)						if ((_this->l != 0)) {
HXLINE( 317)							_this->s0 = _this->s1;
HXDLIN( 317)							_this->s1 = _this->s2;
HXDLIN( 317)							_this->s2 = _this->s3;
HXDLIN( 317)							_this->s3 = _this->s4;
HXDLIN( 317)							_this->s4 = _this->s5;
HXDLIN( 317)							_this->s5 = null();
HXDLIN( 317)							if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 317)								::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 317)								 ::Dynamic out = _this1->s0;
HXDLIN( 317)								if ((_this1->l != 0)) {
HXLINE( 317)									_this1->s0 = _this1->s1;
HXDLIN( 317)									_this1->s1 = _this1->s2;
HXDLIN( 317)									_this1->s2 = _this1->s3;
HXDLIN( 317)									_this1->s3 = _this1->s4;
HXDLIN( 317)									_this1->s4 = _this1->s5;
HXDLIN( 317)									_this1->s5 = null();
HXDLIN( 317)									if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 317)										_this1->s5 = _this1->s6->shift();
            									}
HXDLIN( 317)									_this1->l--;
            								}
HXDLIN( 317)								_this->s5 = out;
            							}
HXDLIN( 317)							_this->l--;
            						}
HXDLIN( 317)						 ::Dynamic xr = out;
HXLINE( 318)						::justPath::StoreF6 _this1 = this->store;
HXDLIN( 318)						 ::Dynamic out1 = _this1->s0;
HXDLIN( 318)						if ((_this1->l != 0)) {
HXLINE( 318)							_this1->s0 = _this1->s1;
HXDLIN( 318)							_this1->s1 = _this1->s2;
HXDLIN( 318)							_this1->s2 = _this1->s3;
HXDLIN( 318)							_this1->s3 = _this1->s4;
HXDLIN( 318)							_this1->s4 = _this1->s5;
HXDLIN( 318)							_this1->s5 = null();
HXDLIN( 318)							if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 318)								::justPath::StoreF6 _this = _this1->s6;
HXDLIN( 318)								 ::Dynamic out = _this->s0;
HXDLIN( 318)								if ((_this->l != 0)) {
HXLINE( 318)									_this->s0 = _this->s1;
HXDLIN( 318)									_this->s1 = _this->s2;
HXDLIN( 318)									_this->s2 = _this->s3;
HXDLIN( 318)									_this->s3 = _this->s4;
HXDLIN( 318)									_this->s4 = _this->s5;
HXDLIN( 318)									_this->s5 = null();
HXDLIN( 318)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 318)										_this->s5 = _this->s6->shift();
            									}
HXDLIN( 318)									_this->l--;
            								}
HXDLIN( 318)								_this1->s5 = out;
            							}
HXDLIN( 318)							_this1->l--;
            						}
HXDLIN( 318)						 ::Dynamic yr = out1;
HXLINE( 319)						::justPath::StoreF6 _this2 = this->store;
HXDLIN( 319)						 ::Dynamic out2 = _this2->s0;
HXDLIN( 319)						if ((_this2->l != 0)) {
HXLINE( 319)							_this2->s0 = _this2->s1;
HXDLIN( 319)							_this2->s1 = _this2->s2;
HXDLIN( 319)							_this2->s2 = _this2->s3;
HXDLIN( 319)							_this2->s3 = _this2->s4;
HXDLIN( 319)							_this2->s4 = _this2->s5;
HXDLIN( 319)							_this2->s5 = null();
HXDLIN( 319)							if (::hx::IsNotNull( _this2->s6 )) {
HXLINE( 319)								::justPath::StoreF6 _this = _this2->s6;
HXDLIN( 319)								 ::Dynamic out = _this->s0;
HXDLIN( 319)								if ((_this->l != 0)) {
HXLINE( 319)									_this->s0 = _this->s1;
HXDLIN( 319)									_this->s1 = _this->s2;
HXDLIN( 319)									_this->s2 = _this->s3;
HXDLIN( 319)									_this->s3 = _this->s4;
HXDLIN( 319)									_this->s4 = _this->s5;
HXDLIN( 319)									_this->s5 = null();
HXDLIN( 319)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 319)										_this->s5 = _this->s6->shift();
            									}
HXDLIN( 319)									_this->l--;
            								}
HXDLIN( 319)								_this2->s5 = out;
            							}
HXDLIN( 319)							_this2->l--;
            						}
HXDLIN( 319)						 ::Dynamic phi = out2;
HXLINE( 320)						::justPath::StoreF6 _this3 = this->store;
HXDLIN( 320)						 ::Dynamic out3 = _this3->s0;
HXDLIN( 320)						if ((_this3->l != 0)) {
HXLINE( 320)							_this3->s0 = _this3->s1;
HXDLIN( 320)							_this3->s1 = _this3->s2;
HXDLIN( 320)							_this3->s2 = _this3->s3;
HXDLIN( 320)							_this3->s3 = _this3->s4;
HXDLIN( 320)							_this3->s4 = _this3->s5;
HXDLIN( 320)							_this3->s5 = null();
HXDLIN( 320)							if (::hx::IsNotNull( _this3->s6 )) {
HXLINE( 320)								::justPath::StoreF6 _this = _this3->s6;
HXDLIN( 320)								 ::Dynamic out = _this->s0;
HXDLIN( 320)								if ((_this->l != 0)) {
HXLINE( 320)									_this->s0 = _this->s1;
HXDLIN( 320)									_this->s1 = _this->s2;
HXDLIN( 320)									_this->s2 = _this->s3;
HXDLIN( 320)									_this->s3 = _this->s4;
HXDLIN( 320)									_this->s4 = _this->s5;
HXDLIN( 320)									_this->s5 = null();
HXDLIN( 320)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 320)										_this->s5 = _this->s6->shift();
            									}
HXDLIN( 320)									_this->l--;
            								}
HXDLIN( 320)								_this3->s5 = out;
            							}
HXDLIN( 320)							_this3->l--;
            						}
HXDLIN( 320)						int large = ::Std_obj::_hx_int(( (Float)(out3) ));
HXLINE( 321)						::justPath::StoreF6 _this4 = this->store;
HXDLIN( 321)						 ::Dynamic out4 = _this4->s0;
HXDLIN( 321)						if ((_this4->l != 0)) {
HXLINE( 321)							_this4->s0 = _this4->s1;
HXDLIN( 321)							_this4->s1 = _this4->s2;
HXDLIN( 321)							_this4->s2 = _this4->s3;
HXDLIN( 321)							_this4->s3 = _this4->s4;
HXDLIN( 321)							_this4->s4 = _this4->s5;
HXDLIN( 321)							_this4->s5 = null();
HXDLIN( 321)							if (::hx::IsNotNull( _this4->s6 )) {
HXLINE( 321)								::justPath::StoreF6 _this = _this4->s6;
HXDLIN( 321)								 ::Dynamic out = _this->s0;
HXDLIN( 321)								if ((_this->l != 0)) {
HXLINE( 321)									_this->s0 = _this->s1;
HXDLIN( 321)									_this->s1 = _this->s2;
HXDLIN( 321)									_this->s2 = _this->s3;
HXDLIN( 321)									_this->s3 = _this->s4;
HXDLIN( 321)									_this->s4 = _this->s5;
HXDLIN( 321)									_this->s5 = null();
HXDLIN( 321)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 321)										_this->s5 = _this->s6->shift();
            									}
HXDLIN( 321)									_this->l--;
            								}
HXDLIN( 321)								_this4->s5 = out;
            							}
HXDLIN( 321)							_this4->l--;
            						}
HXDLIN( 321)						int sweep = ::Std_obj::_hx_int(( (Float)(out4) ));
HXLINE( 322)						::justPath::StoreF6 _this5 = this->store;
HXDLIN( 322)						 ::Dynamic out5 = _this5->s0;
HXDLIN( 322)						if ((_this5->l != 0)) {
HXLINE( 322)							_this5->s0 = _this5->s1;
HXDLIN( 322)							_this5->s1 = _this5->s2;
HXDLIN( 322)							_this5->s2 = _this5->s3;
HXDLIN( 322)							_this5->s3 = _this5->s4;
HXDLIN( 322)							_this5->s4 = _this5->s5;
HXDLIN( 322)							_this5->s5 = null();
HXDLIN( 322)							if (::hx::IsNotNull( _this5->s6 )) {
HXLINE( 322)								::justPath::StoreF6 _this = _this5->s6;
HXDLIN( 322)								 ::Dynamic out = _this->s0;
HXDLIN( 322)								if ((_this->l != 0)) {
HXLINE( 322)									_this->s0 = _this->s1;
HXDLIN( 322)									_this->s1 = _this->s2;
HXDLIN( 322)									_this->s2 = _this->s3;
HXDLIN( 322)									_this->s3 = _this->s4;
HXDLIN( 322)									_this->s4 = _this->s5;
HXDLIN( 322)									_this->s5 = null();
HXDLIN( 322)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 322)										_this->s5 = _this->s6->shift();
            									}
HXDLIN( 322)									_this->l--;
            								}
HXDLIN( 322)								_this5->s5 = out;
            							}
HXDLIN( 322)							_this5->l--;
            						}
HXDLIN( 322)						this->lastX = ( (Float)(out5) );
HXLINE( 323)						::justPath::StoreF6 _this6 = this->store;
HXDLIN( 323)						 ::Dynamic out6 = _this6->s0;
HXDLIN( 323)						if ((_this6->l != 0)) {
HXLINE( 323)							_this6->s0 = _this6->s1;
HXDLIN( 323)							_this6->s1 = _this6->s2;
HXDLIN( 323)							_this6->s2 = _this6->s3;
HXDLIN( 323)							_this6->s3 = _this6->s4;
HXDLIN( 323)							_this6->s4 = _this6->s5;
HXDLIN( 323)							_this6->s5 = null();
HXDLIN( 323)							if (::hx::IsNotNull( _this6->s6 )) {
HXLINE( 323)								::justPath::StoreF6 _this = _this6->s6;
HXDLIN( 323)								 ::Dynamic out = _this->s0;
HXDLIN( 323)								if ((_this->l != 0)) {
HXLINE( 323)									_this->s0 = _this->s1;
HXDLIN( 323)									_this->s1 = _this->s2;
HXDLIN( 323)									_this->s2 = _this->s3;
HXDLIN( 323)									_this->s3 = _this->s4;
HXDLIN( 323)									_this->s4 = _this->s5;
HXDLIN( 323)									_this->s5 = null();
HXDLIN( 323)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 323)										_this->s5 = _this->s6->shift();
            									}
HXDLIN( 323)									_this->l--;
            								}
HXDLIN( 323)								_this6->s5 = out;
            							}
HXDLIN( 323)							_this6->l--;
            						}
HXDLIN( 323)						this->lastY = ( (Float)(out6) );
HXLINE( 324)						Float sx1 = sx;
HXDLIN( 324)						Float sy1 = sy;
HXDLIN( 324)						Float phi1 = ( (Float)(phi) );
HXDLIN( 324)						Float ex = this->lastX;
HXDLIN( 324)						Float ey = this->lastY;
HXDLIN( 324)						Float mx = ((sx1 - ex) / ( (Float)(2) ));
HXDLIN( 324)						Float my = ((sy1 - ey) / ( (Float)(2) ));
HXDLIN( 324)						Float ax = ((sx1 + ex) / ( (Float)(2) ));
HXDLIN( 324)						Float ay = ((sy1 + ey) / ( (Float)(2) ));
HXDLIN( 324)						phi1 = ::hx::Mod(phi1,360);
HXDLIN( 324)						phi1 = ((phi1 * ::Math_obj::PI) / ( (Float)(180) ));
HXDLIN( 324)						Float sin = ::Math_obj::sin(phi1);
HXDLIN( 324)						Float cos = ::Math_obj::cos(phi1);
HXDLIN( 324)						Float x1 = ((mx * cos) + (my * sin));
HXDLIN( 324)						Float y1 = ((-(mx) * sin) + (my * cos));
HXDLIN( 324)						Float rx = ::Math_obj::abs(( (Float)(xr) ));
HXDLIN( 324)						Float ry = ::Math_obj::abs(( (Float)(yr) ));
HXDLIN( 324)						Float rxx = (rx * rx);
HXDLIN( 324)						Float ryy = (ry * ry);
HXDLIN( 324)						Float xx1 = (x1 * x1);
HXDLIN( 324)						Float yy1 = (y1 * y1);
HXDLIN( 324)						Float check = ((xx1 / rxx) + (yy1 / ryy));
HXDLIN( 324)						if ((check > 1)) {
HXLINE( 324)							rx = (rx * ::Math_obj::sqrt(check));
HXDLIN( 324)							ry = (ry * ::Math_obj::sqrt(check));
HXDLIN( 324)							rxx = (rx * rx);
HXDLIN( 324)							ryy = (ry * ry);
            						}
HXDLIN( 324)						int sign;
HXDLIN( 324)						if ((large == sweep)) {
HXLINE( 324)							sign = -1;
            						}
            						else {
HXLINE( 324)							sign = 1;
            						}
HXDLIN( 324)						Float sq = ((((rxx * ryy) - (rxx * yy1)) - (ryy * xx1)) / ((rxx * yy1) + (ryy * xx1)));
HXDLIN( 324)						if ((sq < 0)) {
HXLINE( 324)							sq = ( (Float)(0) );
            						}
HXDLIN( 324)						Float coef = (( (Float)(sign) ) * ::Math_obj::sqrt(sq));
HXDLIN( 324)						Float cx1 = (((coef * rx) * y1) / ry);
HXDLIN( 324)						Float cy1 = (((-(coef) * ry) * x1) / rx);
HXDLIN( 324)						Float cx = ((ax + (cx1 * cos)) - (cy1 * sin));
HXDLIN( 324)						Float cy = ((ay + (cx1 * sin)) + (cy1 * cos));
HXDLIN( 324)						Float phiSin = ::Math_obj::sin(-(phi1));
HXDLIN( 324)						Float phiCos = ::Math_obj::cos(-(phi1));
HXDLIN( 324)						sx1 = (sx1 - cx);
HXDLIN( 324)						sy1 = (sy1 - cy);
HXDLIN( 324)						Float dx = sx1;
HXDLIN( 324)						Float dy = sy1;
HXDLIN( 324)						sx1 = ((dx * phiCos) - (dy * phiSin));
HXDLIN( 324)						sy1 = ((dx * phiSin) + (dy * phiCos));
HXDLIN( 324)						sx1 = (sx1 + cx);
HXDLIN( 324)						sy1 = (sy1 + cy);
HXDLIN( 324)						ex = (ex - cx);
HXDLIN( 324)						ey = (ey - cy);
HXDLIN( 324)						Float dx1 = ex;
HXDLIN( 324)						Float dy1 = ey;
HXDLIN( 324)						ex = ((dx1 * phiCos) - (dy1 * phiSin));
HXDLIN( 324)						ey = ((dx1 * phiSin) + (dy1 * phiCos));
HXDLIN( 324)						ex = (ex + cx);
HXDLIN( 324)						ey = (ey + cy);
HXDLIN( 324)						Float alpha = (::Math_obj::atan2((rx * (cy - sy1)),(ry * (cx - sx1))) - ::Math_obj::PI);
HXDLIN( 324)						Float omega = (::Math_obj::atan2((rx * (cy - ey)),(ry * (cx - ex))) - ::Math_obj::PI);
HXDLIN( 324)						Float delta = (alpha - omega);
HXDLIN( 324)						bool _hx_tmp;
HXDLIN( 324)						if ((sweep == 1)) {
HXLINE( 324)							_hx_tmp = (delta > 0);
            						}
            						else {
HXLINE( 324)							_hx_tmp = false;
            						}
HXDLIN( 324)						if (_hx_tmp) {
HXLINE( 324)							delta = (delta - (( (Float)(2) ) * ::Math_obj::PI));
            						}
            						else {
HXLINE( 324)							bool _hx_tmp;
HXDLIN( 324)							if ((sweep == 0)) {
HXLINE( 324)								_hx_tmp = (delta < 0);
            							}
            							else {
HXLINE( 324)								_hx_tmp = false;
            							}
HXDLIN( 324)							if (_hx_tmp) {
HXLINE( 324)								delta = (delta + (( (Float)(2) ) * ::Math_obj::PI));
            							}
            						}
HXDLIN( 324)						 ::Dynamic this1 =  ::Dynamic(::hx::Anon_obj::Create(10)
            							->setFixed(0,HX_("delta",f8,e7,26,d7),-(delta))
            							->setFixed(1,HX_("phiCos",56,5d,3f,ef),::Math_obj::cos(phi1))
            							->setFixed(2,HX_("phiSin",27,7c,4b,ef),::Math_obj::sin(phi1))
            							->setFixed(3,HX_("cx",b5,56,00,00),cx)
            							->setFixed(4,HX_("cy",b6,56,00,00),cy)
            							->setFixed(5,HX_("rx",c6,63,00,00),rx)
            							->setFixed(6,HX_("ry",c7,63,00,00),ry)
            							->setFixed(7,HX_("phi",71,57,55,00),phi1)
            							->setFixed(8,HX_("alpha",5e,a7,96,21),alpha)
            							->setFixed(9,HX_("omega",61,a3,d3,31),omega));
HXDLIN( 324)						 ::Dynamic ellipseData = this1;
HXLINE( 325)						::justPath::EllipseArc ellipse = ::justPath::EllipseArc_obj::__alloc( HX_CTX ,ellipseData);
HXLINE( 326)						ellipse->lineRender(this->pathContext->__Field(HX_("moveTo",ec,d2,ac,cc), ::hx::paccDynamic),this->pathContext->__Field(HX_("lineTo",8f,46,a0,ec), ::hx::paccDynamic),(::Math_obj::PI / ( (Float)(18) )),null());
            					}
            					else {
HXLINE( 327)						if ((this->store->l > 7)) {
HXLINE( 328)							while((this->store->l > 6)){
HXLINE( 329)								Float sx = this->lastX;
HXLINE( 330)								Float sy = this->lastY;
HXLINE( 331)								::justPath::StoreF6 _this = this->store;
HXDLIN( 331)								 ::Dynamic out = _this->s0;
HXDLIN( 331)								if ((_this->l != 0)) {
HXLINE( 331)									_this->s0 = _this->s1;
HXDLIN( 331)									_this->s1 = _this->s2;
HXDLIN( 331)									_this->s2 = _this->s3;
HXDLIN( 331)									_this->s3 = _this->s4;
HXDLIN( 331)									_this->s4 = _this->s5;
HXDLIN( 331)									_this->s5 = null();
HXDLIN( 331)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 331)										::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 331)										 ::Dynamic out = _this1->s0;
HXDLIN( 331)										if ((_this1->l != 0)) {
HXLINE( 331)											_this1->s0 = _this1->s1;
HXDLIN( 331)											_this1->s1 = _this1->s2;
HXDLIN( 331)											_this1->s2 = _this1->s3;
HXDLIN( 331)											_this1->s3 = _this1->s4;
HXDLIN( 331)											_this1->s4 = _this1->s5;
HXDLIN( 331)											_this1->s5 = null();
HXDLIN( 331)											if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 331)												_this1->s5 = _this1->s6->shift();
            											}
HXDLIN( 331)											_this1->l--;
            										}
HXDLIN( 331)										_this->s5 = out;
            									}
HXDLIN( 331)									_this->l--;
            								}
HXDLIN( 331)								 ::Dynamic xr = out;
HXLINE( 332)								::justPath::StoreF6 _this1 = this->store;
HXDLIN( 332)								 ::Dynamic out1 = _this1->s0;
HXDLIN( 332)								if ((_this1->l != 0)) {
HXLINE( 332)									_this1->s0 = _this1->s1;
HXDLIN( 332)									_this1->s1 = _this1->s2;
HXDLIN( 332)									_this1->s2 = _this1->s3;
HXDLIN( 332)									_this1->s3 = _this1->s4;
HXDLIN( 332)									_this1->s4 = _this1->s5;
HXDLIN( 332)									_this1->s5 = null();
HXDLIN( 332)									if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 332)										::justPath::StoreF6 _this = _this1->s6;
HXDLIN( 332)										 ::Dynamic out = _this->s0;
HXDLIN( 332)										if ((_this->l != 0)) {
HXLINE( 332)											_this->s0 = _this->s1;
HXDLIN( 332)											_this->s1 = _this->s2;
HXDLIN( 332)											_this->s2 = _this->s3;
HXDLIN( 332)											_this->s3 = _this->s4;
HXDLIN( 332)											_this->s4 = _this->s5;
HXDLIN( 332)											_this->s5 = null();
HXDLIN( 332)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 332)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 332)											_this->l--;
            										}
HXDLIN( 332)										_this1->s5 = out;
            									}
HXDLIN( 332)									_this1->l--;
            								}
HXDLIN( 332)								 ::Dynamic yr = out1;
HXLINE( 333)								::justPath::StoreF6 _this2 = this->store;
HXDLIN( 333)								 ::Dynamic out2 = _this2->s0;
HXDLIN( 333)								if ((_this2->l != 0)) {
HXLINE( 333)									_this2->s0 = _this2->s1;
HXDLIN( 333)									_this2->s1 = _this2->s2;
HXDLIN( 333)									_this2->s2 = _this2->s3;
HXDLIN( 333)									_this2->s3 = _this2->s4;
HXDLIN( 333)									_this2->s4 = _this2->s5;
HXDLIN( 333)									_this2->s5 = null();
HXDLIN( 333)									if (::hx::IsNotNull( _this2->s6 )) {
HXLINE( 333)										::justPath::StoreF6 _this = _this2->s6;
HXDLIN( 333)										 ::Dynamic out = _this->s0;
HXDLIN( 333)										if ((_this->l != 0)) {
HXLINE( 333)											_this->s0 = _this->s1;
HXDLIN( 333)											_this->s1 = _this->s2;
HXDLIN( 333)											_this->s2 = _this->s3;
HXDLIN( 333)											_this->s3 = _this->s4;
HXDLIN( 333)											_this->s4 = _this->s5;
HXDLIN( 333)											_this->s5 = null();
HXDLIN( 333)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 333)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 333)											_this->l--;
            										}
HXDLIN( 333)										_this2->s5 = out;
            									}
HXDLIN( 333)									_this2->l--;
            								}
HXDLIN( 333)								 ::Dynamic phi = out2;
HXLINE( 334)								::justPath::StoreF6 _this3 = this->store;
HXDLIN( 334)								 ::Dynamic out3 = _this3->s0;
HXDLIN( 334)								if ((_this3->l != 0)) {
HXLINE( 334)									_this3->s0 = _this3->s1;
HXDLIN( 334)									_this3->s1 = _this3->s2;
HXDLIN( 334)									_this3->s2 = _this3->s3;
HXDLIN( 334)									_this3->s3 = _this3->s4;
HXDLIN( 334)									_this3->s4 = _this3->s5;
HXDLIN( 334)									_this3->s5 = null();
HXDLIN( 334)									if (::hx::IsNotNull( _this3->s6 )) {
HXLINE( 334)										::justPath::StoreF6 _this = _this3->s6;
HXDLIN( 334)										 ::Dynamic out = _this->s0;
HXDLIN( 334)										if ((_this->l != 0)) {
HXLINE( 334)											_this->s0 = _this->s1;
HXDLIN( 334)											_this->s1 = _this->s2;
HXDLIN( 334)											_this->s2 = _this->s3;
HXDLIN( 334)											_this->s3 = _this->s4;
HXDLIN( 334)											_this->s4 = _this->s5;
HXDLIN( 334)											_this->s5 = null();
HXDLIN( 334)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 334)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 334)											_this->l--;
            										}
HXDLIN( 334)										_this3->s5 = out;
            									}
HXDLIN( 334)									_this3->l--;
            								}
HXDLIN( 334)								int large = ::Std_obj::_hx_int(( (Float)(out3) ));
HXLINE( 335)								::justPath::StoreF6 _this4 = this->store;
HXDLIN( 335)								 ::Dynamic out4 = _this4->s0;
HXDLIN( 335)								if ((_this4->l != 0)) {
HXLINE( 335)									_this4->s0 = _this4->s1;
HXDLIN( 335)									_this4->s1 = _this4->s2;
HXDLIN( 335)									_this4->s2 = _this4->s3;
HXDLIN( 335)									_this4->s3 = _this4->s4;
HXDLIN( 335)									_this4->s4 = _this4->s5;
HXDLIN( 335)									_this4->s5 = null();
HXDLIN( 335)									if (::hx::IsNotNull( _this4->s6 )) {
HXLINE( 335)										::justPath::StoreF6 _this = _this4->s6;
HXDLIN( 335)										 ::Dynamic out = _this->s0;
HXDLIN( 335)										if ((_this->l != 0)) {
HXLINE( 335)											_this->s0 = _this->s1;
HXDLIN( 335)											_this->s1 = _this->s2;
HXDLIN( 335)											_this->s2 = _this->s3;
HXDLIN( 335)											_this->s3 = _this->s4;
HXDLIN( 335)											_this->s4 = _this->s5;
HXDLIN( 335)											_this->s5 = null();
HXDLIN( 335)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 335)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 335)											_this->l--;
            										}
HXDLIN( 335)										_this4->s5 = out;
            									}
HXDLIN( 335)									_this4->l--;
            								}
HXDLIN( 335)								int sweep = ::Std_obj::_hx_int(( (Float)(out4) ));
HXLINE( 336)								::justPath::StoreF6 _this5 = this->store;
HXDLIN( 336)								 ::Dynamic out5 = _this5->s0;
HXDLIN( 336)								if ((_this5->l != 0)) {
HXLINE( 336)									_this5->s0 = _this5->s1;
HXDLIN( 336)									_this5->s1 = _this5->s2;
HXDLIN( 336)									_this5->s2 = _this5->s3;
HXDLIN( 336)									_this5->s3 = _this5->s4;
HXDLIN( 336)									_this5->s4 = _this5->s5;
HXDLIN( 336)									_this5->s5 = null();
HXDLIN( 336)									if (::hx::IsNotNull( _this5->s6 )) {
HXLINE( 336)										::justPath::StoreF6 _this = _this5->s6;
HXDLIN( 336)										 ::Dynamic out = _this->s0;
HXDLIN( 336)										if ((_this->l != 0)) {
HXLINE( 336)											_this->s0 = _this->s1;
HXDLIN( 336)											_this->s1 = _this->s2;
HXDLIN( 336)											_this->s2 = _this->s3;
HXDLIN( 336)											_this->s3 = _this->s4;
HXDLIN( 336)											_this->s4 = _this->s5;
HXDLIN( 336)											_this->s5 = null();
HXDLIN( 336)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 336)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 336)											_this->l--;
            										}
HXDLIN( 336)										_this5->s5 = out;
            									}
HXDLIN( 336)									_this5->l--;
            								}
HXDLIN( 336)								this->lastX = ( (Float)(out5) );
HXLINE( 337)								::justPath::StoreF6 _this6 = this->store;
HXDLIN( 337)								 ::Dynamic out6 = _this6->s0;
HXDLIN( 337)								if ((_this6->l != 0)) {
HXLINE( 337)									_this6->s0 = _this6->s1;
HXDLIN( 337)									_this6->s1 = _this6->s2;
HXDLIN( 337)									_this6->s2 = _this6->s3;
HXDLIN( 337)									_this6->s3 = _this6->s4;
HXDLIN( 337)									_this6->s4 = _this6->s5;
HXDLIN( 337)									_this6->s5 = null();
HXDLIN( 337)									if (::hx::IsNotNull( _this6->s6 )) {
HXLINE( 337)										::justPath::StoreF6 _this = _this6->s6;
HXDLIN( 337)										 ::Dynamic out = _this->s0;
HXDLIN( 337)										if ((_this->l != 0)) {
HXLINE( 337)											_this->s0 = _this->s1;
HXDLIN( 337)											_this->s1 = _this->s2;
HXDLIN( 337)											_this->s2 = _this->s3;
HXDLIN( 337)											_this->s3 = _this->s4;
HXDLIN( 337)											_this->s4 = _this->s5;
HXDLIN( 337)											_this->s5 = null();
HXDLIN( 337)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 337)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 337)											_this->l--;
            										}
HXDLIN( 337)										_this6->s5 = out;
            									}
HXDLIN( 337)									_this6->l--;
            								}
HXDLIN( 337)								this->lastY = ( (Float)(out6) );
HXLINE( 338)								Float sx1 = sx;
HXDLIN( 338)								Float sy1 = sy;
HXDLIN( 338)								Float phi1 = ( (Float)(phi) );
HXDLIN( 338)								Float ex = this->lastX;
HXDLIN( 338)								Float ey = this->lastY;
HXDLIN( 338)								Float mx = ((sx1 - ex) / ( (Float)(2) ));
HXDLIN( 338)								Float my = ((sy1 - ey) / ( (Float)(2) ));
HXDLIN( 338)								Float ax = ((sx1 + ex) / ( (Float)(2) ));
HXDLIN( 338)								Float ay = ((sy1 + ey) / ( (Float)(2) ));
HXDLIN( 338)								phi1 = ::hx::Mod(phi1,360);
HXDLIN( 338)								phi1 = ((phi1 * ::Math_obj::PI) / ( (Float)(180) ));
HXDLIN( 338)								Float sin = ::Math_obj::sin(phi1);
HXDLIN( 338)								Float cos = ::Math_obj::cos(phi1);
HXDLIN( 338)								Float x1 = ((mx * cos) + (my * sin));
HXDLIN( 338)								Float y1 = ((-(mx) * sin) + (my * cos));
HXDLIN( 338)								Float rx = ::Math_obj::abs(( (Float)(xr) ));
HXDLIN( 338)								Float ry = ::Math_obj::abs(( (Float)(yr) ));
HXDLIN( 338)								Float rxx = (rx * rx);
HXDLIN( 338)								Float ryy = (ry * ry);
HXDLIN( 338)								Float xx1 = (x1 * x1);
HXDLIN( 338)								Float yy1 = (y1 * y1);
HXDLIN( 338)								Float check = ((xx1 / rxx) + (yy1 / ryy));
HXDLIN( 338)								if ((check > 1)) {
HXLINE( 338)									rx = (rx * ::Math_obj::sqrt(check));
HXDLIN( 338)									ry = (ry * ::Math_obj::sqrt(check));
HXDLIN( 338)									rxx = (rx * rx);
HXDLIN( 338)									ryy = (ry * ry);
            								}
HXDLIN( 338)								int sign;
HXDLIN( 338)								if ((large == sweep)) {
HXLINE( 338)									sign = -1;
            								}
            								else {
HXLINE( 338)									sign = 1;
            								}
HXDLIN( 338)								Float sq = ((((rxx * ryy) - (rxx * yy1)) - (ryy * xx1)) / ((rxx * yy1) + (ryy * xx1)));
HXDLIN( 338)								if ((sq < 0)) {
HXLINE( 338)									sq = ( (Float)(0) );
            								}
HXDLIN( 338)								Float coef = (( (Float)(sign) ) * ::Math_obj::sqrt(sq));
HXDLIN( 338)								Float cx1 = (((coef * rx) * y1) / ry);
HXDLIN( 338)								Float cy1 = (((-(coef) * ry) * x1) / rx);
HXDLIN( 338)								Float cx = ((ax + (cx1 * cos)) - (cy1 * sin));
HXDLIN( 338)								Float cy = ((ay + (cx1 * sin)) + (cy1 * cos));
HXDLIN( 338)								Float phiSin = ::Math_obj::sin(-(phi1));
HXDLIN( 338)								Float phiCos = ::Math_obj::cos(-(phi1));
HXDLIN( 338)								sx1 = (sx1 - cx);
HXDLIN( 338)								sy1 = (sy1 - cy);
HXDLIN( 338)								Float dx = sx1;
HXDLIN( 338)								Float dy = sy1;
HXDLIN( 338)								sx1 = ((dx * phiCos) - (dy * phiSin));
HXDLIN( 338)								sy1 = ((dx * phiSin) + (dy * phiCos));
HXDLIN( 338)								sx1 = (sx1 + cx);
HXDLIN( 338)								sy1 = (sy1 + cy);
HXDLIN( 338)								ex = (ex - cx);
HXDLIN( 338)								ey = (ey - cy);
HXDLIN( 338)								Float dx1 = ex;
HXDLIN( 338)								Float dy1 = ey;
HXDLIN( 338)								ex = ((dx1 * phiCos) - (dy1 * phiSin));
HXDLIN( 338)								ey = ((dx1 * phiSin) + (dy1 * phiCos));
HXDLIN( 338)								ex = (ex + cx);
HXDLIN( 338)								ey = (ey + cy);
HXDLIN( 338)								Float alpha = (::Math_obj::atan2((rx * (cy - sy1)),(ry * (cx - sx1))) - ::Math_obj::PI);
HXDLIN( 338)								Float omega = (::Math_obj::atan2((rx * (cy - ey)),(ry * (cx - ex))) - ::Math_obj::PI);
HXDLIN( 338)								Float delta = (alpha - omega);
HXDLIN( 338)								bool _hx_tmp;
HXDLIN( 338)								if ((sweep == 1)) {
HXLINE( 338)									_hx_tmp = (delta > 0);
            								}
            								else {
HXLINE( 338)									_hx_tmp = false;
            								}
HXDLIN( 338)								if (_hx_tmp) {
HXLINE( 338)									delta = (delta - (( (Float)(2) ) * ::Math_obj::PI));
            								}
            								else {
HXLINE( 338)									bool _hx_tmp;
HXDLIN( 338)									if ((sweep == 0)) {
HXLINE( 338)										_hx_tmp = (delta < 0);
            									}
            									else {
HXLINE( 338)										_hx_tmp = false;
            									}
HXDLIN( 338)									if (_hx_tmp) {
HXLINE( 338)										delta = (delta + (( (Float)(2) ) * ::Math_obj::PI));
            									}
            								}
HXDLIN( 338)								 ::Dynamic this1 =  ::Dynamic(::hx::Anon_obj::Create(10)
            									->setFixed(0,HX_("delta",f8,e7,26,d7),-(delta))
            									->setFixed(1,HX_("phiCos",56,5d,3f,ef),::Math_obj::cos(phi1))
            									->setFixed(2,HX_("phiSin",27,7c,4b,ef),::Math_obj::sin(phi1))
            									->setFixed(3,HX_("cx",b5,56,00,00),cx)
            									->setFixed(4,HX_("cy",b6,56,00,00),cy)
            									->setFixed(5,HX_("rx",c6,63,00,00),rx)
            									->setFixed(6,HX_("ry",c7,63,00,00),ry)
            									->setFixed(7,HX_("phi",71,57,55,00),phi1)
            									->setFixed(8,HX_("alpha",5e,a7,96,21),alpha)
            									->setFixed(9,HX_("omega",61,a3,d3,31),omega));
HXDLIN( 338)								 ::Dynamic ellipseData = this1;
HXLINE( 339)								::justPath::EllipseArc ellipse = ::justPath::EllipseArc_obj::__alloc( HX_CTX ,ellipseData);
HXLINE( 340)								ellipse->lineRender(this->pathContext->__Field(HX_("moveTo",ec,d2,ac,cc), ::hx::paccDynamic),this->pathContext->__Field(HX_("lineTo",8f,46,a0,ec), ::hx::paccDynamic),(::Math_obj::PI / ( (Float)(18) )),null());
            							}
            						}
            					}
            				}
            				break;
            				case (int)66: {
HXLINE( 380)					::haxe::Log_obj::trace(HX_("bearing - not implemented",90,1f,b8,d8),::hx::SourceInfo(HX_("justPath/SvgLinePath.hx",5f,c6,70,0f),380,HX_("justPath.SvgLinePath",20,f0,4a,08),HX_("parse",33,90,55,bd)));
HXLINE( 381)					HX_STACK_DO_THROW(HX_("bearing not supported please remove",09,97,54,2d));
            				}
            				break;
            				case (int)67: {
HXLINE( 142)					{
HXLINE( 142)						{
HXLINE( 142)							::justPath::StoreF6 _this = this->store;
HXDLIN( 142)							_this->l = 0;
HXDLIN( 142)							_this->s0 = null();
HXDLIN( 142)							_this->s1 = null();
HXDLIN( 142)							_this->s2 = null();
HXDLIN( 142)							_this->s3 = null();
HXDLIN( 142)							_this->s4 = null();
HXDLIN( 142)							_this->s5 = null();
HXDLIN( 142)							_this->s6 = null();
            						}
HXDLIN( 142)						this->c = this->str.cca(this->pos++);
HXDLIN( 142)						::String temp = HX_("",00,00,00,00);
HXDLIN( 142)						bool exit = false;
HXDLIN( 142)						while(true){
HXLINE( 142)							switch((int)(this->c)){
            								case (int)32: case (int)44: {
HXLINE( 142)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 142)										if (((this->store->l & 1) == 0)) {
HXLINE( 142)											::justPath::StoreF6 _this = this->store;
HXDLIN( 142)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 142)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 142)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 142)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 142)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 142)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 142)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 142)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 142)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 142)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 142)													{
HXLINE( 142)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 142)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 142)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 142)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 142)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 142)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 142)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 142)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 142)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 142)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 142)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 142)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 142)											_this->l++;
            										}
            										else {
HXLINE( 142)											::justPath::StoreF6 _this = this->store;
HXDLIN( 142)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 142)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 142)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 142)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 142)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 142)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 142)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 142)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 142)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 142)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 142)													{
HXLINE( 142)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 142)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 142)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 142)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 142)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 142)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 142)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 142)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 142)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 142)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 142)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 142)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 142)											_this->l++;
            										}
HXDLIN( 142)										temp = HX_("",00,00,00,00);
            									}
            								}
            								break;
            								case (int)45: {
HXLINE( 142)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 142)										if (((this->store->l & 1) == 0)) {
HXLINE( 142)											::justPath::StoreF6 _this = this->store;
HXDLIN( 142)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 142)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 142)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 142)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 142)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 142)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 142)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 142)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 142)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 142)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 142)													{
HXLINE( 142)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 142)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 142)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 142)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 142)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 142)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 142)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 142)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 142)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 142)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 142)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 142)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 142)											_this->l++;
            										}
            										else {
HXLINE( 142)											::justPath::StoreF6 _this = this->store;
HXDLIN( 142)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 142)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 142)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 142)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 142)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 142)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 142)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 142)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 142)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 142)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 142)													{
HXLINE( 142)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 142)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 142)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 142)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 142)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 142)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 142)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 142)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 142)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 142)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 142)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 142)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 142)											_this->l++;
            										}
            									}
HXDLIN( 142)									temp = HX_("-",2d,00,00,00);
            								}
            								break;
            								case (int)46: {
HXLINE( 142)									temp = (temp + HX_(".",2e,00,00,00));
            								}
            								break;
            								case (int)48: {
HXLINE( 142)									temp = (temp + HX_("0",30,00,00,00));
            								}
            								break;
            								case (int)49: {
HXLINE( 142)									temp = (temp + HX_("1",31,00,00,00));
            								}
            								break;
            								case (int)50: {
HXLINE( 142)									temp = (temp + HX_("2",32,00,00,00));
            								}
            								break;
            								case (int)51: {
HXLINE( 142)									temp = (temp + HX_("3",33,00,00,00));
            								}
            								break;
            								case (int)52: {
HXLINE( 142)									temp = (temp + HX_("4",34,00,00,00));
            								}
            								break;
            								case (int)53: {
HXLINE( 142)									temp = (temp + HX_("5",35,00,00,00));
            								}
            								break;
            								case (int)54: {
HXLINE( 142)									temp = (temp + HX_("6",36,00,00,00));
            								}
            								break;
            								case (int)55: {
HXLINE( 142)									temp = (temp + HX_("7",37,00,00,00));
            								}
            								break;
            								case (int)56: {
HXLINE( 142)									temp = (temp + HX_("8",38,00,00,00));
            								}
            								break;
            								case (int)57: {
HXLINE( 142)									temp = (temp + HX_("9",39,00,00,00));
            								}
            								break;
            								default:{
HXLINE( 142)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 142)										if (((this->store->l & 1) == 0)) {
HXLINE( 142)											::justPath::StoreF6 _this = this->store;
HXDLIN( 142)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 142)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 142)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 142)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 142)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 142)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 142)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 142)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 142)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 142)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 142)													{
HXLINE( 142)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 142)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 142)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 142)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 142)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 142)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 142)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 142)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 142)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 142)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 142)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 142)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 142)											_this->l++;
            										}
            										else {
HXLINE( 142)											::justPath::StoreF6 _this = this->store;
HXDLIN( 142)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 142)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 142)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 142)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 142)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 142)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 142)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 142)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 142)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 142)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 142)													{
HXLINE( 142)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 142)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 142)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 142)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 142)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 142)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 142)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 142)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 142)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 142)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 142)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 142)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 142)											_this->l++;
            										}
HXDLIN( 142)										temp = HX_("",00,00,00,00);
            									}
HXDLIN( 142)									this->pos--;
HXDLIN( 142)									exit = true;
            								}
            							}
HXDLIN( 142)							if (exit) {
HXLINE( 142)								goto _hx_goto_4;
            							}
HXDLIN( 142)							this->c = this->str.cca(this->pos++);
            						}
            						_hx_goto_4:;
            					}
HXLINE( 143)					if ((this->store->l == 4)) {
HXLINE( 144)						this->controlX = ( (Float)(this->store->s2) );
HXLINE( 145)						this->controlY = ( (Float)(this->store->s3) );
HXLINE( 146)						this->lastX = ( (Float)(this->store->s4) );
HXLINE( 147)						this->lastY = ( (Float)(this->store->s5) );
HXLINE( 148)						{
HXLINE( 148)							Float x1 = ( (Float)(this->store->s0) );
HXDLIN( 148)							Float y1 = ( (Float)(this->store->s1) );
HXDLIN( 148)							Float x2 = this->controlX;
HXDLIN( 148)							Float y2 = this->controlY;
HXDLIN( 148)							Float x3 = this->lastX;
HXDLIN( 148)							Float y3 = this->lastY;
HXDLIN( 148)							::Array< Float > tempArr = ::Array_obj< Float >::__new(0);
HXDLIN( 148)							{
HXLINE( 148)								Float ax = this->px;
HXDLIN( 148)								Float ay = this->py;
HXDLIN( 148)								Float x = (ax - x1);
HXDLIN( 148)								Float y = (ay - y1);
HXDLIN( 148)								Float x4 = (x1 - x2);
HXDLIN( 148)								Float y4 = (y1 - y2);
HXDLIN( 148)								Float x5 = (x2 - x3);
HXDLIN( 148)								Float y5 = (y2 - y3);
HXDLIN( 148)								Float approxDistance = ((::Math_obj::sqrt(((x * x) + (y * y))) + ::Math_obj::sqrt(((x4 * x4) + (y4 * y4)))) + ::Math_obj::sqrt(((x5 * x5) + (y5 * y5))));
HXDLIN( 148)								if ((approxDistance == 0)) {
HXLINE( 148)									approxDistance = ((Float)0.000001);
            								}
HXDLIN( 148)								Float step = ::Math_obj::min((( (Float)(1) ) / (approxDistance * ((Float)0.707))),((Float)0.03));
HXDLIN( 148)								int l = tempArr->length;
HXDLIN( 148)								l = (l + 1);
HXDLIN( 148)								tempArr[(l - 1)] = ax;
HXDLIN( 148)								l = (l + 1);
HXDLIN( 148)								tempArr[(l - 1)] = ay;
HXDLIN( 148)								Float t = step;
HXDLIN( 148)								while((t < ((Float)1.))){
HXLINE( 148)									l = (l + 1);
HXDLIN( 148)									Float u = (( (Float)(1) ) - t);
HXDLIN( 148)									tempArr[(l - 1)] = ((((::Math_obj::pow(u,( (Float)(3) )) * ax) + (((( (Float)(3) ) * ::Math_obj::pow(u,( (Float)(2) ))) * t) * x1)) + (((( (Float)(3) ) * u) * ::Math_obj::pow(t,( (Float)(2) ))) * x2)) + (::Math_obj::pow(t,( (Float)(3) )) * x3));
HXDLIN( 148)									l = (l + 1);
HXDLIN( 148)									Float u1 = (( (Float)(1) ) - t);
HXDLIN( 148)									tempArr[(l - 1)] = ((((::Math_obj::pow(u1,( (Float)(3) )) * ay) + (((( (Float)(3) ) * ::Math_obj::pow(u1,( (Float)(2) ))) * t) * y1)) + (((( (Float)(3) ) * u1) * ::Math_obj::pow(t,( (Float)(2) ))) * y2)) + (::Math_obj::pow(t,( (Float)(3) )) * y3));
HXDLIN( 148)									t = (t + step);
            								}
HXDLIN( 148)								l = (l + 1);
HXDLIN( 148)								tempArr[(l - 1)] = x3;
HXDLIN( 148)								l = (l + 1);
HXDLIN( 148)								tempArr[(l - 1)] = y3;
            							}
HXDLIN( 148)							::haxe::Log_obj::trace(tempArr,::hx::SourceInfo(HX_("justPath/SvgLinePath.hx",5f,c6,70,0f),512,HX_("justPath.SvgLinePath",20,f0,4a,08),HX_("curveTo",0a,60,88,ce)));
HXDLIN( 148)							{
HXLINE( 148)								 ::Dynamic withMove = false;
HXDLIN( 148)								if (::hx::IsNull( withMove )) {
HXLINE( 148)									withMove = true;
            								}
HXDLIN( 148)								int l1 = tempArr->length;
HXDLIN( 148)								int i = 2;
HXDLIN( 148)								if (( (bool)(withMove) )) {
HXLINE( 148)									::justPath::ILinePathContext_obj::moveTo(this->pathContext,tempArr->__get(0),tempArr->__get(1));
            								}
            								else {
HXLINE( 148)									::justPath::ILinePathContext_obj::lineSegmentTo(this->pathContext,tempArr->__get(0),tempArr->__get(1));
            								}
HXDLIN( 148)								while((i < l1)){
HXLINE( 148)									::justPath::ILinePathContext_obj::lineSegmentTo(this->pathContext,tempArr->__get(i),tempArr->__get((i + 1)));
HXDLIN( 148)									i = (i + 2);
            								}
            							}
HXDLIN( 148)							tempArr = ::Array_obj< Float >::__new(0);
HXDLIN( 148)							this->px = x3;
HXDLIN( 148)							this->py = y3;
            						}
            					}
            					else {
HXLINE( 151)						if ((this->store->l > 4)) {
HXLINE( 152)							while((this->store->l > 3)){
HXLINE( 153)								::justPath::StoreF6 _this = this->store;
HXDLIN( 153)								 ::Dynamic out = _this->s0;
HXDLIN( 153)								if ((_this->l != 0)) {
HXLINE( 153)									_this->s0 = _this->s1;
HXDLIN( 153)									_this->s1 = _this->s2;
HXDLIN( 153)									_this->s2 = _this->s3;
HXDLIN( 153)									_this->s3 = _this->s4;
HXDLIN( 153)									_this->s4 = _this->s5;
HXDLIN( 153)									_this->s5 = null();
HXDLIN( 153)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 153)										::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 153)										 ::Dynamic out = _this1->s0;
HXDLIN( 153)										if ((_this1->l != 0)) {
HXLINE( 153)											_this1->s0 = _this1->s1;
HXDLIN( 153)											_this1->s1 = _this1->s2;
HXDLIN( 153)											_this1->s2 = _this1->s3;
HXDLIN( 153)											_this1->s3 = _this1->s4;
HXDLIN( 153)											_this1->s4 = _this1->s5;
HXDLIN( 153)											_this1->s5 = null();
HXDLIN( 153)											if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 153)												_this1->s5 = _this1->s6->shift();
            											}
HXDLIN( 153)											_this1->l--;
            										}
HXDLIN( 153)										_this->s5 = out;
            									}
HXDLIN( 153)									_this->l--;
            								}
HXDLIN( 153)								 ::Dynamic firstX = out;
HXLINE( 154)								::justPath::StoreF6 _this1 = this->store;
HXDLIN( 154)								 ::Dynamic out1 = _this1->s0;
HXDLIN( 154)								if ((_this1->l != 0)) {
HXLINE( 154)									_this1->s0 = _this1->s1;
HXDLIN( 154)									_this1->s1 = _this1->s2;
HXDLIN( 154)									_this1->s2 = _this1->s3;
HXDLIN( 154)									_this1->s3 = _this1->s4;
HXDLIN( 154)									_this1->s4 = _this1->s5;
HXDLIN( 154)									_this1->s5 = null();
HXDLIN( 154)									if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 154)										::justPath::StoreF6 _this = _this1->s6;
HXDLIN( 154)										 ::Dynamic out = _this->s0;
HXDLIN( 154)										if ((_this->l != 0)) {
HXLINE( 154)											_this->s0 = _this->s1;
HXDLIN( 154)											_this->s1 = _this->s2;
HXDLIN( 154)											_this->s2 = _this->s3;
HXDLIN( 154)											_this->s3 = _this->s4;
HXDLIN( 154)											_this->s4 = _this->s5;
HXDLIN( 154)											_this->s5 = null();
HXDLIN( 154)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 154)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 154)											_this->l--;
            										}
HXDLIN( 154)										_this1->s5 = out;
            									}
HXDLIN( 154)									_this1->l--;
            								}
HXDLIN( 154)								 ::Dynamic firstY = out1;
HXLINE( 155)								::justPath::StoreF6 _this2 = this->store;
HXDLIN( 155)								 ::Dynamic out2 = _this2->s0;
HXDLIN( 155)								if ((_this2->l != 0)) {
HXLINE( 155)									_this2->s0 = _this2->s1;
HXDLIN( 155)									_this2->s1 = _this2->s2;
HXDLIN( 155)									_this2->s2 = _this2->s3;
HXDLIN( 155)									_this2->s3 = _this2->s4;
HXDLIN( 155)									_this2->s4 = _this2->s5;
HXDLIN( 155)									_this2->s5 = null();
HXDLIN( 155)									if (::hx::IsNotNull( _this2->s6 )) {
HXLINE( 155)										::justPath::StoreF6 _this = _this2->s6;
HXDLIN( 155)										 ::Dynamic out = _this->s0;
HXDLIN( 155)										if ((_this->l != 0)) {
HXLINE( 155)											_this->s0 = _this->s1;
HXDLIN( 155)											_this->s1 = _this->s2;
HXDLIN( 155)											_this->s2 = _this->s3;
HXDLIN( 155)											_this->s3 = _this->s4;
HXDLIN( 155)											_this->s4 = _this->s5;
HXDLIN( 155)											_this->s5 = null();
HXDLIN( 155)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 155)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 155)											_this->l--;
            										}
HXDLIN( 155)										_this2->s5 = out;
            									}
HXDLIN( 155)									_this2->l--;
            								}
HXDLIN( 155)								this->controlX = ( (Float)(out2) );
HXLINE( 156)								::justPath::StoreF6 _this3 = this->store;
HXDLIN( 156)								 ::Dynamic out3 = _this3->s0;
HXDLIN( 156)								if ((_this3->l != 0)) {
HXLINE( 156)									_this3->s0 = _this3->s1;
HXDLIN( 156)									_this3->s1 = _this3->s2;
HXDLIN( 156)									_this3->s2 = _this3->s3;
HXDLIN( 156)									_this3->s3 = _this3->s4;
HXDLIN( 156)									_this3->s4 = _this3->s5;
HXDLIN( 156)									_this3->s5 = null();
HXDLIN( 156)									if (::hx::IsNotNull( _this3->s6 )) {
HXLINE( 156)										::justPath::StoreF6 _this = _this3->s6;
HXDLIN( 156)										 ::Dynamic out = _this->s0;
HXDLIN( 156)										if ((_this->l != 0)) {
HXLINE( 156)											_this->s0 = _this->s1;
HXDLIN( 156)											_this->s1 = _this->s2;
HXDLIN( 156)											_this->s2 = _this->s3;
HXDLIN( 156)											_this->s3 = _this->s4;
HXDLIN( 156)											_this->s4 = _this->s5;
HXDLIN( 156)											_this->s5 = null();
HXDLIN( 156)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 156)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 156)											_this->l--;
            										}
HXDLIN( 156)										_this3->s5 = out;
            									}
HXDLIN( 156)									_this3->l--;
            								}
HXDLIN( 156)								this->controlY = ( (Float)(out3) );
HXLINE( 157)								::justPath::StoreF6 _this4 = this->store;
HXDLIN( 157)								 ::Dynamic out4 = _this4->s0;
HXDLIN( 157)								if ((_this4->l != 0)) {
HXLINE( 157)									_this4->s0 = _this4->s1;
HXDLIN( 157)									_this4->s1 = _this4->s2;
HXDLIN( 157)									_this4->s2 = _this4->s3;
HXDLIN( 157)									_this4->s3 = _this4->s4;
HXDLIN( 157)									_this4->s4 = _this4->s5;
HXDLIN( 157)									_this4->s5 = null();
HXDLIN( 157)									if (::hx::IsNotNull( _this4->s6 )) {
HXLINE( 157)										::justPath::StoreF6 _this = _this4->s6;
HXDLIN( 157)										 ::Dynamic out = _this->s0;
HXDLIN( 157)										if ((_this->l != 0)) {
HXLINE( 157)											_this->s0 = _this->s1;
HXDLIN( 157)											_this->s1 = _this->s2;
HXDLIN( 157)											_this->s2 = _this->s3;
HXDLIN( 157)											_this->s3 = _this->s4;
HXDLIN( 157)											_this->s4 = _this->s5;
HXDLIN( 157)											_this->s5 = null();
HXDLIN( 157)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 157)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 157)											_this->l--;
            										}
HXDLIN( 157)										_this4->s5 = out;
            									}
HXDLIN( 157)									_this4->l--;
            								}
HXDLIN( 157)								this->lastX = ( (Float)(out4) );
HXLINE( 158)								::justPath::StoreF6 _this5 = this->store;
HXDLIN( 158)								 ::Dynamic out5 = _this5->s0;
HXDLIN( 158)								if ((_this5->l != 0)) {
HXLINE( 158)									_this5->s0 = _this5->s1;
HXDLIN( 158)									_this5->s1 = _this5->s2;
HXDLIN( 158)									_this5->s2 = _this5->s3;
HXDLIN( 158)									_this5->s3 = _this5->s4;
HXDLIN( 158)									_this5->s4 = _this5->s5;
HXDLIN( 158)									_this5->s5 = null();
HXDLIN( 158)									if (::hx::IsNotNull( _this5->s6 )) {
HXLINE( 158)										::justPath::StoreF6 _this = _this5->s6;
HXDLIN( 158)										 ::Dynamic out = _this->s0;
HXDLIN( 158)										if ((_this->l != 0)) {
HXLINE( 158)											_this->s0 = _this->s1;
HXDLIN( 158)											_this->s1 = _this->s2;
HXDLIN( 158)											_this->s2 = _this->s3;
HXDLIN( 158)											_this->s3 = _this->s4;
HXDLIN( 158)											_this->s4 = _this->s5;
HXDLIN( 158)											_this->s5 = null();
HXDLIN( 158)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 158)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 158)											_this->l--;
            										}
HXDLIN( 158)										_this5->s5 = out;
            									}
HXDLIN( 158)									_this5->l--;
            								}
HXDLIN( 158)								this->lastY = ( (Float)(out5) );
HXLINE( 159)								{
HXLINE( 159)									Float x1 = ( (Float)(firstX) );
HXDLIN( 159)									Float y1 = ( (Float)(firstY) );
HXDLIN( 159)									Float x2 = this->controlX;
HXDLIN( 159)									Float y2 = this->controlY;
HXDLIN( 159)									Float x3 = this->lastX;
HXDLIN( 159)									Float y3 = this->lastY;
HXDLIN( 159)									::Array< Float > tempArr = ::Array_obj< Float >::__new(0);
HXDLIN( 159)									{
HXLINE( 159)										Float ax = this->px;
HXDLIN( 159)										Float ay = this->py;
HXDLIN( 159)										Float x = (ax - x1);
HXDLIN( 159)										Float y = (ay - y1);
HXDLIN( 159)										Float x4 = (x1 - x2);
HXDLIN( 159)										Float y4 = (y1 - y2);
HXDLIN( 159)										Float x5 = (x2 - x3);
HXDLIN( 159)										Float y5 = (y2 - y3);
HXDLIN( 159)										Float approxDistance = ((::Math_obj::sqrt(((x * x) + (y * y))) + ::Math_obj::sqrt(((x4 * x4) + (y4 * y4)))) + ::Math_obj::sqrt(((x5 * x5) + (y5 * y5))));
HXDLIN( 159)										if ((approxDistance == 0)) {
HXLINE( 159)											approxDistance = ((Float)0.000001);
            										}
HXDLIN( 159)										Float step = ::Math_obj::min((( (Float)(1) ) / (approxDistance * ((Float)0.707))),((Float)0.03));
HXDLIN( 159)										int l = tempArr->length;
HXDLIN( 159)										l = (l + 1);
HXDLIN( 159)										tempArr[(l - 1)] = ax;
HXDLIN( 159)										l = (l + 1);
HXDLIN( 159)										tempArr[(l - 1)] = ay;
HXDLIN( 159)										Float t = step;
HXDLIN( 159)										while((t < ((Float)1.))){
HXLINE( 159)											l = (l + 1);
HXDLIN( 159)											Float u = (( (Float)(1) ) - t);
HXDLIN( 159)											tempArr[(l - 1)] = ((((::Math_obj::pow(u,( (Float)(3) )) * ax) + (((( (Float)(3) ) * ::Math_obj::pow(u,( (Float)(2) ))) * t) * x1)) + (((( (Float)(3) ) * u) * ::Math_obj::pow(t,( (Float)(2) ))) * x2)) + (::Math_obj::pow(t,( (Float)(3) )) * x3));
HXDLIN( 159)											l = (l + 1);
HXDLIN( 159)											Float u1 = (( (Float)(1) ) - t);
HXDLIN( 159)											tempArr[(l - 1)] = ((((::Math_obj::pow(u1,( (Float)(3) )) * ay) + (((( (Float)(3) ) * ::Math_obj::pow(u1,( (Float)(2) ))) * t) * y1)) + (((( (Float)(3) ) * u1) * ::Math_obj::pow(t,( (Float)(2) ))) * y2)) + (::Math_obj::pow(t,( (Float)(3) )) * y3));
HXDLIN( 159)											t = (t + step);
            										}
HXDLIN( 159)										l = (l + 1);
HXDLIN( 159)										tempArr[(l - 1)] = x3;
HXDLIN( 159)										l = (l + 1);
HXDLIN( 159)										tempArr[(l - 1)] = y3;
            									}
HXDLIN( 159)									::haxe::Log_obj::trace(tempArr,::hx::SourceInfo(HX_("justPath/SvgLinePath.hx",5f,c6,70,0f),512,HX_("justPath.SvgLinePath",20,f0,4a,08),HX_("curveTo",0a,60,88,ce)));
HXDLIN( 159)									{
HXLINE( 159)										 ::Dynamic withMove = false;
HXDLIN( 159)										if (::hx::IsNull( withMove )) {
HXLINE( 159)											withMove = true;
            										}
HXDLIN( 159)										int l1 = tempArr->length;
HXDLIN( 159)										int i = 2;
HXDLIN( 159)										if (( (bool)(withMove) )) {
HXLINE( 159)											::justPath::ILinePathContext_obj::moveTo(this->pathContext,tempArr->__get(0),tempArr->__get(1));
            										}
            										else {
HXLINE( 159)											::justPath::ILinePathContext_obj::lineSegmentTo(this->pathContext,tempArr->__get(0),tempArr->__get(1));
            										}
HXDLIN( 159)										while((i < l1)){
HXLINE( 159)											::justPath::ILinePathContext_obj::lineSegmentTo(this->pathContext,tempArr->__get(i),tempArr->__get((i + 1)));
HXDLIN( 159)											i = (i + 2);
            										}
            									}
HXDLIN( 159)									tempArr = ::Array_obj< Float >::__new(0);
HXDLIN( 159)									this->px = x3;
HXDLIN( 159)									this->py = y3;
            								}
            							}
            						}
            					}
            				}
            				break;
            				case (int)72: {
HXLINE(  98)					{
HXLINE(  98)						 ::Dynamic process = false;
HXDLIN(  98)						if (::hx::IsNull( process )) {
HXLINE(  98)							process = true;
            						}
HXDLIN(  98)						{
HXLINE(  98)							::justPath::StoreF6 _this = this->store;
HXDLIN(  98)							_this->l = 0;
HXDLIN(  98)							_this->s0 = null();
HXDLIN(  98)							_this->s1 = null();
HXDLIN(  98)							_this->s2 = null();
HXDLIN(  98)							_this->s3 = null();
HXDLIN(  98)							_this->s4 = null();
HXDLIN(  98)							_this->s5 = null();
HXDLIN(  98)							_this->s6 = null();
            						}
HXDLIN(  98)						this->c = this->str.cca(this->pos++);
HXDLIN(  98)						::String temp = HX_("",00,00,00,00);
HXDLIN(  98)						bool exit = false;
HXDLIN(  98)						while(true){
HXLINE(  98)							switch((int)(this->c)){
            								case (int)32: case (int)44: {
HXLINE(  98)									if ((temp != HX_("",00,00,00,00))) {
HXLINE(  98)										if (( (bool)(process) )) {
HXLINE(  98)											if (((this->store->l & 1) == 0)) {
HXLINE(  98)												::justPath::StoreF6 _this = this->store;
HXDLIN(  98)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  98)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE(  98)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE(  98)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE(  98)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE(  98)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE(  98)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE(  98)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE(  98)														if (::hx::IsNull( _this->s6 )) {
HXLINE(  98)															_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN(  98)														{
HXLINE(  98)															::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  98)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE(  98)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE(  98)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE(  98)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE(  98)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE(  98)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE(  98)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE(  98)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE(  98)																		_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN(  98)																	_this1->s6->push(v);
            																}
            															}
HXDLIN(  98)															_this1->l++;
            														}
            													}
            												}
HXDLIN(  98)												_this->l++;
            											}
            											else {
HXLINE(  98)												::justPath::StoreF6 _this = this->store;
HXDLIN(  98)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  98)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE(  98)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE(  98)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE(  98)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE(  98)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE(  98)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE(  98)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE(  98)														if (::hx::IsNull( _this->s6 )) {
HXLINE(  98)															_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN(  98)														{
HXLINE(  98)															::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  98)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE(  98)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE(  98)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE(  98)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE(  98)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE(  98)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE(  98)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE(  98)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE(  98)																		_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN(  98)																	_this1->s6->push(v);
            																}
            															}
HXDLIN(  98)															_this1->l++;
            														}
            													}
            												}
HXDLIN(  98)												_this->l++;
            											}
            										}
            										else {
HXLINE(  98)											::justPath::StoreF6 _this = this->store;
HXDLIN(  98)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  98)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  98)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  98)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  98)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  98)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  98)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  98)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  98)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  98)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  98)													{
HXLINE(  98)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  98)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  98)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  98)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  98)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  98)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  98)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  98)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  98)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  98)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  98)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  98)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  98)											_this->l++;
            										}
HXDLIN(  98)										temp = HX_("",00,00,00,00);
            									}
            								}
            								break;
            								case (int)45: {
HXLINE(  98)									if ((temp != HX_("",00,00,00,00))) {
HXLINE(  98)										if (( (bool)(process) )) {
HXLINE(  98)											if (((this->store->l & 1) == 0)) {
HXLINE(  98)												::justPath::StoreF6 _this = this->store;
HXDLIN(  98)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  98)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE(  98)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE(  98)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE(  98)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE(  98)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE(  98)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE(  98)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE(  98)														if (::hx::IsNull( _this->s6 )) {
HXLINE(  98)															_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN(  98)														{
HXLINE(  98)															::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  98)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE(  98)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE(  98)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE(  98)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE(  98)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE(  98)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE(  98)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE(  98)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE(  98)																		_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN(  98)																	_this1->s6->push(v);
            																}
            															}
HXDLIN(  98)															_this1->l++;
            														}
            													}
            												}
HXDLIN(  98)												_this->l++;
            											}
            											else {
HXLINE(  98)												::justPath::StoreF6 _this = this->store;
HXDLIN(  98)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  98)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE(  98)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE(  98)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE(  98)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE(  98)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE(  98)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE(  98)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE(  98)														if (::hx::IsNull( _this->s6 )) {
HXLINE(  98)															_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN(  98)														{
HXLINE(  98)															::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  98)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE(  98)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE(  98)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE(  98)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE(  98)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE(  98)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE(  98)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE(  98)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE(  98)																		_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN(  98)																	_this1->s6->push(v);
            																}
            															}
HXDLIN(  98)															_this1->l++;
            														}
            													}
            												}
HXDLIN(  98)												_this->l++;
            											}
            										}
            										else {
HXLINE(  98)											::justPath::StoreF6 _this = this->store;
HXDLIN(  98)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  98)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  98)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  98)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  98)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  98)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  98)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  98)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  98)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  98)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  98)													{
HXLINE(  98)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  98)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  98)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  98)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  98)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  98)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  98)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  98)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  98)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  98)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  98)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  98)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  98)											_this->l++;
            										}
            									}
HXDLIN(  98)									temp = HX_("-",2d,00,00,00);
            								}
            								break;
            								case (int)46: {
HXLINE(  98)									temp = (temp + HX_(".",2e,00,00,00));
            								}
            								break;
            								case (int)48: {
HXLINE(  98)									temp = (temp + HX_("0",30,00,00,00));
            								}
            								break;
            								case (int)49: {
HXLINE(  98)									temp = (temp + HX_("1",31,00,00,00));
            								}
            								break;
            								case (int)50: {
HXLINE(  98)									temp = (temp + HX_("2",32,00,00,00));
            								}
            								break;
            								case (int)51: {
HXLINE(  98)									temp = (temp + HX_("3",33,00,00,00));
            								}
            								break;
            								case (int)52: {
HXLINE(  98)									temp = (temp + HX_("4",34,00,00,00));
            								}
            								break;
            								case (int)53: {
HXLINE(  98)									temp = (temp + HX_("5",35,00,00,00));
            								}
            								break;
            								case (int)54: {
HXLINE(  98)									temp = (temp + HX_("6",36,00,00,00));
            								}
            								break;
            								case (int)55: {
HXLINE(  98)									temp = (temp + HX_("7",37,00,00,00));
            								}
            								break;
            								case (int)56: {
HXLINE(  98)									temp = (temp + HX_("8",38,00,00,00));
            								}
            								break;
            								case (int)57: {
HXLINE(  98)									temp = (temp + HX_("9",39,00,00,00));
            								}
            								break;
            								default:{
HXLINE(  98)									if ((temp != HX_("",00,00,00,00))) {
HXLINE(  98)										if (( (bool)(process) )) {
HXLINE(  98)											if (((this->store->l & 1) == 0)) {
HXLINE(  98)												::justPath::StoreF6 _this = this->store;
HXDLIN(  98)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  98)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE(  98)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE(  98)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE(  98)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE(  98)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE(  98)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE(  98)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE(  98)														if (::hx::IsNull( _this->s6 )) {
HXLINE(  98)															_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN(  98)														{
HXLINE(  98)															::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  98)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE(  98)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE(  98)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE(  98)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE(  98)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE(  98)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE(  98)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE(  98)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE(  98)																		_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN(  98)																	_this1->s6->push(v);
            																}
            															}
HXDLIN(  98)															_this1->l++;
            														}
            													}
            												}
HXDLIN(  98)												_this->l++;
            											}
            											else {
HXLINE(  98)												::justPath::StoreF6 _this = this->store;
HXDLIN(  98)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  98)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE(  98)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE(  98)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE(  98)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE(  98)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE(  98)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE(  98)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE(  98)														if (::hx::IsNull( _this->s6 )) {
HXLINE(  98)															_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN(  98)														{
HXLINE(  98)															::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  98)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE(  98)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE(  98)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE(  98)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE(  98)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE(  98)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE(  98)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE(  98)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE(  98)																		_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN(  98)																	_this1->s6->push(v);
            																}
            															}
HXDLIN(  98)															_this1->l++;
            														}
            													}
            												}
HXDLIN(  98)												_this->l++;
            											}
            										}
            										else {
HXLINE(  98)											::justPath::StoreF6 _this = this->store;
HXDLIN(  98)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  98)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  98)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  98)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  98)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  98)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  98)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  98)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  98)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  98)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  98)													{
HXLINE(  98)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  98)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  98)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  98)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  98)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  98)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  98)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  98)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  98)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  98)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  98)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  98)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  98)											_this->l++;
            										}
HXDLIN(  98)										temp = HX_("",00,00,00,00);
            									}
HXDLIN(  98)									this->pos--;
HXDLIN(  98)									exit = true;
            								}
            							}
HXDLIN(  98)							if (exit) {
HXLINE(  98)								goto _hx_goto_10;
            							}
HXDLIN(  98)							this->c = this->str.cca(this->pos++);
            						}
            						_hx_goto_10:;
            					}
HXLINE(  99)					if ((this->store->l == 1)) {
HXLINE( 100)						this->lastX = ( (Float)(this->store->s0) );
HXLINE( 101)						{
HXLINE( 101)							Float x_ = this->lastX;
HXDLIN( 101)							Float y_ = this->lastY;
HXDLIN( 101)							::justPath::ILinePathContext_obj::lineTo(this->pathContext,x_,y_);
HXDLIN( 101)							this->px = x_;
HXDLIN( 101)							this->py = y_;
            						}
            					}
            					else {
HXLINE( 102)						if ((this->store->l > 1)) {
HXLINE( 103)							while((this->store->l > 0)){
HXLINE( 104)								::justPath::StoreF6 _this = this->store;
HXDLIN( 104)								 ::Dynamic out = _this->s0;
HXDLIN( 104)								if ((_this->l != 0)) {
HXLINE( 104)									_this->s0 = _this->s1;
HXDLIN( 104)									_this->s1 = _this->s2;
HXDLIN( 104)									_this->s2 = _this->s3;
HXDLIN( 104)									_this->s3 = _this->s4;
HXDLIN( 104)									_this->s4 = _this->s5;
HXDLIN( 104)									_this->s5 = null();
HXDLIN( 104)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 104)										::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 104)										 ::Dynamic out = _this1->s0;
HXDLIN( 104)										if ((_this1->l != 0)) {
HXLINE( 104)											_this1->s0 = _this1->s1;
HXDLIN( 104)											_this1->s1 = _this1->s2;
HXDLIN( 104)											_this1->s2 = _this1->s3;
HXDLIN( 104)											_this1->s3 = _this1->s4;
HXDLIN( 104)											_this1->s4 = _this1->s5;
HXDLIN( 104)											_this1->s5 = null();
HXDLIN( 104)											if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 104)												_this1->s5 = _this1->s6->shift();
            											}
HXDLIN( 104)											_this1->l--;
            										}
HXDLIN( 104)										_this->s5 = out;
            									}
HXDLIN( 104)									_this->l--;
            								}
HXDLIN( 104)								this->lastX = ( (Float)(out) );
HXLINE( 105)								{
HXLINE( 105)									Float x_ = this->lastX;
HXDLIN( 105)									Float y_ = this->lastY;
HXDLIN( 105)									::justPath::ILinePathContext_obj::lineTo(this->pathContext,x_,y_);
HXDLIN( 105)									this->px = x_;
HXDLIN( 105)									this->py = y_;
            								}
            							}
            						}
            					}
            				}
            				break;
            				case (int)76: {
HXLINE(  72)					{
HXLINE(  72)						{
HXLINE(  72)							::justPath::StoreF6 _this = this->store;
HXDLIN(  72)							_this->l = 0;
HXDLIN(  72)							_this->s0 = null();
HXDLIN(  72)							_this->s1 = null();
HXDLIN(  72)							_this->s2 = null();
HXDLIN(  72)							_this->s3 = null();
HXDLIN(  72)							_this->s4 = null();
HXDLIN(  72)							_this->s5 = null();
HXDLIN(  72)							_this->s6 = null();
            						}
HXDLIN(  72)						this->c = this->str.cca(this->pos++);
HXDLIN(  72)						::String temp = HX_("",00,00,00,00);
HXDLIN(  72)						bool exit = false;
HXDLIN(  72)						while(true){
HXLINE(  72)							switch((int)(this->c)){
            								case (int)32: case (int)44: {
HXLINE(  72)									if ((temp != HX_("",00,00,00,00))) {
HXLINE(  72)										if (((this->store->l & 1) == 0)) {
HXLINE(  72)											::justPath::StoreF6 _this = this->store;
HXDLIN(  72)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  72)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  72)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  72)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  72)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  72)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  72)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  72)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  72)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  72)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  72)													{
HXLINE(  72)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  72)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  72)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  72)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  72)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  72)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  72)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  72)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  72)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  72)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  72)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  72)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  72)											_this->l++;
            										}
            										else {
HXLINE(  72)											::justPath::StoreF6 _this = this->store;
HXDLIN(  72)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  72)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  72)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  72)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  72)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  72)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  72)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  72)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  72)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  72)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  72)													{
HXLINE(  72)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  72)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  72)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  72)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  72)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  72)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  72)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  72)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  72)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  72)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  72)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  72)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  72)											_this->l++;
            										}
HXDLIN(  72)										temp = HX_("",00,00,00,00);
            									}
            								}
            								break;
            								case (int)45: {
HXLINE(  72)									if ((temp != HX_("",00,00,00,00))) {
HXLINE(  72)										if (((this->store->l & 1) == 0)) {
HXLINE(  72)											::justPath::StoreF6 _this = this->store;
HXDLIN(  72)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  72)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  72)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  72)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  72)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  72)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  72)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  72)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  72)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  72)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  72)													{
HXLINE(  72)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  72)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  72)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  72)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  72)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  72)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  72)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  72)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  72)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  72)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  72)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  72)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  72)											_this->l++;
            										}
            										else {
HXLINE(  72)											::justPath::StoreF6 _this = this->store;
HXDLIN(  72)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  72)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  72)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  72)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  72)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  72)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  72)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  72)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  72)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  72)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  72)													{
HXLINE(  72)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  72)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  72)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  72)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  72)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  72)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  72)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  72)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  72)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  72)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  72)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  72)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  72)											_this->l++;
            										}
            									}
HXDLIN(  72)									temp = HX_("-",2d,00,00,00);
            								}
            								break;
            								case (int)46: {
HXLINE(  72)									temp = (temp + HX_(".",2e,00,00,00));
            								}
            								break;
            								case (int)48: {
HXLINE(  72)									temp = (temp + HX_("0",30,00,00,00));
            								}
            								break;
            								case (int)49: {
HXLINE(  72)									temp = (temp + HX_("1",31,00,00,00));
            								}
            								break;
            								case (int)50: {
HXLINE(  72)									temp = (temp + HX_("2",32,00,00,00));
            								}
            								break;
            								case (int)51: {
HXLINE(  72)									temp = (temp + HX_("3",33,00,00,00));
            								}
            								break;
            								case (int)52: {
HXLINE(  72)									temp = (temp + HX_("4",34,00,00,00));
            								}
            								break;
            								case (int)53: {
HXLINE(  72)									temp = (temp + HX_("5",35,00,00,00));
            								}
            								break;
            								case (int)54: {
HXLINE(  72)									temp = (temp + HX_("6",36,00,00,00));
            								}
            								break;
            								case (int)55: {
HXLINE(  72)									temp = (temp + HX_("7",37,00,00,00));
            								}
            								break;
            								case (int)56: {
HXLINE(  72)									temp = (temp + HX_("8",38,00,00,00));
            								}
            								break;
            								case (int)57: {
HXLINE(  72)									temp = (temp + HX_("9",39,00,00,00));
            								}
            								break;
            								default:{
HXLINE(  72)									if ((temp != HX_("",00,00,00,00))) {
HXLINE(  72)										if (((this->store->l & 1) == 0)) {
HXLINE(  72)											::justPath::StoreF6 _this = this->store;
HXDLIN(  72)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  72)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  72)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  72)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  72)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  72)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  72)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  72)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  72)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  72)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  72)													{
HXLINE(  72)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  72)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  72)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  72)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  72)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  72)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  72)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  72)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  72)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  72)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  72)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  72)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  72)											_this->l++;
            										}
            										else {
HXLINE(  72)											::justPath::StoreF6 _this = this->store;
HXDLIN(  72)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  72)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  72)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  72)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  72)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  72)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  72)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  72)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  72)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  72)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  72)													{
HXLINE(  72)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  72)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  72)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  72)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  72)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  72)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  72)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  72)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  72)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  72)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  72)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  72)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  72)											_this->l++;
            										}
HXDLIN(  72)										temp = HX_("",00,00,00,00);
            									}
HXDLIN(  72)									this->pos--;
HXDLIN(  72)									exit = true;
            								}
            							}
HXDLIN(  72)							if (exit) {
HXLINE(  72)								goto _hx_goto_12;
            							}
HXDLIN(  72)							this->c = this->str.cca(this->pos++);
            						}
            						_hx_goto_12:;
            					}
HXLINE(  73)					if ((this->store->l == 2)) {
HXLINE(  74)						this->lastX = ( (Float)(this->store->s0) );
HXLINE(  75)						this->lastY = ( (Float)(this->store->s1) );
HXLINE(  76)						{
HXLINE(  76)							Float x_ = this->lastX;
HXDLIN(  76)							Float y_ = this->lastY;
HXDLIN(  76)							::justPath::ILinePathContext_obj::lineTo(this->pathContext,x_,y_);
HXDLIN(  76)							this->px = x_;
HXDLIN(  76)							this->py = y_;
            						}
            					}
            					else {
HXLINE(  77)						if ((this->store->l > 2)) {
HXLINE(  78)							while((this->store->l > 1)){
HXLINE(  79)								::justPath::StoreF6 _this = this->store;
HXDLIN(  79)								 ::Dynamic out = _this->s0;
HXDLIN(  79)								if ((_this->l != 0)) {
HXLINE(  79)									_this->s0 = _this->s1;
HXDLIN(  79)									_this->s1 = _this->s2;
HXDLIN(  79)									_this->s2 = _this->s3;
HXDLIN(  79)									_this->s3 = _this->s4;
HXDLIN(  79)									_this->s4 = _this->s5;
HXDLIN(  79)									_this->s5 = null();
HXDLIN(  79)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE(  79)										::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  79)										 ::Dynamic out = _this1->s0;
HXDLIN(  79)										if ((_this1->l != 0)) {
HXLINE(  79)											_this1->s0 = _this1->s1;
HXDLIN(  79)											_this1->s1 = _this1->s2;
HXDLIN(  79)											_this1->s2 = _this1->s3;
HXDLIN(  79)											_this1->s3 = _this1->s4;
HXDLIN(  79)											_this1->s4 = _this1->s5;
HXDLIN(  79)											_this1->s5 = null();
HXDLIN(  79)											if (::hx::IsNotNull( _this1->s6 )) {
HXLINE(  79)												_this1->s5 = _this1->s6->shift();
            											}
HXDLIN(  79)											_this1->l--;
            										}
HXDLIN(  79)										_this->s5 = out;
            									}
HXDLIN(  79)									_this->l--;
            								}
HXDLIN(  79)								this->lastX = ( (Float)(out) );
HXLINE(  80)								::justPath::StoreF6 _this1 = this->store;
HXDLIN(  80)								 ::Dynamic out1 = _this1->s0;
HXDLIN(  80)								if ((_this1->l != 0)) {
HXLINE(  80)									_this1->s0 = _this1->s1;
HXDLIN(  80)									_this1->s1 = _this1->s2;
HXDLIN(  80)									_this1->s2 = _this1->s3;
HXDLIN(  80)									_this1->s3 = _this1->s4;
HXDLIN(  80)									_this1->s4 = _this1->s5;
HXDLIN(  80)									_this1->s5 = null();
HXDLIN(  80)									if (::hx::IsNotNull( _this1->s6 )) {
HXLINE(  80)										::justPath::StoreF6 _this = _this1->s6;
HXDLIN(  80)										 ::Dynamic out = _this->s0;
HXDLIN(  80)										if ((_this->l != 0)) {
HXLINE(  80)											_this->s0 = _this->s1;
HXDLIN(  80)											_this->s1 = _this->s2;
HXDLIN(  80)											_this->s2 = _this->s3;
HXDLIN(  80)											_this->s3 = _this->s4;
HXDLIN(  80)											_this->s4 = _this->s5;
HXDLIN(  80)											_this->s5 = null();
HXDLIN(  80)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE(  80)												_this->s5 = _this->s6->shift();
            											}
HXDLIN(  80)											_this->l--;
            										}
HXDLIN(  80)										_this1->s5 = out;
            									}
HXDLIN(  80)									_this1->l--;
            								}
HXDLIN(  80)								this->lastY = ( (Float)(out1) );
HXLINE(  81)								{
HXLINE(  81)									Float x_ = this->lastX;
HXDLIN(  81)									Float y_ = this->lastY;
HXDLIN(  81)									::justPath::ILinePathContext_obj::lineTo(this->pathContext,x_,y_);
HXDLIN(  81)									this->px = x_;
HXDLIN(  81)									this->py = y_;
            								}
            							}
            						}
            					}
            				}
            				break;
            				case (int)77: {
HXLINE(  40)					{
HXLINE(  40)						{
HXLINE(  40)							::justPath::StoreF6 _this = this->store;
HXDLIN(  40)							_this->l = 0;
HXDLIN(  40)							_this->s0 = null();
HXDLIN(  40)							_this->s1 = null();
HXDLIN(  40)							_this->s2 = null();
HXDLIN(  40)							_this->s3 = null();
HXDLIN(  40)							_this->s4 = null();
HXDLIN(  40)							_this->s5 = null();
HXDLIN(  40)							_this->s6 = null();
            						}
HXDLIN(  40)						this->c = this->str.cca(this->pos++);
HXDLIN(  40)						::String temp = HX_("",00,00,00,00);
HXDLIN(  40)						bool exit = false;
HXDLIN(  40)						while(true){
HXLINE(  40)							switch((int)(this->c)){
            								case (int)32: case (int)44: {
HXLINE(  40)									if ((temp != HX_("",00,00,00,00))) {
HXLINE(  40)										if (((this->store->l & 1) == 0)) {
HXLINE(  40)											::justPath::StoreF6 _this = this->store;
HXDLIN(  40)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  40)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  40)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  40)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  40)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  40)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  40)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  40)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  40)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  40)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  40)													{
HXLINE(  40)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  40)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  40)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  40)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  40)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  40)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  40)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  40)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  40)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  40)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  40)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  40)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  40)											_this->l++;
            										}
            										else {
HXLINE(  40)											::justPath::StoreF6 _this = this->store;
HXDLIN(  40)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  40)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  40)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  40)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  40)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  40)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  40)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  40)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  40)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  40)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  40)													{
HXLINE(  40)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  40)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  40)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  40)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  40)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  40)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  40)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  40)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  40)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  40)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  40)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  40)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  40)											_this->l++;
            										}
HXDLIN(  40)										temp = HX_("",00,00,00,00);
            									}
            								}
            								break;
            								case (int)45: {
HXLINE(  40)									if ((temp != HX_("",00,00,00,00))) {
HXLINE(  40)										if (((this->store->l & 1) == 0)) {
HXLINE(  40)											::justPath::StoreF6 _this = this->store;
HXDLIN(  40)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  40)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  40)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  40)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  40)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  40)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  40)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  40)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  40)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  40)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  40)													{
HXLINE(  40)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  40)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  40)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  40)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  40)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  40)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  40)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  40)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  40)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  40)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  40)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  40)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  40)											_this->l++;
            										}
            										else {
HXLINE(  40)											::justPath::StoreF6 _this = this->store;
HXDLIN(  40)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  40)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  40)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  40)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  40)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  40)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  40)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  40)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  40)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  40)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  40)													{
HXLINE(  40)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  40)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  40)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  40)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  40)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  40)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  40)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  40)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  40)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  40)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  40)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  40)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  40)											_this->l++;
            										}
            									}
HXDLIN(  40)									temp = HX_("-",2d,00,00,00);
            								}
            								break;
            								case (int)46: {
HXLINE(  40)									temp = (temp + HX_(".",2e,00,00,00));
            								}
            								break;
            								case (int)48: {
HXLINE(  40)									temp = (temp + HX_("0",30,00,00,00));
            								}
            								break;
            								case (int)49: {
HXLINE(  40)									temp = (temp + HX_("1",31,00,00,00));
            								}
            								break;
            								case (int)50: {
HXLINE(  40)									temp = (temp + HX_("2",32,00,00,00));
            								}
            								break;
            								case (int)51: {
HXLINE(  40)									temp = (temp + HX_("3",33,00,00,00));
            								}
            								break;
            								case (int)52: {
HXLINE(  40)									temp = (temp + HX_("4",34,00,00,00));
            								}
            								break;
            								case (int)53: {
HXLINE(  40)									temp = (temp + HX_("5",35,00,00,00));
            								}
            								break;
            								case (int)54: {
HXLINE(  40)									temp = (temp + HX_("6",36,00,00,00));
            								}
            								break;
            								case (int)55: {
HXLINE(  40)									temp = (temp + HX_("7",37,00,00,00));
            								}
            								break;
            								case (int)56: {
HXLINE(  40)									temp = (temp + HX_("8",38,00,00,00));
            								}
            								break;
            								case (int)57: {
HXLINE(  40)									temp = (temp + HX_("9",39,00,00,00));
            								}
            								break;
            								default:{
HXLINE(  40)									if ((temp != HX_("",00,00,00,00))) {
HXLINE(  40)										if (((this->store->l & 1) == 0)) {
HXLINE(  40)											::justPath::StoreF6 _this = this->store;
HXDLIN(  40)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  40)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  40)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  40)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  40)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  40)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  40)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  40)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  40)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  40)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  40)													{
HXLINE(  40)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  40)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  40)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  40)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  40)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  40)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  40)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  40)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  40)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  40)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  40)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  40)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  40)											_this->l++;
            										}
            										else {
HXLINE(  40)											::justPath::StoreF6 _this = this->store;
HXDLIN(  40)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  40)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  40)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  40)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  40)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  40)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  40)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  40)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  40)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  40)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  40)													{
HXLINE(  40)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  40)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  40)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  40)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  40)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  40)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  40)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  40)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  40)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  40)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  40)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  40)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  40)											_this->l++;
            										}
HXDLIN(  40)										temp = HX_("",00,00,00,00);
            									}
HXDLIN(  40)									this->pos--;
HXDLIN(  40)									exit = true;
            								}
            							}
HXDLIN(  40)							if (exit) {
HXLINE(  40)								goto _hx_goto_14;
            							}
HXDLIN(  40)							this->c = this->str.cca(this->pos++);
            						}
            						_hx_goto_14:;
            					}
HXLINE(  41)					if ((this->store->l == 2)) {
HXLINE(  42)						this->lastX = ( (Float)(this->store->s0) );
HXLINE(  43)						this->lastY = ( (Float)(this->store->s1) );
HXLINE(  44)						{
HXLINE(  44)							Float x_ = this->lastX;
HXDLIN(  44)							Float y_ = this->lastY;
HXDLIN(  44)							this->px = x_;
HXDLIN(  44)							this->py = y_;
HXDLIN(  44)							::justPath::ILinePathContext_obj::moveTo(this->pathContext,x_,y_);
            						}
            					}
            					else {
HXLINE(  45)						if ((this->store->l > 2)) {
HXLINE(  46)							::justPath::StoreF6 _this = this->store;
HXDLIN(  46)							 ::Dynamic out = _this->s0;
HXDLIN(  46)							if ((_this->l != 0)) {
HXLINE(  46)								_this->s0 = _this->s1;
HXDLIN(  46)								_this->s1 = _this->s2;
HXDLIN(  46)								_this->s2 = _this->s3;
HXDLIN(  46)								_this->s3 = _this->s4;
HXDLIN(  46)								_this->s4 = _this->s5;
HXDLIN(  46)								_this->s5 = null();
HXDLIN(  46)								if (::hx::IsNotNull( _this->s6 )) {
HXLINE(  46)									::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  46)									 ::Dynamic out = _this1->s0;
HXDLIN(  46)									if ((_this1->l != 0)) {
HXLINE(  46)										_this1->s0 = _this1->s1;
HXDLIN(  46)										_this1->s1 = _this1->s2;
HXDLIN(  46)										_this1->s2 = _this1->s3;
HXDLIN(  46)										_this1->s3 = _this1->s4;
HXDLIN(  46)										_this1->s4 = _this1->s5;
HXDLIN(  46)										_this1->s5 = null();
HXDLIN(  46)										if (::hx::IsNotNull( _this1->s6 )) {
HXLINE(  46)											_this1->s5 = _this1->s6->shift();
            										}
HXDLIN(  46)										_this1->l--;
            									}
HXDLIN(  46)									_this->s5 = out;
            								}
HXDLIN(  46)								_this->l--;
            							}
HXDLIN(  46)							this->lastX = ( (Float)(out) );
HXLINE(  47)							::justPath::StoreF6 _this1 = this->store;
HXDLIN(  47)							 ::Dynamic out1 = _this1->s0;
HXDLIN(  47)							if ((_this1->l != 0)) {
HXLINE(  47)								_this1->s0 = _this1->s1;
HXDLIN(  47)								_this1->s1 = _this1->s2;
HXDLIN(  47)								_this1->s2 = _this1->s3;
HXDLIN(  47)								_this1->s3 = _this1->s4;
HXDLIN(  47)								_this1->s4 = _this1->s5;
HXDLIN(  47)								_this1->s5 = null();
HXDLIN(  47)								if (::hx::IsNotNull( _this1->s6 )) {
HXLINE(  47)									::justPath::StoreF6 _this = _this1->s6;
HXDLIN(  47)									 ::Dynamic out = _this->s0;
HXDLIN(  47)									if ((_this->l != 0)) {
HXLINE(  47)										_this->s0 = _this->s1;
HXDLIN(  47)										_this->s1 = _this->s2;
HXDLIN(  47)										_this->s2 = _this->s3;
HXDLIN(  47)										_this->s3 = _this->s4;
HXDLIN(  47)										_this->s4 = _this->s5;
HXDLIN(  47)										_this->s5 = null();
HXDLIN(  47)										if (::hx::IsNotNull( _this->s6 )) {
HXLINE(  47)											_this->s5 = _this->s6->shift();
            										}
HXDLIN(  47)										_this->l--;
            									}
HXDLIN(  47)									_this1->s5 = out;
            								}
HXDLIN(  47)								_this1->l--;
            							}
HXDLIN(  47)							this->lastY = ( (Float)(out1) );
HXLINE(  48)							{
HXLINE(  48)								Float x_ = this->lastX;
HXDLIN(  48)								Float y_ = this->lastY;
HXDLIN(  48)								this->px = x_;
HXDLIN(  48)								this->py = y_;
HXDLIN(  48)								::justPath::ILinePathContext_obj::moveTo(this->pathContext,x_,y_);
            							}
HXLINE(  49)							while((this->store->l > 1)){
HXLINE(  50)								::justPath::StoreF6 _this = this->store;
HXDLIN(  50)								 ::Dynamic out = _this->s0;
HXDLIN(  50)								if ((_this->l != 0)) {
HXLINE(  50)									_this->s0 = _this->s1;
HXDLIN(  50)									_this->s1 = _this->s2;
HXDLIN(  50)									_this->s2 = _this->s3;
HXDLIN(  50)									_this->s3 = _this->s4;
HXDLIN(  50)									_this->s4 = _this->s5;
HXDLIN(  50)									_this->s5 = null();
HXDLIN(  50)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE(  50)										::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  50)										 ::Dynamic out = _this1->s0;
HXDLIN(  50)										if ((_this1->l != 0)) {
HXLINE(  50)											_this1->s0 = _this1->s1;
HXDLIN(  50)											_this1->s1 = _this1->s2;
HXDLIN(  50)											_this1->s2 = _this1->s3;
HXDLIN(  50)											_this1->s3 = _this1->s4;
HXDLIN(  50)											_this1->s4 = _this1->s5;
HXDLIN(  50)											_this1->s5 = null();
HXDLIN(  50)											if (::hx::IsNotNull( _this1->s6 )) {
HXLINE(  50)												_this1->s5 = _this1->s6->shift();
            											}
HXDLIN(  50)											_this1->l--;
            										}
HXDLIN(  50)										_this->s5 = out;
            									}
HXDLIN(  50)									_this->l--;
            								}
HXDLIN(  50)								this->lastX = ( (Float)(out) );
HXLINE(  51)								::justPath::StoreF6 _this1 = this->store;
HXDLIN(  51)								 ::Dynamic out1 = _this1->s0;
HXDLIN(  51)								if ((_this1->l != 0)) {
HXLINE(  51)									_this1->s0 = _this1->s1;
HXDLIN(  51)									_this1->s1 = _this1->s2;
HXDLIN(  51)									_this1->s2 = _this1->s3;
HXDLIN(  51)									_this1->s3 = _this1->s4;
HXDLIN(  51)									_this1->s4 = _this1->s5;
HXDLIN(  51)									_this1->s5 = null();
HXDLIN(  51)									if (::hx::IsNotNull( _this1->s6 )) {
HXLINE(  51)										::justPath::StoreF6 _this = _this1->s6;
HXDLIN(  51)										 ::Dynamic out = _this->s0;
HXDLIN(  51)										if ((_this->l != 0)) {
HXLINE(  51)											_this->s0 = _this->s1;
HXDLIN(  51)											_this->s1 = _this->s2;
HXDLIN(  51)											_this->s2 = _this->s3;
HXDLIN(  51)											_this->s3 = _this->s4;
HXDLIN(  51)											_this->s4 = _this->s5;
HXDLIN(  51)											_this->s5 = null();
HXDLIN(  51)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE(  51)												_this->s5 = _this->s6->shift();
            											}
HXDLIN(  51)											_this->l--;
            										}
HXDLIN(  51)										_this1->s5 = out;
            									}
HXDLIN(  51)									_this1->l--;
            								}
HXDLIN(  51)								this->lastY = ( (Float)(out1) );
HXLINE(  52)								{
HXLINE(  52)									Float x_ = this->lastX;
HXDLIN(  52)									Float y_ = this->lastY;
HXDLIN(  52)									::justPath::ILinePathContext_obj::lineTo(this->pathContext,x_,y_);
HXDLIN(  52)									this->px = x_;
HXDLIN(  52)									this->py = y_;
            								}
            							}
            						}
            					}
            				}
            				break;
            				case (int)81: {
HXLINE( 240)					{
HXLINE( 240)						{
HXLINE( 240)							::justPath::StoreF6 _this = this->store;
HXDLIN( 240)							_this->l = 0;
HXDLIN( 240)							_this->s0 = null();
HXDLIN( 240)							_this->s1 = null();
HXDLIN( 240)							_this->s2 = null();
HXDLIN( 240)							_this->s3 = null();
HXDLIN( 240)							_this->s4 = null();
HXDLIN( 240)							_this->s5 = null();
HXDLIN( 240)							_this->s6 = null();
            						}
HXDLIN( 240)						this->c = this->str.cca(this->pos++);
HXDLIN( 240)						::String temp = HX_("",00,00,00,00);
HXDLIN( 240)						bool exit = false;
HXDLIN( 240)						while(true){
HXLINE( 240)							switch((int)(this->c)){
            								case (int)32: case (int)44: {
HXLINE( 240)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 240)										if (((this->store->l & 1) == 0)) {
HXLINE( 240)											::justPath::StoreF6 _this = this->store;
HXDLIN( 240)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 240)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 240)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 240)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 240)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 240)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 240)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 240)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 240)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 240)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 240)													{
HXLINE( 240)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 240)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 240)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 240)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 240)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 240)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 240)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 240)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 240)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 240)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 240)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 240)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 240)											_this->l++;
            										}
            										else {
HXLINE( 240)											::justPath::StoreF6 _this = this->store;
HXDLIN( 240)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 240)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 240)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 240)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 240)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 240)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 240)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 240)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 240)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 240)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 240)													{
HXLINE( 240)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 240)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 240)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 240)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 240)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 240)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 240)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 240)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 240)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 240)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 240)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 240)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 240)											_this->l++;
            										}
HXDLIN( 240)										temp = HX_("",00,00,00,00);
            									}
            								}
            								break;
            								case (int)45: {
HXLINE( 240)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 240)										if (((this->store->l & 1) == 0)) {
HXLINE( 240)											::justPath::StoreF6 _this = this->store;
HXDLIN( 240)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 240)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 240)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 240)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 240)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 240)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 240)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 240)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 240)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 240)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 240)													{
HXLINE( 240)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 240)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 240)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 240)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 240)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 240)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 240)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 240)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 240)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 240)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 240)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 240)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 240)											_this->l++;
            										}
            										else {
HXLINE( 240)											::justPath::StoreF6 _this = this->store;
HXDLIN( 240)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 240)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 240)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 240)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 240)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 240)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 240)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 240)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 240)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 240)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 240)													{
HXLINE( 240)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 240)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 240)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 240)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 240)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 240)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 240)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 240)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 240)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 240)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 240)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 240)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 240)											_this->l++;
            										}
            									}
HXDLIN( 240)									temp = HX_("-",2d,00,00,00);
            								}
            								break;
            								case (int)46: {
HXLINE( 240)									temp = (temp + HX_(".",2e,00,00,00));
            								}
            								break;
            								case (int)48: {
HXLINE( 240)									temp = (temp + HX_("0",30,00,00,00));
            								}
            								break;
            								case (int)49: {
HXLINE( 240)									temp = (temp + HX_("1",31,00,00,00));
            								}
            								break;
            								case (int)50: {
HXLINE( 240)									temp = (temp + HX_("2",32,00,00,00));
            								}
            								break;
            								case (int)51: {
HXLINE( 240)									temp = (temp + HX_("3",33,00,00,00));
            								}
            								break;
            								case (int)52: {
HXLINE( 240)									temp = (temp + HX_("4",34,00,00,00));
            								}
            								break;
            								case (int)53: {
HXLINE( 240)									temp = (temp + HX_("5",35,00,00,00));
            								}
            								break;
            								case (int)54: {
HXLINE( 240)									temp = (temp + HX_("6",36,00,00,00));
            								}
            								break;
            								case (int)55: {
HXLINE( 240)									temp = (temp + HX_("7",37,00,00,00));
            								}
            								break;
            								case (int)56: {
HXLINE( 240)									temp = (temp + HX_("8",38,00,00,00));
            								}
            								break;
            								case (int)57: {
HXLINE( 240)									temp = (temp + HX_("9",39,00,00,00));
            								}
            								break;
            								default:{
HXLINE( 240)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 240)										if (((this->store->l & 1) == 0)) {
HXLINE( 240)											::justPath::StoreF6 _this = this->store;
HXDLIN( 240)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 240)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 240)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 240)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 240)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 240)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 240)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 240)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 240)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 240)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 240)													{
HXLINE( 240)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 240)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 240)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 240)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 240)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 240)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 240)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 240)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 240)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 240)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 240)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 240)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 240)											_this->l++;
            										}
            										else {
HXLINE( 240)											::justPath::StoreF6 _this = this->store;
HXDLIN( 240)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 240)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 240)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 240)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 240)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 240)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 240)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 240)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 240)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 240)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 240)													{
HXLINE( 240)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 240)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 240)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 240)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 240)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 240)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 240)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 240)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 240)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 240)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 240)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 240)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 240)											_this->l++;
            										}
HXDLIN( 240)										temp = HX_("",00,00,00,00);
            									}
HXDLIN( 240)									this->pos--;
HXDLIN( 240)									exit = true;
            								}
            							}
HXDLIN( 240)							if (exit) {
HXLINE( 240)								goto _hx_goto_16;
            							}
HXDLIN( 240)							this->c = this->str.cca(this->pos++);
            						}
            						_hx_goto_16:;
            					}
HXLINE( 241)					if ((this->store->l == 4)) {
HXLINE( 242)						this->controlX = ( (Float)(this->store->s0) );
HXLINE( 243)						this->controlY = ( (Float)(this->store->s1) );
HXLINE( 244)						this->lastX = ( (Float)(this->store->s2) );
HXLINE( 245)						this->lastY = ( (Float)(this->store->s3) );
HXLINE( 246)						{
HXLINE( 246)							Float x1 = this->controlX;
HXDLIN( 246)							Float y1 = this->controlY;
HXDLIN( 246)							Float x2 = this->lastX;
HXDLIN( 246)							Float y2 = this->lastY;
HXDLIN( 246)							::Array< Float > tempArr = ::Array_obj< Float >::__new(0);
HXDLIN( 246)							{
HXLINE( 246)								Float ax = this->px;
HXDLIN( 246)								Float ay = this->py;
HXDLIN( 246)								Float x = (ax - x1);
HXDLIN( 246)								Float y = (ay - y1);
HXDLIN( 246)								Float x3 = (x1 - x2);
HXDLIN( 246)								Float y3 = (y1 - y2);
HXDLIN( 246)								Float approxDistance = (::Math_obj::sqrt(((x * x) + (y * y))) + ::Math_obj::sqrt(((x3 * x3) + (y3 * y3))));
HXDLIN( 246)								if ((approxDistance == 0)) {
HXLINE( 246)									approxDistance = ((Float)0.000001);
            								}
HXDLIN( 246)								Float step = ::Math_obj::min((( (Float)(1) ) / (approxDistance * ((Float)0.707))),::justPath::_CurveMath::CurveMath_Fields__obj::quadStep);
HXDLIN( 246)								int l = tempArr->length;
HXDLIN( 246)								l = (l + 1);
HXDLIN( 246)								tempArr[(l - 1)] = ax;
HXDLIN( 246)								l = (l + 1);
HXDLIN( 246)								tempArr[(l - 1)] = ay;
HXDLIN( 246)								Float t = step;
HXDLIN( 246)								while((t < ((Float)1.))){
HXLINE( 246)									l = (l + 1);
HXDLIN( 246)									Float u = (( (Float)(1) ) - t);
HXDLIN( 246)									tempArr[(l - 1)] = (((::Math_obj::pow(u,( (Float)(2) )) * ax) + (((( (Float)(2) ) * u) * t) * x1)) + (::Math_obj::pow(t,( (Float)(2) )) * x2));
HXDLIN( 246)									l = (l + 1);
HXDLIN( 246)									Float u1 = (( (Float)(1) ) - t);
HXDLIN( 246)									tempArr[(l - 1)] = (((::Math_obj::pow(u1,( (Float)(2) )) * ay) + (((( (Float)(2) ) * u1) * t) * y1)) + (::Math_obj::pow(t,( (Float)(2) )) * y2));
HXDLIN( 246)									t = (t + step);
            								}
HXDLIN( 246)								l = (l + 1);
HXDLIN( 246)								tempArr[(l - 1)] = x2;
HXDLIN( 246)								l = (l + 1);
HXDLIN( 246)								tempArr[(l - 1)] = y2;
            							}
HXDLIN( 246)							::haxe::Log_obj::trace(tempArr,::hx::SourceInfo(HX_("justPath/SvgLinePath.hx",5f,c6,70,0f),502,HX_("justPath.SvgLinePath",20,f0,4a,08),HX_("quadTo",22,82,9f,cc)));
HXDLIN( 246)							{
HXLINE( 246)								 ::Dynamic withMove = false;
HXDLIN( 246)								if (::hx::IsNull( withMove )) {
HXLINE( 246)									withMove = true;
            								}
HXDLIN( 246)								int l1 = tempArr->length;
HXDLIN( 246)								int i = 2;
HXDLIN( 246)								if (( (bool)(withMove) )) {
HXLINE( 246)									::justPath::ILinePathContext_obj::moveTo(this->pathContext,tempArr->__get(0),tempArr->__get(1));
            								}
            								else {
HXLINE( 246)									::justPath::ILinePathContext_obj::lineSegmentTo(this->pathContext,tempArr->__get(0),tempArr->__get(1));
            								}
HXDLIN( 246)								while((i < l1)){
HXLINE( 246)									::justPath::ILinePathContext_obj::lineSegmentTo(this->pathContext,tempArr->__get(i),tempArr->__get((i + 1)));
HXDLIN( 246)									i = (i + 2);
            								}
            							}
HXDLIN( 246)							tempArr = ::Array_obj< Float >::__new(0);
HXDLIN( 246)							this->px = x2;
HXDLIN( 246)							this->py = y2;
            						}
            					}
            					else {
HXLINE( 248)						if ((this->store->l > 4)) {
HXLINE( 249)							while((this->store->l > 3)){
HXLINE( 250)								::justPath::StoreF6 _this = this->store;
HXDLIN( 250)								 ::Dynamic out = _this->s0;
HXDLIN( 250)								if ((_this->l != 0)) {
HXLINE( 250)									_this->s0 = _this->s1;
HXDLIN( 250)									_this->s1 = _this->s2;
HXDLIN( 250)									_this->s2 = _this->s3;
HXDLIN( 250)									_this->s3 = _this->s4;
HXDLIN( 250)									_this->s4 = _this->s5;
HXDLIN( 250)									_this->s5 = null();
HXDLIN( 250)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 250)										::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 250)										 ::Dynamic out = _this1->s0;
HXDLIN( 250)										if ((_this1->l != 0)) {
HXLINE( 250)											_this1->s0 = _this1->s1;
HXDLIN( 250)											_this1->s1 = _this1->s2;
HXDLIN( 250)											_this1->s2 = _this1->s3;
HXDLIN( 250)											_this1->s3 = _this1->s4;
HXDLIN( 250)											_this1->s4 = _this1->s5;
HXDLIN( 250)											_this1->s5 = null();
HXDLIN( 250)											if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 250)												_this1->s5 = _this1->s6->shift();
            											}
HXDLIN( 250)											_this1->l--;
            										}
HXDLIN( 250)										_this->s5 = out;
            									}
HXDLIN( 250)									_this->l--;
            								}
HXDLIN( 250)								this->controlX = ( (Float)(out) );
HXLINE( 251)								::justPath::StoreF6 _this1 = this->store;
HXDLIN( 251)								 ::Dynamic out1 = _this1->s0;
HXDLIN( 251)								if ((_this1->l != 0)) {
HXLINE( 251)									_this1->s0 = _this1->s1;
HXDLIN( 251)									_this1->s1 = _this1->s2;
HXDLIN( 251)									_this1->s2 = _this1->s3;
HXDLIN( 251)									_this1->s3 = _this1->s4;
HXDLIN( 251)									_this1->s4 = _this1->s5;
HXDLIN( 251)									_this1->s5 = null();
HXDLIN( 251)									if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 251)										::justPath::StoreF6 _this = _this1->s6;
HXDLIN( 251)										 ::Dynamic out = _this->s0;
HXDLIN( 251)										if ((_this->l != 0)) {
HXLINE( 251)											_this->s0 = _this->s1;
HXDLIN( 251)											_this->s1 = _this->s2;
HXDLIN( 251)											_this->s2 = _this->s3;
HXDLIN( 251)											_this->s3 = _this->s4;
HXDLIN( 251)											_this->s4 = _this->s5;
HXDLIN( 251)											_this->s5 = null();
HXDLIN( 251)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 251)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 251)											_this->l--;
            										}
HXDLIN( 251)										_this1->s5 = out;
            									}
HXDLIN( 251)									_this1->l--;
            								}
HXDLIN( 251)								this->controlY = ( (Float)(out1) );
HXLINE( 252)								::justPath::StoreF6 _this2 = this->store;
HXDLIN( 252)								 ::Dynamic out2 = _this2->s0;
HXDLIN( 252)								if ((_this2->l != 0)) {
HXLINE( 252)									_this2->s0 = _this2->s1;
HXDLIN( 252)									_this2->s1 = _this2->s2;
HXDLIN( 252)									_this2->s2 = _this2->s3;
HXDLIN( 252)									_this2->s3 = _this2->s4;
HXDLIN( 252)									_this2->s4 = _this2->s5;
HXDLIN( 252)									_this2->s5 = null();
HXDLIN( 252)									if (::hx::IsNotNull( _this2->s6 )) {
HXLINE( 252)										::justPath::StoreF6 _this = _this2->s6;
HXDLIN( 252)										 ::Dynamic out = _this->s0;
HXDLIN( 252)										if ((_this->l != 0)) {
HXLINE( 252)											_this->s0 = _this->s1;
HXDLIN( 252)											_this->s1 = _this->s2;
HXDLIN( 252)											_this->s2 = _this->s3;
HXDLIN( 252)											_this->s3 = _this->s4;
HXDLIN( 252)											_this->s4 = _this->s5;
HXDLIN( 252)											_this->s5 = null();
HXDLIN( 252)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 252)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 252)											_this->l--;
            										}
HXDLIN( 252)										_this2->s5 = out;
            									}
HXDLIN( 252)									_this2->l--;
            								}
HXDLIN( 252)								this->lastX = ( (Float)(out2) );
HXLINE( 253)								::justPath::StoreF6 _this3 = this->store;
HXDLIN( 253)								 ::Dynamic out3 = _this3->s0;
HXDLIN( 253)								if ((_this3->l != 0)) {
HXLINE( 253)									_this3->s0 = _this3->s1;
HXDLIN( 253)									_this3->s1 = _this3->s2;
HXDLIN( 253)									_this3->s2 = _this3->s3;
HXDLIN( 253)									_this3->s3 = _this3->s4;
HXDLIN( 253)									_this3->s4 = _this3->s5;
HXDLIN( 253)									_this3->s5 = null();
HXDLIN( 253)									if (::hx::IsNotNull( _this3->s6 )) {
HXLINE( 253)										::justPath::StoreF6 _this = _this3->s6;
HXDLIN( 253)										 ::Dynamic out = _this->s0;
HXDLIN( 253)										if ((_this->l != 0)) {
HXLINE( 253)											_this->s0 = _this->s1;
HXDLIN( 253)											_this->s1 = _this->s2;
HXDLIN( 253)											_this->s2 = _this->s3;
HXDLIN( 253)											_this->s3 = _this->s4;
HXDLIN( 253)											_this->s4 = _this->s5;
HXDLIN( 253)											_this->s5 = null();
HXDLIN( 253)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 253)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 253)											_this->l--;
            										}
HXDLIN( 253)										_this3->s5 = out;
            									}
HXDLIN( 253)									_this3->l--;
            								}
HXDLIN( 253)								this->lastY = ( (Float)(out3) );
HXLINE( 254)								{
HXLINE( 254)									Float x1 = this->controlX;
HXDLIN( 254)									Float y1 = this->controlY;
HXDLIN( 254)									Float x2 = this->lastX;
HXDLIN( 254)									Float y2 = this->lastY;
HXDLIN( 254)									::Array< Float > tempArr = ::Array_obj< Float >::__new(0);
HXDLIN( 254)									{
HXLINE( 254)										Float ax = this->px;
HXDLIN( 254)										Float ay = this->py;
HXDLIN( 254)										Float x = (ax - x1);
HXDLIN( 254)										Float y = (ay - y1);
HXDLIN( 254)										Float x3 = (x1 - x2);
HXDLIN( 254)										Float y3 = (y1 - y2);
HXDLIN( 254)										Float approxDistance = (::Math_obj::sqrt(((x * x) + (y * y))) + ::Math_obj::sqrt(((x3 * x3) + (y3 * y3))));
HXDLIN( 254)										if ((approxDistance == 0)) {
HXLINE( 254)											approxDistance = ((Float)0.000001);
            										}
HXDLIN( 254)										Float step = ::Math_obj::min((( (Float)(1) ) / (approxDistance * ((Float)0.707))),::justPath::_CurveMath::CurveMath_Fields__obj::quadStep);
HXDLIN( 254)										int l = tempArr->length;
HXDLIN( 254)										l = (l + 1);
HXDLIN( 254)										tempArr[(l - 1)] = ax;
HXDLIN( 254)										l = (l + 1);
HXDLIN( 254)										tempArr[(l - 1)] = ay;
HXDLIN( 254)										Float t = step;
HXDLIN( 254)										while((t < ((Float)1.))){
HXLINE( 254)											l = (l + 1);
HXDLIN( 254)											Float u = (( (Float)(1) ) - t);
HXDLIN( 254)											tempArr[(l - 1)] = (((::Math_obj::pow(u,( (Float)(2) )) * ax) + (((( (Float)(2) ) * u) * t) * x1)) + (::Math_obj::pow(t,( (Float)(2) )) * x2));
HXDLIN( 254)											l = (l + 1);
HXDLIN( 254)											Float u1 = (( (Float)(1) ) - t);
HXDLIN( 254)											tempArr[(l - 1)] = (((::Math_obj::pow(u1,( (Float)(2) )) * ay) + (((( (Float)(2) ) * u1) * t) * y1)) + (::Math_obj::pow(t,( (Float)(2) )) * y2));
HXDLIN( 254)											t = (t + step);
            										}
HXDLIN( 254)										l = (l + 1);
HXDLIN( 254)										tempArr[(l - 1)] = x2;
HXDLIN( 254)										l = (l + 1);
HXDLIN( 254)										tempArr[(l - 1)] = y2;
            									}
HXDLIN( 254)									::haxe::Log_obj::trace(tempArr,::hx::SourceInfo(HX_("justPath/SvgLinePath.hx",5f,c6,70,0f),502,HX_("justPath.SvgLinePath",20,f0,4a,08),HX_("quadTo",22,82,9f,cc)));
HXDLIN( 254)									{
HXLINE( 254)										 ::Dynamic withMove = false;
HXDLIN( 254)										if (::hx::IsNull( withMove )) {
HXLINE( 254)											withMove = true;
            										}
HXDLIN( 254)										int l1 = tempArr->length;
HXDLIN( 254)										int i = 2;
HXDLIN( 254)										if (( (bool)(withMove) )) {
HXLINE( 254)											::justPath::ILinePathContext_obj::moveTo(this->pathContext,tempArr->__get(0),tempArr->__get(1));
            										}
            										else {
HXLINE( 254)											::justPath::ILinePathContext_obj::lineSegmentTo(this->pathContext,tempArr->__get(0),tempArr->__get(1));
            										}
HXDLIN( 254)										while((i < l1)){
HXLINE( 254)											::justPath::ILinePathContext_obj::lineSegmentTo(this->pathContext,tempArr->__get(i),tempArr->__get((i + 1)));
HXDLIN( 254)											i = (i + 2);
            										}
            									}
HXDLIN( 254)									tempArr = ::Array_obj< Float >::__new(0);
HXDLIN( 254)									this->px = x2;
HXDLIN( 254)									this->py = y2;
            								}
            							}
            						}
            					}
            				}
            				break;
            				case (int)83: {
HXLINE( 185)					{
HXLINE( 185)						{
HXLINE( 185)							::justPath::StoreF6 _this = this->store;
HXDLIN( 185)							_this->l = 0;
HXDLIN( 185)							_this->s0 = null();
HXDLIN( 185)							_this->s1 = null();
HXDLIN( 185)							_this->s2 = null();
HXDLIN( 185)							_this->s3 = null();
HXDLIN( 185)							_this->s4 = null();
HXDLIN( 185)							_this->s5 = null();
HXDLIN( 185)							_this->s6 = null();
            						}
HXDLIN( 185)						this->c = this->str.cca(this->pos++);
HXDLIN( 185)						::String temp = HX_("",00,00,00,00);
HXDLIN( 185)						bool exit = false;
HXDLIN( 185)						while(true){
HXLINE( 185)							switch((int)(this->c)){
            								case (int)32: case (int)44: {
HXLINE( 185)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 185)										if (((this->store->l & 1) == 0)) {
HXLINE( 185)											::justPath::StoreF6 _this = this->store;
HXDLIN( 185)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 185)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 185)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 185)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 185)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 185)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 185)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 185)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 185)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 185)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 185)													{
HXLINE( 185)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 185)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 185)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 185)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 185)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 185)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 185)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 185)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 185)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 185)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 185)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 185)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 185)											_this->l++;
            										}
            										else {
HXLINE( 185)											::justPath::StoreF6 _this = this->store;
HXDLIN( 185)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 185)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 185)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 185)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 185)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 185)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 185)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 185)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 185)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 185)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 185)													{
HXLINE( 185)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 185)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 185)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 185)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 185)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 185)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 185)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 185)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 185)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 185)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 185)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 185)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 185)											_this->l++;
            										}
HXDLIN( 185)										temp = HX_("",00,00,00,00);
            									}
            								}
            								break;
            								case (int)45: {
HXLINE( 185)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 185)										if (((this->store->l & 1) == 0)) {
HXLINE( 185)											::justPath::StoreF6 _this = this->store;
HXDLIN( 185)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 185)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 185)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 185)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 185)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 185)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 185)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 185)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 185)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 185)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 185)													{
HXLINE( 185)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 185)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 185)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 185)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 185)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 185)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 185)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 185)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 185)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 185)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 185)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 185)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 185)											_this->l++;
            										}
            										else {
HXLINE( 185)											::justPath::StoreF6 _this = this->store;
HXDLIN( 185)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 185)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 185)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 185)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 185)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 185)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 185)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 185)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 185)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 185)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 185)													{
HXLINE( 185)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 185)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 185)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 185)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 185)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 185)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 185)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 185)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 185)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 185)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 185)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 185)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 185)											_this->l++;
            										}
            									}
HXDLIN( 185)									temp = HX_("-",2d,00,00,00);
            								}
            								break;
            								case (int)46: {
HXLINE( 185)									temp = (temp + HX_(".",2e,00,00,00));
            								}
            								break;
            								case (int)48: {
HXLINE( 185)									temp = (temp + HX_("0",30,00,00,00));
            								}
            								break;
            								case (int)49: {
HXLINE( 185)									temp = (temp + HX_("1",31,00,00,00));
            								}
            								break;
            								case (int)50: {
HXLINE( 185)									temp = (temp + HX_("2",32,00,00,00));
            								}
            								break;
            								case (int)51: {
HXLINE( 185)									temp = (temp + HX_("3",33,00,00,00));
            								}
            								break;
            								case (int)52: {
HXLINE( 185)									temp = (temp + HX_("4",34,00,00,00));
            								}
            								break;
            								case (int)53: {
HXLINE( 185)									temp = (temp + HX_("5",35,00,00,00));
            								}
            								break;
            								case (int)54: {
HXLINE( 185)									temp = (temp + HX_("6",36,00,00,00));
            								}
            								break;
            								case (int)55: {
HXLINE( 185)									temp = (temp + HX_("7",37,00,00,00));
            								}
            								break;
            								case (int)56: {
HXLINE( 185)									temp = (temp + HX_("8",38,00,00,00));
            								}
            								break;
            								case (int)57: {
HXLINE( 185)									temp = (temp + HX_("9",39,00,00,00));
            								}
            								break;
            								default:{
HXLINE( 185)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 185)										if (((this->store->l & 1) == 0)) {
HXLINE( 185)											::justPath::StoreF6 _this = this->store;
HXDLIN( 185)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 185)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 185)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 185)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 185)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 185)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 185)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 185)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 185)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 185)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 185)													{
HXLINE( 185)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 185)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 185)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 185)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 185)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 185)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 185)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 185)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 185)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 185)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 185)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 185)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 185)											_this->l++;
            										}
            										else {
HXLINE( 185)											::justPath::StoreF6 _this = this->store;
HXDLIN( 185)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 185)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 185)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 185)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 185)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 185)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 185)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 185)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 185)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 185)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 185)													{
HXLINE( 185)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 185)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 185)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 185)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 185)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 185)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 185)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 185)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 185)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 185)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 185)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 185)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 185)											_this->l++;
            										}
HXDLIN( 185)										temp = HX_("",00,00,00,00);
            									}
HXDLIN( 185)									this->pos--;
HXDLIN( 185)									exit = true;
            								}
            							}
HXDLIN( 185)							if (exit) {
HXLINE( 185)								goto _hx_goto_22;
            							}
HXDLIN( 185)							this->c = this->str.cca(this->pos++);
            						}
            						_hx_goto_22:;
            					}
HXLINE( 187)					if ((this->store->l == 4)) {
HXLINE( 188)						 ::Dynamic firstX = this->store->s0;
HXLINE( 189)						 ::Dynamic firstY = this->store->s1;
HXLINE( 190)						this->controlX = ((( (Float)(2) ) * this->lastX) - this->controlX);
HXLINE( 191)						this->controlY = ((( (Float)(2) ) * this->lastY) - this->controlY);
HXLINE( 192)						 ::Dynamic endX = this->store->s2;
HXLINE( 193)						 ::Dynamic endY = this->store->s3;
HXLINE( 194)						{
HXLINE( 194)							Float x1 = this->controlX;
HXDLIN( 194)							Float y1 = this->controlY;
HXDLIN( 194)							Float x2 = ( (Float)(firstX) );
HXDLIN( 194)							Float y2 = ( (Float)(firstY) );
HXDLIN( 194)							Float x3 = ( (Float)(endX) );
HXDLIN( 194)							Float y3 = ( (Float)(endY) );
HXDLIN( 194)							::Array< Float > tempArr = ::Array_obj< Float >::__new(0);
HXDLIN( 194)							{
HXLINE( 194)								Float ax = this->px;
HXDLIN( 194)								Float ay = this->py;
HXDLIN( 194)								Float x = (ax - x1);
HXDLIN( 194)								Float y = (ay - y1);
HXDLIN( 194)								Float x4 = (x1 - x2);
HXDLIN( 194)								Float y4 = (y1 - y2);
HXDLIN( 194)								Float x5 = (x2 - x3);
HXDLIN( 194)								Float y5 = (y2 - y3);
HXDLIN( 194)								Float approxDistance = ((::Math_obj::sqrt(((x * x) + (y * y))) + ::Math_obj::sqrt(((x4 * x4) + (y4 * y4)))) + ::Math_obj::sqrt(((x5 * x5) + (y5 * y5))));
HXDLIN( 194)								if ((approxDistance == 0)) {
HXLINE( 194)									approxDistance = ((Float)0.000001);
            								}
HXDLIN( 194)								Float step = ::Math_obj::min((( (Float)(1) ) / (approxDistance * ((Float)0.707))),((Float)0.03));
HXDLIN( 194)								int l = tempArr->length;
HXDLIN( 194)								l = (l + 1);
HXDLIN( 194)								tempArr[(l - 1)] = ax;
HXDLIN( 194)								l = (l + 1);
HXDLIN( 194)								tempArr[(l - 1)] = ay;
HXDLIN( 194)								Float t = step;
HXDLIN( 194)								while((t < ((Float)1.))){
HXLINE( 194)									l = (l + 1);
HXDLIN( 194)									Float u = (( (Float)(1) ) - t);
HXDLIN( 194)									tempArr[(l - 1)] = ((((::Math_obj::pow(u,( (Float)(3) )) * ax) + (((( (Float)(3) ) * ::Math_obj::pow(u,( (Float)(2) ))) * t) * x1)) + (((( (Float)(3) ) * u) * ::Math_obj::pow(t,( (Float)(2) ))) * x2)) + (::Math_obj::pow(t,( (Float)(3) )) * x3));
HXDLIN( 194)									l = (l + 1);
HXDLIN( 194)									Float u1 = (( (Float)(1) ) - t);
HXDLIN( 194)									tempArr[(l - 1)] = ((((::Math_obj::pow(u1,( (Float)(3) )) * ay) + (((( (Float)(3) ) * ::Math_obj::pow(u1,( (Float)(2) ))) * t) * y1)) + (((( (Float)(3) ) * u1) * ::Math_obj::pow(t,( (Float)(2) ))) * y2)) + (::Math_obj::pow(t,( (Float)(3) )) * y3));
HXDLIN( 194)									t = (t + step);
            								}
HXDLIN( 194)								l = (l + 1);
HXDLIN( 194)								tempArr[(l - 1)] = x3;
HXDLIN( 194)								l = (l + 1);
HXDLIN( 194)								tempArr[(l - 1)] = y3;
            							}
HXDLIN( 194)							::haxe::Log_obj::trace(tempArr,::hx::SourceInfo(HX_("justPath/SvgLinePath.hx",5f,c6,70,0f),512,HX_("justPath.SvgLinePath",20,f0,4a,08),HX_("curveTo",0a,60,88,ce)));
HXDLIN( 194)							{
HXLINE( 194)								 ::Dynamic withMove = false;
HXDLIN( 194)								if (::hx::IsNull( withMove )) {
HXLINE( 194)									withMove = true;
            								}
HXDLIN( 194)								int l1 = tempArr->length;
HXDLIN( 194)								int i = 2;
HXDLIN( 194)								if (( (bool)(withMove) )) {
HXLINE( 194)									::justPath::ILinePathContext_obj::moveTo(this->pathContext,tempArr->__get(0),tempArr->__get(1));
            								}
            								else {
HXLINE( 194)									::justPath::ILinePathContext_obj::lineSegmentTo(this->pathContext,tempArr->__get(0),tempArr->__get(1));
            								}
HXDLIN( 194)								while((i < l1)){
HXLINE( 194)									::justPath::ILinePathContext_obj::lineSegmentTo(this->pathContext,tempArr->__get(i),tempArr->__get((i + 1)));
HXDLIN( 194)									i = (i + 2);
            								}
            							}
HXDLIN( 194)							tempArr = ::Array_obj< Float >::__new(0);
HXDLIN( 194)							this->px = x3;
HXDLIN( 194)							this->py = y3;
            						}
HXLINE( 195)						this->controlX = ( (Float)(this->store->s0) );
HXLINE( 196)						this->controlY = ( (Float)(this->store->s1) );
HXLINE( 197)						this->lastX = ( (Float)(endX) );
HXLINE( 198)						this->lastY = ( (Float)(endY) );
            					}
            					else {
HXLINE( 199)						if ((this->store->l > 4)) {
HXLINE( 200)							while((this->store->l > 3)){
HXLINE( 201)								::justPath::StoreF6 _this = this->store;
HXDLIN( 201)								 ::Dynamic out = _this->s0;
HXDLIN( 201)								if ((_this->l != 0)) {
HXLINE( 201)									_this->s0 = _this->s1;
HXDLIN( 201)									_this->s1 = _this->s2;
HXDLIN( 201)									_this->s2 = _this->s3;
HXDLIN( 201)									_this->s3 = _this->s4;
HXDLIN( 201)									_this->s4 = _this->s5;
HXDLIN( 201)									_this->s5 = null();
HXDLIN( 201)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 201)										::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 201)										 ::Dynamic out = _this1->s0;
HXDLIN( 201)										if ((_this1->l != 0)) {
HXLINE( 201)											_this1->s0 = _this1->s1;
HXDLIN( 201)											_this1->s1 = _this1->s2;
HXDLIN( 201)											_this1->s2 = _this1->s3;
HXDLIN( 201)											_this1->s3 = _this1->s4;
HXDLIN( 201)											_this1->s4 = _this1->s5;
HXDLIN( 201)											_this1->s5 = null();
HXDLIN( 201)											if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 201)												_this1->s5 = _this1->s6->shift();
            											}
HXDLIN( 201)											_this1->l--;
            										}
HXDLIN( 201)										_this->s5 = out;
            									}
HXDLIN( 201)									_this->l--;
            								}
HXDLIN( 201)								 ::Dynamic firstX = out;
HXLINE( 202)								::justPath::StoreF6 _this1 = this->store;
HXDLIN( 202)								 ::Dynamic out1 = _this1->s0;
HXDLIN( 202)								if ((_this1->l != 0)) {
HXLINE( 202)									_this1->s0 = _this1->s1;
HXDLIN( 202)									_this1->s1 = _this1->s2;
HXDLIN( 202)									_this1->s2 = _this1->s3;
HXDLIN( 202)									_this1->s3 = _this1->s4;
HXDLIN( 202)									_this1->s4 = _this1->s5;
HXDLIN( 202)									_this1->s5 = null();
HXDLIN( 202)									if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 202)										::justPath::StoreF6 _this = _this1->s6;
HXDLIN( 202)										 ::Dynamic out = _this->s0;
HXDLIN( 202)										if ((_this->l != 0)) {
HXLINE( 202)											_this->s0 = _this->s1;
HXDLIN( 202)											_this->s1 = _this->s2;
HXDLIN( 202)											_this->s2 = _this->s3;
HXDLIN( 202)											_this->s3 = _this->s4;
HXDLIN( 202)											_this->s4 = _this->s5;
HXDLIN( 202)											_this->s5 = null();
HXDLIN( 202)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 202)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 202)											_this->l--;
            										}
HXDLIN( 202)										_this1->s5 = out;
            									}
HXDLIN( 202)									_this1->l--;
            								}
HXDLIN( 202)								 ::Dynamic firstY = out1;
HXLINE( 203)								this->controlX = ((( (Float)(2) ) * this->lastX) - this->controlX);
HXLINE( 204)								this->controlY = ((( (Float)(2) ) * this->lastY) - this->controlY);
HXLINE( 205)								::justPath::StoreF6 _this2 = this->store;
HXDLIN( 205)								 ::Dynamic out2 = _this2->s0;
HXDLIN( 205)								if ((_this2->l != 0)) {
HXLINE( 205)									_this2->s0 = _this2->s1;
HXDLIN( 205)									_this2->s1 = _this2->s2;
HXDLIN( 205)									_this2->s2 = _this2->s3;
HXDLIN( 205)									_this2->s3 = _this2->s4;
HXDLIN( 205)									_this2->s4 = _this2->s5;
HXDLIN( 205)									_this2->s5 = null();
HXDLIN( 205)									if (::hx::IsNotNull( _this2->s6 )) {
HXLINE( 205)										::justPath::StoreF6 _this = _this2->s6;
HXDLIN( 205)										 ::Dynamic out = _this->s0;
HXDLIN( 205)										if ((_this->l != 0)) {
HXLINE( 205)											_this->s0 = _this->s1;
HXDLIN( 205)											_this->s1 = _this->s2;
HXDLIN( 205)											_this->s2 = _this->s3;
HXDLIN( 205)											_this->s3 = _this->s4;
HXDLIN( 205)											_this->s4 = _this->s5;
HXDLIN( 205)											_this->s5 = null();
HXDLIN( 205)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 205)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 205)											_this->l--;
            										}
HXDLIN( 205)										_this2->s5 = out;
            									}
HXDLIN( 205)									_this2->l--;
            								}
HXDLIN( 205)								this->lastX = ( (Float)(out2) );
HXLINE( 206)								::justPath::StoreF6 _this3 = this->store;
HXDLIN( 206)								 ::Dynamic out3 = _this3->s0;
HXDLIN( 206)								if ((_this3->l != 0)) {
HXLINE( 206)									_this3->s0 = _this3->s1;
HXDLIN( 206)									_this3->s1 = _this3->s2;
HXDLIN( 206)									_this3->s2 = _this3->s3;
HXDLIN( 206)									_this3->s3 = _this3->s4;
HXDLIN( 206)									_this3->s4 = _this3->s5;
HXDLIN( 206)									_this3->s5 = null();
HXDLIN( 206)									if (::hx::IsNotNull( _this3->s6 )) {
HXLINE( 206)										::justPath::StoreF6 _this = _this3->s6;
HXDLIN( 206)										 ::Dynamic out = _this->s0;
HXDLIN( 206)										if ((_this->l != 0)) {
HXLINE( 206)											_this->s0 = _this->s1;
HXDLIN( 206)											_this->s1 = _this->s2;
HXDLIN( 206)											_this->s2 = _this->s3;
HXDLIN( 206)											_this->s3 = _this->s4;
HXDLIN( 206)											_this->s4 = _this->s5;
HXDLIN( 206)											_this->s5 = null();
HXDLIN( 206)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 206)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 206)											_this->l--;
            										}
HXDLIN( 206)										_this3->s5 = out;
            									}
HXDLIN( 206)									_this3->l--;
            								}
HXDLIN( 206)								this->lastY = ( (Float)(out3) );
HXLINE( 207)								{
HXLINE( 207)									Float x1 = this->controlX;
HXDLIN( 207)									Float y1 = this->controlY;
HXDLIN( 207)									Float x2 = ( (Float)(firstX) );
HXDLIN( 207)									Float y2 = ( (Float)(firstY) );
HXDLIN( 207)									Float x3 = this->lastX;
HXDLIN( 207)									Float y3 = this->lastY;
HXDLIN( 207)									::Array< Float > tempArr = ::Array_obj< Float >::__new(0);
HXDLIN( 207)									{
HXLINE( 207)										Float ax = this->px;
HXDLIN( 207)										Float ay = this->py;
HXDLIN( 207)										Float x = (ax - x1);
HXDLIN( 207)										Float y = (ay - y1);
HXDLIN( 207)										Float x4 = (x1 - x2);
HXDLIN( 207)										Float y4 = (y1 - y2);
HXDLIN( 207)										Float x5 = (x2 - x3);
HXDLIN( 207)										Float y5 = (y2 - y3);
HXDLIN( 207)										Float approxDistance = ((::Math_obj::sqrt(((x * x) + (y * y))) + ::Math_obj::sqrt(((x4 * x4) + (y4 * y4)))) + ::Math_obj::sqrt(((x5 * x5) + (y5 * y5))));
HXDLIN( 207)										if ((approxDistance == 0)) {
HXLINE( 207)											approxDistance = ((Float)0.000001);
            										}
HXDLIN( 207)										Float step = ::Math_obj::min((( (Float)(1) ) / (approxDistance * ((Float)0.707))),((Float)0.03));
HXDLIN( 207)										int l = tempArr->length;
HXDLIN( 207)										l = (l + 1);
HXDLIN( 207)										tempArr[(l - 1)] = ax;
HXDLIN( 207)										l = (l + 1);
HXDLIN( 207)										tempArr[(l - 1)] = ay;
HXDLIN( 207)										Float t = step;
HXDLIN( 207)										while((t < ((Float)1.))){
HXLINE( 207)											l = (l + 1);
HXDLIN( 207)											Float u = (( (Float)(1) ) - t);
HXDLIN( 207)											tempArr[(l - 1)] = ((((::Math_obj::pow(u,( (Float)(3) )) * ax) + (((( (Float)(3) ) * ::Math_obj::pow(u,( (Float)(2) ))) * t) * x1)) + (((( (Float)(3) ) * u) * ::Math_obj::pow(t,( (Float)(2) ))) * x2)) + (::Math_obj::pow(t,( (Float)(3) )) * x3));
HXDLIN( 207)											l = (l + 1);
HXDLIN( 207)											Float u1 = (( (Float)(1) ) - t);
HXDLIN( 207)											tempArr[(l - 1)] = ((((::Math_obj::pow(u1,( (Float)(3) )) * ay) + (((( (Float)(3) ) * ::Math_obj::pow(u1,( (Float)(2) ))) * t) * y1)) + (((( (Float)(3) ) * u1) * ::Math_obj::pow(t,( (Float)(2) ))) * y2)) + (::Math_obj::pow(t,( (Float)(3) )) * y3));
HXDLIN( 207)											t = (t + step);
            										}
HXDLIN( 207)										l = (l + 1);
HXDLIN( 207)										tempArr[(l - 1)] = x3;
HXDLIN( 207)										l = (l + 1);
HXDLIN( 207)										tempArr[(l - 1)] = y3;
            									}
HXDLIN( 207)									::haxe::Log_obj::trace(tempArr,::hx::SourceInfo(HX_("justPath/SvgLinePath.hx",5f,c6,70,0f),512,HX_("justPath.SvgLinePath",20,f0,4a,08),HX_("curveTo",0a,60,88,ce)));
HXDLIN( 207)									{
HXLINE( 207)										 ::Dynamic withMove = false;
HXDLIN( 207)										if (::hx::IsNull( withMove )) {
HXLINE( 207)											withMove = true;
            										}
HXDLIN( 207)										int l1 = tempArr->length;
HXDLIN( 207)										int i = 2;
HXDLIN( 207)										if (( (bool)(withMove) )) {
HXLINE( 207)											::justPath::ILinePathContext_obj::moveTo(this->pathContext,tempArr->__get(0),tempArr->__get(1));
            										}
            										else {
HXLINE( 207)											::justPath::ILinePathContext_obj::lineSegmentTo(this->pathContext,tempArr->__get(0),tempArr->__get(1));
            										}
HXDLIN( 207)										while((i < l1)){
HXLINE( 207)											::justPath::ILinePathContext_obj::lineSegmentTo(this->pathContext,tempArr->__get(i),tempArr->__get((i + 1)));
HXDLIN( 207)											i = (i + 2);
            										}
            									}
HXDLIN( 207)									tempArr = ::Array_obj< Float >::__new(0);
HXDLIN( 207)									this->px = x3;
HXDLIN( 207)									this->py = y3;
            								}
HXLINE( 208)								this->controlX = ( (Float)(firstX) );
HXLINE( 209)								this->controlY = ( (Float)(firstY) );
            							}
            						}
            					}
            				}
            				break;
            				case (int)84: {
HXLINE( 276)					{
HXLINE( 276)						{
HXLINE( 276)							::justPath::StoreF6 _this = this->store;
HXDLIN( 276)							_this->l = 0;
HXDLIN( 276)							_this->s0 = null();
HXDLIN( 276)							_this->s1 = null();
HXDLIN( 276)							_this->s2 = null();
HXDLIN( 276)							_this->s3 = null();
HXDLIN( 276)							_this->s4 = null();
HXDLIN( 276)							_this->s5 = null();
HXDLIN( 276)							_this->s6 = null();
            						}
HXDLIN( 276)						this->c = this->str.cca(this->pos++);
HXDLIN( 276)						::String temp = HX_("",00,00,00,00);
HXDLIN( 276)						bool exit = false;
HXDLIN( 276)						while(true){
HXLINE( 276)							switch((int)(this->c)){
            								case (int)32: case (int)44: {
HXLINE( 276)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 276)										if (((this->store->l & 1) == 0)) {
HXLINE( 276)											::justPath::StoreF6 _this = this->store;
HXDLIN( 276)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 276)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 276)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 276)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 276)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 276)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 276)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 276)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 276)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 276)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 276)													{
HXLINE( 276)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 276)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 276)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 276)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 276)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 276)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 276)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 276)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 276)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 276)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 276)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 276)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 276)											_this->l++;
            										}
            										else {
HXLINE( 276)											::justPath::StoreF6 _this = this->store;
HXDLIN( 276)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 276)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 276)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 276)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 276)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 276)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 276)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 276)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 276)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 276)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 276)													{
HXLINE( 276)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 276)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 276)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 276)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 276)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 276)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 276)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 276)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 276)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 276)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 276)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 276)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 276)											_this->l++;
            										}
HXDLIN( 276)										temp = HX_("",00,00,00,00);
            									}
            								}
            								break;
            								case (int)45: {
HXLINE( 276)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 276)										if (((this->store->l & 1) == 0)) {
HXLINE( 276)											::justPath::StoreF6 _this = this->store;
HXDLIN( 276)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 276)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 276)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 276)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 276)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 276)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 276)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 276)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 276)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 276)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 276)													{
HXLINE( 276)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 276)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 276)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 276)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 276)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 276)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 276)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 276)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 276)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 276)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 276)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 276)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 276)											_this->l++;
            										}
            										else {
HXLINE( 276)											::justPath::StoreF6 _this = this->store;
HXDLIN( 276)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 276)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 276)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 276)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 276)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 276)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 276)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 276)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 276)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 276)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 276)													{
HXLINE( 276)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 276)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 276)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 276)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 276)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 276)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 276)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 276)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 276)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 276)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 276)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 276)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 276)											_this->l++;
            										}
            									}
HXDLIN( 276)									temp = HX_("-",2d,00,00,00);
            								}
            								break;
            								case (int)46: {
HXLINE( 276)									temp = (temp + HX_(".",2e,00,00,00));
            								}
            								break;
            								case (int)48: {
HXLINE( 276)									temp = (temp + HX_("0",30,00,00,00));
            								}
            								break;
            								case (int)49: {
HXLINE( 276)									temp = (temp + HX_("1",31,00,00,00));
            								}
            								break;
            								case (int)50: {
HXLINE( 276)									temp = (temp + HX_("2",32,00,00,00));
            								}
            								break;
            								case (int)51: {
HXLINE( 276)									temp = (temp + HX_("3",33,00,00,00));
            								}
            								break;
            								case (int)52: {
HXLINE( 276)									temp = (temp + HX_("4",34,00,00,00));
            								}
            								break;
            								case (int)53: {
HXLINE( 276)									temp = (temp + HX_("5",35,00,00,00));
            								}
            								break;
            								case (int)54: {
HXLINE( 276)									temp = (temp + HX_("6",36,00,00,00));
            								}
            								break;
            								case (int)55: {
HXLINE( 276)									temp = (temp + HX_("7",37,00,00,00));
            								}
            								break;
            								case (int)56: {
HXLINE( 276)									temp = (temp + HX_("8",38,00,00,00));
            								}
            								break;
            								case (int)57: {
HXLINE( 276)									temp = (temp + HX_("9",39,00,00,00));
            								}
            								break;
            								default:{
HXLINE( 276)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 276)										if (((this->store->l & 1) == 0)) {
HXLINE( 276)											::justPath::StoreF6 _this = this->store;
HXDLIN( 276)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 276)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 276)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 276)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 276)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 276)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 276)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 276)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 276)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 276)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 276)													{
HXLINE( 276)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 276)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 276)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 276)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 276)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 276)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 276)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 276)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 276)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 276)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 276)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 276)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 276)											_this->l++;
            										}
            										else {
HXLINE( 276)											::justPath::StoreF6 _this = this->store;
HXDLIN( 276)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 276)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 276)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 276)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 276)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 276)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 276)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 276)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 276)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 276)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 276)													{
HXLINE( 276)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 276)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 276)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 276)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 276)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 276)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 276)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 276)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 276)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 276)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 276)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 276)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 276)											_this->l++;
            										}
HXDLIN( 276)										temp = HX_("",00,00,00,00);
            									}
HXDLIN( 276)									this->pos--;
HXDLIN( 276)									exit = true;
            								}
            							}
HXDLIN( 276)							if (exit) {
HXLINE( 276)								goto _hx_goto_28;
            							}
HXDLIN( 276)							this->c = this->str.cca(this->pos++);
            						}
            						_hx_goto_28:;
            					}
HXLINE( 278)					if ((this->store->l == 2)) {
HXLINE( 279)						this->controlX = ((( (Float)(2) ) * this->lastX) - this->controlX);
HXLINE( 280)						this->controlY = ((( (Float)(2) ) * this->lastY) - this->controlY);
HXLINE( 281)						this->lastX = ( (Float)(this->store->s0) );
HXLINE( 282)						this->lastY = ( (Float)(this->store->s1) );
HXLINE( 283)						{
HXLINE( 283)							Float x1 = this->controlX;
HXDLIN( 283)							Float y1 = this->controlY;
HXDLIN( 283)							Float x2 = this->lastX;
HXDLIN( 283)							Float y2 = this->lastY;
HXDLIN( 283)							::Array< Float > tempArr = ::Array_obj< Float >::__new(0);
HXDLIN( 283)							{
HXLINE( 283)								Float ax = this->px;
HXDLIN( 283)								Float ay = this->py;
HXDLIN( 283)								Float x = (ax - x1);
HXDLIN( 283)								Float y = (ay - y1);
HXDLIN( 283)								Float x3 = (x1 - x2);
HXDLIN( 283)								Float y3 = (y1 - y2);
HXDLIN( 283)								Float approxDistance = (::Math_obj::sqrt(((x * x) + (y * y))) + ::Math_obj::sqrt(((x3 * x3) + (y3 * y3))));
HXDLIN( 283)								if ((approxDistance == 0)) {
HXLINE( 283)									approxDistance = ((Float)0.000001);
            								}
HXDLIN( 283)								Float step = ::Math_obj::min((( (Float)(1) ) / (approxDistance * ((Float)0.707))),::justPath::_CurveMath::CurveMath_Fields__obj::quadStep);
HXDLIN( 283)								int l = tempArr->length;
HXDLIN( 283)								l = (l + 1);
HXDLIN( 283)								tempArr[(l - 1)] = ax;
HXDLIN( 283)								l = (l + 1);
HXDLIN( 283)								tempArr[(l - 1)] = ay;
HXDLIN( 283)								Float t = step;
HXDLIN( 283)								while((t < ((Float)1.))){
HXLINE( 283)									l = (l + 1);
HXDLIN( 283)									Float u = (( (Float)(1) ) - t);
HXDLIN( 283)									tempArr[(l - 1)] = (((::Math_obj::pow(u,( (Float)(2) )) * ax) + (((( (Float)(2) ) * u) * t) * x1)) + (::Math_obj::pow(t,( (Float)(2) )) * x2));
HXDLIN( 283)									l = (l + 1);
HXDLIN( 283)									Float u1 = (( (Float)(1) ) - t);
HXDLIN( 283)									tempArr[(l - 1)] = (((::Math_obj::pow(u1,( (Float)(2) )) * ay) + (((( (Float)(2) ) * u1) * t) * y1)) + (::Math_obj::pow(t,( (Float)(2) )) * y2));
HXDLIN( 283)									t = (t + step);
            								}
HXDLIN( 283)								l = (l + 1);
HXDLIN( 283)								tempArr[(l - 1)] = x2;
HXDLIN( 283)								l = (l + 1);
HXDLIN( 283)								tempArr[(l - 1)] = y2;
            							}
HXDLIN( 283)							::haxe::Log_obj::trace(tempArr,::hx::SourceInfo(HX_("justPath/SvgLinePath.hx",5f,c6,70,0f),502,HX_("justPath.SvgLinePath",20,f0,4a,08),HX_("quadTo",22,82,9f,cc)));
HXDLIN( 283)							{
HXLINE( 283)								 ::Dynamic withMove = false;
HXDLIN( 283)								if (::hx::IsNull( withMove )) {
HXLINE( 283)									withMove = true;
            								}
HXDLIN( 283)								int l1 = tempArr->length;
HXDLIN( 283)								int i = 2;
HXDLIN( 283)								if (( (bool)(withMove) )) {
HXLINE( 283)									::justPath::ILinePathContext_obj::moveTo(this->pathContext,tempArr->__get(0),tempArr->__get(1));
            								}
            								else {
HXLINE( 283)									::justPath::ILinePathContext_obj::lineSegmentTo(this->pathContext,tempArr->__get(0),tempArr->__get(1));
            								}
HXDLIN( 283)								while((i < l1)){
HXLINE( 283)									::justPath::ILinePathContext_obj::lineSegmentTo(this->pathContext,tempArr->__get(i),tempArr->__get((i + 1)));
HXDLIN( 283)									i = (i + 2);
            								}
            							}
HXDLIN( 283)							tempArr = ::Array_obj< Float >::__new(0);
HXDLIN( 283)							this->px = x2;
HXDLIN( 283)							this->py = y2;
            						}
            					}
            					else {
HXLINE( 284)						if ((this->store->l > 2)) {
HXLINE( 285)							while((this->store->l > 1)){
HXLINE( 286)								this->controlX = ((( (Float)(2) ) * this->lastX) - this->controlX);
HXLINE( 287)								this->controlY = ((( (Float)(2) ) * this->lastY) - this->controlY);
HXLINE( 288)								::justPath::StoreF6 _this = this->store;
HXDLIN( 288)								 ::Dynamic out = _this->s0;
HXDLIN( 288)								if ((_this->l != 0)) {
HXLINE( 288)									_this->s0 = _this->s1;
HXDLIN( 288)									_this->s1 = _this->s2;
HXDLIN( 288)									_this->s2 = _this->s3;
HXDLIN( 288)									_this->s3 = _this->s4;
HXDLIN( 288)									_this->s4 = _this->s5;
HXDLIN( 288)									_this->s5 = null();
HXDLIN( 288)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 288)										::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 288)										 ::Dynamic out = _this1->s0;
HXDLIN( 288)										if ((_this1->l != 0)) {
HXLINE( 288)											_this1->s0 = _this1->s1;
HXDLIN( 288)											_this1->s1 = _this1->s2;
HXDLIN( 288)											_this1->s2 = _this1->s3;
HXDLIN( 288)											_this1->s3 = _this1->s4;
HXDLIN( 288)											_this1->s4 = _this1->s5;
HXDLIN( 288)											_this1->s5 = null();
HXDLIN( 288)											if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 288)												_this1->s5 = _this1->s6->shift();
            											}
HXDLIN( 288)											_this1->l--;
            										}
HXDLIN( 288)										_this->s5 = out;
            									}
HXDLIN( 288)									_this->l--;
            								}
HXDLIN( 288)								this->lastX = ( (Float)(out) );
HXLINE( 289)								::justPath::StoreF6 _this1 = this->store;
HXDLIN( 289)								 ::Dynamic out1 = _this1->s0;
HXDLIN( 289)								if ((_this1->l != 0)) {
HXLINE( 289)									_this1->s0 = _this1->s1;
HXDLIN( 289)									_this1->s1 = _this1->s2;
HXDLIN( 289)									_this1->s2 = _this1->s3;
HXDLIN( 289)									_this1->s3 = _this1->s4;
HXDLIN( 289)									_this1->s4 = _this1->s5;
HXDLIN( 289)									_this1->s5 = null();
HXDLIN( 289)									if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 289)										::justPath::StoreF6 _this = _this1->s6;
HXDLIN( 289)										 ::Dynamic out = _this->s0;
HXDLIN( 289)										if ((_this->l != 0)) {
HXLINE( 289)											_this->s0 = _this->s1;
HXDLIN( 289)											_this->s1 = _this->s2;
HXDLIN( 289)											_this->s2 = _this->s3;
HXDLIN( 289)											_this->s3 = _this->s4;
HXDLIN( 289)											_this->s4 = _this->s5;
HXDLIN( 289)											_this->s5 = null();
HXDLIN( 289)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 289)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 289)											_this->l--;
            										}
HXDLIN( 289)										_this1->s5 = out;
            									}
HXDLIN( 289)									_this1->l--;
            								}
HXDLIN( 289)								this->lastY = ( (Float)(out1) );
HXLINE( 290)								{
HXLINE( 290)									Float x1 = this->controlX;
HXDLIN( 290)									Float y1 = this->controlY;
HXDLIN( 290)									Float x2 = this->lastX;
HXDLIN( 290)									Float y2 = this->lastY;
HXDLIN( 290)									::Array< Float > tempArr = ::Array_obj< Float >::__new(0);
HXDLIN( 290)									{
HXLINE( 290)										Float ax = this->px;
HXDLIN( 290)										Float ay = this->py;
HXDLIN( 290)										Float x = (ax - x1);
HXDLIN( 290)										Float y = (ay - y1);
HXDLIN( 290)										Float x3 = (x1 - x2);
HXDLIN( 290)										Float y3 = (y1 - y2);
HXDLIN( 290)										Float approxDistance = (::Math_obj::sqrt(((x * x) + (y * y))) + ::Math_obj::sqrt(((x3 * x3) + (y3 * y3))));
HXDLIN( 290)										if ((approxDistance == 0)) {
HXLINE( 290)											approxDistance = ((Float)0.000001);
            										}
HXDLIN( 290)										Float step = ::Math_obj::min((( (Float)(1) ) / (approxDistance * ((Float)0.707))),::justPath::_CurveMath::CurveMath_Fields__obj::quadStep);
HXDLIN( 290)										int l = tempArr->length;
HXDLIN( 290)										l = (l + 1);
HXDLIN( 290)										tempArr[(l - 1)] = ax;
HXDLIN( 290)										l = (l + 1);
HXDLIN( 290)										tempArr[(l - 1)] = ay;
HXDLIN( 290)										Float t = step;
HXDLIN( 290)										while((t < ((Float)1.))){
HXLINE( 290)											l = (l + 1);
HXDLIN( 290)											Float u = (( (Float)(1) ) - t);
HXDLIN( 290)											tempArr[(l - 1)] = (((::Math_obj::pow(u,( (Float)(2) )) * ax) + (((( (Float)(2) ) * u) * t) * x1)) + (::Math_obj::pow(t,( (Float)(2) )) * x2));
HXDLIN( 290)											l = (l + 1);
HXDLIN( 290)											Float u1 = (( (Float)(1) ) - t);
HXDLIN( 290)											tempArr[(l - 1)] = (((::Math_obj::pow(u1,( (Float)(2) )) * ay) + (((( (Float)(2) ) * u1) * t) * y1)) + (::Math_obj::pow(t,( (Float)(2) )) * y2));
HXDLIN( 290)											t = (t + step);
            										}
HXDLIN( 290)										l = (l + 1);
HXDLIN( 290)										tempArr[(l - 1)] = x2;
HXDLIN( 290)										l = (l + 1);
HXDLIN( 290)										tempArr[(l - 1)] = y2;
            									}
HXDLIN( 290)									::haxe::Log_obj::trace(tempArr,::hx::SourceInfo(HX_("justPath/SvgLinePath.hx",5f,c6,70,0f),502,HX_("justPath.SvgLinePath",20,f0,4a,08),HX_("quadTo",22,82,9f,cc)));
HXDLIN( 290)									{
HXLINE( 290)										 ::Dynamic withMove = false;
HXDLIN( 290)										if (::hx::IsNull( withMove )) {
HXLINE( 290)											withMove = true;
            										}
HXDLIN( 290)										int l1 = tempArr->length;
HXDLIN( 290)										int i = 2;
HXDLIN( 290)										if (( (bool)(withMove) )) {
HXLINE( 290)											::justPath::ILinePathContext_obj::moveTo(this->pathContext,tempArr->__get(0),tempArr->__get(1));
            										}
            										else {
HXLINE( 290)											::justPath::ILinePathContext_obj::lineSegmentTo(this->pathContext,tempArr->__get(0),tempArr->__get(1));
            										}
HXDLIN( 290)										while((i < l1)){
HXLINE( 290)											::justPath::ILinePathContext_obj::lineSegmentTo(this->pathContext,tempArr->__get(i),tempArr->__get((i + 1)));
HXDLIN( 290)											i = (i + 2);
            										}
            									}
HXDLIN( 290)									tempArr = ::Array_obj< Float >::__new(0);
HXDLIN( 290)									this->px = x2;
HXDLIN( 290)									this->py = y2;
            								}
            							}
            						}
            					}
            				}
            				break;
            				case (int)86: {
HXLINE( 120)					{
HXLINE( 120)						 ::Dynamic process = false;
HXDLIN( 120)						if (::hx::IsNull( process )) {
HXLINE( 120)							process = true;
            						}
HXDLIN( 120)						{
HXLINE( 120)							::justPath::StoreF6 _this = this->store;
HXDLIN( 120)							_this->l = 0;
HXDLIN( 120)							_this->s0 = null();
HXDLIN( 120)							_this->s1 = null();
HXDLIN( 120)							_this->s2 = null();
HXDLIN( 120)							_this->s3 = null();
HXDLIN( 120)							_this->s4 = null();
HXDLIN( 120)							_this->s5 = null();
HXDLIN( 120)							_this->s6 = null();
            						}
HXDLIN( 120)						this->c = this->str.cca(this->pos++);
HXDLIN( 120)						::String temp = HX_("",00,00,00,00);
HXDLIN( 120)						bool exit = false;
HXDLIN( 120)						while(true){
HXLINE( 120)							switch((int)(this->c)){
            								case (int)32: case (int)44: {
HXLINE( 120)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 120)										if (( (bool)(process) )) {
HXLINE( 120)											if (((this->store->l & 1) == 0)) {
HXLINE( 120)												::justPath::StoreF6 _this = this->store;
HXDLIN( 120)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 120)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE( 120)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE( 120)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE( 120)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE( 120)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE( 120)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE( 120)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE( 120)														if (::hx::IsNull( _this->s6 )) {
HXLINE( 120)															_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN( 120)														{
HXLINE( 120)															::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 120)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE( 120)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE( 120)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE( 120)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE( 120)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE( 120)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE( 120)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE( 120)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE( 120)																		_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN( 120)																	_this1->s6->push(v);
            																}
            															}
HXDLIN( 120)															_this1->l++;
            														}
            													}
            												}
HXDLIN( 120)												_this->l++;
            											}
            											else {
HXLINE( 120)												::justPath::StoreF6 _this = this->store;
HXDLIN( 120)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 120)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE( 120)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE( 120)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE( 120)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE( 120)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE( 120)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE( 120)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE( 120)														if (::hx::IsNull( _this->s6 )) {
HXLINE( 120)															_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN( 120)														{
HXLINE( 120)															::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 120)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE( 120)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE( 120)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE( 120)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE( 120)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE( 120)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE( 120)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE( 120)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE( 120)																		_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN( 120)																	_this1->s6->push(v);
            																}
            															}
HXDLIN( 120)															_this1->l++;
            														}
            													}
            												}
HXDLIN( 120)												_this->l++;
            											}
            										}
            										else {
HXLINE( 120)											::justPath::StoreF6 _this = this->store;
HXDLIN( 120)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 120)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 120)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 120)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 120)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 120)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 120)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 120)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 120)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 120)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 120)													{
HXLINE( 120)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 120)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 120)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 120)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 120)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 120)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 120)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 120)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 120)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 120)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 120)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 120)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 120)											_this->l++;
            										}
HXDLIN( 120)										temp = HX_("",00,00,00,00);
            									}
            								}
            								break;
            								case (int)45: {
HXLINE( 120)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 120)										if (( (bool)(process) )) {
HXLINE( 120)											if (((this->store->l & 1) == 0)) {
HXLINE( 120)												::justPath::StoreF6 _this = this->store;
HXDLIN( 120)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 120)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE( 120)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE( 120)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE( 120)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE( 120)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE( 120)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE( 120)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE( 120)														if (::hx::IsNull( _this->s6 )) {
HXLINE( 120)															_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN( 120)														{
HXLINE( 120)															::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 120)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE( 120)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE( 120)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE( 120)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE( 120)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE( 120)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE( 120)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE( 120)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE( 120)																		_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN( 120)																	_this1->s6->push(v);
            																}
            															}
HXDLIN( 120)															_this1->l++;
            														}
            													}
            												}
HXDLIN( 120)												_this->l++;
            											}
            											else {
HXLINE( 120)												::justPath::StoreF6 _this = this->store;
HXDLIN( 120)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 120)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE( 120)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE( 120)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE( 120)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE( 120)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE( 120)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE( 120)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE( 120)														if (::hx::IsNull( _this->s6 )) {
HXLINE( 120)															_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN( 120)														{
HXLINE( 120)															::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 120)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE( 120)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE( 120)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE( 120)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE( 120)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE( 120)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE( 120)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE( 120)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE( 120)																		_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN( 120)																	_this1->s6->push(v);
            																}
            															}
HXDLIN( 120)															_this1->l++;
            														}
            													}
            												}
HXDLIN( 120)												_this->l++;
            											}
            										}
            										else {
HXLINE( 120)											::justPath::StoreF6 _this = this->store;
HXDLIN( 120)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 120)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 120)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 120)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 120)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 120)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 120)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 120)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 120)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 120)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 120)													{
HXLINE( 120)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 120)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 120)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 120)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 120)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 120)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 120)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 120)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 120)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 120)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 120)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 120)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 120)											_this->l++;
            										}
            									}
HXDLIN( 120)									temp = HX_("-",2d,00,00,00);
            								}
            								break;
            								case (int)46: {
HXLINE( 120)									temp = (temp + HX_(".",2e,00,00,00));
            								}
            								break;
            								case (int)48: {
HXLINE( 120)									temp = (temp + HX_("0",30,00,00,00));
            								}
            								break;
            								case (int)49: {
HXLINE( 120)									temp = (temp + HX_("1",31,00,00,00));
            								}
            								break;
            								case (int)50: {
HXLINE( 120)									temp = (temp + HX_("2",32,00,00,00));
            								}
            								break;
            								case (int)51: {
HXLINE( 120)									temp = (temp + HX_("3",33,00,00,00));
            								}
            								break;
            								case (int)52: {
HXLINE( 120)									temp = (temp + HX_("4",34,00,00,00));
            								}
            								break;
            								case (int)53: {
HXLINE( 120)									temp = (temp + HX_("5",35,00,00,00));
            								}
            								break;
            								case (int)54: {
HXLINE( 120)									temp = (temp + HX_("6",36,00,00,00));
            								}
            								break;
            								case (int)55: {
HXLINE( 120)									temp = (temp + HX_("7",37,00,00,00));
            								}
            								break;
            								case (int)56: {
HXLINE( 120)									temp = (temp + HX_("8",38,00,00,00));
            								}
            								break;
            								case (int)57: {
HXLINE( 120)									temp = (temp + HX_("9",39,00,00,00));
            								}
            								break;
            								default:{
HXLINE( 120)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 120)										if (( (bool)(process) )) {
HXLINE( 120)											if (((this->store->l & 1) == 0)) {
HXLINE( 120)												::justPath::StoreF6 _this = this->store;
HXDLIN( 120)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 120)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE( 120)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE( 120)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE( 120)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE( 120)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE( 120)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE( 120)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE( 120)														if (::hx::IsNull( _this->s6 )) {
HXLINE( 120)															_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN( 120)														{
HXLINE( 120)															::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 120)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE( 120)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE( 120)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE( 120)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE( 120)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE( 120)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE( 120)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE( 120)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE( 120)																		_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN( 120)																	_this1->s6->push(v);
            																}
            															}
HXDLIN( 120)															_this1->l++;
            														}
            													}
            												}
HXDLIN( 120)												_this->l++;
            											}
            											else {
HXLINE( 120)												::justPath::StoreF6 _this = this->store;
HXDLIN( 120)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 120)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE( 120)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE( 120)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE( 120)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE( 120)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE( 120)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE( 120)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE( 120)														if (::hx::IsNull( _this->s6 )) {
HXLINE( 120)															_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN( 120)														{
HXLINE( 120)															::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 120)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE( 120)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE( 120)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE( 120)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE( 120)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE( 120)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE( 120)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE( 120)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE( 120)																		_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN( 120)																	_this1->s6->push(v);
            																}
            															}
HXDLIN( 120)															_this1->l++;
            														}
            													}
            												}
HXDLIN( 120)												_this->l++;
            											}
            										}
            										else {
HXLINE( 120)											::justPath::StoreF6 _this = this->store;
HXDLIN( 120)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 120)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 120)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 120)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 120)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 120)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 120)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 120)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 120)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 120)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 120)													{
HXLINE( 120)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 120)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 120)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 120)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 120)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 120)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 120)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 120)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 120)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 120)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 120)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 120)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 120)											_this->l++;
            										}
HXDLIN( 120)										temp = HX_("",00,00,00,00);
            									}
HXDLIN( 120)									this->pos--;
HXDLIN( 120)									exit = true;
            								}
            							}
HXDLIN( 120)							if (exit) {
HXLINE( 120)								goto _hx_goto_34;
            							}
HXDLIN( 120)							this->c = this->str.cca(this->pos++);
            						}
            						_hx_goto_34:;
            					}
HXLINE( 121)					if ((this->store->l == 1)) {
HXLINE( 122)						::justPath::StoreF6 _this = this->store;
HXDLIN( 122)						 ::Dynamic out = _this->s0;
HXDLIN( 122)						if ((_this->l != 0)) {
HXLINE( 122)							_this->s0 = _this->s1;
HXDLIN( 122)							_this->s1 = _this->s2;
HXDLIN( 122)							_this->s2 = _this->s3;
HXDLIN( 122)							_this->s3 = _this->s4;
HXDLIN( 122)							_this->s4 = _this->s5;
HXDLIN( 122)							_this->s5 = null();
HXDLIN( 122)							if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 122)								::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 122)								 ::Dynamic out = _this1->s0;
HXDLIN( 122)								if ((_this1->l != 0)) {
HXLINE( 122)									_this1->s0 = _this1->s1;
HXDLIN( 122)									_this1->s1 = _this1->s2;
HXDLIN( 122)									_this1->s2 = _this1->s3;
HXDLIN( 122)									_this1->s3 = _this1->s4;
HXDLIN( 122)									_this1->s4 = _this1->s5;
HXDLIN( 122)									_this1->s5 = null();
HXDLIN( 122)									if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 122)										_this1->s5 = _this1->s6->shift();
            									}
HXDLIN( 122)									_this1->l--;
            								}
HXDLIN( 122)								_this->s5 = out;
            							}
HXDLIN( 122)							_this->l--;
            						}
HXDLIN( 122)						this->lastY = ( (Float)(out) );
HXLINE( 123)						{
HXLINE( 123)							Float x_ = this->lastX;
HXDLIN( 123)							Float y_ = this->lastY;
HXDLIN( 123)							::justPath::ILinePathContext_obj::lineTo(this->pathContext,x_,y_);
HXDLIN( 123)							this->px = x_;
HXDLIN( 123)							this->py = y_;
            						}
            					}
            					else {
HXLINE( 124)						if ((this->store->l > 1)) {
HXLINE( 125)							while((this->store->l > 0)){
HXLINE( 126)								::justPath::StoreF6 _this = this->store;
HXDLIN( 126)								 ::Dynamic out = _this->s0;
HXDLIN( 126)								if ((_this->l != 0)) {
HXLINE( 126)									_this->s0 = _this->s1;
HXDLIN( 126)									_this->s1 = _this->s2;
HXDLIN( 126)									_this->s2 = _this->s3;
HXDLIN( 126)									_this->s3 = _this->s4;
HXDLIN( 126)									_this->s4 = _this->s5;
HXDLIN( 126)									_this->s5 = null();
HXDLIN( 126)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 126)										::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 126)										 ::Dynamic out = _this1->s0;
HXDLIN( 126)										if ((_this1->l != 0)) {
HXLINE( 126)											_this1->s0 = _this1->s1;
HXDLIN( 126)											_this1->s1 = _this1->s2;
HXDLIN( 126)											_this1->s2 = _this1->s3;
HXDLIN( 126)											_this1->s3 = _this1->s4;
HXDLIN( 126)											_this1->s4 = _this1->s5;
HXDLIN( 126)											_this1->s5 = null();
HXDLIN( 126)											if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 126)												_this1->s5 = _this1->s6->shift();
            											}
HXDLIN( 126)											_this1->l--;
            										}
HXDLIN( 126)										_this->s5 = out;
            									}
HXDLIN( 126)									_this->l--;
            								}
HXDLIN( 126)								this->lastY = ( (Float)(out) );
HXLINE( 127)								{
HXLINE( 127)									Float x_ = this->lastX;
HXDLIN( 127)									Float y_ = this->lastY;
HXDLIN( 127)									::justPath::ILinePathContext_obj::lineTo(this->pathContext,x_,y_);
HXDLIN( 127)									this->px = x_;
HXDLIN( 127)									this->py = y_;
            								}
            							}
            						}
            					}
            				}
            				break;
            				case (int)97: {
HXLINE( 344)					{
HXLINE( 344)						{
HXLINE( 344)							::justPath::StoreF6 _this = this->store;
HXDLIN( 344)							_this->l = 0;
HXDLIN( 344)							_this->s0 = null();
HXDLIN( 344)							_this->s1 = null();
HXDLIN( 344)							_this->s2 = null();
HXDLIN( 344)							_this->s3 = null();
HXDLIN( 344)							_this->s4 = null();
HXDLIN( 344)							_this->s5 = null();
HXDLIN( 344)							_this->s6 = null();
            						}
HXDLIN( 344)						this->c = this->str.cca(this->pos++);
HXDLIN( 344)						::String temp = HX_("",00,00,00,00);
HXDLIN( 344)						bool exit = false;
HXDLIN( 344)						while(true){
HXLINE( 344)							switch((int)(this->c)){
            								case (int)32: case (int)44: {
HXLINE( 344)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 344)										if (((this->store->l & 1) == 0)) {
HXLINE( 344)											::justPath::StoreF6 _this = this->store;
HXDLIN( 344)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 344)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 344)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 344)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 344)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 344)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 344)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 344)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 344)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 344)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 344)													{
HXLINE( 344)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 344)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 344)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 344)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 344)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 344)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 344)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 344)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 344)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 344)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 344)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 344)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 344)											_this->l++;
            										}
            										else {
HXLINE( 344)											::justPath::StoreF6 _this = this->store;
HXDLIN( 344)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 344)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 344)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 344)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 344)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 344)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 344)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 344)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 344)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 344)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 344)													{
HXLINE( 344)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 344)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 344)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 344)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 344)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 344)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 344)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 344)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 344)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 344)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 344)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 344)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 344)											_this->l++;
            										}
HXDLIN( 344)										temp = HX_("",00,00,00,00);
            									}
            								}
            								break;
            								case (int)45: {
HXLINE( 344)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 344)										if (((this->store->l & 1) == 0)) {
HXLINE( 344)											::justPath::StoreF6 _this = this->store;
HXDLIN( 344)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 344)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 344)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 344)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 344)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 344)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 344)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 344)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 344)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 344)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 344)													{
HXLINE( 344)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 344)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 344)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 344)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 344)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 344)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 344)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 344)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 344)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 344)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 344)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 344)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 344)											_this->l++;
            										}
            										else {
HXLINE( 344)											::justPath::StoreF6 _this = this->store;
HXDLIN( 344)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 344)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 344)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 344)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 344)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 344)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 344)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 344)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 344)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 344)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 344)													{
HXLINE( 344)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 344)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 344)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 344)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 344)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 344)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 344)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 344)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 344)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 344)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 344)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 344)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 344)											_this->l++;
            										}
            									}
HXDLIN( 344)									temp = HX_("-",2d,00,00,00);
            								}
            								break;
            								case (int)46: {
HXLINE( 344)									temp = (temp + HX_(".",2e,00,00,00));
            								}
            								break;
            								case (int)48: {
HXLINE( 344)									temp = (temp + HX_("0",30,00,00,00));
            								}
            								break;
            								case (int)49: {
HXLINE( 344)									temp = (temp + HX_("1",31,00,00,00));
            								}
            								break;
            								case (int)50: {
HXLINE( 344)									temp = (temp + HX_("2",32,00,00,00));
            								}
            								break;
            								case (int)51: {
HXLINE( 344)									temp = (temp + HX_("3",33,00,00,00));
            								}
            								break;
            								case (int)52: {
HXLINE( 344)									temp = (temp + HX_("4",34,00,00,00));
            								}
            								break;
            								case (int)53: {
HXLINE( 344)									temp = (temp + HX_("5",35,00,00,00));
            								}
            								break;
            								case (int)54: {
HXLINE( 344)									temp = (temp + HX_("6",36,00,00,00));
            								}
            								break;
            								case (int)55: {
HXLINE( 344)									temp = (temp + HX_("7",37,00,00,00));
            								}
            								break;
            								case (int)56: {
HXLINE( 344)									temp = (temp + HX_("8",38,00,00,00));
            								}
            								break;
            								case (int)57: {
HXLINE( 344)									temp = (temp + HX_("9",39,00,00,00));
            								}
            								break;
            								default:{
HXLINE( 344)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 344)										if (((this->store->l & 1) == 0)) {
HXLINE( 344)											::justPath::StoreF6 _this = this->store;
HXDLIN( 344)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 344)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 344)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 344)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 344)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 344)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 344)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 344)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 344)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 344)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 344)													{
HXLINE( 344)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 344)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 344)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 344)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 344)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 344)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 344)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 344)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 344)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 344)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 344)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 344)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 344)											_this->l++;
            										}
            										else {
HXLINE( 344)											::justPath::StoreF6 _this = this->store;
HXDLIN( 344)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 344)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 344)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 344)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 344)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 344)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 344)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 344)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 344)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 344)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 344)													{
HXLINE( 344)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 344)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 344)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 344)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 344)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 344)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 344)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 344)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 344)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 344)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 344)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 344)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 344)											_this->l++;
            										}
HXDLIN( 344)										temp = HX_("",00,00,00,00);
            									}
HXDLIN( 344)									this->pos--;
HXDLIN( 344)									exit = true;
            								}
            							}
HXDLIN( 344)							if (exit) {
HXLINE( 344)								goto _hx_goto_36;
            							}
HXDLIN( 344)							this->c = this->str.cca(this->pos++);
            						}
            						_hx_goto_36:;
            					}
HXLINE( 345)					if ((this->store->l == 7)) {
HXLINE( 346)						Float sx = this->lastX;
HXLINE( 347)						Float sy = this->lastY;
HXLINE( 348)						::justPath::StoreF6 _this = this->store;
HXDLIN( 348)						 ::Dynamic out = _this->s0;
HXDLIN( 348)						if ((_this->l != 0)) {
HXLINE( 348)							_this->s0 = _this->s1;
HXDLIN( 348)							_this->s1 = _this->s2;
HXDLIN( 348)							_this->s2 = _this->s3;
HXDLIN( 348)							_this->s3 = _this->s4;
HXDLIN( 348)							_this->s4 = _this->s5;
HXDLIN( 348)							_this->s5 = null();
HXDLIN( 348)							if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 348)								::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 348)								 ::Dynamic out = _this1->s0;
HXDLIN( 348)								if ((_this1->l != 0)) {
HXLINE( 348)									_this1->s0 = _this1->s1;
HXDLIN( 348)									_this1->s1 = _this1->s2;
HXDLIN( 348)									_this1->s2 = _this1->s3;
HXDLIN( 348)									_this1->s3 = _this1->s4;
HXDLIN( 348)									_this1->s4 = _this1->s5;
HXDLIN( 348)									_this1->s5 = null();
HXDLIN( 348)									if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 348)										_this1->s5 = _this1->s6->shift();
            									}
HXDLIN( 348)									_this1->l--;
            								}
HXDLIN( 348)								_this->s5 = out;
            							}
HXDLIN( 348)							_this->l--;
            						}
HXDLIN( 348)						 ::Dynamic xr = out;
HXLINE( 349)						::justPath::StoreF6 _this1 = this->store;
HXDLIN( 349)						 ::Dynamic out1 = _this1->s0;
HXDLIN( 349)						if ((_this1->l != 0)) {
HXLINE( 349)							_this1->s0 = _this1->s1;
HXDLIN( 349)							_this1->s1 = _this1->s2;
HXDLIN( 349)							_this1->s2 = _this1->s3;
HXDLIN( 349)							_this1->s3 = _this1->s4;
HXDLIN( 349)							_this1->s4 = _this1->s5;
HXDLIN( 349)							_this1->s5 = null();
HXDLIN( 349)							if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 349)								::justPath::StoreF6 _this = _this1->s6;
HXDLIN( 349)								 ::Dynamic out = _this->s0;
HXDLIN( 349)								if ((_this->l != 0)) {
HXLINE( 349)									_this->s0 = _this->s1;
HXDLIN( 349)									_this->s1 = _this->s2;
HXDLIN( 349)									_this->s2 = _this->s3;
HXDLIN( 349)									_this->s3 = _this->s4;
HXDLIN( 349)									_this->s4 = _this->s5;
HXDLIN( 349)									_this->s5 = null();
HXDLIN( 349)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 349)										_this->s5 = _this->s6->shift();
            									}
HXDLIN( 349)									_this->l--;
            								}
HXDLIN( 349)								_this1->s5 = out;
            							}
HXDLIN( 349)							_this1->l--;
            						}
HXDLIN( 349)						 ::Dynamic yr = out1;
HXLINE( 350)						::justPath::StoreF6 _this2 = this->store;
HXDLIN( 350)						 ::Dynamic out2 = _this2->s0;
HXDLIN( 350)						if ((_this2->l != 0)) {
HXLINE( 350)							_this2->s0 = _this2->s1;
HXDLIN( 350)							_this2->s1 = _this2->s2;
HXDLIN( 350)							_this2->s2 = _this2->s3;
HXDLIN( 350)							_this2->s3 = _this2->s4;
HXDLIN( 350)							_this2->s4 = _this2->s5;
HXDLIN( 350)							_this2->s5 = null();
HXDLIN( 350)							if (::hx::IsNotNull( _this2->s6 )) {
HXLINE( 350)								::justPath::StoreF6 _this = _this2->s6;
HXDLIN( 350)								 ::Dynamic out = _this->s0;
HXDLIN( 350)								if ((_this->l != 0)) {
HXLINE( 350)									_this->s0 = _this->s1;
HXDLIN( 350)									_this->s1 = _this->s2;
HXDLIN( 350)									_this->s2 = _this->s3;
HXDLIN( 350)									_this->s3 = _this->s4;
HXDLIN( 350)									_this->s4 = _this->s5;
HXDLIN( 350)									_this->s5 = null();
HXDLIN( 350)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 350)										_this->s5 = _this->s6->shift();
            									}
HXDLIN( 350)									_this->l--;
            								}
HXDLIN( 350)								_this2->s5 = out;
            							}
HXDLIN( 350)							_this2->l--;
            						}
HXDLIN( 350)						 ::Dynamic phi = out2;
HXLINE( 351)						::justPath::StoreF6 _this3 = this->store;
HXDLIN( 351)						 ::Dynamic out3 = _this3->s0;
HXDLIN( 351)						if ((_this3->l != 0)) {
HXLINE( 351)							_this3->s0 = _this3->s1;
HXDLIN( 351)							_this3->s1 = _this3->s2;
HXDLIN( 351)							_this3->s2 = _this3->s3;
HXDLIN( 351)							_this3->s3 = _this3->s4;
HXDLIN( 351)							_this3->s4 = _this3->s5;
HXDLIN( 351)							_this3->s5 = null();
HXDLIN( 351)							if (::hx::IsNotNull( _this3->s6 )) {
HXLINE( 351)								::justPath::StoreF6 _this = _this3->s6;
HXDLIN( 351)								 ::Dynamic out = _this->s0;
HXDLIN( 351)								if ((_this->l != 0)) {
HXLINE( 351)									_this->s0 = _this->s1;
HXDLIN( 351)									_this->s1 = _this->s2;
HXDLIN( 351)									_this->s2 = _this->s3;
HXDLIN( 351)									_this->s3 = _this->s4;
HXDLIN( 351)									_this->s4 = _this->s5;
HXDLIN( 351)									_this->s5 = null();
HXDLIN( 351)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 351)										_this->s5 = _this->s6->shift();
            									}
HXDLIN( 351)									_this->l--;
            								}
HXDLIN( 351)								_this3->s5 = out;
            							}
HXDLIN( 351)							_this3->l--;
            						}
HXDLIN( 351)						int large = ::Std_obj::_hx_int(( (Float)(out3) ));
HXLINE( 352)						::justPath::StoreF6 _this4 = this->store;
HXDLIN( 352)						 ::Dynamic out4 = _this4->s0;
HXDLIN( 352)						if ((_this4->l != 0)) {
HXLINE( 352)							_this4->s0 = _this4->s1;
HXDLIN( 352)							_this4->s1 = _this4->s2;
HXDLIN( 352)							_this4->s2 = _this4->s3;
HXDLIN( 352)							_this4->s3 = _this4->s4;
HXDLIN( 352)							_this4->s4 = _this4->s5;
HXDLIN( 352)							_this4->s5 = null();
HXDLIN( 352)							if (::hx::IsNotNull( _this4->s6 )) {
HXLINE( 352)								::justPath::StoreF6 _this = _this4->s6;
HXDLIN( 352)								 ::Dynamic out = _this->s0;
HXDLIN( 352)								if ((_this->l != 0)) {
HXLINE( 352)									_this->s0 = _this->s1;
HXDLIN( 352)									_this->s1 = _this->s2;
HXDLIN( 352)									_this->s2 = _this->s3;
HXDLIN( 352)									_this->s3 = _this->s4;
HXDLIN( 352)									_this->s4 = _this->s5;
HXDLIN( 352)									_this->s5 = null();
HXDLIN( 352)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 352)										_this->s5 = _this->s6->shift();
            									}
HXDLIN( 352)									_this->l--;
            								}
HXDLIN( 352)								_this4->s5 = out;
            							}
HXDLIN( 352)							_this4->l--;
            						}
HXDLIN( 352)						int sweep = ::Std_obj::_hx_int(( (Float)(out4) ));
HXLINE( 353)						::justPath::StoreF6 _this5 = this->store;
HXDLIN( 353)						 ::Dynamic out5 = _this5->s0;
HXDLIN( 353)						if ((_this5->l != 0)) {
HXLINE( 353)							_this5->s0 = _this5->s1;
HXDLIN( 353)							_this5->s1 = _this5->s2;
HXDLIN( 353)							_this5->s2 = _this5->s3;
HXDLIN( 353)							_this5->s3 = _this5->s4;
HXDLIN( 353)							_this5->s4 = _this5->s5;
HXDLIN( 353)							_this5->s5 = null();
HXDLIN( 353)							if (::hx::IsNotNull( _this5->s6 )) {
HXLINE( 353)								::justPath::StoreF6 _this = _this5->s6;
HXDLIN( 353)								 ::Dynamic out = _this->s0;
HXDLIN( 353)								if ((_this->l != 0)) {
HXLINE( 353)									_this->s0 = _this->s1;
HXDLIN( 353)									_this->s1 = _this->s2;
HXDLIN( 353)									_this->s2 = _this->s3;
HXDLIN( 353)									_this->s3 = _this->s4;
HXDLIN( 353)									_this->s4 = _this->s5;
HXDLIN( 353)									_this->s5 = null();
HXDLIN( 353)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 353)										_this->s5 = _this->s6->shift();
            									}
HXDLIN( 353)									_this->l--;
            								}
HXDLIN( 353)								_this5->s5 = out;
            							}
HXDLIN( 353)							_this5->l--;
            						}
HXDLIN( 353)						this->lastX = (out5 + this->lastX);
HXLINE( 354)						::justPath::StoreF6 _this6 = this->store;
HXDLIN( 354)						 ::Dynamic out6 = _this6->s0;
HXDLIN( 354)						if ((_this6->l != 0)) {
HXLINE( 354)							_this6->s0 = _this6->s1;
HXDLIN( 354)							_this6->s1 = _this6->s2;
HXDLIN( 354)							_this6->s2 = _this6->s3;
HXDLIN( 354)							_this6->s3 = _this6->s4;
HXDLIN( 354)							_this6->s4 = _this6->s5;
HXDLIN( 354)							_this6->s5 = null();
HXDLIN( 354)							if (::hx::IsNotNull( _this6->s6 )) {
HXLINE( 354)								::justPath::StoreF6 _this = _this6->s6;
HXDLIN( 354)								 ::Dynamic out = _this->s0;
HXDLIN( 354)								if ((_this->l != 0)) {
HXLINE( 354)									_this->s0 = _this->s1;
HXDLIN( 354)									_this->s1 = _this->s2;
HXDLIN( 354)									_this->s2 = _this->s3;
HXDLIN( 354)									_this->s3 = _this->s4;
HXDLIN( 354)									_this->s4 = _this->s5;
HXDLIN( 354)									_this->s5 = null();
HXDLIN( 354)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 354)										_this->s5 = _this->s6->shift();
            									}
HXDLIN( 354)									_this->l--;
            								}
HXDLIN( 354)								_this6->s5 = out;
            							}
HXDLIN( 354)							_this6->l--;
            						}
HXDLIN( 354)						this->lastY = (out6 + this->lastY);
HXLINE( 355)						Float sx1 = sx;
HXDLIN( 355)						Float sy1 = sy;
HXDLIN( 355)						Float phi1 = ( (Float)(phi) );
HXDLIN( 355)						Float ex = this->lastX;
HXDLIN( 355)						Float ey = this->lastY;
HXDLIN( 355)						Float mx = ((sx1 - ex) / ( (Float)(2) ));
HXDLIN( 355)						Float my = ((sy1 - ey) / ( (Float)(2) ));
HXDLIN( 355)						Float ax = ((sx1 + ex) / ( (Float)(2) ));
HXDLIN( 355)						Float ay = ((sy1 + ey) / ( (Float)(2) ));
HXDLIN( 355)						phi1 = ::hx::Mod(phi1,360);
HXDLIN( 355)						phi1 = ((phi1 * ::Math_obj::PI) / ( (Float)(180) ));
HXDLIN( 355)						Float sin = ::Math_obj::sin(phi1);
HXDLIN( 355)						Float cos = ::Math_obj::cos(phi1);
HXDLIN( 355)						Float x1 = ((mx * cos) + (my * sin));
HXDLIN( 355)						Float y1 = ((-(mx) * sin) + (my * cos));
HXDLIN( 355)						Float rx = ::Math_obj::abs(( (Float)(xr) ));
HXDLIN( 355)						Float ry = ::Math_obj::abs(( (Float)(yr) ));
HXDLIN( 355)						Float rxx = (rx * rx);
HXDLIN( 355)						Float ryy = (ry * ry);
HXDLIN( 355)						Float xx1 = (x1 * x1);
HXDLIN( 355)						Float yy1 = (y1 * y1);
HXDLIN( 355)						Float check = ((xx1 / rxx) + (yy1 / ryy));
HXDLIN( 355)						if ((check > 1)) {
HXLINE( 355)							rx = (rx * ::Math_obj::sqrt(check));
HXDLIN( 355)							ry = (ry * ::Math_obj::sqrt(check));
HXDLIN( 355)							rxx = (rx * rx);
HXDLIN( 355)							ryy = (ry * ry);
            						}
HXDLIN( 355)						int sign;
HXDLIN( 355)						if ((large == sweep)) {
HXLINE( 355)							sign = -1;
            						}
            						else {
HXLINE( 355)							sign = 1;
            						}
HXDLIN( 355)						Float sq = ((((rxx * ryy) - (rxx * yy1)) - (ryy * xx1)) / ((rxx * yy1) + (ryy * xx1)));
HXDLIN( 355)						if ((sq < 0)) {
HXLINE( 355)							sq = ( (Float)(0) );
            						}
HXDLIN( 355)						Float coef = (( (Float)(sign) ) * ::Math_obj::sqrt(sq));
HXDLIN( 355)						Float cx1 = (((coef * rx) * y1) / ry);
HXDLIN( 355)						Float cy1 = (((-(coef) * ry) * x1) / rx);
HXDLIN( 355)						Float cx = ((ax + (cx1 * cos)) - (cy1 * sin));
HXDLIN( 355)						Float cy = ((ay + (cx1 * sin)) + (cy1 * cos));
HXDLIN( 355)						Float phiSin = ::Math_obj::sin(-(phi1));
HXDLIN( 355)						Float phiCos = ::Math_obj::cos(-(phi1));
HXDLIN( 355)						sx1 = (sx1 - cx);
HXDLIN( 355)						sy1 = (sy1 - cy);
HXDLIN( 355)						Float dx = sx1;
HXDLIN( 355)						Float dy = sy1;
HXDLIN( 355)						sx1 = ((dx * phiCos) - (dy * phiSin));
HXDLIN( 355)						sy1 = ((dx * phiSin) + (dy * phiCos));
HXDLIN( 355)						sx1 = (sx1 + cx);
HXDLIN( 355)						sy1 = (sy1 + cy);
HXDLIN( 355)						ex = (ex - cx);
HXDLIN( 355)						ey = (ey - cy);
HXDLIN( 355)						Float dx1 = ex;
HXDLIN( 355)						Float dy1 = ey;
HXDLIN( 355)						ex = ((dx1 * phiCos) - (dy1 * phiSin));
HXDLIN( 355)						ey = ((dx1 * phiSin) + (dy1 * phiCos));
HXDLIN( 355)						ex = (ex + cx);
HXDLIN( 355)						ey = (ey + cy);
HXDLIN( 355)						Float alpha = (::Math_obj::atan2((rx * (cy - sy1)),(ry * (cx - sx1))) - ::Math_obj::PI);
HXDLIN( 355)						Float omega = (::Math_obj::atan2((rx * (cy - ey)),(ry * (cx - ex))) - ::Math_obj::PI);
HXDLIN( 355)						Float delta = (alpha - omega);
HXDLIN( 355)						bool _hx_tmp;
HXDLIN( 355)						if ((sweep == 1)) {
HXLINE( 355)							_hx_tmp = (delta > 0);
            						}
            						else {
HXLINE( 355)							_hx_tmp = false;
            						}
HXDLIN( 355)						if (_hx_tmp) {
HXLINE( 355)							delta = (delta - (( (Float)(2) ) * ::Math_obj::PI));
            						}
            						else {
HXLINE( 355)							bool _hx_tmp;
HXDLIN( 355)							if ((sweep == 0)) {
HXLINE( 355)								_hx_tmp = (delta < 0);
            							}
            							else {
HXLINE( 355)								_hx_tmp = false;
            							}
HXDLIN( 355)							if (_hx_tmp) {
HXLINE( 355)								delta = (delta + (( (Float)(2) ) * ::Math_obj::PI));
            							}
            						}
HXDLIN( 355)						 ::Dynamic this1 =  ::Dynamic(::hx::Anon_obj::Create(10)
            							->setFixed(0,HX_("delta",f8,e7,26,d7),-(delta))
            							->setFixed(1,HX_("phiCos",56,5d,3f,ef),::Math_obj::cos(phi1))
            							->setFixed(2,HX_("phiSin",27,7c,4b,ef),::Math_obj::sin(phi1))
            							->setFixed(3,HX_("cx",b5,56,00,00),cx)
            							->setFixed(4,HX_("cy",b6,56,00,00),cy)
            							->setFixed(5,HX_("rx",c6,63,00,00),rx)
            							->setFixed(6,HX_("ry",c7,63,00,00),ry)
            							->setFixed(7,HX_("phi",71,57,55,00),phi1)
            							->setFixed(8,HX_("alpha",5e,a7,96,21),alpha)
            							->setFixed(9,HX_("omega",61,a3,d3,31),omega));
HXDLIN( 355)						 ::Dynamic ellipseData = this1;
HXLINE( 356)						::justPath::EllipseArc ellipse = ::justPath::EllipseArc_obj::__alloc( HX_CTX ,ellipseData);
HXLINE( 357)						ellipse->lineRender(this->pathContext->__Field(HX_("moveTo",ec,d2,ac,cc), ::hx::paccDynamic),this->pathContext->__Field(HX_("lineTo",8f,46,a0,ec), ::hx::paccDynamic),(::Math_obj::PI / ( (Float)(18) )),null());
            					}
            					else {
HXLINE( 358)						if ((this->store->l > 7)) {
HXLINE( 359)							while((this->store->l > 6)){
HXLINE( 360)								Float sx = this->lastX;
HXLINE( 361)								Float sy = this->lastY;
HXLINE( 362)								::justPath::StoreF6 _this = this->store;
HXDLIN( 362)								 ::Dynamic out = _this->s0;
HXDLIN( 362)								if ((_this->l != 0)) {
HXLINE( 362)									_this->s0 = _this->s1;
HXDLIN( 362)									_this->s1 = _this->s2;
HXDLIN( 362)									_this->s2 = _this->s3;
HXDLIN( 362)									_this->s3 = _this->s4;
HXDLIN( 362)									_this->s4 = _this->s5;
HXDLIN( 362)									_this->s5 = null();
HXDLIN( 362)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 362)										::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 362)										 ::Dynamic out = _this1->s0;
HXDLIN( 362)										if ((_this1->l != 0)) {
HXLINE( 362)											_this1->s0 = _this1->s1;
HXDLIN( 362)											_this1->s1 = _this1->s2;
HXDLIN( 362)											_this1->s2 = _this1->s3;
HXDLIN( 362)											_this1->s3 = _this1->s4;
HXDLIN( 362)											_this1->s4 = _this1->s5;
HXDLIN( 362)											_this1->s5 = null();
HXDLIN( 362)											if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 362)												_this1->s5 = _this1->s6->shift();
            											}
HXDLIN( 362)											_this1->l--;
            										}
HXDLIN( 362)										_this->s5 = out;
            									}
HXDLIN( 362)									_this->l--;
            								}
HXDLIN( 362)								 ::Dynamic xr = out;
HXLINE( 363)								::justPath::StoreF6 _this1 = this->store;
HXDLIN( 363)								 ::Dynamic out1 = _this1->s0;
HXDLIN( 363)								if ((_this1->l != 0)) {
HXLINE( 363)									_this1->s0 = _this1->s1;
HXDLIN( 363)									_this1->s1 = _this1->s2;
HXDLIN( 363)									_this1->s2 = _this1->s3;
HXDLIN( 363)									_this1->s3 = _this1->s4;
HXDLIN( 363)									_this1->s4 = _this1->s5;
HXDLIN( 363)									_this1->s5 = null();
HXDLIN( 363)									if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 363)										::justPath::StoreF6 _this = _this1->s6;
HXDLIN( 363)										 ::Dynamic out = _this->s0;
HXDLIN( 363)										if ((_this->l != 0)) {
HXLINE( 363)											_this->s0 = _this->s1;
HXDLIN( 363)											_this->s1 = _this->s2;
HXDLIN( 363)											_this->s2 = _this->s3;
HXDLIN( 363)											_this->s3 = _this->s4;
HXDLIN( 363)											_this->s4 = _this->s5;
HXDLIN( 363)											_this->s5 = null();
HXDLIN( 363)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 363)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 363)											_this->l--;
            										}
HXDLIN( 363)										_this1->s5 = out;
            									}
HXDLIN( 363)									_this1->l--;
            								}
HXDLIN( 363)								 ::Dynamic yr = out1;
HXLINE( 364)								::justPath::StoreF6 _this2 = this->store;
HXDLIN( 364)								 ::Dynamic out2 = _this2->s0;
HXDLIN( 364)								if ((_this2->l != 0)) {
HXLINE( 364)									_this2->s0 = _this2->s1;
HXDLIN( 364)									_this2->s1 = _this2->s2;
HXDLIN( 364)									_this2->s2 = _this2->s3;
HXDLIN( 364)									_this2->s3 = _this2->s4;
HXDLIN( 364)									_this2->s4 = _this2->s5;
HXDLIN( 364)									_this2->s5 = null();
HXDLIN( 364)									if (::hx::IsNotNull( _this2->s6 )) {
HXLINE( 364)										::justPath::StoreF6 _this = _this2->s6;
HXDLIN( 364)										 ::Dynamic out = _this->s0;
HXDLIN( 364)										if ((_this->l != 0)) {
HXLINE( 364)											_this->s0 = _this->s1;
HXDLIN( 364)											_this->s1 = _this->s2;
HXDLIN( 364)											_this->s2 = _this->s3;
HXDLIN( 364)											_this->s3 = _this->s4;
HXDLIN( 364)											_this->s4 = _this->s5;
HXDLIN( 364)											_this->s5 = null();
HXDLIN( 364)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 364)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 364)											_this->l--;
            										}
HXDLIN( 364)										_this2->s5 = out;
            									}
HXDLIN( 364)									_this2->l--;
            								}
HXDLIN( 364)								 ::Dynamic phi = out2;
HXLINE( 365)								::justPath::StoreF6 _this3 = this->store;
HXDLIN( 365)								 ::Dynamic out3 = _this3->s0;
HXDLIN( 365)								if ((_this3->l != 0)) {
HXLINE( 365)									_this3->s0 = _this3->s1;
HXDLIN( 365)									_this3->s1 = _this3->s2;
HXDLIN( 365)									_this3->s2 = _this3->s3;
HXDLIN( 365)									_this3->s3 = _this3->s4;
HXDLIN( 365)									_this3->s4 = _this3->s5;
HXDLIN( 365)									_this3->s5 = null();
HXDLIN( 365)									if (::hx::IsNotNull( _this3->s6 )) {
HXLINE( 365)										::justPath::StoreF6 _this = _this3->s6;
HXDLIN( 365)										 ::Dynamic out = _this->s0;
HXDLIN( 365)										if ((_this->l != 0)) {
HXLINE( 365)											_this->s0 = _this->s1;
HXDLIN( 365)											_this->s1 = _this->s2;
HXDLIN( 365)											_this->s2 = _this->s3;
HXDLIN( 365)											_this->s3 = _this->s4;
HXDLIN( 365)											_this->s4 = _this->s5;
HXDLIN( 365)											_this->s5 = null();
HXDLIN( 365)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 365)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 365)											_this->l--;
            										}
HXDLIN( 365)										_this3->s5 = out;
            									}
HXDLIN( 365)									_this3->l--;
            								}
HXDLIN( 365)								int large = ::Std_obj::_hx_int(( (Float)(out3) ));
HXLINE( 366)								::justPath::StoreF6 _this4 = this->store;
HXDLIN( 366)								 ::Dynamic out4 = _this4->s0;
HXDLIN( 366)								if ((_this4->l != 0)) {
HXLINE( 366)									_this4->s0 = _this4->s1;
HXDLIN( 366)									_this4->s1 = _this4->s2;
HXDLIN( 366)									_this4->s2 = _this4->s3;
HXDLIN( 366)									_this4->s3 = _this4->s4;
HXDLIN( 366)									_this4->s4 = _this4->s5;
HXDLIN( 366)									_this4->s5 = null();
HXDLIN( 366)									if (::hx::IsNotNull( _this4->s6 )) {
HXLINE( 366)										::justPath::StoreF6 _this = _this4->s6;
HXDLIN( 366)										 ::Dynamic out = _this->s0;
HXDLIN( 366)										if ((_this->l != 0)) {
HXLINE( 366)											_this->s0 = _this->s1;
HXDLIN( 366)											_this->s1 = _this->s2;
HXDLIN( 366)											_this->s2 = _this->s3;
HXDLIN( 366)											_this->s3 = _this->s4;
HXDLIN( 366)											_this->s4 = _this->s5;
HXDLIN( 366)											_this->s5 = null();
HXDLIN( 366)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 366)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 366)											_this->l--;
            										}
HXDLIN( 366)										_this4->s5 = out;
            									}
HXDLIN( 366)									_this4->l--;
            								}
HXDLIN( 366)								int sweep = ::Std_obj::_hx_int(( (Float)(out4) ));
HXLINE( 367)								::justPath::StoreF6 _this5 = this->store;
HXDLIN( 367)								 ::Dynamic out5 = _this5->s0;
HXDLIN( 367)								if ((_this5->l != 0)) {
HXLINE( 367)									_this5->s0 = _this5->s1;
HXDLIN( 367)									_this5->s1 = _this5->s2;
HXDLIN( 367)									_this5->s2 = _this5->s3;
HXDLIN( 367)									_this5->s3 = _this5->s4;
HXDLIN( 367)									_this5->s4 = _this5->s5;
HXDLIN( 367)									_this5->s5 = null();
HXDLIN( 367)									if (::hx::IsNotNull( _this5->s6 )) {
HXLINE( 367)										::justPath::StoreF6 _this = _this5->s6;
HXDLIN( 367)										 ::Dynamic out = _this->s0;
HXDLIN( 367)										if ((_this->l != 0)) {
HXLINE( 367)											_this->s0 = _this->s1;
HXDLIN( 367)											_this->s1 = _this->s2;
HXDLIN( 367)											_this->s2 = _this->s3;
HXDLIN( 367)											_this->s3 = _this->s4;
HXDLIN( 367)											_this->s4 = _this->s5;
HXDLIN( 367)											_this->s5 = null();
HXDLIN( 367)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 367)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 367)											_this->l--;
            										}
HXDLIN( 367)										_this5->s5 = out;
            									}
HXDLIN( 367)									_this5->l--;
            								}
HXDLIN( 367)								this->lastX = (out5 + this->lastX);
HXLINE( 368)								::justPath::StoreF6 _this6 = this->store;
HXDLIN( 368)								 ::Dynamic out6 = _this6->s0;
HXDLIN( 368)								if ((_this6->l != 0)) {
HXLINE( 368)									_this6->s0 = _this6->s1;
HXDLIN( 368)									_this6->s1 = _this6->s2;
HXDLIN( 368)									_this6->s2 = _this6->s3;
HXDLIN( 368)									_this6->s3 = _this6->s4;
HXDLIN( 368)									_this6->s4 = _this6->s5;
HXDLIN( 368)									_this6->s5 = null();
HXDLIN( 368)									if (::hx::IsNotNull( _this6->s6 )) {
HXLINE( 368)										::justPath::StoreF6 _this = _this6->s6;
HXDLIN( 368)										 ::Dynamic out = _this->s0;
HXDLIN( 368)										if ((_this->l != 0)) {
HXLINE( 368)											_this->s0 = _this->s1;
HXDLIN( 368)											_this->s1 = _this->s2;
HXDLIN( 368)											_this->s2 = _this->s3;
HXDLIN( 368)											_this->s3 = _this->s4;
HXDLIN( 368)											_this->s4 = _this->s5;
HXDLIN( 368)											_this->s5 = null();
HXDLIN( 368)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 368)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 368)											_this->l--;
            										}
HXDLIN( 368)										_this6->s5 = out;
            									}
HXDLIN( 368)									_this6->l--;
            								}
HXDLIN( 368)								this->lastY = (out6 + this->lastY);
HXLINE( 369)								Float sx1 = sx;
HXDLIN( 369)								Float sy1 = sy;
HXDLIN( 369)								Float phi1 = ( (Float)(phi) );
HXDLIN( 369)								Float ex = this->lastX;
HXDLIN( 369)								Float ey = this->lastY;
HXDLIN( 369)								Float mx = ((sx1 - ex) / ( (Float)(2) ));
HXDLIN( 369)								Float my = ((sy1 - ey) / ( (Float)(2) ));
HXDLIN( 369)								Float ax = ((sx1 + ex) / ( (Float)(2) ));
HXDLIN( 369)								Float ay = ((sy1 + ey) / ( (Float)(2) ));
HXDLIN( 369)								phi1 = ::hx::Mod(phi1,360);
HXDLIN( 369)								phi1 = ((phi1 * ::Math_obj::PI) / ( (Float)(180) ));
HXDLIN( 369)								Float sin = ::Math_obj::sin(phi1);
HXDLIN( 369)								Float cos = ::Math_obj::cos(phi1);
HXDLIN( 369)								Float x1 = ((mx * cos) + (my * sin));
HXDLIN( 369)								Float y1 = ((-(mx) * sin) + (my * cos));
HXDLIN( 369)								Float rx = ::Math_obj::abs(( (Float)(xr) ));
HXDLIN( 369)								Float ry = ::Math_obj::abs(( (Float)(yr) ));
HXDLIN( 369)								Float rxx = (rx * rx);
HXDLIN( 369)								Float ryy = (ry * ry);
HXDLIN( 369)								Float xx1 = (x1 * x1);
HXDLIN( 369)								Float yy1 = (y1 * y1);
HXDLIN( 369)								Float check = ((xx1 / rxx) + (yy1 / ryy));
HXDLIN( 369)								if ((check > 1)) {
HXLINE( 369)									rx = (rx * ::Math_obj::sqrt(check));
HXDLIN( 369)									ry = (ry * ::Math_obj::sqrt(check));
HXDLIN( 369)									rxx = (rx * rx);
HXDLIN( 369)									ryy = (ry * ry);
            								}
HXDLIN( 369)								int sign;
HXDLIN( 369)								if ((large == sweep)) {
HXLINE( 369)									sign = -1;
            								}
            								else {
HXLINE( 369)									sign = 1;
            								}
HXDLIN( 369)								Float sq = ((((rxx * ryy) - (rxx * yy1)) - (ryy * xx1)) / ((rxx * yy1) + (ryy * xx1)));
HXDLIN( 369)								if ((sq < 0)) {
HXLINE( 369)									sq = ( (Float)(0) );
            								}
HXDLIN( 369)								Float coef = (( (Float)(sign) ) * ::Math_obj::sqrt(sq));
HXDLIN( 369)								Float cx1 = (((coef * rx) * y1) / ry);
HXDLIN( 369)								Float cy1 = (((-(coef) * ry) * x1) / rx);
HXDLIN( 369)								Float cx = ((ax + (cx1 * cos)) - (cy1 * sin));
HXDLIN( 369)								Float cy = ((ay + (cx1 * sin)) + (cy1 * cos));
HXDLIN( 369)								Float phiSin = ::Math_obj::sin(-(phi1));
HXDLIN( 369)								Float phiCos = ::Math_obj::cos(-(phi1));
HXDLIN( 369)								sx1 = (sx1 - cx);
HXDLIN( 369)								sy1 = (sy1 - cy);
HXDLIN( 369)								Float dx = sx1;
HXDLIN( 369)								Float dy = sy1;
HXDLIN( 369)								sx1 = ((dx * phiCos) - (dy * phiSin));
HXDLIN( 369)								sy1 = ((dx * phiSin) + (dy * phiCos));
HXDLIN( 369)								sx1 = (sx1 + cx);
HXDLIN( 369)								sy1 = (sy1 + cy);
HXDLIN( 369)								ex = (ex - cx);
HXDLIN( 369)								ey = (ey - cy);
HXDLIN( 369)								Float dx1 = ex;
HXDLIN( 369)								Float dy1 = ey;
HXDLIN( 369)								ex = ((dx1 * phiCos) - (dy1 * phiSin));
HXDLIN( 369)								ey = ((dx1 * phiSin) + (dy1 * phiCos));
HXDLIN( 369)								ex = (ex + cx);
HXDLIN( 369)								ey = (ey + cy);
HXDLIN( 369)								Float alpha = (::Math_obj::atan2((rx * (cy - sy1)),(ry * (cx - sx1))) - ::Math_obj::PI);
HXDLIN( 369)								Float omega = (::Math_obj::atan2((rx * (cy - ey)),(ry * (cx - ex))) - ::Math_obj::PI);
HXDLIN( 369)								Float delta = (alpha - omega);
HXDLIN( 369)								bool _hx_tmp;
HXDLIN( 369)								if ((sweep == 1)) {
HXLINE( 369)									_hx_tmp = (delta > 0);
            								}
            								else {
HXLINE( 369)									_hx_tmp = false;
            								}
HXDLIN( 369)								if (_hx_tmp) {
HXLINE( 369)									delta = (delta - (( (Float)(2) ) * ::Math_obj::PI));
            								}
            								else {
HXLINE( 369)									bool _hx_tmp;
HXDLIN( 369)									if ((sweep == 0)) {
HXLINE( 369)										_hx_tmp = (delta < 0);
            									}
            									else {
HXLINE( 369)										_hx_tmp = false;
            									}
HXDLIN( 369)									if (_hx_tmp) {
HXLINE( 369)										delta = (delta + (( (Float)(2) ) * ::Math_obj::PI));
            									}
            								}
HXDLIN( 369)								 ::Dynamic this1 =  ::Dynamic(::hx::Anon_obj::Create(10)
            									->setFixed(0,HX_("delta",f8,e7,26,d7),-(delta))
            									->setFixed(1,HX_("phiCos",56,5d,3f,ef),::Math_obj::cos(phi1))
            									->setFixed(2,HX_("phiSin",27,7c,4b,ef),::Math_obj::sin(phi1))
            									->setFixed(3,HX_("cx",b5,56,00,00),cx)
            									->setFixed(4,HX_("cy",b6,56,00,00),cy)
            									->setFixed(5,HX_("rx",c6,63,00,00),rx)
            									->setFixed(6,HX_("ry",c7,63,00,00),ry)
            									->setFixed(7,HX_("phi",71,57,55,00),phi1)
            									->setFixed(8,HX_("alpha",5e,a7,96,21),alpha)
            									->setFixed(9,HX_("omega",61,a3,d3,31),omega));
HXDLIN( 369)								 ::Dynamic ellipseData = this1;
HXLINE( 370)								::justPath::EllipseArc ellipse = ::justPath::EllipseArc_obj::__alloc( HX_CTX ,ellipseData);
HXLINE( 371)								ellipse->lineRender(this->pathContext->__Field(HX_("moveTo",ec,d2,ac,cc), ::hx::paccDynamic),this->pathContext->__Field(HX_("lineTo",8f,46,a0,ec), ::hx::paccDynamic),(::Math_obj::PI / ( (Float)(18) )),null());
            							}
            						}
            					}
            				}
            				break;
            				case (int)99: {
HXLINE( 163)					{
HXLINE( 163)						{
HXLINE( 163)							::justPath::StoreF6 _this = this->store;
HXDLIN( 163)							_this->l = 0;
HXDLIN( 163)							_this->s0 = null();
HXDLIN( 163)							_this->s1 = null();
HXDLIN( 163)							_this->s2 = null();
HXDLIN( 163)							_this->s3 = null();
HXDLIN( 163)							_this->s4 = null();
HXDLIN( 163)							_this->s5 = null();
HXDLIN( 163)							_this->s6 = null();
            						}
HXDLIN( 163)						this->c = this->str.cca(this->pos++);
HXDLIN( 163)						::String temp = HX_("",00,00,00,00);
HXDLIN( 163)						bool exit = false;
HXDLIN( 163)						while(true){
HXLINE( 163)							switch((int)(this->c)){
            								case (int)32: case (int)44: {
HXLINE( 163)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 163)										if (((this->store->l & 1) == 0)) {
HXLINE( 163)											::justPath::StoreF6 _this = this->store;
HXDLIN( 163)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 163)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 163)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 163)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 163)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 163)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 163)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 163)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 163)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 163)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 163)													{
HXLINE( 163)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 163)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 163)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 163)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 163)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 163)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 163)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 163)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 163)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 163)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 163)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 163)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 163)											_this->l++;
            										}
            										else {
HXLINE( 163)											::justPath::StoreF6 _this = this->store;
HXDLIN( 163)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 163)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 163)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 163)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 163)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 163)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 163)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 163)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 163)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 163)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 163)													{
HXLINE( 163)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 163)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 163)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 163)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 163)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 163)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 163)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 163)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 163)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 163)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 163)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 163)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 163)											_this->l++;
            										}
HXDLIN( 163)										temp = HX_("",00,00,00,00);
            									}
            								}
            								break;
            								case (int)45: {
HXLINE( 163)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 163)										if (((this->store->l & 1) == 0)) {
HXLINE( 163)											::justPath::StoreF6 _this = this->store;
HXDLIN( 163)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 163)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 163)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 163)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 163)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 163)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 163)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 163)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 163)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 163)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 163)													{
HXLINE( 163)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 163)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 163)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 163)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 163)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 163)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 163)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 163)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 163)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 163)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 163)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 163)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 163)											_this->l++;
            										}
            										else {
HXLINE( 163)											::justPath::StoreF6 _this = this->store;
HXDLIN( 163)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 163)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 163)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 163)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 163)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 163)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 163)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 163)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 163)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 163)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 163)													{
HXLINE( 163)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 163)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 163)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 163)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 163)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 163)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 163)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 163)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 163)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 163)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 163)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 163)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 163)											_this->l++;
            										}
            									}
HXDLIN( 163)									temp = HX_("-",2d,00,00,00);
            								}
            								break;
            								case (int)46: {
HXLINE( 163)									temp = (temp + HX_(".",2e,00,00,00));
            								}
            								break;
            								case (int)48: {
HXLINE( 163)									temp = (temp + HX_("0",30,00,00,00));
            								}
            								break;
            								case (int)49: {
HXLINE( 163)									temp = (temp + HX_("1",31,00,00,00));
            								}
            								break;
            								case (int)50: {
HXLINE( 163)									temp = (temp + HX_("2",32,00,00,00));
            								}
            								break;
            								case (int)51: {
HXLINE( 163)									temp = (temp + HX_("3",33,00,00,00));
            								}
            								break;
            								case (int)52: {
HXLINE( 163)									temp = (temp + HX_("4",34,00,00,00));
            								}
            								break;
            								case (int)53: {
HXLINE( 163)									temp = (temp + HX_("5",35,00,00,00));
            								}
            								break;
            								case (int)54: {
HXLINE( 163)									temp = (temp + HX_("6",36,00,00,00));
            								}
            								break;
            								case (int)55: {
HXLINE( 163)									temp = (temp + HX_("7",37,00,00,00));
            								}
            								break;
            								case (int)56: {
HXLINE( 163)									temp = (temp + HX_("8",38,00,00,00));
            								}
            								break;
            								case (int)57: {
HXLINE( 163)									temp = (temp + HX_("9",39,00,00,00));
            								}
            								break;
            								default:{
HXLINE( 163)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 163)										if (((this->store->l & 1) == 0)) {
HXLINE( 163)											::justPath::StoreF6 _this = this->store;
HXDLIN( 163)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 163)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 163)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 163)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 163)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 163)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 163)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 163)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 163)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 163)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 163)													{
HXLINE( 163)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 163)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 163)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 163)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 163)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 163)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 163)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 163)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 163)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 163)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 163)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 163)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 163)											_this->l++;
            										}
            										else {
HXLINE( 163)											::justPath::StoreF6 _this = this->store;
HXDLIN( 163)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 163)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 163)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 163)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 163)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 163)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 163)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 163)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 163)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 163)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 163)													{
HXLINE( 163)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 163)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 163)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 163)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 163)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 163)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 163)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 163)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 163)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 163)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 163)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 163)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 163)											_this->l++;
            										}
HXDLIN( 163)										temp = HX_("",00,00,00,00);
            									}
HXDLIN( 163)									this->pos--;
HXDLIN( 163)									exit = true;
            								}
            							}
HXDLIN( 163)							if (exit) {
HXLINE( 163)								goto _hx_goto_38;
            							}
HXDLIN( 163)							this->c = this->str.cca(this->pos++);
            						}
            						_hx_goto_38:;
            					}
HXLINE( 164)					if ((this->store->l == 4)) {
HXLINE( 165)						Float firstX = (this->store->s0 + this->lastX);
HXLINE( 166)						Float firstY = (this->store->s1 + this->lastY);
HXLINE( 167)						this->controlX = (this->store->s2 + this->lastX);
HXLINE( 168)						this->controlY = (this->store->s3 + this->lastY);
HXLINE( 169)						this->lastX = (this->store->s4 + this->lastX);
HXLINE( 170)						this->lastY = (this->store->s5 + this->lastY);
HXLINE( 171)						{
HXLINE( 171)							Float x2 = this->controlX;
HXDLIN( 171)							Float y2 = this->controlY;
HXDLIN( 171)							Float x3 = this->lastX;
HXDLIN( 171)							Float y3 = this->lastY;
HXDLIN( 171)							::Array< Float > tempArr = ::Array_obj< Float >::__new(0);
HXDLIN( 171)							{
HXLINE( 171)								Float ax = this->px;
HXDLIN( 171)								Float ay = this->py;
HXDLIN( 171)								Float x = (ax - firstX);
HXDLIN( 171)								Float y = (ay - firstY);
HXDLIN( 171)								Float x1 = (firstX - x2);
HXDLIN( 171)								Float y1 = (firstY - y2);
HXDLIN( 171)								Float x4 = (x2 - x3);
HXDLIN( 171)								Float y4 = (y2 - y3);
HXDLIN( 171)								Float approxDistance = ((::Math_obj::sqrt(((x * x) + (y * y))) + ::Math_obj::sqrt(((x1 * x1) + (y1 * y1)))) + ::Math_obj::sqrt(((x4 * x4) + (y4 * y4))));
HXDLIN( 171)								if ((approxDistance == 0)) {
HXLINE( 171)									approxDistance = ((Float)0.000001);
            								}
HXDLIN( 171)								Float step = ::Math_obj::min((( (Float)(1) ) / (approxDistance * ((Float)0.707))),((Float)0.03));
HXDLIN( 171)								int l = tempArr->length;
HXDLIN( 171)								l = (l + 1);
HXDLIN( 171)								tempArr[(l - 1)] = ax;
HXDLIN( 171)								l = (l + 1);
HXDLIN( 171)								tempArr[(l - 1)] = ay;
HXDLIN( 171)								Float t = step;
HXDLIN( 171)								while((t < ((Float)1.))){
HXLINE( 171)									l = (l + 1);
HXDLIN( 171)									Float u = (( (Float)(1) ) - t);
HXDLIN( 171)									tempArr[(l - 1)] = ((((::Math_obj::pow(u,( (Float)(3) )) * ax) + (((( (Float)(3) ) * ::Math_obj::pow(u,( (Float)(2) ))) * t) * firstX)) + (((( (Float)(3) ) * u) * ::Math_obj::pow(t,( (Float)(2) ))) * x2)) + (::Math_obj::pow(t,( (Float)(3) )) * x3));
HXDLIN( 171)									l = (l + 1);
HXDLIN( 171)									Float u1 = (( (Float)(1) ) - t);
HXDLIN( 171)									tempArr[(l - 1)] = ((((::Math_obj::pow(u1,( (Float)(3) )) * ay) + (((( (Float)(3) ) * ::Math_obj::pow(u1,( (Float)(2) ))) * t) * firstY)) + (((( (Float)(3) ) * u1) * ::Math_obj::pow(t,( (Float)(2) ))) * y2)) + (::Math_obj::pow(t,( (Float)(3) )) * y3));
HXDLIN( 171)									t = (t + step);
            								}
HXDLIN( 171)								l = (l + 1);
HXDLIN( 171)								tempArr[(l - 1)] = x3;
HXDLIN( 171)								l = (l + 1);
HXDLIN( 171)								tempArr[(l - 1)] = y3;
            							}
HXDLIN( 171)							::haxe::Log_obj::trace(tempArr,::hx::SourceInfo(HX_("justPath/SvgLinePath.hx",5f,c6,70,0f),512,HX_("justPath.SvgLinePath",20,f0,4a,08),HX_("curveTo",0a,60,88,ce)));
HXDLIN( 171)							{
HXLINE( 171)								 ::Dynamic withMove = false;
HXDLIN( 171)								if (::hx::IsNull( withMove )) {
HXLINE( 171)									withMove = true;
            								}
HXDLIN( 171)								int l1 = tempArr->length;
HXDLIN( 171)								int i = 2;
HXDLIN( 171)								if (( (bool)(withMove) )) {
HXLINE( 171)									::justPath::ILinePathContext_obj::moveTo(this->pathContext,tempArr->__get(0),tempArr->__get(1));
            								}
            								else {
HXLINE( 171)									::justPath::ILinePathContext_obj::lineSegmentTo(this->pathContext,tempArr->__get(0),tempArr->__get(1));
            								}
HXDLIN( 171)								while((i < l1)){
HXLINE( 171)									::justPath::ILinePathContext_obj::lineSegmentTo(this->pathContext,tempArr->__get(i),tempArr->__get((i + 1)));
HXDLIN( 171)									i = (i + 2);
            								}
            							}
HXDLIN( 171)							tempArr = ::Array_obj< Float >::__new(0);
HXDLIN( 171)							this->px = x3;
HXDLIN( 171)							this->py = y3;
            						}
            					}
            					else {
HXLINE( 172)						if ((this->store->l > 4)) {
HXLINE( 173)							while((this->store->l > 3)){
HXLINE( 174)								::justPath::StoreF6 _this = this->store;
HXDLIN( 174)								 ::Dynamic out = _this->s0;
HXDLIN( 174)								if ((_this->l != 0)) {
HXLINE( 174)									_this->s0 = _this->s1;
HXDLIN( 174)									_this->s1 = _this->s2;
HXDLIN( 174)									_this->s2 = _this->s3;
HXDLIN( 174)									_this->s3 = _this->s4;
HXDLIN( 174)									_this->s4 = _this->s5;
HXDLIN( 174)									_this->s5 = null();
HXDLIN( 174)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 174)										::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 174)										 ::Dynamic out = _this1->s0;
HXDLIN( 174)										if ((_this1->l != 0)) {
HXLINE( 174)											_this1->s0 = _this1->s1;
HXDLIN( 174)											_this1->s1 = _this1->s2;
HXDLIN( 174)											_this1->s2 = _this1->s3;
HXDLIN( 174)											_this1->s3 = _this1->s4;
HXDLIN( 174)											_this1->s4 = _this1->s5;
HXDLIN( 174)											_this1->s5 = null();
HXDLIN( 174)											if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 174)												_this1->s5 = _this1->s6->shift();
            											}
HXDLIN( 174)											_this1->l--;
            										}
HXDLIN( 174)										_this->s5 = out;
            									}
HXDLIN( 174)									_this->l--;
            								}
HXDLIN( 174)								Float firstX = (out + this->lastX);
HXLINE( 175)								::justPath::StoreF6 _this1 = this->store;
HXDLIN( 175)								 ::Dynamic out1 = _this1->s0;
HXDLIN( 175)								if ((_this1->l != 0)) {
HXLINE( 175)									_this1->s0 = _this1->s1;
HXDLIN( 175)									_this1->s1 = _this1->s2;
HXDLIN( 175)									_this1->s2 = _this1->s3;
HXDLIN( 175)									_this1->s3 = _this1->s4;
HXDLIN( 175)									_this1->s4 = _this1->s5;
HXDLIN( 175)									_this1->s5 = null();
HXDLIN( 175)									if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 175)										::justPath::StoreF6 _this = _this1->s6;
HXDLIN( 175)										 ::Dynamic out = _this->s0;
HXDLIN( 175)										if ((_this->l != 0)) {
HXLINE( 175)											_this->s0 = _this->s1;
HXDLIN( 175)											_this->s1 = _this->s2;
HXDLIN( 175)											_this->s2 = _this->s3;
HXDLIN( 175)											_this->s3 = _this->s4;
HXDLIN( 175)											_this->s4 = _this->s5;
HXDLIN( 175)											_this->s5 = null();
HXDLIN( 175)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 175)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 175)											_this->l--;
            										}
HXDLIN( 175)										_this1->s5 = out;
            									}
HXDLIN( 175)									_this1->l--;
            								}
HXDLIN( 175)								Float firstY = (out1 + this->lastY);
HXLINE( 176)								::justPath::StoreF6 _this2 = this->store;
HXDLIN( 176)								 ::Dynamic out2 = _this2->s0;
HXDLIN( 176)								if ((_this2->l != 0)) {
HXLINE( 176)									_this2->s0 = _this2->s1;
HXDLIN( 176)									_this2->s1 = _this2->s2;
HXDLIN( 176)									_this2->s2 = _this2->s3;
HXDLIN( 176)									_this2->s3 = _this2->s4;
HXDLIN( 176)									_this2->s4 = _this2->s5;
HXDLIN( 176)									_this2->s5 = null();
HXDLIN( 176)									if (::hx::IsNotNull( _this2->s6 )) {
HXLINE( 176)										::justPath::StoreF6 _this = _this2->s6;
HXDLIN( 176)										 ::Dynamic out = _this->s0;
HXDLIN( 176)										if ((_this->l != 0)) {
HXLINE( 176)											_this->s0 = _this->s1;
HXDLIN( 176)											_this->s1 = _this->s2;
HXDLIN( 176)											_this->s2 = _this->s3;
HXDLIN( 176)											_this->s3 = _this->s4;
HXDLIN( 176)											_this->s4 = _this->s5;
HXDLIN( 176)											_this->s5 = null();
HXDLIN( 176)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 176)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 176)											_this->l--;
            										}
HXDLIN( 176)										_this2->s5 = out;
            									}
HXDLIN( 176)									_this2->l--;
            								}
HXDLIN( 176)								this->controlX = (out2 + this->lastX);
HXLINE( 177)								::justPath::StoreF6 _this3 = this->store;
HXDLIN( 177)								 ::Dynamic out3 = _this3->s0;
HXDLIN( 177)								if ((_this3->l != 0)) {
HXLINE( 177)									_this3->s0 = _this3->s1;
HXDLIN( 177)									_this3->s1 = _this3->s2;
HXDLIN( 177)									_this3->s2 = _this3->s3;
HXDLIN( 177)									_this3->s3 = _this3->s4;
HXDLIN( 177)									_this3->s4 = _this3->s5;
HXDLIN( 177)									_this3->s5 = null();
HXDLIN( 177)									if (::hx::IsNotNull( _this3->s6 )) {
HXLINE( 177)										::justPath::StoreF6 _this = _this3->s6;
HXDLIN( 177)										 ::Dynamic out = _this->s0;
HXDLIN( 177)										if ((_this->l != 0)) {
HXLINE( 177)											_this->s0 = _this->s1;
HXDLIN( 177)											_this->s1 = _this->s2;
HXDLIN( 177)											_this->s2 = _this->s3;
HXDLIN( 177)											_this->s3 = _this->s4;
HXDLIN( 177)											_this->s4 = _this->s5;
HXDLIN( 177)											_this->s5 = null();
HXDLIN( 177)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 177)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 177)											_this->l--;
            										}
HXDLIN( 177)										_this3->s5 = out;
            									}
HXDLIN( 177)									_this3->l--;
            								}
HXDLIN( 177)								this->controlY = (out3 + this->lastY);
HXLINE( 178)								::justPath::StoreF6 _this4 = this->store;
HXDLIN( 178)								 ::Dynamic out4 = _this4->s0;
HXDLIN( 178)								if ((_this4->l != 0)) {
HXLINE( 178)									_this4->s0 = _this4->s1;
HXDLIN( 178)									_this4->s1 = _this4->s2;
HXDLIN( 178)									_this4->s2 = _this4->s3;
HXDLIN( 178)									_this4->s3 = _this4->s4;
HXDLIN( 178)									_this4->s4 = _this4->s5;
HXDLIN( 178)									_this4->s5 = null();
HXDLIN( 178)									if (::hx::IsNotNull( _this4->s6 )) {
HXLINE( 178)										::justPath::StoreF6 _this = _this4->s6;
HXDLIN( 178)										 ::Dynamic out = _this->s0;
HXDLIN( 178)										if ((_this->l != 0)) {
HXLINE( 178)											_this->s0 = _this->s1;
HXDLIN( 178)											_this->s1 = _this->s2;
HXDLIN( 178)											_this->s2 = _this->s3;
HXDLIN( 178)											_this->s3 = _this->s4;
HXDLIN( 178)											_this->s4 = _this->s5;
HXDLIN( 178)											_this->s5 = null();
HXDLIN( 178)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 178)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 178)											_this->l--;
            										}
HXDLIN( 178)										_this4->s5 = out;
            									}
HXDLIN( 178)									_this4->l--;
            								}
HXDLIN( 178)								this->lastX = (out4 + this->lastX);
HXLINE( 179)								::justPath::StoreF6 _this5 = this->store;
HXDLIN( 179)								 ::Dynamic out5 = _this5->s0;
HXDLIN( 179)								if ((_this5->l != 0)) {
HXLINE( 179)									_this5->s0 = _this5->s1;
HXDLIN( 179)									_this5->s1 = _this5->s2;
HXDLIN( 179)									_this5->s2 = _this5->s3;
HXDLIN( 179)									_this5->s3 = _this5->s4;
HXDLIN( 179)									_this5->s4 = _this5->s5;
HXDLIN( 179)									_this5->s5 = null();
HXDLIN( 179)									if (::hx::IsNotNull( _this5->s6 )) {
HXLINE( 179)										::justPath::StoreF6 _this = _this5->s6;
HXDLIN( 179)										 ::Dynamic out = _this->s0;
HXDLIN( 179)										if ((_this->l != 0)) {
HXLINE( 179)											_this->s0 = _this->s1;
HXDLIN( 179)											_this->s1 = _this->s2;
HXDLIN( 179)											_this->s2 = _this->s3;
HXDLIN( 179)											_this->s3 = _this->s4;
HXDLIN( 179)											_this->s4 = _this->s5;
HXDLIN( 179)											_this->s5 = null();
HXDLIN( 179)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 179)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 179)											_this->l--;
            										}
HXDLIN( 179)										_this5->s5 = out;
            									}
HXDLIN( 179)									_this5->l--;
            								}
HXDLIN( 179)								this->lastY = (out5 + this->lastY);
HXLINE( 180)								{
HXLINE( 180)									Float x2 = this->controlX;
HXDLIN( 180)									Float y2 = this->controlY;
HXDLIN( 180)									Float x3 = this->lastX;
HXDLIN( 180)									Float y3 = this->lastY;
HXDLIN( 180)									::Array< Float > tempArr = ::Array_obj< Float >::__new(0);
HXDLIN( 180)									{
HXLINE( 180)										Float ax = this->px;
HXDLIN( 180)										Float ay = this->py;
HXDLIN( 180)										Float x = (ax - firstX);
HXDLIN( 180)										Float y = (ay - firstY);
HXDLIN( 180)										Float x1 = (firstX - x2);
HXDLIN( 180)										Float y1 = (firstY - y2);
HXDLIN( 180)										Float x4 = (x2 - x3);
HXDLIN( 180)										Float y4 = (y2 - y3);
HXDLIN( 180)										Float approxDistance = ((::Math_obj::sqrt(((x * x) + (y * y))) + ::Math_obj::sqrt(((x1 * x1) + (y1 * y1)))) + ::Math_obj::sqrt(((x4 * x4) + (y4 * y4))));
HXDLIN( 180)										if ((approxDistance == 0)) {
HXLINE( 180)											approxDistance = ((Float)0.000001);
            										}
HXDLIN( 180)										Float step = ::Math_obj::min((( (Float)(1) ) / (approxDistance * ((Float)0.707))),((Float)0.03));
HXDLIN( 180)										int l = tempArr->length;
HXDLIN( 180)										l = (l + 1);
HXDLIN( 180)										tempArr[(l - 1)] = ax;
HXDLIN( 180)										l = (l + 1);
HXDLIN( 180)										tempArr[(l - 1)] = ay;
HXDLIN( 180)										Float t = step;
HXDLIN( 180)										while((t < ((Float)1.))){
HXLINE( 180)											l = (l + 1);
HXDLIN( 180)											Float u = (( (Float)(1) ) - t);
HXDLIN( 180)											tempArr[(l - 1)] = ((((::Math_obj::pow(u,( (Float)(3) )) * ax) + (((( (Float)(3) ) * ::Math_obj::pow(u,( (Float)(2) ))) * t) * firstX)) + (((( (Float)(3) ) * u) * ::Math_obj::pow(t,( (Float)(2) ))) * x2)) + (::Math_obj::pow(t,( (Float)(3) )) * x3));
HXDLIN( 180)											l = (l + 1);
HXDLIN( 180)											Float u1 = (( (Float)(1) ) - t);
HXDLIN( 180)											tempArr[(l - 1)] = ((((::Math_obj::pow(u1,( (Float)(3) )) * ay) + (((( (Float)(3) ) * ::Math_obj::pow(u1,( (Float)(2) ))) * t) * firstY)) + (((( (Float)(3) ) * u1) * ::Math_obj::pow(t,( (Float)(2) ))) * y2)) + (::Math_obj::pow(t,( (Float)(3) )) * y3));
HXDLIN( 180)											t = (t + step);
            										}
HXDLIN( 180)										l = (l + 1);
HXDLIN( 180)										tempArr[(l - 1)] = x3;
HXDLIN( 180)										l = (l + 1);
HXDLIN( 180)										tempArr[(l - 1)] = y3;
            									}
HXDLIN( 180)									::haxe::Log_obj::trace(tempArr,::hx::SourceInfo(HX_("justPath/SvgLinePath.hx",5f,c6,70,0f),512,HX_("justPath.SvgLinePath",20,f0,4a,08),HX_("curveTo",0a,60,88,ce)));
HXDLIN( 180)									{
HXLINE( 180)										 ::Dynamic withMove = false;
HXDLIN( 180)										if (::hx::IsNull( withMove )) {
HXLINE( 180)											withMove = true;
            										}
HXDLIN( 180)										int l1 = tempArr->length;
HXDLIN( 180)										int i = 2;
HXDLIN( 180)										if (( (bool)(withMove) )) {
HXLINE( 180)											::justPath::ILinePathContext_obj::moveTo(this->pathContext,tempArr->__get(0),tempArr->__get(1));
            										}
            										else {
HXLINE( 180)											::justPath::ILinePathContext_obj::lineSegmentTo(this->pathContext,tempArr->__get(0),tempArr->__get(1));
            										}
HXDLIN( 180)										while((i < l1)){
HXLINE( 180)											::justPath::ILinePathContext_obj::lineSegmentTo(this->pathContext,tempArr->__get(i),tempArr->__get((i + 1)));
HXDLIN( 180)											i = (i + 2);
            										}
            									}
HXDLIN( 180)									tempArr = ::Array_obj< Float >::__new(0);
HXDLIN( 180)									this->px = x3;
HXDLIN( 180)									this->py = y3;
            								}
            							}
            						}
            					}
            				}
            				break;
            				case (int)104: {
HXLINE( 109)					{
HXLINE( 109)						 ::Dynamic process = false;
HXDLIN( 109)						if (::hx::IsNull( process )) {
HXLINE( 109)							process = true;
            						}
HXDLIN( 109)						{
HXLINE( 109)							::justPath::StoreF6 _this = this->store;
HXDLIN( 109)							_this->l = 0;
HXDLIN( 109)							_this->s0 = null();
HXDLIN( 109)							_this->s1 = null();
HXDLIN( 109)							_this->s2 = null();
HXDLIN( 109)							_this->s3 = null();
HXDLIN( 109)							_this->s4 = null();
HXDLIN( 109)							_this->s5 = null();
HXDLIN( 109)							_this->s6 = null();
            						}
HXDLIN( 109)						this->c = this->str.cca(this->pos++);
HXDLIN( 109)						::String temp = HX_("",00,00,00,00);
HXDLIN( 109)						bool exit = false;
HXDLIN( 109)						while(true){
HXLINE( 109)							switch((int)(this->c)){
            								case (int)32: case (int)44: {
HXLINE( 109)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 109)										if (( (bool)(process) )) {
HXLINE( 109)											if (((this->store->l & 1) == 0)) {
HXLINE( 109)												::justPath::StoreF6 _this = this->store;
HXDLIN( 109)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 109)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE( 109)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE( 109)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE( 109)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE( 109)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE( 109)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE( 109)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE( 109)														if (::hx::IsNull( _this->s6 )) {
HXLINE( 109)															_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN( 109)														{
HXLINE( 109)															::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 109)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE( 109)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE( 109)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE( 109)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE( 109)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE( 109)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE( 109)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE( 109)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE( 109)																		_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN( 109)																	_this1->s6->push(v);
            																}
            															}
HXDLIN( 109)															_this1->l++;
            														}
            													}
            												}
HXDLIN( 109)												_this->l++;
            											}
            											else {
HXLINE( 109)												::justPath::StoreF6 _this = this->store;
HXDLIN( 109)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 109)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE( 109)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE( 109)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE( 109)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE( 109)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE( 109)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE( 109)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE( 109)														if (::hx::IsNull( _this->s6 )) {
HXLINE( 109)															_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN( 109)														{
HXLINE( 109)															::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 109)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE( 109)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE( 109)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE( 109)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE( 109)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE( 109)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE( 109)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE( 109)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE( 109)																		_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN( 109)																	_this1->s6->push(v);
            																}
            															}
HXDLIN( 109)															_this1->l++;
            														}
            													}
            												}
HXDLIN( 109)												_this->l++;
            											}
            										}
            										else {
HXLINE( 109)											::justPath::StoreF6 _this = this->store;
HXDLIN( 109)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 109)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 109)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 109)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 109)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 109)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 109)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 109)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 109)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 109)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 109)													{
HXLINE( 109)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 109)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 109)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 109)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 109)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 109)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 109)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 109)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 109)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 109)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 109)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 109)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 109)											_this->l++;
            										}
HXDLIN( 109)										temp = HX_("",00,00,00,00);
            									}
            								}
            								break;
            								case (int)45: {
HXLINE( 109)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 109)										if (( (bool)(process) )) {
HXLINE( 109)											if (((this->store->l & 1) == 0)) {
HXLINE( 109)												::justPath::StoreF6 _this = this->store;
HXDLIN( 109)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 109)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE( 109)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE( 109)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE( 109)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE( 109)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE( 109)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE( 109)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE( 109)														if (::hx::IsNull( _this->s6 )) {
HXLINE( 109)															_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN( 109)														{
HXLINE( 109)															::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 109)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE( 109)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE( 109)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE( 109)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE( 109)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE( 109)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE( 109)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE( 109)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE( 109)																		_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN( 109)																	_this1->s6->push(v);
            																}
            															}
HXDLIN( 109)															_this1->l++;
            														}
            													}
            												}
HXDLIN( 109)												_this->l++;
            											}
            											else {
HXLINE( 109)												::justPath::StoreF6 _this = this->store;
HXDLIN( 109)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 109)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE( 109)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE( 109)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE( 109)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE( 109)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE( 109)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE( 109)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE( 109)														if (::hx::IsNull( _this->s6 )) {
HXLINE( 109)															_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN( 109)														{
HXLINE( 109)															::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 109)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE( 109)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE( 109)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE( 109)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE( 109)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE( 109)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE( 109)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE( 109)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE( 109)																		_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN( 109)																	_this1->s6->push(v);
            																}
            															}
HXDLIN( 109)															_this1->l++;
            														}
            													}
            												}
HXDLIN( 109)												_this->l++;
            											}
            										}
            										else {
HXLINE( 109)											::justPath::StoreF6 _this = this->store;
HXDLIN( 109)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 109)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 109)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 109)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 109)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 109)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 109)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 109)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 109)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 109)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 109)													{
HXLINE( 109)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 109)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 109)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 109)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 109)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 109)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 109)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 109)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 109)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 109)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 109)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 109)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 109)											_this->l++;
            										}
            									}
HXDLIN( 109)									temp = HX_("-",2d,00,00,00);
            								}
            								break;
            								case (int)46: {
HXLINE( 109)									temp = (temp + HX_(".",2e,00,00,00));
            								}
            								break;
            								case (int)48: {
HXLINE( 109)									temp = (temp + HX_("0",30,00,00,00));
            								}
            								break;
            								case (int)49: {
HXLINE( 109)									temp = (temp + HX_("1",31,00,00,00));
            								}
            								break;
            								case (int)50: {
HXLINE( 109)									temp = (temp + HX_("2",32,00,00,00));
            								}
            								break;
            								case (int)51: {
HXLINE( 109)									temp = (temp + HX_("3",33,00,00,00));
            								}
            								break;
            								case (int)52: {
HXLINE( 109)									temp = (temp + HX_("4",34,00,00,00));
            								}
            								break;
            								case (int)53: {
HXLINE( 109)									temp = (temp + HX_("5",35,00,00,00));
            								}
            								break;
            								case (int)54: {
HXLINE( 109)									temp = (temp + HX_("6",36,00,00,00));
            								}
            								break;
            								case (int)55: {
HXLINE( 109)									temp = (temp + HX_("7",37,00,00,00));
            								}
            								break;
            								case (int)56: {
HXLINE( 109)									temp = (temp + HX_("8",38,00,00,00));
            								}
            								break;
            								case (int)57: {
HXLINE( 109)									temp = (temp + HX_("9",39,00,00,00));
            								}
            								break;
            								default:{
HXLINE( 109)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 109)										if (( (bool)(process) )) {
HXLINE( 109)											if (((this->store->l & 1) == 0)) {
HXLINE( 109)												::justPath::StoreF6 _this = this->store;
HXDLIN( 109)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 109)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE( 109)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE( 109)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE( 109)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE( 109)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE( 109)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE( 109)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE( 109)														if (::hx::IsNull( _this->s6 )) {
HXLINE( 109)															_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN( 109)														{
HXLINE( 109)															::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 109)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE( 109)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE( 109)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE( 109)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE( 109)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE( 109)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE( 109)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE( 109)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE( 109)																		_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN( 109)																	_this1->s6->push(v);
            																}
            															}
HXDLIN( 109)															_this1->l++;
            														}
            													}
            												}
HXDLIN( 109)												_this->l++;
            											}
            											else {
HXLINE( 109)												::justPath::StoreF6 _this = this->store;
HXDLIN( 109)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 109)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE( 109)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE( 109)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE( 109)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE( 109)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE( 109)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE( 109)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE( 109)														if (::hx::IsNull( _this->s6 )) {
HXLINE( 109)															_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN( 109)														{
HXLINE( 109)															::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 109)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE( 109)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE( 109)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE( 109)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE( 109)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE( 109)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE( 109)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE( 109)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE( 109)																		_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN( 109)																	_this1->s6->push(v);
            																}
            															}
HXDLIN( 109)															_this1->l++;
            														}
            													}
            												}
HXDLIN( 109)												_this->l++;
            											}
            										}
            										else {
HXLINE( 109)											::justPath::StoreF6 _this = this->store;
HXDLIN( 109)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 109)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 109)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 109)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 109)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 109)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 109)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 109)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 109)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 109)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 109)													{
HXLINE( 109)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 109)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 109)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 109)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 109)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 109)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 109)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 109)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 109)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 109)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 109)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 109)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 109)											_this->l++;
            										}
HXDLIN( 109)										temp = HX_("",00,00,00,00);
            									}
HXDLIN( 109)									this->pos--;
HXDLIN( 109)									exit = true;
            								}
            							}
HXDLIN( 109)							if (exit) {
HXLINE( 109)								goto _hx_goto_44;
            							}
HXDLIN( 109)							this->c = this->str.cca(this->pos++);
            						}
            						_hx_goto_44:;
            					}
HXLINE( 110)					if ((this->store->l == 1)) {
HXLINE( 111)						this->lastX = (this->lastX + this->store->s0);
HXLINE( 112)						::justPath::ILinePathContext_obj::lineTo(this->pathContext,this->lastX,this->lastY);
            					}
            					else {
HXLINE( 113)						if ((this->store->l > 1)) {
HXLINE( 114)							while((this->store->l > 0)){
HXLINE( 115)								Float _hx_tmp = this->lastX;
HXDLIN( 115)								::justPath::StoreF6 _this = this->store;
HXDLIN( 115)								 ::Dynamic out = _this->s0;
HXDLIN( 115)								if ((_this->l != 0)) {
HXLINE( 115)									_this->s0 = _this->s1;
HXDLIN( 115)									_this->s1 = _this->s2;
HXDLIN( 115)									_this->s2 = _this->s3;
HXDLIN( 115)									_this->s3 = _this->s4;
HXDLIN( 115)									_this->s4 = _this->s5;
HXDLIN( 115)									_this->s5 = null();
HXDLIN( 115)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 115)										::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 115)										 ::Dynamic out = _this1->s0;
HXDLIN( 115)										if ((_this1->l != 0)) {
HXLINE( 115)											_this1->s0 = _this1->s1;
HXDLIN( 115)											_this1->s1 = _this1->s2;
HXDLIN( 115)											_this1->s2 = _this1->s3;
HXDLIN( 115)											_this1->s3 = _this1->s4;
HXDLIN( 115)											_this1->s4 = _this1->s5;
HXDLIN( 115)											_this1->s5 = null();
HXDLIN( 115)											if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 115)												_this1->s5 = _this1->s6->shift();
            											}
HXDLIN( 115)											_this1->l--;
            										}
HXDLIN( 115)										_this->s5 = out;
            									}
HXDLIN( 115)									_this->l--;
            								}
HXDLIN( 115)								this->lastX = (_hx_tmp + out);
HXLINE( 116)								{
HXLINE( 116)									Float x_ = this->lastX;
HXDLIN( 116)									Float y_ = this->lastY;
HXDLIN( 116)									::justPath::ILinePathContext_obj::lineTo(this->pathContext,x_,y_);
HXDLIN( 116)									this->px = x_;
HXDLIN( 116)									this->py = y_;
            								}
            							}
            						}
            					}
            				}
            				break;
            				case (int)108: {
HXLINE(  85)					{
HXLINE(  85)						{
HXLINE(  85)							::justPath::StoreF6 _this = this->store;
HXDLIN(  85)							_this->l = 0;
HXDLIN(  85)							_this->s0 = null();
HXDLIN(  85)							_this->s1 = null();
HXDLIN(  85)							_this->s2 = null();
HXDLIN(  85)							_this->s3 = null();
HXDLIN(  85)							_this->s4 = null();
HXDLIN(  85)							_this->s5 = null();
HXDLIN(  85)							_this->s6 = null();
            						}
HXDLIN(  85)						this->c = this->str.cca(this->pos++);
HXDLIN(  85)						::String temp = HX_("",00,00,00,00);
HXDLIN(  85)						bool exit = false;
HXDLIN(  85)						while(true){
HXLINE(  85)							switch((int)(this->c)){
            								case (int)32: case (int)44: {
HXLINE(  85)									if ((temp != HX_("",00,00,00,00))) {
HXLINE(  85)										if (((this->store->l & 1) == 0)) {
HXLINE(  85)											::justPath::StoreF6 _this = this->store;
HXDLIN(  85)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  85)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  85)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  85)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  85)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  85)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  85)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  85)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  85)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  85)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  85)													{
HXLINE(  85)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  85)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  85)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  85)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  85)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  85)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  85)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  85)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  85)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  85)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  85)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  85)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  85)											_this->l++;
            										}
            										else {
HXLINE(  85)											::justPath::StoreF6 _this = this->store;
HXDLIN(  85)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  85)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  85)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  85)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  85)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  85)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  85)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  85)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  85)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  85)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  85)													{
HXLINE(  85)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  85)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  85)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  85)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  85)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  85)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  85)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  85)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  85)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  85)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  85)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  85)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  85)											_this->l++;
            										}
HXDLIN(  85)										temp = HX_("",00,00,00,00);
            									}
            								}
            								break;
            								case (int)45: {
HXLINE(  85)									if ((temp != HX_("",00,00,00,00))) {
HXLINE(  85)										if (((this->store->l & 1) == 0)) {
HXLINE(  85)											::justPath::StoreF6 _this = this->store;
HXDLIN(  85)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  85)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  85)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  85)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  85)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  85)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  85)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  85)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  85)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  85)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  85)													{
HXLINE(  85)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  85)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  85)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  85)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  85)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  85)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  85)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  85)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  85)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  85)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  85)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  85)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  85)											_this->l++;
            										}
            										else {
HXLINE(  85)											::justPath::StoreF6 _this = this->store;
HXDLIN(  85)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  85)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  85)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  85)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  85)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  85)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  85)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  85)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  85)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  85)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  85)													{
HXLINE(  85)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  85)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  85)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  85)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  85)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  85)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  85)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  85)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  85)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  85)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  85)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  85)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  85)											_this->l++;
            										}
            									}
HXDLIN(  85)									temp = HX_("-",2d,00,00,00);
            								}
            								break;
            								case (int)46: {
HXLINE(  85)									temp = (temp + HX_(".",2e,00,00,00));
            								}
            								break;
            								case (int)48: {
HXLINE(  85)									temp = (temp + HX_("0",30,00,00,00));
            								}
            								break;
            								case (int)49: {
HXLINE(  85)									temp = (temp + HX_("1",31,00,00,00));
            								}
            								break;
            								case (int)50: {
HXLINE(  85)									temp = (temp + HX_("2",32,00,00,00));
            								}
            								break;
            								case (int)51: {
HXLINE(  85)									temp = (temp + HX_("3",33,00,00,00));
            								}
            								break;
            								case (int)52: {
HXLINE(  85)									temp = (temp + HX_("4",34,00,00,00));
            								}
            								break;
            								case (int)53: {
HXLINE(  85)									temp = (temp + HX_("5",35,00,00,00));
            								}
            								break;
            								case (int)54: {
HXLINE(  85)									temp = (temp + HX_("6",36,00,00,00));
            								}
            								break;
            								case (int)55: {
HXLINE(  85)									temp = (temp + HX_("7",37,00,00,00));
            								}
            								break;
            								case (int)56: {
HXLINE(  85)									temp = (temp + HX_("8",38,00,00,00));
            								}
            								break;
            								case (int)57: {
HXLINE(  85)									temp = (temp + HX_("9",39,00,00,00));
            								}
            								break;
            								default:{
HXLINE(  85)									if ((temp != HX_("",00,00,00,00))) {
HXLINE(  85)										if (((this->store->l & 1) == 0)) {
HXLINE(  85)											::justPath::StoreF6 _this = this->store;
HXDLIN(  85)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  85)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  85)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  85)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  85)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  85)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  85)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  85)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  85)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  85)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  85)													{
HXLINE(  85)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  85)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  85)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  85)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  85)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  85)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  85)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  85)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  85)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  85)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  85)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  85)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  85)											_this->l++;
            										}
            										else {
HXLINE(  85)											::justPath::StoreF6 _this = this->store;
HXDLIN(  85)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  85)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  85)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  85)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  85)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  85)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  85)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  85)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  85)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  85)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  85)													{
HXLINE(  85)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  85)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  85)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  85)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  85)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  85)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  85)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  85)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  85)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  85)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  85)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  85)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  85)											_this->l++;
            										}
HXDLIN(  85)										temp = HX_("",00,00,00,00);
            									}
HXDLIN(  85)									this->pos--;
HXDLIN(  85)									exit = true;
            								}
            							}
HXDLIN(  85)							if (exit) {
HXLINE(  85)								goto _hx_goto_46;
            							}
HXDLIN(  85)							this->c = this->str.cca(this->pos++);
            						}
            						_hx_goto_46:;
            					}
HXLINE(  86)					if ((this->store->l == 2)) {
HXLINE(  87)						this->lastX = (this->store->s0 + this->lastX);
HXLINE(  88)						this->lastY = (this->store->s1 + this->lastY);
HXLINE(  89)						::justPath::ILinePathContext_obj::lineTo(this->pathContext,this->lastX,this->lastY);
            					}
            					else {
HXLINE(  90)						if ((this->store->l > 2)) {
HXLINE(  91)							while((this->store->l > 2)){
HXLINE(  92)								::justPath::StoreF6 _this = this->store;
HXDLIN(  92)								 ::Dynamic out = _this->s0;
HXDLIN(  92)								if ((_this->l != 0)) {
HXLINE(  92)									_this->s0 = _this->s1;
HXDLIN(  92)									_this->s1 = _this->s2;
HXDLIN(  92)									_this->s2 = _this->s3;
HXDLIN(  92)									_this->s3 = _this->s4;
HXDLIN(  92)									_this->s4 = _this->s5;
HXDLIN(  92)									_this->s5 = null();
HXDLIN(  92)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE(  92)										::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  92)										 ::Dynamic out = _this1->s0;
HXDLIN(  92)										if ((_this1->l != 0)) {
HXLINE(  92)											_this1->s0 = _this1->s1;
HXDLIN(  92)											_this1->s1 = _this1->s2;
HXDLIN(  92)											_this1->s2 = _this1->s3;
HXDLIN(  92)											_this1->s3 = _this1->s4;
HXDLIN(  92)											_this1->s4 = _this1->s5;
HXDLIN(  92)											_this1->s5 = null();
HXDLIN(  92)											if (::hx::IsNotNull( _this1->s6 )) {
HXLINE(  92)												_this1->s5 = _this1->s6->shift();
            											}
HXDLIN(  92)											_this1->l--;
            										}
HXDLIN(  92)										_this->s5 = out;
            									}
HXDLIN(  92)									_this->l--;
            								}
HXDLIN(  92)								this->lastX = (out + this->lastX);
HXLINE(  93)								::justPath::StoreF6 _this1 = this->store;
HXDLIN(  93)								 ::Dynamic out1 = _this1->s0;
HXDLIN(  93)								if ((_this1->l != 0)) {
HXLINE(  93)									_this1->s0 = _this1->s1;
HXDLIN(  93)									_this1->s1 = _this1->s2;
HXDLIN(  93)									_this1->s2 = _this1->s3;
HXDLIN(  93)									_this1->s3 = _this1->s4;
HXDLIN(  93)									_this1->s4 = _this1->s5;
HXDLIN(  93)									_this1->s5 = null();
HXDLIN(  93)									if (::hx::IsNotNull( _this1->s6 )) {
HXLINE(  93)										::justPath::StoreF6 _this = _this1->s6;
HXDLIN(  93)										 ::Dynamic out = _this->s0;
HXDLIN(  93)										if ((_this->l != 0)) {
HXLINE(  93)											_this->s0 = _this->s1;
HXDLIN(  93)											_this->s1 = _this->s2;
HXDLIN(  93)											_this->s2 = _this->s3;
HXDLIN(  93)											_this->s3 = _this->s4;
HXDLIN(  93)											_this->s4 = _this->s5;
HXDLIN(  93)											_this->s5 = null();
HXDLIN(  93)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE(  93)												_this->s5 = _this->s6->shift();
            											}
HXDLIN(  93)											_this->l--;
            										}
HXDLIN(  93)										_this1->s5 = out;
            									}
HXDLIN(  93)									_this1->l--;
            								}
HXDLIN(  93)								this->lastY = (out1 + this->lastY);
HXLINE(  94)								::justPath::ILinePathContext_obj::lineTo(this->pathContext,this->lastX,this->lastY);
            							}
            						}
            					}
            				}
            				break;
            				case (int)109: {
HXLINE(  56)					{
HXLINE(  56)						{
HXLINE(  56)							::justPath::StoreF6 _this = this->store;
HXDLIN(  56)							_this->l = 0;
HXDLIN(  56)							_this->s0 = null();
HXDLIN(  56)							_this->s1 = null();
HXDLIN(  56)							_this->s2 = null();
HXDLIN(  56)							_this->s3 = null();
HXDLIN(  56)							_this->s4 = null();
HXDLIN(  56)							_this->s5 = null();
HXDLIN(  56)							_this->s6 = null();
            						}
HXDLIN(  56)						this->c = this->str.cca(this->pos++);
HXDLIN(  56)						::String temp = HX_("",00,00,00,00);
HXDLIN(  56)						bool exit = false;
HXDLIN(  56)						while(true){
HXLINE(  56)							switch((int)(this->c)){
            								case (int)32: case (int)44: {
HXLINE(  56)									if ((temp != HX_("",00,00,00,00))) {
HXLINE(  56)										if (((this->store->l & 1) == 0)) {
HXLINE(  56)											::justPath::StoreF6 _this = this->store;
HXDLIN(  56)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  56)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  56)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  56)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  56)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  56)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  56)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  56)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  56)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  56)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  56)													{
HXLINE(  56)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  56)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  56)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  56)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  56)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  56)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  56)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  56)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  56)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  56)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  56)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  56)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  56)											_this->l++;
            										}
            										else {
HXLINE(  56)											::justPath::StoreF6 _this = this->store;
HXDLIN(  56)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  56)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  56)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  56)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  56)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  56)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  56)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  56)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  56)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  56)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  56)													{
HXLINE(  56)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  56)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  56)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  56)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  56)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  56)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  56)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  56)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  56)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  56)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  56)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  56)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  56)											_this->l++;
            										}
HXDLIN(  56)										temp = HX_("",00,00,00,00);
            									}
            								}
            								break;
            								case (int)45: {
HXLINE(  56)									if ((temp != HX_("",00,00,00,00))) {
HXLINE(  56)										if (((this->store->l & 1) == 0)) {
HXLINE(  56)											::justPath::StoreF6 _this = this->store;
HXDLIN(  56)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  56)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  56)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  56)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  56)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  56)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  56)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  56)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  56)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  56)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  56)													{
HXLINE(  56)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  56)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  56)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  56)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  56)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  56)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  56)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  56)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  56)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  56)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  56)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  56)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  56)											_this->l++;
            										}
            										else {
HXLINE(  56)											::justPath::StoreF6 _this = this->store;
HXDLIN(  56)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  56)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  56)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  56)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  56)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  56)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  56)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  56)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  56)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  56)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  56)													{
HXLINE(  56)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  56)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  56)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  56)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  56)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  56)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  56)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  56)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  56)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  56)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  56)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  56)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  56)											_this->l++;
            										}
            									}
HXDLIN(  56)									temp = HX_("-",2d,00,00,00);
            								}
            								break;
            								case (int)46: {
HXLINE(  56)									temp = (temp + HX_(".",2e,00,00,00));
            								}
            								break;
            								case (int)48: {
HXLINE(  56)									temp = (temp + HX_("0",30,00,00,00));
            								}
            								break;
            								case (int)49: {
HXLINE(  56)									temp = (temp + HX_("1",31,00,00,00));
            								}
            								break;
            								case (int)50: {
HXLINE(  56)									temp = (temp + HX_("2",32,00,00,00));
            								}
            								break;
            								case (int)51: {
HXLINE(  56)									temp = (temp + HX_("3",33,00,00,00));
            								}
            								break;
            								case (int)52: {
HXLINE(  56)									temp = (temp + HX_("4",34,00,00,00));
            								}
            								break;
            								case (int)53: {
HXLINE(  56)									temp = (temp + HX_("5",35,00,00,00));
            								}
            								break;
            								case (int)54: {
HXLINE(  56)									temp = (temp + HX_("6",36,00,00,00));
            								}
            								break;
            								case (int)55: {
HXLINE(  56)									temp = (temp + HX_("7",37,00,00,00));
            								}
            								break;
            								case (int)56: {
HXLINE(  56)									temp = (temp + HX_("8",38,00,00,00));
            								}
            								break;
            								case (int)57: {
HXLINE(  56)									temp = (temp + HX_("9",39,00,00,00));
            								}
            								break;
            								default:{
HXLINE(  56)									if ((temp != HX_("",00,00,00,00))) {
HXLINE(  56)										if (((this->store->l & 1) == 0)) {
HXLINE(  56)											::justPath::StoreF6 _this = this->store;
HXDLIN(  56)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  56)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  56)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  56)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  56)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  56)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  56)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  56)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  56)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  56)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  56)													{
HXLINE(  56)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  56)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  56)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  56)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  56)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  56)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  56)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  56)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  56)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  56)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  56)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  56)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  56)											_this->l++;
            										}
            										else {
HXLINE(  56)											::justPath::StoreF6 _this = this->store;
HXDLIN(  56)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN(  56)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE(  56)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE(  56)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE(  56)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE(  56)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE(  56)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE(  56)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE(  56)													if (::hx::IsNull( _this->s6 )) {
HXLINE(  56)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN(  56)													{
HXLINE(  56)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  56)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE(  56)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE(  56)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE(  56)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE(  56)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE(  56)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE(  56)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE(  56)																if (::hx::IsNull( _this1->s6 )) {
HXLINE(  56)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN(  56)																_this1->s6->push(v);
            															}
            														}
HXDLIN(  56)														_this1->l++;
            													}
            												}
            											}
HXDLIN(  56)											_this->l++;
            										}
HXDLIN(  56)										temp = HX_("",00,00,00,00);
            									}
HXDLIN(  56)									this->pos--;
HXDLIN(  56)									exit = true;
            								}
            							}
HXDLIN(  56)							if (exit) {
HXLINE(  56)								goto _hx_goto_48;
            							}
HXDLIN(  56)							this->c = this->str.cca(this->pos++);
            						}
            						_hx_goto_48:;
            					}
HXLINE(  57)					if ((this->store->l == 2)) {
HXLINE(  58)						this->lastX = (this->store->s0 + this->lastX);
HXLINE(  59)						this->lastY = (this->store->s1 + this->lastY);
HXLINE(  60)						::justPath::ILinePathContext_obj::moveTo(this->pathContext,this->lastX,this->lastY);
            					}
            					else {
HXLINE(  61)						if ((this->store->l > 2)) {
HXLINE(  62)							::justPath::StoreF6 _this = this->store;
HXDLIN(  62)							 ::Dynamic out = _this->s0;
HXDLIN(  62)							if ((_this->l != 0)) {
HXLINE(  62)								_this->s0 = _this->s1;
HXDLIN(  62)								_this->s1 = _this->s2;
HXDLIN(  62)								_this->s2 = _this->s3;
HXDLIN(  62)								_this->s3 = _this->s4;
HXDLIN(  62)								_this->s4 = _this->s5;
HXDLIN(  62)								_this->s5 = null();
HXDLIN(  62)								if (::hx::IsNotNull( _this->s6 )) {
HXLINE(  62)									::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  62)									 ::Dynamic out = _this1->s0;
HXDLIN(  62)									if ((_this1->l != 0)) {
HXLINE(  62)										_this1->s0 = _this1->s1;
HXDLIN(  62)										_this1->s1 = _this1->s2;
HXDLIN(  62)										_this1->s2 = _this1->s3;
HXDLIN(  62)										_this1->s3 = _this1->s4;
HXDLIN(  62)										_this1->s4 = _this1->s5;
HXDLIN(  62)										_this1->s5 = null();
HXDLIN(  62)										if (::hx::IsNotNull( _this1->s6 )) {
HXLINE(  62)											_this1->s5 = _this1->s6->shift();
            										}
HXDLIN(  62)										_this1->l--;
            									}
HXDLIN(  62)									_this->s5 = out;
            								}
HXDLIN(  62)								_this->l--;
            							}
HXDLIN(  62)							this->lastX = (out + this->lastX);
HXLINE(  63)							::justPath::StoreF6 _this1 = this->store;
HXDLIN(  63)							 ::Dynamic out1 = _this1->s0;
HXDLIN(  63)							if ((_this1->l != 0)) {
HXLINE(  63)								_this1->s0 = _this1->s1;
HXDLIN(  63)								_this1->s1 = _this1->s2;
HXDLIN(  63)								_this1->s2 = _this1->s3;
HXDLIN(  63)								_this1->s3 = _this1->s4;
HXDLIN(  63)								_this1->s4 = _this1->s5;
HXDLIN(  63)								_this1->s5 = null();
HXDLIN(  63)								if (::hx::IsNotNull( _this1->s6 )) {
HXLINE(  63)									::justPath::StoreF6 _this = _this1->s6;
HXDLIN(  63)									 ::Dynamic out = _this->s0;
HXDLIN(  63)									if ((_this->l != 0)) {
HXLINE(  63)										_this->s0 = _this->s1;
HXDLIN(  63)										_this->s1 = _this->s2;
HXDLIN(  63)										_this->s2 = _this->s3;
HXDLIN(  63)										_this->s3 = _this->s4;
HXDLIN(  63)										_this->s4 = _this->s5;
HXDLIN(  63)										_this->s5 = null();
HXDLIN(  63)										if (::hx::IsNotNull( _this->s6 )) {
HXLINE(  63)											_this->s5 = _this->s6->shift();
            										}
HXDLIN(  63)										_this->l--;
            									}
HXDLIN(  63)									_this1->s5 = out;
            								}
HXDLIN(  63)								_this1->l--;
            							}
HXDLIN(  63)							this->lastY = (out1 + this->lastY);
HXLINE(  64)							::justPath::ILinePathContext_obj::moveTo(this->pathContext,this->lastX,this->lastY);
HXLINE(  65)							while((this->store->l > 1)){
HXLINE(  66)								::justPath::StoreF6 _this = this->store;
HXDLIN(  66)								 ::Dynamic out = _this->s0;
HXDLIN(  66)								if ((_this->l != 0)) {
HXLINE(  66)									_this->s0 = _this->s1;
HXDLIN(  66)									_this->s1 = _this->s2;
HXDLIN(  66)									_this->s2 = _this->s3;
HXDLIN(  66)									_this->s3 = _this->s4;
HXDLIN(  66)									_this->s4 = _this->s5;
HXDLIN(  66)									_this->s5 = null();
HXDLIN(  66)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE(  66)										::justPath::StoreF6 _this1 = _this->s6;
HXDLIN(  66)										 ::Dynamic out = _this1->s0;
HXDLIN(  66)										if ((_this1->l != 0)) {
HXLINE(  66)											_this1->s0 = _this1->s1;
HXDLIN(  66)											_this1->s1 = _this1->s2;
HXDLIN(  66)											_this1->s2 = _this1->s3;
HXDLIN(  66)											_this1->s3 = _this1->s4;
HXDLIN(  66)											_this1->s4 = _this1->s5;
HXDLIN(  66)											_this1->s5 = null();
HXDLIN(  66)											if (::hx::IsNotNull( _this1->s6 )) {
HXLINE(  66)												_this1->s5 = _this1->s6->shift();
            											}
HXDLIN(  66)											_this1->l--;
            										}
HXDLIN(  66)										_this->s5 = out;
            									}
HXDLIN(  66)									_this->l--;
            								}
HXDLIN(  66)								this->lastX = (out + this->lastX);
HXLINE(  67)								::justPath::StoreF6 _this1 = this->store;
HXDLIN(  67)								 ::Dynamic out1 = _this1->s0;
HXDLIN(  67)								if ((_this1->l != 0)) {
HXLINE(  67)									_this1->s0 = _this1->s1;
HXDLIN(  67)									_this1->s1 = _this1->s2;
HXDLIN(  67)									_this1->s2 = _this1->s3;
HXDLIN(  67)									_this1->s3 = _this1->s4;
HXDLIN(  67)									_this1->s4 = _this1->s5;
HXDLIN(  67)									_this1->s5 = null();
HXDLIN(  67)									if (::hx::IsNotNull( _this1->s6 )) {
HXLINE(  67)										::justPath::StoreF6 _this = _this1->s6;
HXDLIN(  67)										 ::Dynamic out = _this->s0;
HXDLIN(  67)										if ((_this->l != 0)) {
HXLINE(  67)											_this->s0 = _this->s1;
HXDLIN(  67)											_this->s1 = _this->s2;
HXDLIN(  67)											_this->s2 = _this->s3;
HXDLIN(  67)											_this->s3 = _this->s4;
HXDLIN(  67)											_this->s4 = _this->s5;
HXDLIN(  67)											_this->s5 = null();
HXDLIN(  67)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE(  67)												_this->s5 = _this->s6->shift();
            											}
HXDLIN(  67)											_this->l--;
            										}
HXDLIN(  67)										_this1->s5 = out;
            									}
HXDLIN(  67)									_this1->l--;
            								}
HXDLIN(  67)								this->lastY = (out1 + this->lastY);
HXLINE(  68)								::justPath::ILinePathContext_obj::lineTo(this->pathContext,this->lastX,this->lastY);
            							}
            						}
            					}
            				}
            				break;
            				case (int)113: {
HXLINE( 258)					{
HXLINE( 258)						{
HXLINE( 258)							::justPath::StoreF6 _this = this->store;
HXDLIN( 258)							_this->l = 0;
HXDLIN( 258)							_this->s0 = null();
HXDLIN( 258)							_this->s1 = null();
HXDLIN( 258)							_this->s2 = null();
HXDLIN( 258)							_this->s3 = null();
HXDLIN( 258)							_this->s4 = null();
HXDLIN( 258)							_this->s5 = null();
HXDLIN( 258)							_this->s6 = null();
            						}
HXDLIN( 258)						this->c = this->str.cca(this->pos++);
HXDLIN( 258)						::String temp = HX_("",00,00,00,00);
HXDLIN( 258)						bool exit = false;
HXDLIN( 258)						while(true){
HXLINE( 258)							switch((int)(this->c)){
            								case (int)32: case (int)44: {
HXLINE( 258)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 258)										if (((this->store->l & 1) == 0)) {
HXLINE( 258)											::justPath::StoreF6 _this = this->store;
HXDLIN( 258)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 258)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 258)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 258)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 258)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 258)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 258)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 258)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 258)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 258)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 258)													{
HXLINE( 258)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 258)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 258)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 258)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 258)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 258)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 258)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 258)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 258)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 258)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 258)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 258)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 258)											_this->l++;
            										}
            										else {
HXLINE( 258)											::justPath::StoreF6 _this = this->store;
HXDLIN( 258)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 258)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 258)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 258)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 258)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 258)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 258)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 258)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 258)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 258)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 258)													{
HXLINE( 258)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 258)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 258)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 258)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 258)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 258)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 258)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 258)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 258)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 258)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 258)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 258)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 258)											_this->l++;
            										}
HXDLIN( 258)										temp = HX_("",00,00,00,00);
            									}
            								}
            								break;
            								case (int)45: {
HXLINE( 258)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 258)										if (((this->store->l & 1) == 0)) {
HXLINE( 258)											::justPath::StoreF6 _this = this->store;
HXDLIN( 258)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 258)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 258)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 258)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 258)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 258)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 258)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 258)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 258)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 258)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 258)													{
HXLINE( 258)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 258)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 258)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 258)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 258)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 258)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 258)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 258)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 258)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 258)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 258)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 258)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 258)											_this->l++;
            										}
            										else {
HXLINE( 258)											::justPath::StoreF6 _this = this->store;
HXDLIN( 258)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 258)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 258)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 258)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 258)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 258)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 258)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 258)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 258)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 258)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 258)													{
HXLINE( 258)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 258)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 258)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 258)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 258)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 258)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 258)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 258)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 258)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 258)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 258)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 258)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 258)											_this->l++;
            										}
            									}
HXDLIN( 258)									temp = HX_("-",2d,00,00,00);
            								}
            								break;
            								case (int)46: {
HXLINE( 258)									temp = (temp + HX_(".",2e,00,00,00));
            								}
            								break;
            								case (int)48: {
HXLINE( 258)									temp = (temp + HX_("0",30,00,00,00));
            								}
            								break;
            								case (int)49: {
HXLINE( 258)									temp = (temp + HX_("1",31,00,00,00));
            								}
            								break;
            								case (int)50: {
HXLINE( 258)									temp = (temp + HX_("2",32,00,00,00));
            								}
            								break;
            								case (int)51: {
HXLINE( 258)									temp = (temp + HX_("3",33,00,00,00));
            								}
            								break;
            								case (int)52: {
HXLINE( 258)									temp = (temp + HX_("4",34,00,00,00));
            								}
            								break;
            								case (int)53: {
HXLINE( 258)									temp = (temp + HX_("5",35,00,00,00));
            								}
            								break;
            								case (int)54: {
HXLINE( 258)									temp = (temp + HX_("6",36,00,00,00));
            								}
            								break;
            								case (int)55: {
HXLINE( 258)									temp = (temp + HX_("7",37,00,00,00));
            								}
            								break;
            								case (int)56: {
HXLINE( 258)									temp = (temp + HX_("8",38,00,00,00));
            								}
            								break;
            								case (int)57: {
HXLINE( 258)									temp = (temp + HX_("9",39,00,00,00));
            								}
            								break;
            								default:{
HXLINE( 258)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 258)										if (((this->store->l & 1) == 0)) {
HXLINE( 258)											::justPath::StoreF6 _this = this->store;
HXDLIN( 258)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 258)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 258)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 258)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 258)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 258)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 258)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 258)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 258)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 258)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 258)													{
HXLINE( 258)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 258)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 258)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 258)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 258)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 258)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 258)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 258)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 258)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 258)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 258)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 258)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 258)											_this->l++;
            										}
            										else {
HXLINE( 258)											::justPath::StoreF6 _this = this->store;
HXDLIN( 258)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 258)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 258)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 258)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 258)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 258)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 258)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 258)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 258)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 258)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 258)													{
HXLINE( 258)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 258)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 258)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 258)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 258)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 258)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 258)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 258)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 258)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 258)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 258)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 258)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 258)											_this->l++;
            										}
HXDLIN( 258)										temp = HX_("",00,00,00,00);
            									}
HXDLIN( 258)									this->pos--;
HXDLIN( 258)									exit = true;
            								}
            							}
HXDLIN( 258)							if (exit) {
HXLINE( 258)								goto _hx_goto_50;
            							}
HXDLIN( 258)							this->c = this->str.cca(this->pos++);
            						}
            						_hx_goto_50:;
            					}
HXLINE( 259)					if ((this->store->l == 4)) {
HXLINE( 260)						this->controlX = (this->lastX + this->store->s0);
HXLINE( 261)						this->controlY = (this->lastY + this->store->s1);
HXLINE( 262)						this->lastX = (this->store->s0 + this->lastX);
HXLINE( 263)						this->lastY = (this->store->s1 + this->lastY);
HXLINE( 264)						{
HXLINE( 264)							Float x1 = this->controlX;
HXDLIN( 264)							Float y1 = this->controlY;
HXDLIN( 264)							Float x2 = this->lastX;
HXDLIN( 264)							Float y2 = this->lastY;
HXDLIN( 264)							::Array< Float > tempArr = ::Array_obj< Float >::__new(0);
HXDLIN( 264)							{
HXLINE( 264)								Float ax = this->px;
HXDLIN( 264)								Float ay = this->py;
HXDLIN( 264)								Float x = (ax - x1);
HXDLIN( 264)								Float y = (ay - y1);
HXDLIN( 264)								Float x3 = (x1 - x2);
HXDLIN( 264)								Float y3 = (y1 - y2);
HXDLIN( 264)								Float approxDistance = (::Math_obj::sqrt(((x * x) + (y * y))) + ::Math_obj::sqrt(((x3 * x3) + (y3 * y3))));
HXDLIN( 264)								if ((approxDistance == 0)) {
HXLINE( 264)									approxDistance = ((Float)0.000001);
            								}
HXDLIN( 264)								Float step = ::Math_obj::min((( (Float)(1) ) / (approxDistance * ((Float)0.707))),::justPath::_CurveMath::CurveMath_Fields__obj::quadStep);
HXDLIN( 264)								int l = tempArr->length;
HXDLIN( 264)								l = (l + 1);
HXDLIN( 264)								tempArr[(l - 1)] = ax;
HXDLIN( 264)								l = (l + 1);
HXDLIN( 264)								tempArr[(l - 1)] = ay;
HXDLIN( 264)								Float t = step;
HXDLIN( 264)								while((t < ((Float)1.))){
HXLINE( 264)									l = (l + 1);
HXDLIN( 264)									Float u = (( (Float)(1) ) - t);
HXDLIN( 264)									tempArr[(l - 1)] = (((::Math_obj::pow(u,( (Float)(2) )) * ax) + (((( (Float)(2) ) * u) * t) * x1)) + (::Math_obj::pow(t,( (Float)(2) )) * x2));
HXDLIN( 264)									l = (l + 1);
HXDLIN( 264)									Float u1 = (( (Float)(1) ) - t);
HXDLIN( 264)									tempArr[(l - 1)] = (((::Math_obj::pow(u1,( (Float)(2) )) * ay) + (((( (Float)(2) ) * u1) * t) * y1)) + (::Math_obj::pow(t,( (Float)(2) )) * y2));
HXDLIN( 264)									t = (t + step);
            								}
HXDLIN( 264)								l = (l + 1);
HXDLIN( 264)								tempArr[(l - 1)] = x2;
HXDLIN( 264)								l = (l + 1);
HXDLIN( 264)								tempArr[(l - 1)] = y2;
            							}
HXDLIN( 264)							::haxe::Log_obj::trace(tempArr,::hx::SourceInfo(HX_("justPath/SvgLinePath.hx",5f,c6,70,0f),502,HX_("justPath.SvgLinePath",20,f0,4a,08),HX_("quadTo",22,82,9f,cc)));
HXDLIN( 264)							{
HXLINE( 264)								 ::Dynamic withMove = false;
HXDLIN( 264)								if (::hx::IsNull( withMove )) {
HXLINE( 264)									withMove = true;
            								}
HXDLIN( 264)								int l1 = tempArr->length;
HXDLIN( 264)								int i = 2;
HXDLIN( 264)								if (( (bool)(withMove) )) {
HXLINE( 264)									::justPath::ILinePathContext_obj::moveTo(this->pathContext,tempArr->__get(0),tempArr->__get(1));
            								}
            								else {
HXLINE( 264)									::justPath::ILinePathContext_obj::lineSegmentTo(this->pathContext,tempArr->__get(0),tempArr->__get(1));
            								}
HXDLIN( 264)								while((i < l1)){
HXLINE( 264)									::justPath::ILinePathContext_obj::lineSegmentTo(this->pathContext,tempArr->__get(i),tempArr->__get((i + 1)));
HXDLIN( 264)									i = (i + 2);
            								}
            							}
HXDLIN( 264)							tempArr = ::Array_obj< Float >::__new(0);
HXDLIN( 264)							this->px = x2;
HXDLIN( 264)							this->py = y2;
            						}
            					}
            					else {
HXLINE( 265)						if ((this->store->l > 4)) {
HXLINE( 266)							while((this->store->l > 3)){
HXLINE( 267)								Float _hx_tmp = this->lastX;
HXDLIN( 267)								::justPath::StoreF6 _this = this->store;
HXDLIN( 267)								 ::Dynamic out = _this->s0;
HXDLIN( 267)								if ((_this->l != 0)) {
HXLINE( 267)									_this->s0 = _this->s1;
HXDLIN( 267)									_this->s1 = _this->s2;
HXDLIN( 267)									_this->s2 = _this->s3;
HXDLIN( 267)									_this->s3 = _this->s4;
HXDLIN( 267)									_this->s4 = _this->s5;
HXDLIN( 267)									_this->s5 = null();
HXDLIN( 267)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 267)										::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 267)										 ::Dynamic out = _this1->s0;
HXDLIN( 267)										if ((_this1->l != 0)) {
HXLINE( 267)											_this1->s0 = _this1->s1;
HXDLIN( 267)											_this1->s1 = _this1->s2;
HXDLIN( 267)											_this1->s2 = _this1->s3;
HXDLIN( 267)											_this1->s3 = _this1->s4;
HXDLIN( 267)											_this1->s4 = _this1->s5;
HXDLIN( 267)											_this1->s5 = null();
HXDLIN( 267)											if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 267)												_this1->s5 = _this1->s6->shift();
            											}
HXDLIN( 267)											_this1->l--;
            										}
HXDLIN( 267)										_this->s5 = out;
            									}
HXDLIN( 267)									_this->l--;
            								}
HXDLIN( 267)								this->controlX = (_hx_tmp + out);
HXLINE( 268)								Float _hx_tmp1 = this->lastY;
HXDLIN( 268)								::justPath::StoreF6 _this1 = this->store;
HXDLIN( 268)								 ::Dynamic out1 = _this1->s0;
HXDLIN( 268)								if ((_this1->l != 0)) {
HXLINE( 268)									_this1->s0 = _this1->s1;
HXDLIN( 268)									_this1->s1 = _this1->s2;
HXDLIN( 268)									_this1->s2 = _this1->s3;
HXDLIN( 268)									_this1->s3 = _this1->s4;
HXDLIN( 268)									_this1->s4 = _this1->s5;
HXDLIN( 268)									_this1->s5 = null();
HXDLIN( 268)									if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 268)										::justPath::StoreF6 _this = _this1->s6;
HXDLIN( 268)										 ::Dynamic out = _this->s0;
HXDLIN( 268)										if ((_this->l != 0)) {
HXLINE( 268)											_this->s0 = _this->s1;
HXDLIN( 268)											_this->s1 = _this->s2;
HXDLIN( 268)											_this->s2 = _this->s3;
HXDLIN( 268)											_this->s3 = _this->s4;
HXDLIN( 268)											_this->s4 = _this->s5;
HXDLIN( 268)											_this->s5 = null();
HXDLIN( 268)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 268)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 268)											_this->l--;
            										}
HXDLIN( 268)										_this1->s5 = out;
            									}
HXDLIN( 268)									_this1->l--;
            								}
HXDLIN( 268)								this->controlY = (_hx_tmp1 + out1);
HXLINE( 269)								::justPath::StoreF6 _this2 = this->store;
HXDLIN( 269)								 ::Dynamic out2 = _this2->s0;
HXDLIN( 269)								if ((_this2->l != 0)) {
HXLINE( 269)									_this2->s0 = _this2->s1;
HXDLIN( 269)									_this2->s1 = _this2->s2;
HXDLIN( 269)									_this2->s2 = _this2->s3;
HXDLIN( 269)									_this2->s3 = _this2->s4;
HXDLIN( 269)									_this2->s4 = _this2->s5;
HXDLIN( 269)									_this2->s5 = null();
HXDLIN( 269)									if (::hx::IsNotNull( _this2->s6 )) {
HXLINE( 269)										::justPath::StoreF6 _this = _this2->s6;
HXDLIN( 269)										 ::Dynamic out = _this->s0;
HXDLIN( 269)										if ((_this->l != 0)) {
HXLINE( 269)											_this->s0 = _this->s1;
HXDLIN( 269)											_this->s1 = _this->s2;
HXDLIN( 269)											_this->s2 = _this->s3;
HXDLIN( 269)											_this->s3 = _this->s4;
HXDLIN( 269)											_this->s4 = _this->s5;
HXDLIN( 269)											_this->s5 = null();
HXDLIN( 269)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 269)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 269)											_this->l--;
            										}
HXDLIN( 269)										_this2->s5 = out;
            									}
HXDLIN( 269)									_this2->l--;
            								}
HXDLIN( 269)								this->lastX = (out2 + this->lastX);
HXLINE( 270)								::justPath::StoreF6 _this3 = this->store;
HXDLIN( 270)								 ::Dynamic out3 = _this3->s0;
HXDLIN( 270)								if ((_this3->l != 0)) {
HXLINE( 270)									_this3->s0 = _this3->s1;
HXDLIN( 270)									_this3->s1 = _this3->s2;
HXDLIN( 270)									_this3->s2 = _this3->s3;
HXDLIN( 270)									_this3->s3 = _this3->s4;
HXDLIN( 270)									_this3->s4 = _this3->s5;
HXDLIN( 270)									_this3->s5 = null();
HXDLIN( 270)									if (::hx::IsNotNull( _this3->s6 )) {
HXLINE( 270)										::justPath::StoreF6 _this = _this3->s6;
HXDLIN( 270)										 ::Dynamic out = _this->s0;
HXDLIN( 270)										if ((_this->l != 0)) {
HXLINE( 270)											_this->s0 = _this->s1;
HXDLIN( 270)											_this->s1 = _this->s2;
HXDLIN( 270)											_this->s2 = _this->s3;
HXDLIN( 270)											_this->s3 = _this->s4;
HXDLIN( 270)											_this->s4 = _this->s5;
HXDLIN( 270)											_this->s5 = null();
HXDLIN( 270)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 270)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 270)											_this->l--;
            										}
HXDLIN( 270)										_this3->s5 = out;
            									}
HXDLIN( 270)									_this3->l--;
            								}
HXDLIN( 270)								this->lastY = (out3 + this->lastY);
HXLINE( 271)								{
HXLINE( 271)									Float x1 = this->controlX;
HXDLIN( 271)									Float y1 = this->controlY;
HXDLIN( 271)									Float x2 = this->lastX;
HXDLIN( 271)									Float y2 = this->lastY;
HXDLIN( 271)									::Array< Float > tempArr = ::Array_obj< Float >::__new(0);
HXDLIN( 271)									{
HXLINE( 271)										Float ax = this->px;
HXDLIN( 271)										Float ay = this->py;
HXDLIN( 271)										Float x = (ax - x1);
HXDLIN( 271)										Float y = (ay - y1);
HXDLIN( 271)										Float x3 = (x1 - x2);
HXDLIN( 271)										Float y3 = (y1 - y2);
HXDLIN( 271)										Float approxDistance = (::Math_obj::sqrt(((x * x) + (y * y))) + ::Math_obj::sqrt(((x3 * x3) + (y3 * y3))));
HXDLIN( 271)										if ((approxDistance == 0)) {
HXLINE( 271)											approxDistance = ((Float)0.000001);
            										}
HXDLIN( 271)										Float step = ::Math_obj::min((( (Float)(1) ) / (approxDistance * ((Float)0.707))),::justPath::_CurveMath::CurveMath_Fields__obj::quadStep);
HXDLIN( 271)										int l = tempArr->length;
HXDLIN( 271)										l = (l + 1);
HXDLIN( 271)										tempArr[(l - 1)] = ax;
HXDLIN( 271)										l = (l + 1);
HXDLIN( 271)										tempArr[(l - 1)] = ay;
HXDLIN( 271)										Float t = step;
HXDLIN( 271)										while((t < ((Float)1.))){
HXLINE( 271)											l = (l + 1);
HXDLIN( 271)											Float u = (( (Float)(1) ) - t);
HXDLIN( 271)											tempArr[(l - 1)] = (((::Math_obj::pow(u,( (Float)(2) )) * ax) + (((( (Float)(2) ) * u) * t) * x1)) + (::Math_obj::pow(t,( (Float)(2) )) * x2));
HXDLIN( 271)											l = (l + 1);
HXDLIN( 271)											Float u1 = (( (Float)(1) ) - t);
HXDLIN( 271)											tempArr[(l - 1)] = (((::Math_obj::pow(u1,( (Float)(2) )) * ay) + (((( (Float)(2) ) * u1) * t) * y1)) + (::Math_obj::pow(t,( (Float)(2) )) * y2));
HXDLIN( 271)											t = (t + step);
            										}
HXDLIN( 271)										l = (l + 1);
HXDLIN( 271)										tempArr[(l - 1)] = x2;
HXDLIN( 271)										l = (l + 1);
HXDLIN( 271)										tempArr[(l - 1)] = y2;
            									}
HXDLIN( 271)									::haxe::Log_obj::trace(tempArr,::hx::SourceInfo(HX_("justPath/SvgLinePath.hx",5f,c6,70,0f),502,HX_("justPath.SvgLinePath",20,f0,4a,08),HX_("quadTo",22,82,9f,cc)));
HXDLIN( 271)									{
HXLINE( 271)										 ::Dynamic withMove = false;
HXDLIN( 271)										if (::hx::IsNull( withMove )) {
HXLINE( 271)											withMove = true;
            										}
HXDLIN( 271)										int l1 = tempArr->length;
HXDLIN( 271)										int i = 2;
HXDLIN( 271)										if (( (bool)(withMove) )) {
HXLINE( 271)											::justPath::ILinePathContext_obj::moveTo(this->pathContext,tempArr->__get(0),tempArr->__get(1));
            										}
            										else {
HXLINE( 271)											::justPath::ILinePathContext_obj::lineSegmentTo(this->pathContext,tempArr->__get(0),tempArr->__get(1));
            										}
HXDLIN( 271)										while((i < l1)){
HXLINE( 271)											::justPath::ILinePathContext_obj::lineSegmentTo(this->pathContext,tempArr->__get(i),tempArr->__get((i + 1)));
HXDLIN( 271)											i = (i + 2);
            										}
            									}
HXDLIN( 271)									tempArr = ::Array_obj< Float >::__new(0);
HXDLIN( 271)									this->px = x2;
HXDLIN( 271)									this->py = y2;
            								}
            							}
            						}
            					}
            				}
            				break;
            				case (int)115: {
HXLINE( 214)					{
HXLINE( 214)						{
HXLINE( 214)							::justPath::StoreF6 _this = this->store;
HXDLIN( 214)							_this->l = 0;
HXDLIN( 214)							_this->s0 = null();
HXDLIN( 214)							_this->s1 = null();
HXDLIN( 214)							_this->s2 = null();
HXDLIN( 214)							_this->s3 = null();
HXDLIN( 214)							_this->s4 = null();
HXDLIN( 214)							_this->s5 = null();
HXDLIN( 214)							_this->s6 = null();
            						}
HXDLIN( 214)						this->c = this->str.cca(this->pos++);
HXDLIN( 214)						::String temp = HX_("",00,00,00,00);
HXDLIN( 214)						bool exit = false;
HXDLIN( 214)						while(true){
HXLINE( 214)							switch((int)(this->c)){
            								case (int)32: case (int)44: {
HXLINE( 214)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 214)										if (((this->store->l & 1) == 0)) {
HXLINE( 214)											::justPath::StoreF6 _this = this->store;
HXDLIN( 214)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 214)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 214)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 214)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 214)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 214)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 214)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 214)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 214)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 214)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 214)													{
HXLINE( 214)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 214)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 214)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 214)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 214)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 214)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 214)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 214)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 214)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 214)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 214)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 214)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 214)											_this->l++;
            										}
            										else {
HXLINE( 214)											::justPath::StoreF6 _this = this->store;
HXDLIN( 214)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 214)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 214)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 214)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 214)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 214)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 214)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 214)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 214)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 214)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 214)													{
HXLINE( 214)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 214)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 214)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 214)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 214)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 214)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 214)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 214)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 214)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 214)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 214)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 214)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 214)											_this->l++;
            										}
HXDLIN( 214)										temp = HX_("",00,00,00,00);
            									}
            								}
            								break;
            								case (int)45: {
HXLINE( 214)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 214)										if (((this->store->l & 1) == 0)) {
HXLINE( 214)											::justPath::StoreF6 _this = this->store;
HXDLIN( 214)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 214)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 214)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 214)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 214)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 214)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 214)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 214)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 214)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 214)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 214)													{
HXLINE( 214)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 214)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 214)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 214)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 214)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 214)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 214)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 214)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 214)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 214)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 214)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 214)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 214)											_this->l++;
            										}
            										else {
HXLINE( 214)											::justPath::StoreF6 _this = this->store;
HXDLIN( 214)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 214)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 214)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 214)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 214)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 214)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 214)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 214)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 214)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 214)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 214)													{
HXLINE( 214)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 214)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 214)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 214)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 214)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 214)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 214)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 214)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 214)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 214)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 214)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 214)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 214)											_this->l++;
            										}
            									}
HXDLIN( 214)									temp = HX_("-",2d,00,00,00);
            								}
            								break;
            								case (int)46: {
HXLINE( 214)									temp = (temp + HX_(".",2e,00,00,00));
            								}
            								break;
            								case (int)48: {
HXLINE( 214)									temp = (temp + HX_("0",30,00,00,00));
            								}
            								break;
            								case (int)49: {
HXLINE( 214)									temp = (temp + HX_("1",31,00,00,00));
            								}
            								break;
            								case (int)50: {
HXLINE( 214)									temp = (temp + HX_("2",32,00,00,00));
            								}
            								break;
            								case (int)51: {
HXLINE( 214)									temp = (temp + HX_("3",33,00,00,00));
            								}
            								break;
            								case (int)52: {
HXLINE( 214)									temp = (temp + HX_("4",34,00,00,00));
            								}
            								break;
            								case (int)53: {
HXLINE( 214)									temp = (temp + HX_("5",35,00,00,00));
            								}
            								break;
            								case (int)54: {
HXLINE( 214)									temp = (temp + HX_("6",36,00,00,00));
            								}
            								break;
            								case (int)55: {
HXLINE( 214)									temp = (temp + HX_("7",37,00,00,00));
            								}
            								break;
            								case (int)56: {
HXLINE( 214)									temp = (temp + HX_("8",38,00,00,00));
            								}
            								break;
            								case (int)57: {
HXLINE( 214)									temp = (temp + HX_("9",39,00,00,00));
            								}
            								break;
            								default:{
HXLINE( 214)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 214)										if (((this->store->l & 1) == 0)) {
HXLINE( 214)											::justPath::StoreF6 _this = this->store;
HXDLIN( 214)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 214)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 214)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 214)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 214)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 214)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 214)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 214)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 214)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 214)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 214)													{
HXLINE( 214)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 214)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 214)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 214)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 214)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 214)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 214)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 214)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 214)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 214)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 214)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 214)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 214)											_this->l++;
            										}
            										else {
HXLINE( 214)											::justPath::StoreF6 _this = this->store;
HXDLIN( 214)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 214)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 214)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 214)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 214)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 214)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 214)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 214)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 214)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 214)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 214)													{
HXLINE( 214)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 214)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 214)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 214)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 214)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 214)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 214)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 214)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 214)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 214)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 214)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 214)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 214)											_this->l++;
            										}
HXDLIN( 214)										temp = HX_("",00,00,00,00);
            									}
HXDLIN( 214)									this->pos--;
HXDLIN( 214)									exit = true;
            								}
            							}
HXDLIN( 214)							if (exit) {
HXLINE( 214)								goto _hx_goto_56;
            							}
HXDLIN( 214)							this->c = this->str.cca(this->pos++);
            						}
            						_hx_goto_56:;
            					}
HXLINE( 216)					if ((this->store->l == 4)) {
HXLINE( 217)						Float firstX = (this->store->s0 + this->lastX);
HXLINE( 218)						Float firstY = (this->store->s1 + this->lastY);
HXLINE( 219)						this->controlX = ((( (Float)(2) ) * this->lastX) - this->controlX);
HXLINE( 220)						this->controlY = ((( (Float)(2) ) * this->lastY) - this->controlY);
HXLINE( 221)						this->lastX = (this->store->s2 + this->lastX);
HXLINE( 222)						this->lastY = (this->store->s3 + this->lastY);
HXLINE( 223)						{
HXLINE( 223)							Float x1 = this->controlX;
HXDLIN( 223)							Float y1 = this->controlY;
HXDLIN( 223)							Float x3 = this->lastX;
HXDLIN( 223)							Float y3 = this->lastY;
HXDLIN( 223)							::Array< Float > tempArr = ::Array_obj< Float >::__new(0);
HXDLIN( 223)							{
HXLINE( 223)								Float ax = this->px;
HXDLIN( 223)								Float ay = this->py;
HXDLIN( 223)								Float x = (ax - x1);
HXDLIN( 223)								Float y = (ay - y1);
HXDLIN( 223)								Float x2 = (x1 - firstX);
HXDLIN( 223)								Float y2 = (y1 - firstY);
HXDLIN( 223)								Float x4 = (firstX - x3);
HXDLIN( 223)								Float y4 = (firstY - y3);
HXDLIN( 223)								Float approxDistance = ((::Math_obj::sqrt(((x * x) + (y * y))) + ::Math_obj::sqrt(((x2 * x2) + (y2 * y2)))) + ::Math_obj::sqrt(((x4 * x4) + (y4 * y4))));
HXDLIN( 223)								if ((approxDistance == 0)) {
HXLINE( 223)									approxDistance = ((Float)0.000001);
            								}
HXDLIN( 223)								Float step = ::Math_obj::min((( (Float)(1) ) / (approxDistance * ((Float)0.707))),((Float)0.03));
HXDLIN( 223)								int l = tempArr->length;
HXDLIN( 223)								l = (l + 1);
HXDLIN( 223)								tempArr[(l - 1)] = ax;
HXDLIN( 223)								l = (l + 1);
HXDLIN( 223)								tempArr[(l - 1)] = ay;
HXDLIN( 223)								Float t = step;
HXDLIN( 223)								while((t < ((Float)1.))){
HXLINE( 223)									l = (l + 1);
HXDLIN( 223)									Float u = (( (Float)(1) ) - t);
HXDLIN( 223)									tempArr[(l - 1)] = ((((::Math_obj::pow(u,( (Float)(3) )) * ax) + (((( (Float)(3) ) * ::Math_obj::pow(u,( (Float)(2) ))) * t) * x1)) + (((( (Float)(3) ) * u) * ::Math_obj::pow(t,( (Float)(2) ))) * firstX)) + (::Math_obj::pow(t,( (Float)(3) )) * x3));
HXDLIN( 223)									l = (l + 1);
HXDLIN( 223)									Float u1 = (( (Float)(1) ) - t);
HXDLIN( 223)									tempArr[(l - 1)] = ((((::Math_obj::pow(u1,( (Float)(3) )) * ay) + (((( (Float)(3) ) * ::Math_obj::pow(u1,( (Float)(2) ))) * t) * y1)) + (((( (Float)(3) ) * u1) * ::Math_obj::pow(t,( (Float)(2) ))) * firstY)) + (::Math_obj::pow(t,( (Float)(3) )) * y3));
HXDLIN( 223)									t = (t + step);
            								}
HXDLIN( 223)								l = (l + 1);
HXDLIN( 223)								tempArr[(l - 1)] = x3;
HXDLIN( 223)								l = (l + 1);
HXDLIN( 223)								tempArr[(l - 1)] = y3;
            							}
HXDLIN( 223)							::haxe::Log_obj::trace(tempArr,::hx::SourceInfo(HX_("justPath/SvgLinePath.hx",5f,c6,70,0f),512,HX_("justPath.SvgLinePath",20,f0,4a,08),HX_("curveTo",0a,60,88,ce)));
HXDLIN( 223)							{
HXLINE( 223)								 ::Dynamic withMove = false;
HXDLIN( 223)								if (::hx::IsNull( withMove )) {
HXLINE( 223)									withMove = true;
            								}
HXDLIN( 223)								int l1 = tempArr->length;
HXDLIN( 223)								int i = 2;
HXDLIN( 223)								if (( (bool)(withMove) )) {
HXLINE( 223)									::justPath::ILinePathContext_obj::moveTo(this->pathContext,tempArr->__get(0),tempArr->__get(1));
            								}
            								else {
HXLINE( 223)									::justPath::ILinePathContext_obj::lineSegmentTo(this->pathContext,tempArr->__get(0),tempArr->__get(1));
            								}
HXDLIN( 223)								while((i < l1)){
HXLINE( 223)									::justPath::ILinePathContext_obj::lineSegmentTo(this->pathContext,tempArr->__get(i),tempArr->__get((i + 1)));
HXDLIN( 223)									i = (i + 2);
            								}
            							}
HXDLIN( 223)							tempArr = ::Array_obj< Float >::__new(0);
HXDLIN( 223)							this->px = x3;
HXDLIN( 223)							this->py = y3;
            						}
HXLINE( 224)						this->controlX = firstX;
HXLINE( 225)						this->controlY = firstY;
            					}
            					else {
HXLINE( 226)						if ((this->store->l > 4)) {
HXLINE( 227)							while((this->store->l > 3)){
HXLINE( 228)								::justPath::StoreF6 _this = this->store;
HXDLIN( 228)								 ::Dynamic out = _this->s0;
HXDLIN( 228)								if ((_this->l != 0)) {
HXLINE( 228)									_this->s0 = _this->s1;
HXDLIN( 228)									_this->s1 = _this->s2;
HXDLIN( 228)									_this->s2 = _this->s3;
HXDLIN( 228)									_this->s3 = _this->s4;
HXDLIN( 228)									_this->s4 = _this->s5;
HXDLIN( 228)									_this->s5 = null();
HXDLIN( 228)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 228)										::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 228)										 ::Dynamic out = _this1->s0;
HXDLIN( 228)										if ((_this1->l != 0)) {
HXLINE( 228)											_this1->s0 = _this1->s1;
HXDLIN( 228)											_this1->s1 = _this1->s2;
HXDLIN( 228)											_this1->s2 = _this1->s3;
HXDLIN( 228)											_this1->s3 = _this1->s4;
HXDLIN( 228)											_this1->s4 = _this1->s5;
HXDLIN( 228)											_this1->s5 = null();
HXDLIN( 228)											if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 228)												_this1->s5 = _this1->s6->shift();
            											}
HXDLIN( 228)											_this1->l--;
            										}
HXDLIN( 228)										_this->s5 = out;
            									}
HXDLIN( 228)									_this->l--;
            								}
HXDLIN( 228)								Float firstX = (out + this->lastX);
HXLINE( 229)								::justPath::StoreF6 _this1 = this->store;
HXDLIN( 229)								 ::Dynamic out1 = _this1->s0;
HXDLIN( 229)								if ((_this1->l != 0)) {
HXLINE( 229)									_this1->s0 = _this1->s1;
HXDLIN( 229)									_this1->s1 = _this1->s2;
HXDLIN( 229)									_this1->s2 = _this1->s3;
HXDLIN( 229)									_this1->s3 = _this1->s4;
HXDLIN( 229)									_this1->s4 = _this1->s5;
HXDLIN( 229)									_this1->s5 = null();
HXDLIN( 229)									if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 229)										::justPath::StoreF6 _this = _this1->s6;
HXDLIN( 229)										 ::Dynamic out = _this->s0;
HXDLIN( 229)										if ((_this->l != 0)) {
HXLINE( 229)											_this->s0 = _this->s1;
HXDLIN( 229)											_this->s1 = _this->s2;
HXDLIN( 229)											_this->s2 = _this->s3;
HXDLIN( 229)											_this->s3 = _this->s4;
HXDLIN( 229)											_this->s4 = _this->s5;
HXDLIN( 229)											_this->s5 = null();
HXDLIN( 229)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 229)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 229)											_this->l--;
            										}
HXDLIN( 229)										_this1->s5 = out;
            									}
HXDLIN( 229)									_this1->l--;
            								}
HXDLIN( 229)								Float firstY = (out1 + this->lastY);
HXLINE( 230)								this->controlX = ((( (Float)(2) ) * this->lastX) - this->controlX);
HXLINE( 231)								this->controlY = ((( (Float)(2) ) * this->lastY) - this->controlY);
HXLINE( 232)								::justPath::StoreF6 _this2 = this->store;
HXDLIN( 232)								 ::Dynamic out2 = _this2->s0;
HXDLIN( 232)								if ((_this2->l != 0)) {
HXLINE( 232)									_this2->s0 = _this2->s1;
HXDLIN( 232)									_this2->s1 = _this2->s2;
HXDLIN( 232)									_this2->s2 = _this2->s3;
HXDLIN( 232)									_this2->s3 = _this2->s4;
HXDLIN( 232)									_this2->s4 = _this2->s5;
HXDLIN( 232)									_this2->s5 = null();
HXDLIN( 232)									if (::hx::IsNotNull( _this2->s6 )) {
HXLINE( 232)										::justPath::StoreF6 _this = _this2->s6;
HXDLIN( 232)										 ::Dynamic out = _this->s0;
HXDLIN( 232)										if ((_this->l != 0)) {
HXLINE( 232)											_this->s0 = _this->s1;
HXDLIN( 232)											_this->s1 = _this->s2;
HXDLIN( 232)											_this->s2 = _this->s3;
HXDLIN( 232)											_this->s3 = _this->s4;
HXDLIN( 232)											_this->s4 = _this->s5;
HXDLIN( 232)											_this->s5 = null();
HXDLIN( 232)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 232)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 232)											_this->l--;
            										}
HXDLIN( 232)										_this2->s5 = out;
            									}
HXDLIN( 232)									_this2->l--;
            								}
HXDLIN( 232)								this->lastX = (out2 + this->lastX);
HXLINE( 233)								::justPath::StoreF6 _this3 = this->store;
HXDLIN( 233)								 ::Dynamic out3 = _this3->s0;
HXDLIN( 233)								if ((_this3->l != 0)) {
HXLINE( 233)									_this3->s0 = _this3->s1;
HXDLIN( 233)									_this3->s1 = _this3->s2;
HXDLIN( 233)									_this3->s2 = _this3->s3;
HXDLIN( 233)									_this3->s3 = _this3->s4;
HXDLIN( 233)									_this3->s4 = _this3->s5;
HXDLIN( 233)									_this3->s5 = null();
HXDLIN( 233)									if (::hx::IsNotNull( _this3->s6 )) {
HXLINE( 233)										::justPath::StoreF6 _this = _this3->s6;
HXDLIN( 233)										 ::Dynamic out = _this->s0;
HXDLIN( 233)										if ((_this->l != 0)) {
HXLINE( 233)											_this->s0 = _this->s1;
HXDLIN( 233)											_this->s1 = _this->s2;
HXDLIN( 233)											_this->s2 = _this->s3;
HXDLIN( 233)											_this->s3 = _this->s4;
HXDLIN( 233)											_this->s4 = _this->s5;
HXDLIN( 233)											_this->s5 = null();
HXDLIN( 233)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 233)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 233)											_this->l--;
            										}
HXDLIN( 233)										_this3->s5 = out;
            									}
HXDLIN( 233)									_this3->l--;
            								}
HXDLIN( 233)								this->lastY = (out3 + this->lastY);
HXLINE( 234)								{
HXLINE( 234)									Float x1 = this->controlX;
HXDLIN( 234)									Float y1 = this->controlY;
HXDLIN( 234)									Float x3 = this->lastX;
HXDLIN( 234)									Float y3 = this->lastY;
HXDLIN( 234)									::Array< Float > tempArr = ::Array_obj< Float >::__new(0);
HXDLIN( 234)									{
HXLINE( 234)										Float ax = this->px;
HXDLIN( 234)										Float ay = this->py;
HXDLIN( 234)										Float x = (ax - x1);
HXDLIN( 234)										Float y = (ay - y1);
HXDLIN( 234)										Float x2 = (x1 - firstX);
HXDLIN( 234)										Float y2 = (y1 - firstY);
HXDLIN( 234)										Float x4 = (firstX - x3);
HXDLIN( 234)										Float y4 = (firstY - y3);
HXDLIN( 234)										Float approxDistance = ((::Math_obj::sqrt(((x * x) + (y * y))) + ::Math_obj::sqrt(((x2 * x2) + (y2 * y2)))) + ::Math_obj::sqrt(((x4 * x4) + (y4 * y4))));
HXDLIN( 234)										if ((approxDistance == 0)) {
HXLINE( 234)											approxDistance = ((Float)0.000001);
            										}
HXDLIN( 234)										Float step = ::Math_obj::min((( (Float)(1) ) / (approxDistance * ((Float)0.707))),((Float)0.03));
HXDLIN( 234)										int l = tempArr->length;
HXDLIN( 234)										l = (l + 1);
HXDLIN( 234)										tempArr[(l - 1)] = ax;
HXDLIN( 234)										l = (l + 1);
HXDLIN( 234)										tempArr[(l - 1)] = ay;
HXDLIN( 234)										Float t = step;
HXDLIN( 234)										while((t < ((Float)1.))){
HXLINE( 234)											l = (l + 1);
HXDLIN( 234)											Float u = (( (Float)(1) ) - t);
HXDLIN( 234)											tempArr[(l - 1)] = ((((::Math_obj::pow(u,( (Float)(3) )) * ax) + (((( (Float)(3) ) * ::Math_obj::pow(u,( (Float)(2) ))) * t) * x1)) + (((( (Float)(3) ) * u) * ::Math_obj::pow(t,( (Float)(2) ))) * firstX)) + (::Math_obj::pow(t,( (Float)(3) )) * x3));
HXDLIN( 234)											l = (l + 1);
HXDLIN( 234)											Float u1 = (( (Float)(1) ) - t);
HXDLIN( 234)											tempArr[(l - 1)] = ((((::Math_obj::pow(u1,( (Float)(3) )) * ay) + (((( (Float)(3) ) * ::Math_obj::pow(u1,( (Float)(2) ))) * t) * y1)) + (((( (Float)(3) ) * u1) * ::Math_obj::pow(t,( (Float)(2) ))) * firstY)) + (::Math_obj::pow(t,( (Float)(3) )) * y3));
HXDLIN( 234)											t = (t + step);
            										}
HXDLIN( 234)										l = (l + 1);
HXDLIN( 234)										tempArr[(l - 1)] = x3;
HXDLIN( 234)										l = (l + 1);
HXDLIN( 234)										tempArr[(l - 1)] = y3;
            									}
HXDLIN( 234)									::haxe::Log_obj::trace(tempArr,::hx::SourceInfo(HX_("justPath/SvgLinePath.hx",5f,c6,70,0f),512,HX_("justPath.SvgLinePath",20,f0,4a,08),HX_("curveTo",0a,60,88,ce)));
HXDLIN( 234)									{
HXLINE( 234)										 ::Dynamic withMove = false;
HXDLIN( 234)										if (::hx::IsNull( withMove )) {
HXLINE( 234)											withMove = true;
            										}
HXDLIN( 234)										int l1 = tempArr->length;
HXDLIN( 234)										int i = 2;
HXDLIN( 234)										if (( (bool)(withMove) )) {
HXLINE( 234)											::justPath::ILinePathContext_obj::moveTo(this->pathContext,tempArr->__get(0),tempArr->__get(1));
            										}
            										else {
HXLINE( 234)											::justPath::ILinePathContext_obj::lineSegmentTo(this->pathContext,tempArr->__get(0),tempArr->__get(1));
            										}
HXDLIN( 234)										while((i < l1)){
HXLINE( 234)											::justPath::ILinePathContext_obj::lineSegmentTo(this->pathContext,tempArr->__get(i),tempArr->__get((i + 1)));
HXDLIN( 234)											i = (i + 2);
            										}
            									}
HXDLIN( 234)									tempArr = ::Array_obj< Float >::__new(0);
HXDLIN( 234)									this->px = x3;
HXDLIN( 234)									this->py = y3;
            								}
HXLINE( 235)								this->controlX = firstX;
HXLINE( 236)								this->controlY = firstY;
            							}
            						}
            					}
            				}
            				break;
            				case (int)116: {
HXLINE( 295)					{
HXLINE( 295)						{
HXLINE( 295)							::justPath::StoreF6 _this = this->store;
HXDLIN( 295)							_this->l = 0;
HXDLIN( 295)							_this->s0 = null();
HXDLIN( 295)							_this->s1 = null();
HXDLIN( 295)							_this->s2 = null();
HXDLIN( 295)							_this->s3 = null();
HXDLIN( 295)							_this->s4 = null();
HXDLIN( 295)							_this->s5 = null();
HXDLIN( 295)							_this->s6 = null();
            						}
HXDLIN( 295)						this->c = this->str.cca(this->pos++);
HXDLIN( 295)						::String temp = HX_("",00,00,00,00);
HXDLIN( 295)						bool exit = false;
HXDLIN( 295)						while(true){
HXLINE( 295)							switch((int)(this->c)){
            								case (int)32: case (int)44: {
HXLINE( 295)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 295)										if (((this->store->l & 1) == 0)) {
HXLINE( 295)											::justPath::StoreF6 _this = this->store;
HXDLIN( 295)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 295)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 295)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 295)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 295)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 295)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 295)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 295)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 295)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 295)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 295)													{
HXLINE( 295)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 295)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 295)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 295)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 295)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 295)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 295)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 295)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 295)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 295)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 295)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 295)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 295)											_this->l++;
            										}
            										else {
HXLINE( 295)											::justPath::StoreF6 _this = this->store;
HXDLIN( 295)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 295)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 295)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 295)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 295)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 295)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 295)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 295)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 295)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 295)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 295)													{
HXLINE( 295)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 295)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 295)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 295)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 295)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 295)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 295)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 295)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 295)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 295)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 295)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 295)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 295)											_this->l++;
            										}
HXDLIN( 295)										temp = HX_("",00,00,00,00);
            									}
            								}
            								break;
            								case (int)45: {
HXLINE( 295)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 295)										if (((this->store->l & 1) == 0)) {
HXLINE( 295)											::justPath::StoreF6 _this = this->store;
HXDLIN( 295)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 295)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 295)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 295)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 295)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 295)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 295)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 295)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 295)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 295)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 295)													{
HXLINE( 295)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 295)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 295)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 295)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 295)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 295)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 295)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 295)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 295)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 295)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 295)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 295)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 295)											_this->l++;
            										}
            										else {
HXLINE( 295)											::justPath::StoreF6 _this = this->store;
HXDLIN( 295)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 295)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 295)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 295)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 295)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 295)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 295)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 295)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 295)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 295)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 295)													{
HXLINE( 295)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 295)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 295)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 295)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 295)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 295)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 295)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 295)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 295)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 295)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 295)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 295)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 295)											_this->l++;
            										}
            									}
HXDLIN( 295)									temp = HX_("-",2d,00,00,00);
            								}
            								break;
            								case (int)46: {
HXLINE( 295)									temp = (temp + HX_(".",2e,00,00,00));
            								}
            								break;
            								case (int)48: {
HXLINE( 295)									temp = (temp + HX_("0",30,00,00,00));
            								}
            								break;
            								case (int)49: {
HXLINE( 295)									temp = (temp + HX_("1",31,00,00,00));
            								}
            								break;
            								case (int)50: {
HXLINE( 295)									temp = (temp + HX_("2",32,00,00,00));
            								}
            								break;
            								case (int)51: {
HXLINE( 295)									temp = (temp + HX_("3",33,00,00,00));
            								}
            								break;
            								case (int)52: {
HXLINE( 295)									temp = (temp + HX_("4",34,00,00,00));
            								}
            								break;
            								case (int)53: {
HXLINE( 295)									temp = (temp + HX_("5",35,00,00,00));
            								}
            								break;
            								case (int)54: {
HXLINE( 295)									temp = (temp + HX_("6",36,00,00,00));
            								}
            								break;
            								case (int)55: {
HXLINE( 295)									temp = (temp + HX_("7",37,00,00,00));
            								}
            								break;
            								case (int)56: {
HXLINE( 295)									temp = (temp + HX_("8",38,00,00,00));
            								}
            								break;
            								case (int)57: {
HXLINE( 295)									temp = (temp + HX_("9",39,00,00,00));
            								}
            								break;
            								default:{
HXLINE( 295)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 295)										if (((this->store->l & 1) == 0)) {
HXLINE( 295)											::justPath::StoreF6 _this = this->store;
HXDLIN( 295)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 295)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 295)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 295)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 295)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 295)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 295)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 295)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 295)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 295)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 295)													{
HXLINE( 295)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 295)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 295)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 295)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 295)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 295)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 295)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 295)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 295)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 295)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 295)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 295)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 295)											_this->l++;
            										}
            										else {
HXLINE( 295)											::justPath::StoreF6 _this = this->store;
HXDLIN( 295)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 295)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 295)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 295)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 295)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 295)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 295)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 295)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 295)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 295)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 295)													{
HXLINE( 295)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 295)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 295)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 295)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 295)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 295)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 295)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 295)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 295)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 295)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 295)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 295)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 295)											_this->l++;
            										}
HXDLIN( 295)										temp = HX_("",00,00,00,00);
            									}
HXDLIN( 295)									this->pos--;
HXDLIN( 295)									exit = true;
            								}
            							}
HXDLIN( 295)							if (exit) {
HXLINE( 295)								goto _hx_goto_62;
            							}
HXDLIN( 295)							this->c = this->str.cca(this->pos++);
            						}
            						_hx_goto_62:;
            					}
HXLINE( 297)					if ((this->store->l == 2)) {
HXLINE( 298)						this->controlX = ((( (Float)(2) ) * this->lastX) - this->controlX);
HXLINE( 299)						this->controlY = ((( (Float)(2) ) * this->lastY) - this->controlY);
HXLINE( 300)						this->lastX = (this->store->s0 + this->lastY);
HXLINE( 301)						this->lastY = (this->store->s1 + this->lastX);
HXLINE( 302)						{
HXLINE( 302)							Float x1 = this->controlX;
HXDLIN( 302)							Float y1 = this->controlY;
HXDLIN( 302)							Float x2 = this->lastX;
HXDLIN( 302)							Float y2 = this->lastY;
HXDLIN( 302)							::Array< Float > tempArr = ::Array_obj< Float >::__new(0);
HXDLIN( 302)							{
HXLINE( 302)								Float ax = this->px;
HXDLIN( 302)								Float ay = this->py;
HXDLIN( 302)								Float x = (ax - x1);
HXDLIN( 302)								Float y = (ay - y1);
HXDLIN( 302)								Float x3 = (x1 - x2);
HXDLIN( 302)								Float y3 = (y1 - y2);
HXDLIN( 302)								Float approxDistance = (::Math_obj::sqrt(((x * x) + (y * y))) + ::Math_obj::sqrt(((x3 * x3) + (y3 * y3))));
HXDLIN( 302)								if ((approxDistance == 0)) {
HXLINE( 302)									approxDistance = ((Float)0.000001);
            								}
HXDLIN( 302)								Float step = ::Math_obj::min((( (Float)(1) ) / (approxDistance * ((Float)0.707))),::justPath::_CurveMath::CurveMath_Fields__obj::quadStep);
HXDLIN( 302)								int l = tempArr->length;
HXDLIN( 302)								l = (l + 1);
HXDLIN( 302)								tempArr[(l - 1)] = ax;
HXDLIN( 302)								l = (l + 1);
HXDLIN( 302)								tempArr[(l - 1)] = ay;
HXDLIN( 302)								Float t = step;
HXDLIN( 302)								while((t < ((Float)1.))){
HXLINE( 302)									l = (l + 1);
HXDLIN( 302)									Float u = (( (Float)(1) ) - t);
HXDLIN( 302)									tempArr[(l - 1)] = (((::Math_obj::pow(u,( (Float)(2) )) * ax) + (((( (Float)(2) ) * u) * t) * x1)) + (::Math_obj::pow(t,( (Float)(2) )) * x2));
HXDLIN( 302)									l = (l + 1);
HXDLIN( 302)									Float u1 = (( (Float)(1) ) - t);
HXDLIN( 302)									tempArr[(l - 1)] = (((::Math_obj::pow(u1,( (Float)(2) )) * ay) + (((( (Float)(2) ) * u1) * t) * y1)) + (::Math_obj::pow(t,( (Float)(2) )) * y2));
HXDLIN( 302)									t = (t + step);
            								}
HXDLIN( 302)								l = (l + 1);
HXDLIN( 302)								tempArr[(l - 1)] = x2;
HXDLIN( 302)								l = (l + 1);
HXDLIN( 302)								tempArr[(l - 1)] = y2;
            							}
HXDLIN( 302)							::haxe::Log_obj::trace(tempArr,::hx::SourceInfo(HX_("justPath/SvgLinePath.hx",5f,c6,70,0f),502,HX_("justPath.SvgLinePath",20,f0,4a,08),HX_("quadTo",22,82,9f,cc)));
HXDLIN( 302)							{
HXLINE( 302)								 ::Dynamic withMove = false;
HXDLIN( 302)								if (::hx::IsNull( withMove )) {
HXLINE( 302)									withMove = true;
            								}
HXDLIN( 302)								int l1 = tempArr->length;
HXDLIN( 302)								int i = 2;
HXDLIN( 302)								if (( (bool)(withMove) )) {
HXLINE( 302)									::justPath::ILinePathContext_obj::moveTo(this->pathContext,tempArr->__get(0),tempArr->__get(1));
            								}
            								else {
HXLINE( 302)									::justPath::ILinePathContext_obj::lineSegmentTo(this->pathContext,tempArr->__get(0),tempArr->__get(1));
            								}
HXDLIN( 302)								while((i < l1)){
HXLINE( 302)									::justPath::ILinePathContext_obj::lineSegmentTo(this->pathContext,tempArr->__get(i),tempArr->__get((i + 1)));
HXDLIN( 302)									i = (i + 2);
            								}
            							}
HXDLIN( 302)							tempArr = ::Array_obj< Float >::__new(0);
HXDLIN( 302)							this->px = x2;
HXDLIN( 302)							this->py = y2;
            						}
            					}
            					else {
HXLINE( 303)						if ((this->store->l > 2)) {
HXLINE( 304)							while((this->store->l > 1)){
HXLINE( 305)								this->controlX = ((( (Float)(2) ) * this->lastX) - this->controlX);
HXLINE( 306)								this->controlY = ((( (Float)(2) ) * this->lastY) - this->controlY);
HXLINE( 307)								::justPath::StoreF6 _this = this->store;
HXDLIN( 307)								 ::Dynamic out = _this->s0;
HXDLIN( 307)								if ((_this->l != 0)) {
HXLINE( 307)									_this->s0 = _this->s1;
HXDLIN( 307)									_this->s1 = _this->s2;
HXDLIN( 307)									_this->s2 = _this->s3;
HXDLIN( 307)									_this->s3 = _this->s4;
HXDLIN( 307)									_this->s4 = _this->s5;
HXDLIN( 307)									_this->s5 = null();
HXDLIN( 307)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 307)										::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 307)										 ::Dynamic out = _this1->s0;
HXDLIN( 307)										if ((_this1->l != 0)) {
HXLINE( 307)											_this1->s0 = _this1->s1;
HXDLIN( 307)											_this1->s1 = _this1->s2;
HXDLIN( 307)											_this1->s2 = _this1->s3;
HXDLIN( 307)											_this1->s3 = _this1->s4;
HXDLIN( 307)											_this1->s4 = _this1->s5;
HXDLIN( 307)											_this1->s5 = null();
HXDLIN( 307)											if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 307)												_this1->s5 = _this1->s6->shift();
            											}
HXDLIN( 307)											_this1->l--;
            										}
HXDLIN( 307)										_this->s5 = out;
            									}
HXDLIN( 307)									_this->l--;
            								}
HXDLIN( 307)								this->lastX = (out + this->lastY);
HXLINE( 308)								::justPath::StoreF6 _this1 = this->store;
HXDLIN( 308)								 ::Dynamic out1 = _this1->s0;
HXDLIN( 308)								if ((_this1->l != 0)) {
HXLINE( 308)									_this1->s0 = _this1->s1;
HXDLIN( 308)									_this1->s1 = _this1->s2;
HXDLIN( 308)									_this1->s2 = _this1->s3;
HXDLIN( 308)									_this1->s3 = _this1->s4;
HXDLIN( 308)									_this1->s4 = _this1->s5;
HXDLIN( 308)									_this1->s5 = null();
HXDLIN( 308)									if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 308)										::justPath::StoreF6 _this = _this1->s6;
HXDLIN( 308)										 ::Dynamic out = _this->s0;
HXDLIN( 308)										if ((_this->l != 0)) {
HXLINE( 308)											_this->s0 = _this->s1;
HXDLIN( 308)											_this->s1 = _this->s2;
HXDLIN( 308)											_this->s2 = _this->s3;
HXDLIN( 308)											_this->s3 = _this->s4;
HXDLIN( 308)											_this->s4 = _this->s5;
HXDLIN( 308)											_this->s5 = null();
HXDLIN( 308)											if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 308)												_this->s5 = _this->s6->shift();
            											}
HXDLIN( 308)											_this->l--;
            										}
HXDLIN( 308)										_this1->s5 = out;
            									}
HXDLIN( 308)									_this1->l--;
            								}
HXDLIN( 308)								this->lastY = (out1 + this->lastX);
HXLINE( 309)								{
HXLINE( 309)									Float x1 = this->controlX;
HXDLIN( 309)									Float y1 = this->controlY;
HXDLIN( 309)									Float x2 = this->lastX;
HXDLIN( 309)									Float y2 = this->lastY;
HXDLIN( 309)									::Array< Float > tempArr = ::Array_obj< Float >::__new(0);
HXDLIN( 309)									{
HXLINE( 309)										Float ax = this->px;
HXDLIN( 309)										Float ay = this->py;
HXDLIN( 309)										Float x = (ax - x1);
HXDLIN( 309)										Float y = (ay - y1);
HXDLIN( 309)										Float x3 = (x1 - x2);
HXDLIN( 309)										Float y3 = (y1 - y2);
HXDLIN( 309)										Float approxDistance = (::Math_obj::sqrt(((x * x) + (y * y))) + ::Math_obj::sqrt(((x3 * x3) + (y3 * y3))));
HXDLIN( 309)										if ((approxDistance == 0)) {
HXLINE( 309)											approxDistance = ((Float)0.000001);
            										}
HXDLIN( 309)										Float step = ::Math_obj::min((( (Float)(1) ) / (approxDistance * ((Float)0.707))),::justPath::_CurveMath::CurveMath_Fields__obj::quadStep);
HXDLIN( 309)										int l = tempArr->length;
HXDLIN( 309)										l = (l + 1);
HXDLIN( 309)										tempArr[(l - 1)] = ax;
HXDLIN( 309)										l = (l + 1);
HXDLIN( 309)										tempArr[(l - 1)] = ay;
HXDLIN( 309)										Float t = step;
HXDLIN( 309)										while((t < ((Float)1.))){
HXLINE( 309)											l = (l + 1);
HXDLIN( 309)											Float u = (( (Float)(1) ) - t);
HXDLIN( 309)											tempArr[(l - 1)] = (((::Math_obj::pow(u,( (Float)(2) )) * ax) + (((( (Float)(2) ) * u) * t) * x1)) + (::Math_obj::pow(t,( (Float)(2) )) * x2));
HXDLIN( 309)											l = (l + 1);
HXDLIN( 309)											Float u1 = (( (Float)(1) ) - t);
HXDLIN( 309)											tempArr[(l - 1)] = (((::Math_obj::pow(u1,( (Float)(2) )) * ay) + (((( (Float)(2) ) * u1) * t) * y1)) + (::Math_obj::pow(t,( (Float)(2) )) * y2));
HXDLIN( 309)											t = (t + step);
            										}
HXDLIN( 309)										l = (l + 1);
HXDLIN( 309)										tempArr[(l - 1)] = x2;
HXDLIN( 309)										l = (l + 1);
HXDLIN( 309)										tempArr[(l - 1)] = y2;
            									}
HXDLIN( 309)									::haxe::Log_obj::trace(tempArr,::hx::SourceInfo(HX_("justPath/SvgLinePath.hx",5f,c6,70,0f),502,HX_("justPath.SvgLinePath",20,f0,4a,08),HX_("quadTo",22,82,9f,cc)));
HXDLIN( 309)									{
HXLINE( 309)										 ::Dynamic withMove = false;
HXDLIN( 309)										if (::hx::IsNull( withMove )) {
HXLINE( 309)											withMove = true;
            										}
HXDLIN( 309)										int l1 = tempArr->length;
HXDLIN( 309)										int i = 2;
HXDLIN( 309)										if (( (bool)(withMove) )) {
HXLINE( 309)											::justPath::ILinePathContext_obj::moveTo(this->pathContext,tempArr->__get(0),tempArr->__get(1));
            										}
            										else {
HXLINE( 309)											::justPath::ILinePathContext_obj::lineSegmentTo(this->pathContext,tempArr->__get(0),tempArr->__get(1));
            										}
HXDLIN( 309)										while((i < l1)){
HXLINE( 309)											::justPath::ILinePathContext_obj::lineSegmentTo(this->pathContext,tempArr->__get(i),tempArr->__get((i + 1)));
HXDLIN( 309)											i = (i + 2);
            										}
            									}
HXDLIN( 309)									tempArr = ::Array_obj< Float >::__new(0);
HXDLIN( 309)									this->px = x2;
HXDLIN( 309)									this->py = y2;
            								}
            							}
            						}
            					}
            				}
            				break;
            				case (int)118: {
HXLINE( 131)					{
HXLINE( 131)						 ::Dynamic process = false;
HXDLIN( 131)						if (::hx::IsNull( process )) {
HXLINE( 131)							process = true;
            						}
HXDLIN( 131)						{
HXLINE( 131)							::justPath::StoreF6 _this = this->store;
HXDLIN( 131)							_this->l = 0;
HXDLIN( 131)							_this->s0 = null();
HXDLIN( 131)							_this->s1 = null();
HXDLIN( 131)							_this->s2 = null();
HXDLIN( 131)							_this->s3 = null();
HXDLIN( 131)							_this->s4 = null();
HXDLIN( 131)							_this->s5 = null();
HXDLIN( 131)							_this->s6 = null();
            						}
HXDLIN( 131)						this->c = this->str.cca(this->pos++);
HXDLIN( 131)						::String temp = HX_("",00,00,00,00);
HXDLIN( 131)						bool exit = false;
HXDLIN( 131)						while(true){
HXLINE( 131)							switch((int)(this->c)){
            								case (int)32: case (int)44: {
HXLINE( 131)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 131)										if (( (bool)(process) )) {
HXLINE( 131)											if (((this->store->l & 1) == 0)) {
HXLINE( 131)												::justPath::StoreF6 _this = this->store;
HXDLIN( 131)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 131)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE( 131)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE( 131)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE( 131)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE( 131)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE( 131)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE( 131)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE( 131)														if (::hx::IsNull( _this->s6 )) {
HXLINE( 131)															_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN( 131)														{
HXLINE( 131)															::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 131)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE( 131)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE( 131)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE( 131)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE( 131)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE( 131)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE( 131)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE( 131)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE( 131)																		_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN( 131)																	_this1->s6->push(v);
            																}
            															}
HXDLIN( 131)															_this1->l++;
            														}
            													}
            												}
HXDLIN( 131)												_this->l++;
            											}
            											else {
HXLINE( 131)												::justPath::StoreF6 _this = this->store;
HXDLIN( 131)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 131)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE( 131)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE( 131)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE( 131)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE( 131)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE( 131)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE( 131)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE( 131)														if (::hx::IsNull( _this->s6 )) {
HXLINE( 131)															_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN( 131)														{
HXLINE( 131)															::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 131)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE( 131)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE( 131)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE( 131)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE( 131)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE( 131)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE( 131)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE( 131)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE( 131)																		_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN( 131)																	_this1->s6->push(v);
            																}
            															}
HXDLIN( 131)															_this1->l++;
            														}
            													}
            												}
HXDLIN( 131)												_this->l++;
            											}
            										}
            										else {
HXLINE( 131)											::justPath::StoreF6 _this = this->store;
HXDLIN( 131)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 131)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 131)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 131)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 131)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 131)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 131)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 131)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 131)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 131)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 131)													{
HXLINE( 131)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 131)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 131)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 131)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 131)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 131)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 131)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 131)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 131)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 131)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 131)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 131)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 131)											_this->l++;
            										}
HXDLIN( 131)										temp = HX_("",00,00,00,00);
            									}
            								}
            								break;
            								case (int)45: {
HXLINE( 131)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 131)										if (( (bool)(process) )) {
HXLINE( 131)											if (((this->store->l & 1) == 0)) {
HXLINE( 131)												::justPath::StoreF6 _this = this->store;
HXDLIN( 131)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 131)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE( 131)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE( 131)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE( 131)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE( 131)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE( 131)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE( 131)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE( 131)														if (::hx::IsNull( _this->s6 )) {
HXLINE( 131)															_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN( 131)														{
HXLINE( 131)															::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 131)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE( 131)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE( 131)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE( 131)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE( 131)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE( 131)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE( 131)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE( 131)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE( 131)																		_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN( 131)																	_this1->s6->push(v);
            																}
            															}
HXDLIN( 131)															_this1->l++;
            														}
            													}
            												}
HXDLIN( 131)												_this->l++;
            											}
            											else {
HXLINE( 131)												::justPath::StoreF6 _this = this->store;
HXDLIN( 131)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 131)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE( 131)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE( 131)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE( 131)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE( 131)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE( 131)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE( 131)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE( 131)														if (::hx::IsNull( _this->s6 )) {
HXLINE( 131)															_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN( 131)														{
HXLINE( 131)															::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 131)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE( 131)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE( 131)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE( 131)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE( 131)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE( 131)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE( 131)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE( 131)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE( 131)																		_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN( 131)																	_this1->s6->push(v);
            																}
            															}
HXDLIN( 131)															_this1->l++;
            														}
            													}
            												}
HXDLIN( 131)												_this->l++;
            											}
            										}
            										else {
HXLINE( 131)											::justPath::StoreF6 _this = this->store;
HXDLIN( 131)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 131)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 131)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 131)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 131)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 131)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 131)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 131)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 131)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 131)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 131)													{
HXLINE( 131)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 131)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 131)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 131)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 131)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 131)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 131)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 131)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 131)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 131)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 131)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 131)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 131)											_this->l++;
            										}
            									}
HXDLIN( 131)									temp = HX_("-",2d,00,00,00);
            								}
            								break;
            								case (int)46: {
HXLINE( 131)									temp = (temp + HX_(".",2e,00,00,00));
            								}
            								break;
            								case (int)48: {
HXLINE( 131)									temp = (temp + HX_("0",30,00,00,00));
            								}
            								break;
            								case (int)49: {
HXLINE( 131)									temp = (temp + HX_("1",31,00,00,00));
            								}
            								break;
            								case (int)50: {
HXLINE( 131)									temp = (temp + HX_("2",32,00,00,00));
            								}
            								break;
            								case (int)51: {
HXLINE( 131)									temp = (temp + HX_("3",33,00,00,00));
            								}
            								break;
            								case (int)52: {
HXLINE( 131)									temp = (temp + HX_("4",34,00,00,00));
            								}
            								break;
            								case (int)53: {
HXLINE( 131)									temp = (temp + HX_("5",35,00,00,00));
            								}
            								break;
            								case (int)54: {
HXLINE( 131)									temp = (temp + HX_("6",36,00,00,00));
            								}
            								break;
            								case (int)55: {
HXLINE( 131)									temp = (temp + HX_("7",37,00,00,00));
            								}
            								break;
            								case (int)56: {
HXLINE( 131)									temp = (temp + HX_("8",38,00,00,00));
            								}
            								break;
            								case (int)57: {
HXLINE( 131)									temp = (temp + HX_("9",39,00,00,00));
            								}
            								break;
            								default:{
HXLINE( 131)									if ((temp != HX_("",00,00,00,00))) {
HXLINE( 131)										if (( (bool)(process) )) {
HXLINE( 131)											if (((this->store->l & 1) == 0)) {
HXLINE( 131)												::justPath::StoreF6 _this = this->store;
HXDLIN( 131)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 131)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE( 131)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE( 131)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE( 131)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE( 131)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE( 131)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE( 131)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE( 131)														if (::hx::IsNull( _this->s6 )) {
HXLINE( 131)															_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN( 131)														{
HXLINE( 131)															::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 131)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE( 131)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE( 131)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE( 131)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE( 131)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE( 131)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE( 131)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE( 131)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE( 131)																		_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN( 131)																	_this1->s6->push(v);
            																}
            															}
HXDLIN( 131)															_this1->l++;
            														}
            													}
            												}
HXDLIN( 131)												_this->l++;
            											}
            											else {
HXLINE( 131)												::justPath::StoreF6 _this = this->store;
HXDLIN( 131)												 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 131)												switch((int)(_this->l)){
            													case (int)0: {
HXLINE( 131)														_this->s0 = v;
            													}
            													break;
            													case (int)1: {
HXLINE( 131)														_this->s1 = v;
            													}
            													break;
            													case (int)2: {
HXLINE( 131)														_this->s2 = v;
            													}
            													break;
            													case (int)3: {
HXLINE( 131)														_this->s3 = v;
            													}
            													break;
            													case (int)4: {
HXLINE( 131)														_this->s4 = v;
            													}
            													break;
            													case (int)5: {
HXLINE( 131)														_this->s5 = v;
            													}
            													break;
            													default:{
HXLINE( 131)														if (::hx::IsNull( _this->s6 )) {
HXLINE( 131)															_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            														}
HXDLIN( 131)														{
HXLINE( 131)															::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 131)															switch((int)(_this1->l)){
            																case (int)0: {
HXLINE( 131)																	_this1->s0 = v;
            																}
            																break;
            																case (int)1: {
HXLINE( 131)																	_this1->s1 = v;
            																}
            																break;
            																case (int)2: {
HXLINE( 131)																	_this1->s2 = v;
            																}
            																break;
            																case (int)3: {
HXLINE( 131)																	_this1->s3 = v;
            																}
            																break;
            																case (int)4: {
HXLINE( 131)																	_this1->s4 = v;
            																}
            																break;
            																case (int)5: {
HXLINE( 131)																	_this1->s5 = v;
            																}
            																break;
            																default:{
HXLINE( 131)																	if (::hx::IsNull( _this1->s6 )) {
HXLINE( 131)																		_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																	}
HXDLIN( 131)																	_this1->s6->push(v);
            																}
            															}
HXDLIN( 131)															_this1->l++;
            														}
            													}
            												}
HXDLIN( 131)												_this->l++;
            											}
            										}
            										else {
HXLINE( 131)											::justPath::StoreF6 _this = this->store;
HXDLIN( 131)											 ::Dynamic v = ::Std_obj::parseFloat(temp);
HXDLIN( 131)											switch((int)(_this->l)){
            												case (int)0: {
HXLINE( 131)													_this->s0 = v;
            												}
            												break;
            												case (int)1: {
HXLINE( 131)													_this->s1 = v;
            												}
            												break;
            												case (int)2: {
HXLINE( 131)													_this->s2 = v;
            												}
            												break;
            												case (int)3: {
HXLINE( 131)													_this->s3 = v;
            												}
            												break;
            												case (int)4: {
HXLINE( 131)													_this->s4 = v;
            												}
            												break;
            												case (int)5: {
HXLINE( 131)													_this->s5 = v;
            												}
            												break;
            												default:{
HXLINE( 131)													if (::hx::IsNull( _this->s6 )) {
HXLINE( 131)														_this->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            													}
HXDLIN( 131)													{
HXLINE( 131)														::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 131)														switch((int)(_this1->l)){
            															case (int)0: {
HXLINE( 131)																_this1->s0 = v;
            															}
            															break;
            															case (int)1: {
HXLINE( 131)																_this1->s1 = v;
            															}
            															break;
            															case (int)2: {
HXLINE( 131)																_this1->s2 = v;
            															}
            															break;
            															case (int)3: {
HXLINE( 131)																_this1->s3 = v;
            															}
            															break;
            															case (int)4: {
HXLINE( 131)																_this1->s4 = v;
            															}
            															break;
            															case (int)5: {
HXLINE( 131)																_this1->s5 = v;
            															}
            															break;
            															default:{
HXLINE( 131)																if (::hx::IsNull( _this1->s6 )) {
HXLINE( 131)																	_this1->s6 = ::justPath::StoreF6_obj::__alloc( HX_CTX );
            																}
HXDLIN( 131)																_this1->s6->push(v);
            															}
            														}
HXDLIN( 131)														_this1->l++;
            													}
            												}
            											}
HXDLIN( 131)											_this->l++;
            										}
HXDLIN( 131)										temp = HX_("",00,00,00,00);
            									}
HXDLIN( 131)									this->pos--;
HXDLIN( 131)									exit = true;
            								}
            							}
HXDLIN( 131)							if (exit) {
HXLINE( 131)								goto _hx_goto_68;
            							}
HXDLIN( 131)							this->c = this->str.cca(this->pos++);
            						}
            						_hx_goto_68:;
            					}
HXLINE( 132)					if ((this->store->l == 1)) {
HXLINE( 133)						this->lastY = (this->lastY + this->store->s0);
HXLINE( 134)						{
HXLINE( 134)							Float x_ = this->lastX;
HXDLIN( 134)							Float y_ = this->lastY;
HXDLIN( 134)							::justPath::ILinePathContext_obj::lineTo(this->pathContext,x_,y_);
HXDLIN( 134)							this->px = x_;
HXDLIN( 134)							this->py = y_;
            						}
            					}
            					else {
HXLINE( 135)						if ((this->store->l > 1)) {
HXLINE( 136)							while((this->store->l > 0)){
HXLINE( 137)								Float _hx_tmp = this->lastY;
HXDLIN( 137)								::justPath::StoreF6 _this = this->store;
HXDLIN( 137)								 ::Dynamic out = _this->s0;
HXDLIN( 137)								if ((_this->l != 0)) {
HXLINE( 137)									_this->s0 = _this->s1;
HXDLIN( 137)									_this->s1 = _this->s2;
HXDLIN( 137)									_this->s2 = _this->s3;
HXDLIN( 137)									_this->s3 = _this->s4;
HXDLIN( 137)									_this->s4 = _this->s5;
HXDLIN( 137)									_this->s5 = null();
HXDLIN( 137)									if (::hx::IsNotNull( _this->s6 )) {
HXLINE( 137)										::justPath::StoreF6 _this1 = _this->s6;
HXDLIN( 137)										 ::Dynamic out = _this1->s0;
HXDLIN( 137)										if ((_this1->l != 0)) {
HXLINE( 137)											_this1->s0 = _this1->s1;
HXDLIN( 137)											_this1->s1 = _this1->s2;
HXDLIN( 137)											_this1->s2 = _this1->s3;
HXDLIN( 137)											_this1->s3 = _this1->s4;
HXDLIN( 137)											_this1->s4 = _this1->s5;
HXDLIN( 137)											_this1->s5 = null();
HXDLIN( 137)											if (::hx::IsNotNull( _this1->s6 )) {
HXLINE( 137)												_this1->s5 = _this1->s6->shift();
            											}
HXDLIN( 137)											_this1->l--;
            										}
HXDLIN( 137)										_this->s5 = out;
            									}
HXDLIN( 137)									_this->l--;
            								}
HXDLIN( 137)								this->lastY = (_hx_tmp + out);
HXLINE( 138)								{
HXLINE( 138)									Float x_ = this->lastX;
HXDLIN( 138)									Float y_ = this->lastY;
HXDLIN( 138)									::justPath::ILinePathContext_obj::lineTo(this->pathContext,x_,y_);
HXDLIN( 138)									this->px = x_;
HXDLIN( 138)									this->py = y_;
            								}
            							}
            						}
            					}
            				}
            				break;
            				case (int)90: case (int)122: {
HXLINE( 375)					this->lastX = ( (Float)(0) );
HXLINE( 376)					this->lastY = ( (Float)(0) );
            				}
            				break;
            				default:{
HXLINE( 383)					count = (count + 1);
            				}
            			}
HXLINE( 385)			this->c = this->str.cca(this->pos++);
            		}
HXLINE( 387)		return str_;
            	}


HX_DEFINE_DYNAMIC_FUNC1(SvgLinePath_obj,parse,return )


::hx::ObjectPtr< SvgLinePath_obj > SvgLinePath_obj::__new(::Dynamic pathContext_) {
	::hx::ObjectPtr< SvgLinePath_obj > __this = new SvgLinePath_obj();
	__this->__construct(pathContext_);
	return __this;
}

::hx::ObjectPtr< SvgLinePath_obj > SvgLinePath_obj::__alloc(::hx::Ctx *_hx_ctx,::Dynamic pathContext_) {
	SvgLinePath_obj *__this = (SvgLinePath_obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(SvgLinePath_obj), true, "justPath.SvgLinePath"));
	*(void **)__this = SvgLinePath_obj::_hx_vtable;
	__this->__construct(pathContext_);
	return __this;
}

SvgLinePath_obj::SvgLinePath_obj()
{
}

void SvgLinePath_obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(SvgLinePath);
	HX_MARK_MEMBER_NAME(str,"str");
	HX_MARK_MEMBER_NAME(pos,"pos");
	HX_MARK_MEMBER_NAME(lastX,"lastX");
	HX_MARK_MEMBER_NAME(lastY,"lastY");
	HX_MARK_MEMBER_NAME(controlX,"controlX");
	HX_MARK_MEMBER_NAME(controlY,"controlY");
	HX_MARK_MEMBER_NAME(c,"c");
	HX_MARK_MEMBER_NAME(l,"l");
	HX_MARK_MEMBER_NAME(px,"px");
	HX_MARK_MEMBER_NAME(py,"py");
	HX_MARK_MEMBER_NAME(pathContext,"pathContext");
	HX_MARK_MEMBER_NAME(store,"store");
	HX_MARK_END_CLASS();
}

void SvgLinePath_obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(str,"str");
	HX_VISIT_MEMBER_NAME(pos,"pos");
	HX_VISIT_MEMBER_NAME(lastX,"lastX");
	HX_VISIT_MEMBER_NAME(lastY,"lastY");
	HX_VISIT_MEMBER_NAME(controlX,"controlX");
	HX_VISIT_MEMBER_NAME(controlY,"controlY");
	HX_VISIT_MEMBER_NAME(c,"c");
	HX_VISIT_MEMBER_NAME(l,"l");
	HX_VISIT_MEMBER_NAME(px,"px");
	HX_VISIT_MEMBER_NAME(py,"py");
	HX_VISIT_MEMBER_NAME(pathContext,"pathContext");
	HX_VISIT_MEMBER_NAME(store,"store");
}

::hx::Val SvgLinePath_obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"c") ) { return ::hx::Val( c ); }
		if (HX_FIELD_EQ(inName,"l") ) { return ::hx::Val( l ); }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"px") ) { return ::hx::Val( px ); }
		if (HX_FIELD_EQ(inName,"py") ) { return ::hx::Val( py ); }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"str") ) { return ::hx::Val( str ); }
		if (HX_FIELD_EQ(inName,"pos") ) { return ::hx::Val( pos ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"lastX") ) { return ::hx::Val( lastX ); }
		if (HX_FIELD_EQ(inName,"lastY") ) { return ::hx::Val( lastY ); }
		if (HX_FIELD_EQ(inName,"store") ) { return ::hx::Val( store ); }
		if (HX_FIELD_EQ(inName,"parse") ) { return ::hx::Val( parse_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"controlX") ) { return ::hx::Val( controlX ); }
		if (HX_FIELD_EQ(inName,"controlY") ) { return ::hx::Val( controlY ); }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"pathContext") ) { return ::hx::Val( pathContext ); }
	}
	return super::__Field(inName,inCallProp);
}

::hx::Val SvgLinePath_obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 1:
		if (HX_FIELD_EQ(inName,"c") ) { c=inValue.Cast< int >(); return inValue; }
		if (HX_FIELD_EQ(inName,"l") ) { l=inValue.Cast< int >(); return inValue; }
		break;
	case 2:
		if (HX_FIELD_EQ(inName,"px") ) { px=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"py") ) { py=inValue.Cast< Float >(); return inValue; }
		break;
	case 3:
		if (HX_FIELD_EQ(inName,"str") ) { str=inValue.Cast< ::String >(); return inValue; }
		if (HX_FIELD_EQ(inName,"pos") ) { pos=inValue.Cast< int >(); return inValue; }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"lastX") ) { lastX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"lastY") ) { lastY=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"store") ) { store=inValue.Cast< ::justPath::StoreF6 >(); return inValue; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"controlX") ) { controlX=inValue.Cast< Float >(); return inValue; }
		if (HX_FIELD_EQ(inName,"controlY") ) { controlY=inValue.Cast< Float >(); return inValue; }
		break;
	case 11:
		if (HX_FIELD_EQ(inName,"pathContext") ) { pathContext=inValue.Cast< ::Dynamic >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void SvgLinePath_obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("str",b1,a8,57,00));
	outFields->push(HX_("pos",94,5d,55,00));
	outFields->push(HX_("lastX",42,01,bc,6f));
	outFields->push(HX_("lastY",43,01,bc,6f));
	outFields->push(HX_("controlX",5b,86,bc,37));
	outFields->push(HX_("controlY",5c,86,bc,37));
	outFields->push(HX_("c",63,00,00,00));
	outFields->push(HX_("l",6c,00,00,00));
	outFields->push(HX_("px",08,62,00,00));
	outFields->push(HX_("py",09,62,00,00));
	outFields->push(HX_("pathContext",ca,06,31,f6));
	outFields->push(HX_("store",e1,13,16,84));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo SvgLinePath_obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(SvgLinePath_obj,str),HX_("str",b1,a8,57,00)},
	{::hx::fsInt,(int)offsetof(SvgLinePath_obj,pos),HX_("pos",94,5d,55,00)},
	{::hx::fsFloat,(int)offsetof(SvgLinePath_obj,lastX),HX_("lastX",42,01,bc,6f)},
	{::hx::fsFloat,(int)offsetof(SvgLinePath_obj,lastY),HX_("lastY",43,01,bc,6f)},
	{::hx::fsFloat,(int)offsetof(SvgLinePath_obj,controlX),HX_("controlX",5b,86,bc,37)},
	{::hx::fsFloat,(int)offsetof(SvgLinePath_obj,controlY),HX_("controlY",5c,86,bc,37)},
	{::hx::fsInt,(int)offsetof(SvgLinePath_obj,c),HX_("c",63,00,00,00)},
	{::hx::fsInt,(int)offsetof(SvgLinePath_obj,l),HX_("l",6c,00,00,00)},
	{::hx::fsFloat,(int)offsetof(SvgLinePath_obj,px),HX_("px",08,62,00,00)},
	{::hx::fsFloat,(int)offsetof(SvgLinePath_obj,py),HX_("py",09,62,00,00)},
	{::hx::fsObject /* ::Dynamic */ ,(int)offsetof(SvgLinePath_obj,pathContext),HX_("pathContext",ca,06,31,f6)},
	{::hx::fsObject /* ::justPath::StoreF6 */ ,(int)offsetof(SvgLinePath_obj,store),HX_("store",e1,13,16,84)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *SvgLinePath_obj_sStaticStorageInfo = 0;
#endif

static ::String SvgLinePath_obj_sMemberFields[] = {
	HX_("str",b1,a8,57,00),
	HX_("pos",94,5d,55,00),
	HX_("lastX",42,01,bc,6f),
	HX_("lastY",43,01,bc,6f),
	HX_("controlX",5b,86,bc,37),
	HX_("controlY",5c,86,bc,37),
	HX_("c",63,00,00,00),
	HX_("l",6c,00,00,00),
	HX_("px",08,62,00,00),
	HX_("py",09,62,00,00),
	HX_("pathContext",ca,06,31,f6),
	HX_("store",e1,13,16,84),
	HX_("parse",33,90,55,bd),
	::String(null()) };

::hx::Class SvgLinePath_obj::__mClass;

void SvgLinePath_obj::__register()
{
	SvgLinePath_obj _hx_dummy;
	SvgLinePath_obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("justPath.SvgLinePath",20,f0,4a,08);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &::hx::Class_obj::GetNoStaticField;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(0 /* sStaticFields */);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(SvgLinePath_obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< SvgLinePath_obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = SvgLinePath_obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = SvgLinePath_obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace justPath
